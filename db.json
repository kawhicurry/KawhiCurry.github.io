{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0}],"Cache":[{"_id":"source/about/index.md","hash":"1572cd66169f07e3f656031474b02f32ff0b61ee","modified":1644394835064},{"_id":"source/categories/index.md","hash":"405aa3ef2425a52292c55f3c4184556032545802","modified":1644221366301},{"_id":"source/tags/index.md","hash":"555f2d5298291c5ea23d44260d6c39886d228b33","modified":1644222230130},{"_id":"source/link/index.md","hash":"3a2ba09f181a7e8450e3b9d9c1fd7e1683912bb7","modified":1644221386928},{"_id":"source/_drafts/LearnMermaid.md","hash":"5edbdffb5a12659edef6f7a7b32bf3366ae38d8c","modified":1642471951445},{"_id":"source/_data/link.yaml","hash":"539b57ed170ef52319b9545caaab5c9559ae9d64","modified":1644237852963},{"_id":"source/_posts/Auto/ROS学习笔记（1）.md","hash":"a1303990ff8c1c53a1eff9b112abc72710ff556d","modified":1644556676208},{"_id":"source/_posts/Auto/ROS学习笔记（0）.md","hash":"fdcd391d5cdac7a588ca999aeb19871efe7b74ba","modified":1644556676215},{"_id":"source/_posts/Auto/Apollo文档的自动构建.md","hash":"5c6050df85f9d6df1be4890bdc83f6aabae5fe4a","modified":1644556676197},{"_id":"source/_posts/Auto/ROS学习笔记（3）.md","hash":"81638cbb283f19d630702fd74d91657bf13e56fa","modified":1644556676234},{"_id":"source/_posts/Auto/ROS学习笔记（2）.md","hash":"b55024a4d06aff2031eb88076f8f5ba57a0706bb","modified":1644556676226},{"_id":"source/_posts/Auto/UAV.md","hash":"bb3fb98c45f080519815750879cc3163d01150ac","modified":1644556676240},{"_id":"source/_posts/Daily/New-Start.md","hash":"a69aa9dd1e5a5a7199a6912e8e87463f563a95ac","modified":1644556676273},{"_id":"source/_posts/Auto/修改2d球队的阵型.md","hash":"b9468449da8edd5a67dfb3d967512e58a89ff78b","modified":1644556676250},{"_id":"source/_posts/Daily/Daily-10-27.md","hash":"40def35cae72f87b02992922eb59276508a16cd6","modified":1644556676268},{"_id":"source/_posts/Daily/Qingyou-1.md","hash":"885a46806dd8aaada634ff6977951e07c59eb4c7","modified":1644556676288},{"_id":"source/_posts/Daily/从2021到2022.md","hash":"e6527727d96fb7a5296f89f1fc87866e3be477b1","modified":1644556676281},{"_id":"source/_posts/Back-end/起一个mongodb.md","hash":"89974c0fd27f000860b3cc8fa7f03d2fbedd53b3","modified":1644556676256},{"_id":"source/_posts/Front-end/记录一次hexo生成的错误.md","hash":"f4cad66cb530def90a7666410f9c67b87308a2ed","modified":1644556676261},{"_id":"source/_posts/Operation/log-a-rsync-mistake.md","hash":"0a2dffb9c3897b2fe46e290944ca699f07a0c7dd","modified":1644556676340},{"_id":"source/_posts/Operation/k8s权威指南学习笔记（1）.md","hash":"95cf57a20023ba8450014d12ce3ec1103c4c510f","modified":1644556676329},{"_id":"source/_posts/Operation/k8s权威指南学习笔记（0）.md","hash":"bf0e30ac42b5bb519c8a72076430e3055cfef35a","modified":1644556676323},{"_id":"source/_posts/Operation/log-a-git-error.md","hash":"b73854294a9d7bcb635078d7d34df48d503af713","modified":1644556676333},{"_id":"source/_posts/Operation/net-server-0.md","hash":"eaef648b9a9a642379e9b43bd8813504e0b5c78c","modified":1644556676345},{"_id":"source/_posts/Operation/重学linux（0）.md","hash":"9f9ebc0ee28647f843af413d38046d51e79c8770","modified":1644556676356},{"_id":"source/_posts/Operation/基于虚拟机的开发机搭建.md","hash":"bab0abd01830105e2ec5246a1c29873b23e47206","modified":1644556676362},{"_id":"source/_posts/Operation/记录一次ssh登录的问题.md","hash":"e773381c872688487dbb0c08723fa17334191362","modified":1644556676351},{"_id":"source/_posts/Operation/记录一次docker迁移.md","hash":"db717a9f4ce475c5862ca969d36d7a9b7d5b887d","modified":1644556676367},{"_id":"source/_posts/Operation/重学linux（1）.md","hash":"65695d2f3f144fc4228b97c94eecccb8b176b6bc","modified":1644556676371},{"_id":"source/_posts/Operation/重学linux（3）.md","hash":"09fbdcca475e38aa4da7e1b4bcc2a952c6037c84","modified":1644556676383},{"_id":"source/_posts/Operation/重学linux（4）.md","hash":"834184fd45bd1854400298093c1a1463a7203de5","modified":1644556676388},{"_id":"source/_posts/Operation/重学linux（6）.md","hash":"622d9319de3866a4e50c59d888b6a48b5aae3656","modified":1644556588759},{"_id":"source/_posts/Operation/重学linux（5）.md","hash":"c507d6c0b1c000b7337862dbf281c778e26031cc","modified":1646292272290},{"_id":"source/_posts/Operation/重学linux（2）.md","hash":"752c84a4d341273c0a65da918ace982184c99c0e","modified":1646290558775},{"_id":"source/_posts/Operation/重学linux（9）.md","hash":"2791d90a4201f4420f592f0c160ce5ca5224f87b","modified":1646146045363},{"_id":"source/_posts/Operation/重学linux（7）.md","hash":"cb8b66c4ea885718c0d5dad35f479a235f7ef373","modified":1644563625552},{"_id":"source/_posts/Tools/可以用来阅读源码的工具.md","hash":"bf8153c77579c79b9d556828e2aa50c6c0da5b67","modified":1644556676406},{"_id":"source/_posts/Operation/重学linux（8）.md","hash":"eccb865bb160d795edacc5d9506a41557f7274a1","modified":1644897065804},{"_id":"source/_posts/Language/Magic-Macro.md","hash":"21e00050601b3991770a3d659cde1998d1685556","modified":1644556676293},{"_id":"source/_posts/test/hello-world.md","hash":"e2743c444c12e79b038ecfa0e7851bcae138467c","modified":1644556676411},{"_id":"source/_posts/Language/记录一次makefile改CMake.md","hash":"c40468e7380b04faad859ca0f4d0492a5ddf42a3","modified":1644556676304},{"_id":"source/_posts/Language/oop-for-apollo.md","hash":"bb84739c891af20422b436ae36c0d9097b851d73","modified":1644556676300},{"_id":"source/_posts/test/image-test.md","hash":"12e0c4fe6a8aadf67afa75858fb1b809b1bd804d","modified":1644556676415},{"_id":"source/_posts/Project/2021-2022寒假apollo2d准备计划.md","hash":"11e1ae713ddff3187a4e9d2574fc41a8bf2a4a0a","modified":1644556676310},{"_id":"source/_posts/Project/自制Rss阅读器.md","hash":"1c6078c15c65dfe38bc9a33c37daedd9518c824e","modified":1644556676316},{"_id":"source/_posts/Project/0xCalculator.md","hash":"e08f0e19f40a938810d9b2c19b7ea3f2dfba3853","modified":1644556676422},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"1cdf73c29c959172d2c1df88a4fe420d24db9cb9","modified":1644220475573},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"2ad1c6258ae3613e07b084f584673de523c7c8e3","modified":1644220475170},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"6ee27baf95a5741abbc224ef8938d679b6597665","modified":1644220475178},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"49ace5208f98783344f17a00adab7641cda43280","modified":1644220475176},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1644220474599},{"_id":"node_modules/hexo-theme-butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":1644220476554},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1644220475195},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1644220475225},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1644220475278},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":1644220475316},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1644220475305},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1644220475334},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"1177f2177945c3e2447c6c0208e6ffdf0c0b186c","modified":1644220476545},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"38b32ab2aa3e2ebb9ef3c993c8dca42f1e000cd5","modified":1644220476558},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"7fe7528ed2778fe39444df2bc7e64f09e1302e97","modified":1644220476548},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"b1ba98565fe2d28e956225cf9e8a21f329ee060e","modified":1644220476556},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1644220475181},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":1644220475174},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1644220476550},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"ab3bdeb6e0acd3d58091698c1335afb069eea7e5","modified":1644220475185},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"5945f6f7f963b3ed1cc50e7e7d2e4929e1c1440c","modified":1644220475260},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":1644220475286},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1644220475248},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1644220475306},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1644220475175},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"476802922b774b679225102ac30a9d9183394701","modified":1644220475173},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"f093ab771257a6a939b194f68607a2038c8d7da3","modified":1644220475328},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"a7f567b3d3110afe2f99c967b8e15351a7f5bd6d","modified":1644220475131},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/config.js","hash":"0ace90c45322ae386a3f974ab74c92e8d0dd0ab2","modified":1644220475127},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1644220475111},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"428758c2459fd31efaf816c39693edb4f716b861","modified":1644220475326},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"d575137c8779e50422c2416f4d0832fdea346ee6","modified":1644220475166},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1644220475149},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1644220475154},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":1644220475129},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1644220475123},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1644220475133},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1644220475136},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1644220475145},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"a091f82d8897adb2347c228e544e29363c679d1f","modified":1644220475130},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"21379ed2dccb69c43b893895c9d56238c11e5f43","modified":1644220475151},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1644220475144},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1644220475119},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1644220475158},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1644220475156},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1644220475121},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"21556f9cb412ddc500ad12ecfd419f3ea6c9f663","modified":1644220475153},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1644220475146},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"6a103a2472903289bdecd5240eb89cac0b9e13d9","modified":1644220475132},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1644220475530},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1644220475179},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"4890a40366d6443f8b8942a4e9a6dce9fe3494f5","modified":1644220475570},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"3ee4bd9071dc6e854ffa33964f3a8da2ee2a8409","modified":1644220475164},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"1254dca2c02b3389ec0434cdd2728fdea4ae0216","modified":1644220475142},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1644220475261},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1644220475108},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"78a3abd90bb3c18cd773d3d5abac3541e7f415e5","modified":1644220475301},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1644220475297},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"dc3913c1a6dd207051c3d3414a33851ae8bc0a45","modified":1644220475312},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1644220475331},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1644220475303},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1644220475162},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1644220475192},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"9e58c80af8bbd0c66ccb4f94d3781818cebf0d66","modified":1644220475229},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1644220475228},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1644220475258},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1644220475302},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":1644220475320},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1644220475322},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1644220475102},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1644220475329},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1644220475292},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1644220475293},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1644220475235},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1644220475224},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"fed069baa9b383f57db32bb631115071d29bdc60","modified":1644220475247},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1644220475336},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1644220475311},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1644220475324},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1644220475200},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"b9ebb02af8ccf43e3f73be43db19254fa913c57b","modified":1644220475314},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1644220475194},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1644220475307},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1644220475244},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"d4072f9ab79f4ac49aa251ae470abc45a2fddbd6","modified":1644220475309},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1644220475321},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"b63fd8ec48d782f51ee11226753fed1998bbf34a","modified":1644220475332},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"3d8e3706a056389176f55dd21956aabc78046761","modified":1644220475205},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1644220475207},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"0380a1e048e6219ea4b4a8a4eadba960edf308f0","modified":1644220475208},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1644220475211},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1644220475202},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1644220475209},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1644220475212},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1644220475213},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1644220475214},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1644220475218},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1644220475220},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1644220475222},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1644220475276},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"085e61a75588e86a6bdba75da7803411485c7b5a","modified":1644220475371},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1644220475377},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1644220475378},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"26be2afa9d4e7016cf3c42a6cd166f01e8e4ad5c","modified":1644220475393},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"d97c1722ce0fcc319f1f90ec2d51f9d746748e2b","modified":1644220475401},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ef21990de28bd75dcd0f88b8d616e1a7a137502f","modified":1644220475538},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"193a05ab27aa5ea0fbbe0066f841cbd540db6517","modified":1644220475545},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"4825b1751ae46ca005b2af9d6e0a3e477c82b1f9","modified":1644220475543},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1644220475548},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1644220475549},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"bd88ee30ebf8ca2e7b4d3a034c317fd61733921f","modified":1644220475552},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"1bcbc80dff19cd53d0b367c3b9a3c751d3a1f10d","modified":1644220475555},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"66c8c94bdc62e00e1dd848582aa2612ae22c1066","modified":1644220475566},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"1bfe7554c3aa8ccc6fcba5e027086188ca0a7ad7","modified":1644220475382},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"69f8e9414526dfda3af9a71c8e528fdd0ecbbfe5","modified":1644220475547},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1644220475361},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":1644220475366},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1644220475375},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1644220475379},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"91dfd28d7e5f2113e27c8ae854337d316ca1c48f","modified":1644220475391},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"826dae759062d8f84eb2bf5ab8fdb80e0f79d58b","modified":1644220475408},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1644220475559},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"d9bbe20a4029e542fee9f1e1013d28d767605ffc","modified":1644220475396},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"714f19e7d66df84938bd1b82b33d5667abe1f147","modified":1644220475520},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"0290605c4984882990059eefe3ad18d2ac6a19ef","modified":1644220475528},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"e4c987c0202162b50dec91e1df74665d0fa933c9","modified":1644220475540},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1644220475374},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":1644220475398},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1644220475402},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1644220475531},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"bb2a9b7937818ff3a154c8c1009f13b534e77ec3","modified":1644220475403},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1644220475532},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"08493b66b9f31f2bd3e9a3115017a0ce16142b20","modified":1644220475542},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1644220475558},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1644220475567},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"facf3bec0afce3bc6d077cf1939818efc7fe3bf1","modified":1644220475406},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1644220475561},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1644220474603},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"72911c7b42e0174a979c09ead3f42ee24136feae","modified":1644220475138},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"656f9007d94cf29a20532705d94fb7f22827e6fe","modified":1644220475364},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1644220475231},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1644220475227},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1644220475232},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1644220475263},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1644220475256},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1644220475337},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1644220475240},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1644220475246},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1644220475262},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1644220475346},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1644220475341},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":1644220475355},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1644220475242},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"6852d4fa5fff3fe52fdc41875a2c7af57f286b3a","modified":1644220475245},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"143236e395c18d80ab8dc794821eb337c85f6b32","modified":1644220475243},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"0764709381fa29778f6390d645ed137d2f91228f","modified":1644220475250},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"aaa5e44125dcf321866bc2355a73773b11db8c9c","modified":1644220475115},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"e4850f2c9ba5f6b2248808f7257662679e0fab0a","modified":1644220475265},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"9c96e6e67931977268b218b99084b98597c2e42b","modified":1644220475252},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"9302837f1e35f153323bb4f166514c7e96e8ecdd","modified":1644220475280},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1644220475289},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"c271cacbac14ed665bbf47aa9c6e74e94c69dcef","modified":1644220475343},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"c1c75abe5c899618ed6699c97ac999544840098a","modified":1644220475344},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"59c22ebf3aaee90152e7cdb17ff5841c888fcd82","modified":1644220475349},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"7648e4cb0b224f480b5f1356d64f62c9235f6723","modified":1644220475357},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":1644220475282},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1644220475270},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"a47d8f9f593091cc91192c0c49deaa2c0d2317fd","modified":1644220475296},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"0a7587a0211011b5942edba2aa80d51169561d30","modified":1644220475299},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1644220475238},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1644220475253},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1644220475272},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"ac811c1d6e0bf08aeb933ade1b9557e0c560d0c9","modified":1644220475339},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"9028efac78e4122acd734edd5ef9110ef3f05cd1","modified":1644220475353},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"5e32d903903c76db55a625640f9417d15a3a312f","modified":1644220475358},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1644220475183},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1644220475187},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1644220475274},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1644220475327},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"c92df4f9d0611cf44c1a4491e226f242ec80f5bb","modified":1644220475190},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1644220475273},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"8ce336a4c8cae81b58ee26ff51040ca650ff1519","modified":1644220475295},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1644220475389},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1644220475535},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1644220475526},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1644220475386},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1644220475524},{"_id":"public/atom.xml","hash":"87fd04d4ed4a405e739c99645d702053def32d74","modified":1646579157553},{"_id":"public/search.xml","hash":"8b4c6c60bef1559c27cddc7728e543cede39eb17","modified":1646579157553},{"_id":"public/sitemap.xml","hash":"f2121d70aaabd5af566b8bc2113fecbfc3ccaf8b","modified":1646579034269},{"_id":"public/404.html","hash":"81d6a7ca57438520de32eb69e9e2a3828b32f88f","modified":1646579157553},{"_id":"public/about/index.html","hash":"2159d2747189f58537fdfed3262e87a38da7656d","modified":1646579157553},{"_id":"public/tags/index.html","hash":"5e849ba8883c29a2138060d21851b0924417d8ea","modified":1646579157553},{"_id":"public/link/index.html","hash":"4523992262be690ae4523fdf59bc394aab08f7e0","modified":1646579157553},{"_id":"public/categories/index.html","hash":"820e3ee18a51475ac195da501ed7e70e930fe118","modified":1646579157553},{"_id":"public/Operation/8aa2099f/index.html","hash":"84c1cfe1f7708002974d97f30afae035414c3ff6","modified":1645169630458},{"_id":"public/Operation/321e6efa/index.html","hash":"11ea8c056c032a02b92554c05fc0631f1ba6906a","modified":1645169630458},{"_id":"public/Operation/6a7d7eac/index.html","hash":"a4c4b9bdbdb52cc21494e8ed60a9629b66a7cfae","modified":1645169630458},{"_id":"public/Language/147c20ee/index.html","hash":"c35ec487946b2df5ee3604450ff929b671cfef48","modified":1645169630458},{"_id":"public/Front-end/41f9c73c/index.html","hash":"86dd13a0a0cea977ee29ebcbe3d457b5e2929196","modified":1645169630458},{"_id":"public/Auto/8d15f7e6/index.html","hash":"76a8a3315fe253c3750dd099268312ec69b75df3","modified":1645169630458},{"_id":"public/test/2a459492/index.html","hash":"efc00d628ffc61f1743ccbe253e5ecc154232c4d","modified":1645169630458},{"_id":"public/Operation/d2c119c9/index.html","hash":"0977465263da7974f1e221c1072cc5a2dc4fa3d4","modified":1645169630458},{"_id":"public/Operation/c074b627/index.html","hash":"1a66be0f05e8a1f0415a7e01bcafd2020ffadebb","modified":1645169630458},{"_id":"public/Operation/78c8d142/index.html","hash":"7c543ca924c7b29c21d0458d18b0273a908632ea","modified":1645169630458},{"_id":"public/Auto/4cdedcde/index.html","hash":"42f03bf933ffd82b11e0639807bf61e5e737d900","modified":1645169630458},{"_id":"public/Auto/f462bbbb/index.html","hash":"621fb8658c52dbcfb1884ef959cf1368a1b4f1d1","modified":1645169630458},{"_id":"public/Operation/ec3bdbd7/index.html","hash":"ebb7402a073eaf75b4aac326eb3903961bb718d4","modified":1645169630458},{"_id":"public/Operation/5da38e9e/index.html","hash":"08b86d54802864a13aa82ef57456fc98371ee0c8","modified":1645169630458},{"_id":"public/Auto/e6d71455/index.html","hash":"9c30e1f97ab402d6811cd18c6bbd5b05c3e0f9f2","modified":1645169630458},{"_id":"public/Operation/667826cc/index.html","hash":"f3d1ebb506fa4760898e1cd87ce144106b2156e7","modified":1645169630458},{"_id":"public/Operation/dec441a9/index.html","hash":"66e37f613d61525a5f892ad7010aa2a265d8107c","modified":1645169630458},{"_id":"public/Auto/5e6b7330/index.html","hash":"7790e1feed2708127a8ba96ae362734ee36b88e7","modified":1645169630458},{"_id":"public/Operation/f7aa4615/index.html","hash":"24043d092fd7ab8331b740ee13b4a9e643a18f19","modified":1645169630458},{"_id":"public/Daily/b792517a/index.html","hash":"fdec38051ed2030118a76c8d2e4e09f24e6f08f9","modified":1645169630458},{"_id":"public/Operation/4f162170/index.html","hash":"2ecf284df3da6a69f65f7530cbcd3ff6c0f805e4","modified":1645169630458},{"_id":"public/Project/7b72ee84/index.html","hash":"a3899adcc9ea90174540a5eb8a871bd9bd4a61fa","modified":1645169630458},{"_id":"public/Operation/1b1593da/index.html","hash":"273d68b92e6acad7a7813651acaa42d1ca3d39ad","modified":1645169630458},{"_id":"public/Operation/1ee5701f/index.html","hash":"a1114635ff1e730f22d3c89f7d5b1e168356813a","modified":1645169630458},{"_id":"public/Operation/f7220f82/index.html","hash":"4ebbcff2d0f550216e46a0a42eff42c2f312135a","modified":1645169630458},{"_id":"public/Back-end/e9565578/index.html","hash":"550794cc655aa2f815e91fd69854e5dc34422fab","modified":1645169630458},{"_id":"public/Project/9bf3fade/index.html","hash":"3207ac4dc2ffa046e63e8953da2e38262f3f77f8","modified":1645169630458},{"_id":"public/Tools/541ba3b7/index.html","hash":"b95adce809320841e601218894eaed8f7708fe2d","modified":1645169630458},{"_id":"public/Auto/8afd9326/index.html","hash":"0f70fbe36849669c6dc7411b7bd60a4ad670c22f","modified":1645169630458},{"_id":"public/Operation/2571fbb2/index.html","hash":"65f788f9ef63a74bf4e09f22a6ee831ae2600131","modified":1645169630458},{"_id":"public/Project/9bb627a/index.html","hash":"57b8d14c64122b812d4d27962ab0599cf07ef427","modified":1645169630458},{"_id":"public/Language/49144470/index.html","hash":"76b427ff4d3efd1d20c674540df2b42aa7141ce2","modified":1645169630458},{"_id":"public/Auto/12263b9c/index.html","hash":"3d1caaf9c2b0e5763fb17a8d9206c4b9402a85d4","modified":1645169630458},{"_id":"public/Operation/a09255e2/index.html","hash":"9a7a64c46af6f94b1efd5e44ba50a25e2df80ef9","modified":1645169630458},{"_id":"public/Operation/1bfaedf6/index.html","hash":"13c6785a78d339d2ebbb7d3eca3a8fe39519aa51","modified":1645169630458},{"_id":"public/Language/17d8837d/index.html","hash":"87d2fdf6f79e85aed42c59021eee61794104763d","modified":1645169630458},{"_id":"public/Daily/8f47f88e/index.html","hash":"35c472c02f275dd09c403c3844234522b4019026","modified":1645169630458},{"_id":"public/Daily/2bbc7ca0/index.html","hash":"30d96134bd18fda436ac23366b85318892a37b56","modified":1645169630458},{"_id":"public/test/4a17b156/index.html","hash":"6e36222f23d75a8e40c132242432f3c480830e76","modified":1645169630458},{"_id":"public/Daily/6235173f/index.html","hash":"9e676f1799c18de4ccbf93c1e503f909109b4c45","modified":1645169630458},{"_id":"public/archives/index.html","hash":"51f73ce02e669893c3ebde8ddfa440079d465720","modified":1646579157553},{"_id":"public/archives/page/2/index.html","hash":"9d4a233ee0692be8089e902ba75461aea3794c20","modified":1646579157553},{"_id":"public/archives/page/4/index.html","hash":"cdb2a5c62193b022e4335eca4926bffbd1497dae","modified":1646579157553},{"_id":"public/archives/page/3/index.html","hash":"c104d11ca53096f99a36248038f98914dc0e1036","modified":1646579157553},{"_id":"public/archives/2021/index.html","hash":"62484ee8ab61aaf61a3472b45ae614b611d74f2e","modified":1646579157553},{"_id":"public/archives/2021/page/2/index.html","hash":"efd70ba1e3d424adebc6e1f076e688f2ed76d533","modified":1646579157553},{"_id":"public/archives/2021/10/index.html","hash":"98973167ad21a954197b965cf40962fe12e32204","modified":1646579157553},{"_id":"public/archives/2021/11/index.html","hash":"ba2af8b1a8ead024f4a2fddc1a7a1a7ecc8ff9c6","modified":1646579157553},{"_id":"public/archives/2021/12/index.html","hash":"acb1d41fb63c906b4085b13fc1c7ce9d12bf8263","modified":1646579157553},{"_id":"public/archives/2022/index.html","hash":"496a0d0326a97e854c6b6e9594c8a5678d8e0705","modified":1646579157553},{"_id":"public/archives/2022/page/2/index.html","hash":"b8947e18c8ed6e6c71a24e60e4bd94e17514c9d0","modified":1646579157553},{"_id":"public/archives/2022/page/3/index.html","hash":"c81f487d86ad02c819e3596955b42b6a40c3423e","modified":1646579157553},{"_id":"public/archives/2022/01/index.html","hash":"a1370310dd4ac4e1bac35717fca2db9573ed38a3","modified":1646579157553},{"_id":"public/archives/2022/01/page/2/index.html","hash":"2d087330327c1b0ed24c8ed964e904ed0a073ca4","modified":1646579157553},{"_id":"public/archives/2022/02/index.html","hash":"f123ff49fc81f85140f3e491f80209649da4d2ae","modified":1646579157553},{"_id":"public/categories/Daily/index.html","hash":"3b9c7657a7a41eddd747df71e09a2306e63c3567","modified":1646579157553},{"_id":"public/categories/Auto/index.html","hash":"cf9ea8e7243b8c1793aa0b638e6fccd47523c29e","modified":1646579157553},{"_id":"public/categories/Front-end/index.html","hash":"5831fca882dd5cae64e35cf6e259009d05014c26","modified":1646579157553},{"_id":"public/categories/Back-end/index.html","hash":"3e18bf600c96727095a95a4a1d0a1ca6ae430c29","modified":1646579157553},{"_id":"public/categories/Operation/index.html","hash":"0eee69c970b832e04028f4913bef9c84999cbf84","modified":1646579157553},{"_id":"public/categories/Operation/page/2/index.html","hash":"a7a7c9d66cb2a1970b6c846da5035197f860cf30","modified":1646579157553},{"_id":"public/categories/Tools/index.html","hash":"4e647363fd91b9ad86c62bec88b1871468a85b9b","modified":1646579157553},{"_id":"public/categories/Language/index.html","hash":"41a3ca0ec9e700d2abadcada1cb7b3339d82d4c3","modified":1646579157553},{"_id":"public/categories/test/index.html","hash":"3df5b95caea62037b51394f86594273096968374","modified":1646579157553},{"_id":"public/index.html","hash":"b79476892255540d0cb4dc7e285f87cbc33aa512","modified":1646579157553},{"_id":"public/categories/Project/index.html","hash":"73083c2507d0b7af3c4a05e7e19f17f0230a80b2","modified":1646579157553},{"_id":"public/tags/apollo/index.html","hash":"80178f50905ffac3cd5ef80c54ab2958828df7cc","modified":1646579157553},{"_id":"public/tags/gitbook/index.html","hash":"e953466f43bb1a703507f43a417a0db7e59e17ce","modified":1646579157553},{"_id":"public/tags/tag1/index.html","hash":"957df60a0727aaf51defa4875d485a85e26aab0e","modified":1646579157553},{"_id":"public/tags/tag2/index.html","hash":"c873d53f30622fc74414a9f30c4c7a009b8625cd","modified":1646579157553},{"_id":"public/tags/linux/page/2/index.html","hash":"ceb4170689b3f2a9b9f3c14fda96c20b7d6a740c","modified":1646579157553},{"_id":"public/tags/linux/index.html","hash":"1d75d3a67b91ed12b91f8ec1f39f621ebcf5ef0f","modified":1646579157553},{"_id":"public/tags/ros/index.html","hash":"d6895fc1a84284739cc5f107508d8a607f3d4e09","modified":1646579157553},{"_id":"public/tags/专栏：ros学习笔记/index.html","hash":"af179b951a87223d56ff85bc268183f8b7b6a833","modified":1646579157553},{"_id":"public/tags/auto/index.html","hash":"77c1335abe1dc6e5bfeb2959e652b9319ab7dbe1","modified":1646579157553},{"_id":"public/tags/daily/index.html","hash":"5a79b8cb0c920f33e8dd462cd0d99b1b9f2a2b8f","modified":1646579157553},{"_id":"public/tags/summary/index.html","hash":"6a292c42254da6a5537ae5ea3375c630bc047ad0","modified":1646579157553},{"_id":"public/tags/qingyou/index.html","hash":"63473406218301db9cc81f7d7ddffee507786554","modified":1646579157553},{"_id":"public/tags/mongodb/index.html","hash":"a9f00378796fb7a6e8cce4510d61a866b423511c","modified":1646579157553},{"_id":"public/tags/hexo/index.html","hash":"b9435603e68282d048e83996c4ee3e58f1293907","modified":1646579157553},{"_id":"public/tags/专栏：k8s权威指南学习笔记/index.html","hash":"04b1081a4385ad1cbdf9de2e1b3efd1294d612f1","modified":1646579157553},{"_id":"public/tags/k8s/index.html","hash":"66f6e21598e2a8c8732cadf9cf39c66811548f24","modified":1646579157553},{"_id":"public/tags/rsync/index.html","hash":"467247e32f93e1a2d51f2970f9fca1c76f54fb13","modified":1646579157553},{"_id":"public/tags/k8s权威指南学习笔记/index.html","hash":"51fa96854085ec1480d31747adb447bed9a27df1","modified":1646579157553},{"_id":"public/tags/git/index.html","hash":"a1ea153cfc397c1dd130ce0eb92ce25b28b021fb","modified":1646579157553},{"_id":"public/tags/cloud/index.html","hash":"f52d44b15ca5e9da8290d102f84c72326cfb0789","modified":1646579157553},{"_id":"public/tags/docker/index.html","hash":"ee1205bab4245281a9c94a6657a79d5283125b25","modified":1646579157553},{"_id":"public/tags/mirror/index.html","hash":"e2939b71df0e72c6071137aa665d10e077cb4ba8","modified":1646579157553},{"_id":"public/tags/专栏：重学linux/index.html","hash":"653a4a9daa6dbab04c1add43d7daf5556ee44386","modified":1646579157553},{"_id":"public/tags/ssh/index.html","hash":"3a8efae9c70386a38f58921db584696bad3a79b7","modified":1646579157553},{"_id":"public/tags/cpp/index.html","hash":"2aa6e26322da4de413d891c5e873824b4b71b0d9","modified":1646579157553},{"_id":"public/tags/C/index.html","hash":"d32dad12faba01cf18c0a8a89159d5363db6ab90","modified":1646579157553},{"_id":"public/tags/c/index.html","hash":"ac4453803ee7a2f7e5e1686d4969abd29b67b73c","modified":1646579157553},{"_id":"public/tags/cmake/index.html","hash":"73c44c871987d22ee2cb8c9011a6103ead5f7720","modified":1646579157553},{"_id":"public/tags/makefile/index.html","hash":"7ca6256929e2cba6d9fdfb3358e678f799531a3c","modified":1646579157553},{"_id":"public/tags/test/index.html","hash":"68c24570196701f96b2adf27073d6bac12dc32ee","modified":1646579157553},{"_id":"public/tags/robucup/index.html","hash":"97e68755a52fc5814a137928f98776881782e351","modified":1646579157553},{"_id":"public/tags/rss/index.html","hash":"bd0507e55f5a06941c11a760e5f81e94267b075d","modified":1646579157553},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1645169630458},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1645169630458},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1645169630458},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1645169630458},{"_id":"public/js/utils.js","hash":"3ee4bd9071dc6e854ffa33964f3a8da2ee2a8409","modified":1645169630458},{"_id":"public/js/search/local-search.js","hash":"72911c7b42e0174a979c09ead3f42ee24136feae","modified":1645169630458},{"_id":"public/js/search/algolia.js","hash":"aaa5e44125dcf321866bc2355a73773b11db8c9c","modified":1645169630458},{"_id":"public/css/index.css","hash":"352bacdb73f11a803919361ed89881a28ba23458","modified":1645169630458},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1645169630458},{"_id":"public/js/main.js","hash":"1254dca2c02b3389ec0434cdd2728fdea4ae0216","modified":1645169630458},{"_id":"public/321e6efa/index.html","hash":"3b96fcfdcda3cc33b3cf6f5476d214df83d1b1c1","modified":1646579157553},{"_id":"public/8aa2099f/index.html","hash":"38c4d046ec53a98e367b00fce072d81baf915298","modified":1646579157553},{"_id":"public/6a7d7eac/index.html","hash":"51e19d6dfe90287eb889a958048f66df4cb256e9","modified":1646579157553},{"_id":"public/147c20ee/index.html","hash":"6eaa745c9963ce1b0b7da015cbd05c3bfae59f71","modified":1646579157553},{"_id":"public/41f9c73c/index.html","hash":"c210880b549f5bb6fa964896edd45b7e018001f6","modified":1646579157553},{"_id":"public/8d15f7e6/index.html","hash":"b655aeb806ec1d3352c06dda915a09f1ba3c072e","modified":1646579157553},{"_id":"public/2a459492/index.html","hash":"45041e573dd908b834ae7ea9c95401a2119a7eff","modified":1646579157553},{"_id":"public/d2c119c9/index.html","hash":"25a15d27ef3048f7fb96a8fa1699d12e1e60a750","modified":1646579157553},{"_id":"public/78c8d142/index.html","hash":"167cf2d1de7d9429ff5ceda92d37cfcf74cc620c","modified":1646579157553},{"_id":"public/c074b627/index.html","hash":"52d91262e8a528645c4500f56beb4b0dc1145d46","modified":1646579157553},{"_id":"public/4cdedcde/index.html","hash":"26c6ad33e778d345db04e0acd84c8da4639bfa13","modified":1646579157553},{"_id":"public/f462bbbb/index.html","hash":"69f247061ef47a93186863cb04ee59bf69e9ff43","modified":1646579157553},{"_id":"public/ec3bdbd7/index.html","hash":"24be12e3d547dc21441b0f461076bb0e6615fe65","modified":1646579157553},{"_id":"public/5da38e9e/index.html","hash":"cfbbe704f6c0e1725fd6cb60254048d48a800e38","modified":1646579157553},{"_id":"public/e6d71455/index.html","hash":"8853588a34f92e451f544d7604bd59edd3a84f46","modified":1646579157553},{"_id":"public/667826cc/index.html","hash":"f16446e87592f03a33f4cc5696b36312098f5f03","modified":1646579157553},{"_id":"public/dec441a9/index.html","hash":"1b155a18d59adcadd7248f26776af83421d94ce9","modified":1646579157553},{"_id":"public/4f162170/index.html","hash":"28660d9f48401e573d1851d328cb606657281c01","modified":1646579157553},{"_id":"public/f7aa4615/index.html","hash":"b45d99bcad9d68259353686cd585a350b33e7391","modified":1646579157553},{"_id":"public/5e6b7330/index.html","hash":"644d37a53cb3ebe27c52acfc23a874ed499a1bce","modified":1646579157553},{"_id":"public/b792517a/index.html","hash":"5cd8fdb3eb360a2ac6f1bcd5c2526e4626b65799","modified":1646579157553},{"_id":"public/1ee5701f/index.html","hash":"62fecfab43b9c0d64c9af388e6343741e4dd793c","modified":1646579157553},{"_id":"public/1b1593da/index.html","hash":"b6fb62c86e47e9fee84d6fc0b11205a23a9fc703","modified":1646579157553},{"_id":"public/7b72ee84/index.html","hash":"1cad4f0e94406839ccea93fce084f8d5c4da3847","modified":1646579157553},{"_id":"public/f7220f82/index.html","hash":"aad9333bc94bf0e28482ebdeedfee2eab0252787","modified":1646579157553},{"_id":"public/9bf3fade/index.html","hash":"c7496bc2f6aa8f539429a4f5969aefc7c3b2705a","modified":1646579157553},{"_id":"public/e9565578/index.html","hash":"810baa8b7f8d190c7fadcdb46dce75e37158b8e3","modified":1646579157553},{"_id":"public/541ba3b7/index.html","hash":"6fa21153fce036b4f947aa1947976b82f027244c","modified":1646579157553},{"_id":"public/8afd9326/index.html","hash":"bd6fd39a8f600923192e7ebf617650e0597e58cc","modified":1646579157553},{"_id":"public/2571fbb2/index.html","hash":"683bce5231267a5ffc4b4d2359d26208688aacef","modified":1646579157553},{"_id":"public/9bb627a/index.html","hash":"9da2d3fc3d35e90c206001fc6168d6d9f6f6e04d","modified":1646579157553},{"_id":"public/49144470/index.html","hash":"8004ea526b0f48b550beda7dab5e53eb08bcdb6e","modified":1646579157553},{"_id":"public/a09255e2/index.html","hash":"a08a99c1a91cb02107172e034cd64cd7358551ed","modified":1646579157553},{"_id":"public/12263b9c/index.html","hash":"d336d717d3c72f5d261ef414ea53e5efb39865d1","modified":1646579157553},{"_id":"public/1bfaedf6/index.html","hash":"ae0b83c7502cdd0348e997829b8258ce079a318c","modified":1646579157553},{"_id":"public/17d8837d/index.html","hash":"966154b9e8814763ab107c5510a8f150c08f7beb","modified":1646579157553},{"_id":"public/8f47f88e/index.html","hash":"b5cabd142aa02c20fbe212026ad3c394e4cec4fe","modified":1646579157553},{"_id":"public/2bbc7ca0/index.html","hash":"c9d13bcbed81e7b333ad57ed7471c36fd852d092","modified":1646579157553},{"_id":"public/6235173f/index.html","hash":"dec8fa5ccd214c30e7bdf55f51bfae736e6f06d8","modified":1646579157553},{"_id":"public/4a17b156/index.html","hash":"b4d081881da78323787b585f04f36c46369163e8","modified":1646579157553},{"_id":"source/robots.txt","hash":"e22e8ed2abe440fb0b8a91ea781d163cb851884b","modified":1645174005093},{"_id":"public/robots.txt","hash":"9c04e6cc286fb1fb95dc727aa41b157a88083de8","modified":1646109728656},{"_id":"source/_posts/Operation/重学linux（10）.md","hash":"86b05c65109556f06548697a943b295e330fe9de","modified":1646213029028},{"_id":"source/_posts/Operation/重学linux（11）.md","hash":"430245211a5a7e4b885090cab98d10a8d39def22","modified":1646213029031},{"_id":"public/1c6c2fe1/index.html","hash":"a82c466a38952c108f4cf1f315d62b067d84269a","modified":1646579157553},{"_id":"public/a4d04884/index.html","hash":"b8960dd5a93e6b88dea2477c1013ceb79af24991","modified":1646579157553},{"_id":"public/archives/page/5/index.html","hash":"16005922894410e958a98ce792537466af483ee5","modified":1646579157553},{"_id":"public/archives/2022/03/index.html","hash":"f2dea75d7cf3e4e10340ee259114681773cebee6","modified":1646579157553},{"_id":"public/tags/专栏：重学linux/page/2/index.html","hash":"a55c00834b777889591e6f9f15540e14d83d0a5c","modified":1646579157553},{"_id":"source/_posts/Operation/重学linux（12）.md","hash":"03894a5cf5d92b8d4c6e457ca9ca451d4ded7128","modified":1646292540110},{"_id":"public/ed9800f/index.html","hash":"811fcb0d2de48dd42de1dd5a55d4ff26579b8db9","modified":1646579157553},{"_id":"public/categories/Operation/page/3/index.html","hash":"de6c5a179704acf00a5a82f2574f130cc5235d8c","modified":1646579157553},{"_id":"source/_posts/Operation/重学linux（13）.md","hash":"eba04dc441a1e44787374ed3b45a02c31b1d2e2b","modified":1646579039028},{"_id":"public/b665e76a/index.html","hash":"93c12da430be562323c1976049401eecb86a58a6","modified":1646579157553}],"Category":[{"name":"Auto","_id":"ckzs3irwr00068wul69j4fgc9"},{"name":"Daily","_id":"ckzs3irx2000o8wule7mm5136"},{"name":"Front-end","_id":"ckzs3irx800148wul5pxjf2xa"},{"name":"Back-end","_id":"ckzs3irxa001b8wul8bc213j7"},{"name":"Operation","_id":"ckzs3irxc001i8wuldljl3vi5"},{"name":"Tools","_id":"ckzs3irxt002t8wulag4e0gu6"},{"name":"Language","_id":"ckzs3irxw00328wul1ngf14iq"},{"name":"test","_id":"ckzs3iry1003l8wulh4bdd0e8"},{"name":"Project","_id":"ckzs3iry2003u8wul0m7cbjth"}],"Data":[{"_id":"link","data":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}],"Page":[{"title":"about","date":"2022-02-07T08:21:06.000Z","updated":"2022-02-09T08:20:35.064Z","type":"about","comments":1,"description":null,"keywords":null,"top_img":null,"mathjax":null,"katex":null,"aside":null,"aplayer":null,"highlight_shrink":null,"_content":"\n# 如果有人发现这里没写的话，提醒下我\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-02-07 16:21:06\nupdated:\ntype: \"about\"\ncomments:\ndescription:\nkeywords:\ntop_img:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\n---\n\n# 如果有人发现这里没写的话，提醒下我\n","path":"about/index.html","layout":"page","_id":"ckzs3irwh00008wul7nmy70rd","content":"<h1 id=\"如果有人发现这里没写的话，提醒下我\"><a href=\"#如果有人发现这里没写的话，提醒下我\" class=\"headerlink\" title=\"如果有人发现这里没写的话，提醒下我\"></a>如果有人发现这里没写的话，提醒下我</h1>","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/luren1.jpg","excerpt":"","more":"<h1 id=\"如果有人发现这里没写的话，提醒下我\"><a href=\"#如果有人发现这里没写的话，提醒下我\" class=\"headerlink\" title=\"如果有人发现这里没写的话，提醒下我\"></a>如果有人发现这里没写的话，提醒下我</h1>"},{"title":"categories","date":"2022-02-07T08:09:09.000Z","updated":"2022-02-07T08:09:26.301Z","type":"categories","comments":1,"description":null,"keywords":null,"top_img":null,"mathjax":null,"katex":null,"aside":null,"aplayer":null,"highlight_shrink":null,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-02-07 16:09:09\nupdated:\ntype: \"categories\"\ncomments:\ndescription:\nkeywords:\ntop_img:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\n---\n","path":"categories/index.html","layout":"page","_id":"ckzs3irwn00028wulhqnggzam","content":"","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/kon0.jpg","excerpt":"","more":""},{"title":"link","date":"2022-02-07T08:09:40.000Z","updated":"2022-02-07T08:09:46.928Z","type":"link","comments":1,"description":null,"keywords":null,"top_img":null,"mathjax":null,"katex":null,"aside":null,"aplayer":null,"highlight_shrink":null,"_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2022-02-07 16:09:40\nupdated:\ntype: \"link\"\ncomments:\ndescription:\nkeywords:\ntop_img:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\n---\n","path":"link/index.html","layout":"page","_id":"ckzs3irwp00048wul7pyghbc1","content":"","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/bingguo0.jpg","excerpt":"","more":""},{"title":"tags","date":"2022-02-07T08:23:44.000Z","updated":"2022-02-07T08:23:50.130Z","type":"tags","comments":1,"description":null,"keywords":null,"top_img":null,"mathjax":null,"katex":null,"aside":null,"aplayer":null,"highlight_shrink":null,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-02-07 16:23:44\nupdated:\ntype: \"tags\"\ncomments:\ndescription:\nkeywords:\ntop_img:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\n---\n","path":"tags/index.html","layout":"page","_id":"ckzs3irwt00088wule11m6gft","content":"","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/re02.jpg","excerpt":"","more":""}],"Post":[{"_content":"# Flowchart\n\n```mermaid\nflowchart BT\nid1([1111])\nid2[2222]\nid3(3333)\nid4((4444))\nid5[[5555]]\nid6>6666]\nid7{7777}\nid8{{8888}}\nid9[/9999/]\nid10[\\10101010\\]\nid11[/11111111\\]\nid12[\\12121212/]\n\n```\n\n```mermaid\nflowchart LR\nA-->B---C--A text oftest---D---|text too|E-->|text|F--text-->G-.->H-.text.->I==>J==text==>K\n```\n\n```mermaid\nflowchart LR\na-->b & c-->d\nA & B-->C & D\nE o--o F <--> G x--x H\n```\n\n```mermaid\nflowchart TD\nA[start]-->B{is it?};\nB-->|YES| C[Ok];\nC-->D[Rethink];\nD-->B;\nB---->|NO| E[End];\n```\n\n```mermaid\nflowchart LR\nA[\"A double quote:#quot;\"]-->B[\"A dec char :#9829;\"]\n```\n\n```mermaid\nflowchart TB\nc1-->a2\nsubgraph one\na1-->a2\nend\nsubgraph two\nb1-->b2\nend\nsubgraph three\nc1-->c2\nend\none-->two\n```\n\n```mermaid\nflowchart LR;\n    A-->B;\n    B-->C;\n    C-->D;\nstyle A fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n# Sequence Diagram\n\n```mermaid\nsequenceDiagram\nparticipant Alice\nparticipant Bob\nAlice->>Bob: Hi Bob\nBob->>Alice: Hi Alice\n```\n\n```mermaid\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n    \n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!\n```\n\n\n\n","source":"_drafts/LearnMermaid.md","raw":"# Flowchart\n\n```mermaid\nflowchart BT\nid1([1111])\nid2[2222]\nid3(3333)\nid4((4444))\nid5[[5555]]\nid6>6666]\nid7{7777}\nid8{{8888}}\nid9[/9999/]\nid10[\\10101010\\]\nid11[/11111111\\]\nid12[\\12121212/]\n\n```\n\n```mermaid\nflowchart LR\nA-->B---C--A text oftest---D---|text too|E-->|text|F--text-->G-.->H-.text.->I==>J==text==>K\n```\n\n```mermaid\nflowchart LR\na-->b & c-->d\nA & B-->C & D\nE o--o F <--> G x--x H\n```\n\n```mermaid\nflowchart TD\nA[start]-->B{is it?};\nB-->|YES| C[Ok];\nC-->D[Rethink];\nD-->B;\nB---->|NO| E[End];\n```\n\n```mermaid\nflowchart LR\nA[\"A double quote:#quot;\"]-->B[\"A dec char :#9829;\"]\n```\n\n```mermaid\nflowchart TB\nc1-->a2\nsubgraph one\na1-->a2\nend\nsubgraph two\nb1-->b2\nend\nsubgraph three\nc1-->c2\nend\none-->two\n```\n\n```mermaid\nflowchart LR;\n    A-->B;\n    B-->C;\n    C-->D;\nstyle A fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n# Sequence Diagram\n\n```mermaid\nsequenceDiagram\nparticipant Alice\nparticipant Bob\nAlice->>Bob: Hi Bob\nBob->>Alice: Hi Alice\n```\n\n```mermaid\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n    \n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!\n```\n\n\n\n","slug":"LearnMermaid","published":0,"date":"2021-11-28T10:01:56.665Z","updated":"2022-01-18T02:12:31.445Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irwj00018wulavzydvlc","content":"<h1 id=\"Flowchart\"><a href=\"#Flowchart\" class=\"headerlink\" title=\"Flowchart\"></a>Flowchart</h1><pre class=\"mermaid\">flowchart BT\nid1([1111])\nid2[2222]\nid3(3333)\nid4((4444))\nid5[[5555]]\nid6>6666]\nid7{7777}\nid88888\nid9[/9999/]\nid10[\\10101010\\]\nid11[/11111111\\]\nid12[\\12121212/]</pre>\n\n<pre class=\"mermaid\">flowchart LR\nA-->B---C--A text oftest---D---|text too|E-->|text|F--text-->G-.->H-.text.->I==>J==text==>K</pre>\n\n<pre class=\"mermaid\">flowchart LR\na-->b & c-->d\nA & B-->C & D\nE o--o F <--> G x--x H</pre>\n\n<pre class=\"mermaid\">flowchart TD\nA[start]-->B{is it?};\nB-->|YES| C[Ok];\nC-->D[Rethink];\nD-->B;\nB---->|NO| E[End];</pre>\n\n<pre class=\"mermaid\">flowchart LR\nA[\"A double quote:#quot;\"]-->B[\"A dec char :#9829;\"]</pre>\n\n<pre class=\"mermaid\">flowchart TB\nc1-->a2\nsubgraph one\na1-->a2\nend\nsubgraph two\nb1-->b2\nend\nsubgraph three\nc1-->c2\nend\none-->two</pre>\n\n<pre class=\"mermaid\">flowchart LR;\n    A-->B;\n    B-->C;\n    C-->D;\nstyle A fill:#f9f,stroke:#333,stroke-width:4px</pre>\n\n<h1 id=\"Sequence-Diagram\"><a href=\"#Sequence-Diagram\" class=\"headerlink\" title=\"Sequence Diagram\"></a>Sequence Diagram</h1><pre class=\"mermaid\">sequenceDiagram\nparticipant Alice\nparticipant Bob\nAlice->>Bob: Hi Bob\nBob->>Alice: Hi Alice</pre>\n\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n    \n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!</pre>\n\n\n\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/re02.jpg","excerpt":"","more":"<h1 id=\"Flowchart\"><a href=\"#Flowchart\" class=\"headerlink\" title=\"Flowchart\"></a>Flowchart</h1><pre class=\"mermaid\">flowchart BT\nid1([1111])\nid2[2222]\nid3(3333)\nid4((4444))\nid5[[5555]]\nid6>6666]\nid7{7777}\nid88888\nid9[/9999/]\nid10[\\10101010\\]\nid11[/11111111\\]\nid12[\\12121212/]</pre>\n\n<pre class=\"mermaid\">flowchart LR\nA-->B---C--A text oftest---D---|text too|E-->|text|F--text-->G-.->H-.text.->I==>J==text==>K</pre>\n\n<pre class=\"mermaid\">flowchart LR\na-->b & c-->d\nA & B-->C & D\nE o--o F <--> G x--x H</pre>\n\n<pre class=\"mermaid\">flowchart TD\nA[start]-->B{is it?};\nB-->|YES| C[Ok];\nC-->D[Rethink];\nD-->B;\nB---->|NO| E[End];</pre>\n\n<pre class=\"mermaid\">flowchart LR\nA[\"A double quote:#quot;\"]-->B[\"A dec char :#9829;\"]</pre>\n\n<pre class=\"mermaid\">flowchart TB\nc1-->a2\nsubgraph one\na1-->a2\nend\nsubgraph two\nb1-->b2\nend\nsubgraph three\nc1-->c2\nend\none-->two</pre>\n\n<pre class=\"mermaid\">flowchart LR;\n    A-->B;\n    B-->C;\n    C-->D;\nstyle A fill:#f9f,stroke:#333,stroke-width:4px</pre>\n\n<h1 id=\"Sequence-Diagram\"><a href=\"#Sequence-Diagram\" class=\"headerlink\" title=\"Sequence Diagram\"></a>Sequence Diagram</h1><pre class=\"mermaid\">sequenceDiagram\nparticipant Alice\nparticipant Bob\nAlice->>Bob: Hi Bob\nBob->>Alice: Hi Alice</pre>\n\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n    \n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!</pre>\n\n\n\n"},{"title":"Apollo文档的自动构建","description":"Apollo文档的自动构建","abbrlink":"8d15f7e6","date":"2022-01-29T01:27:38.000Z","_content":"\n# Apollo文档的自动构建\n\n加入apollo2d组后发现，这个社团除了一份年代久远的代码，啥都没有了。上上任学长不写注释，指导老师在摸鱼，上任学长老惨了，就他一个人搞这些。Thus，我觉得把apollo的文档体系建立起来。\n\n根据先前的经验，也为了让我的队友们了解一些规范，我选择了gitbook+gitlab+CI/CD的方案。这样大家可以熟悉下git、md，同时生成的网页也方便大家阅读。\n\n## gitbook配置\n\n从gitlab中创建了一个gitbook的模板，然后对它做一些配置和修改。\n\n### 目录格式\n\n```bash\nREADME.md\t\t#仓库的说明\nbook.json\t\t#书籍的设置\ndoc/\t\t\t#文档正文\n\t01-abaaba/\t\t#正式章节\n\t\tREADME.md\t\t#章节的封面\n\t\t1.md\n\t02-balabala/\t#数字用于排序\n\tREADME.md\t\t#文档封面\n\tSUMMARY.md\t\t#目录\n\tGLORSSARY.md\t#词汇表\nscripts/\t\t#用于自动部署的脚本\nstyles/\t\t\t#用于渲染网页的css文件\ntemplate/\t\t#写文档时的模板\n```\n\n### `book.json`的配置\n\n`book.json`使用json格式配置书籍的各种信息\n\n```json\n{\n    \"title\": \"Apollo2d-learning\",\n    \"root\": \"./doc\",\n    \"description\": \"来自南邮Apllo2d的2d仿真教程\",\n    \"author\": \"teammates from apollo2d@2021\",\n    \"language\": \"zh-hans\",\n    \"disableTitleFormatting\": true,\n    \"styles\": {\n        \"website\": null,\n    },\n    \"variables\": {\n        \"apollo\": 0\n    },\n    \"plugins\": [\n        \"theme-default\",\n        \"fontsettings\",\n        \"flexible-alerts\",\n        \"anchors\",\n        \"-anchor-navigation-ex\",\n        \"back-to-top-button\",\n        \"chapter-fold\",\n        \"code\",\n        \"expandable-chapters-small\",\n        \"book-summary-scroll-position-saver\",\n        \"tbfed-pagefooter\",\n        \"-page-copyright\",\n        \"pageview-count\",\n        \"-lunr\",\n        \"-search\",\n        \"search-pro\",\n        \"-sharing\",\n        \"splitter\",\n        \"intopic-toc\",\n        \"-toc2\",\n        \"prism\",\n        \"prism-themes\",\n        \"-highlight\"\n    ],\n    \"pluginsConfig\": {\n        \"theme-default\": {\n            \"showLevel\": false\n        },\n        \"anchor-navigation-ex\": {\n            \"showLevel\": true,\n            \"associatedWithSummary\": true,\n            \"printLog\": false,\n            \"multipleH1\": false,\n            \"mode\": \"\",\n            \"showGoTop\": true,\n            \"float\": {\n                \"floatIcon\": \"fa fa-navicon\",\n                \"showLevelIcon\": false,\n                \"level1Icon\": \"fa fa-hand-o-right\",\n                \"level2Icon\": \"fa fa-hand-o-right\",\n                \"level3Icon\": \"fa fa-hand-o-right\"\n            },\n            \"pageTop\": {\n                \"showLevelIcon\": false,\n                \"level1Icon\": \"fa fa-hand-o-right\",\n                \"level2Icon\": \"fa fa-hand-o-right\",\n                \"level3Icon\": \"fa fa-hand-o-right\"\n            }\n        },\n        \"fontsettings\": {\n            \"theme\": \"white\",\n            \"family\": \"sans\",\n            \"size\": 2\n        },\n        \"tbfed-pagefooter\": {\n            \"copyright\": \"Copyright@Njupt-Apollo-2d-2021\",\n            \"modify_label\": \"该文件最新修订时间：\",\n            \"modify_format\": \"YYYY-MM-DD HH:mm:ss\"\n        },\n        \"toc2\": {\n            \"addClass\": true,\n            \"className\": \"toc\"\n        },\n        \"prism\": {\n            \"css\": [\n                \"prismjs/themes/prism-solarizedlight.css\"\n            ]\n        },\n        \"intopic-toc\": {\n            \"selector\": \".markdown-section h1, .markdown-section h2, .markdown-section h3, .markdown-section h4, .markdown-section h5, .markdown-section h6\",\n            \"mode\": \"nested\",\n            \"maxDepth\": 2,\n            \"isCollapsed\": false,\n            \"isScrollspyActive\": true,\n            \"visible\": true,\n            \"label\": {\n                \"zh-hans\": \"本文大纲\",\n                \"en\": \"In this article\"\n            }\n        },\n        \"page-copyright\": {\n            \"description\": \"modified at\",\n            \"signature\": \"你的签名\",\n            \"wisdom\": \"Designer, Frontend Developer & overall web enthusiast\",\n            \"format\": \"YYYY-MM-dd hh:mm:ss\",\n            \"copyright\": \"Copyright © Apollo\",\n            \"timeColor\": \"#666\",\n            \"copyrightColor\": \"#666\",\n            \"utcOffset\": \"8\",\n            \"style\": \"normal\",\n            \"noPowered\": true\n        }\n    },\n    \"pdf\": {\n        \"fontSize\": 12,\n        \"footerTemplate\": null,\n        \"headerTemplate\": null,\n        \"margin\": {\n            \"bottom\": 36,\n            \"left\": 62,\n            \"right\": 62,\n            \"top\": 36\n        },\n        \"pageNumbers\": true,\n        \"paperSize\": \"a4\"\n    }\n}\n```\n\n挑几个重要的说明一下\n\n- title:文档名称\n- root:根目录,因为默认的文档目录就在根目录下,我这里为了做隔离把文档分到了doc目录下,因此这里要做修改\n- variables:这个是自定义的变量,我把它设成0,这样只要在文中写上`{% if var %}`,中间的文本就不会输出了,而我只要把这个变量的值改为1就能生成可以输出的.\n- plugins:插件列表,内容大概看看就好,短横线开头表示该插件被关闭,这是为了防止插件之间的冲突\n- pluginsConfig:插件配置\n- pdf:gitbook的pdf输出配置\n\n### `SUMMARY.md`配置\n\nSUMMARY文件应当位于doc目录下，它决定了文档的目录。一开始我采用的是手动编写的做法，然后越到后面越发现文件名与标题的对应变得困难，故改为了自动生成，一开始尝试了gitbook提供的自动生成插件，生成的SUMMARY跟个鬼一样。后面试了下gitbook-summary，这玩意好用多了，当然，还是有些美中不足的地方。\n\n安装后只需`book sm`即可自动生成SUMMARY文件。但是这个软件可能设计上和我的用法不一样，对于我这种文档目录位于doc的做法来说，它必须在doc目录下执行才能正常生成。因此合理的做法是\n\n```bash\ncd doc\nbook sm\n```\n\n同时，它允许使用自己的`book.json`来修改一些配置，这个文件位于doc目录下，与根目录的`book.json`不同（不过我倒希望它能是同一个文件）\n\n```json\n{\n    \"title\": \"Apollo2d-learning\",\n    \"outputfile\": \"SUMMARY.md\",\n    \"catalog\": \"all\",\n    \"ignores\": [],\n    \"unchanged\": [],\n    \"sortedBy\": \"-\",\n    \"disableTitleFormatting\": true\n}\n```\n\n还有一个问题就是，doc目录下必须有一个`README.md`。这个文件会被作为整个网页的入口，而如果不在SUMMARY中手动定义该文件的文件名，网页中会自动生成一个`introduction`作为入口。对于我们一堆中文标题，这个英文会比较突兀。这个问题的解决办法在下面。\n\n### 渲染的一些问题\n\n代码块这方面，prism这个插件会对不同的语言进行语法高亮，而prism是对语言的定义有严格要求的，比如\n\n```markdown\n```cpp ok\n```c++ no\n```javascript ok\n```js         no\n```bash  ok\n```shell no\n```\n\n怎么确定具体的名字呢？看prism的命名，比如cpp文件的prism渲染文件就是`prism-cpp.js`。所以搜一搜有没有`prism-你的语言.js`这个文件就行了。\n\n## gitlab配置\n\n### 权限问题\n\ngitlab的权限规则可以用一句话说清：一个group的成员可以在subgroups中自动取得原来的权限，其他情况下都要手动分配权限。这个仓库位于`apollo-2d`这个顶级group的根目录下，拥有大组身份的同学都有完整的权限，而新来的同学都在另一个`material`的group中，它们以`developer`的身份被加入到文档所在的`project`中，因此可以正常提pr来修改文档内容。\n\n### 多人协作\n\n多人协作其实是个小难点。多人协作的难点在于解决冲突问题，将SUMMARY改为自动生成也是解决这个问题的一部分，因为对文件的修改最后都要修改该文件。\n\n目前的操作应该是，从master分支clone，然后push时使用其他的分支名，然后再在gitlab仓库提交`pull request`，然后由管理员（就是我）来合并，如果有冲突，还要手动合并。\n\n## CI/CD配置\n\n### `.gitlab-ci.yml`配置\n\n因为一开始建项目的时候就选了gitbook模板，所以有现成的模板了。默认的gitlab ci一个月有2000分钟，而我们一次生成大概在两分钟左右，所以理论上可以随便deploy（\n\n不过为了减少更新次数，也为了解决上面生成SUMMARY不完美的问题，还是稍微做了些修改。修改的内容都在注释里了\n\n```yaml\n# requiring the environment of NodeJS 10\nimage: node:10\n\n# add 'node_modules' to cache for speeding up builds\ncache:\n  paths:\n    - node_modules/ # Node modules and dependencies\n\nbefore_script:\n  - npm install gitbook-cli -g # install gitbook\n  - npm install -g gitbook-summary # 这一行是我自己加的，安装了上面提到的SUMMARY生成工具\n  - gitbook fetch 3.2.3 # fetch final stable version\n  - gitbook install # add any requested plugins in book.json\n  - chmod a+x ./scripts/auto.sh # 我在script里写了个脚本来处理SUMMARY不完美的工具\n  - ./scripts/auto.sh\n\ntest:\n  stage: test\n  script:\n    - gitbook build . public # build to public path\n  only:\n    - branches # this job will affect every branch except 'master'\n  except:\n    - master\n\n# the 'pages' job will deploy and build your site to the 'public' path\npages:\n  stage: deploy\n  script:\n    - gitbook build . public # build to public path\n  artifacts:\n    paths:\n      - public\n    expire_in: 1 week\n  only:\n    changes:\t# 这里做了修改，原来是only master，我改为了如果文档的日志有所变化，则重新deploy\n      - doc/附录3-log/*\n```\n\n然后是两个脚本\n\n```bash\n# auto.sh\ncd ./doc\nbook sm #首先生成SUMMARY文件\ncd ..\nnode ./scripts/test.js # 然后是要给README.md一个名字，不让它自动生成introduction\n# 一开始想到的是用sed来添加，然后发现这么做没用，可能是因为在容器里。然后我一看是个node的镜像，那就用nodejs来解决好了，故编写了个js文件\n```\n\n```javascript\n//test.js\nconst fs = require(\"fs\");\n\n// fs.appendFile 追加文件内容\n// 1, 参数1:表示要向那个文件追加内容,只一个文件的路径\n// 2, 参数2:表示要追加的内容\n// 3, 可选参数,表示追加文本内容的编码格式,如果省略,默认为utf-8\n// 4, 参数4: 表示追加完成之后的回调[有一个参数err,是判断是否追加成功]\nfs.appendFile(\"./doc/SUMMARY.md\", \"- [关于](README.md)\", (error) => {\n    if (error) return console.log(\"追加文件失败\" + error.message);\n    console.log(\"追加成功\");\n});\n// 因为是抄下来的，所以注释就懒得删了，感谢原作者\n```\n\n","source":"_posts/Auto/Apollo文档的自动构建.md","raw":"---\ntitle: Apollo文档的自动构建\ntags:\n  - gitbook\n  - apollo\ndescription: Apollo文档的自动构建\ncategories:\n  - Auto\nabbrlink: 8d15f7e6\ndate: 2022-01-29 09:27:38\n---\n\n# Apollo文档的自动构建\n\n加入apollo2d组后发现，这个社团除了一份年代久远的代码，啥都没有了。上上任学长不写注释，指导老师在摸鱼，上任学长老惨了，就他一个人搞这些。Thus，我觉得把apollo的文档体系建立起来。\n\n根据先前的经验，也为了让我的队友们了解一些规范，我选择了gitbook+gitlab+CI/CD的方案。这样大家可以熟悉下git、md，同时生成的网页也方便大家阅读。\n\n## gitbook配置\n\n从gitlab中创建了一个gitbook的模板，然后对它做一些配置和修改。\n\n### 目录格式\n\n```bash\nREADME.md\t\t#仓库的说明\nbook.json\t\t#书籍的设置\ndoc/\t\t\t#文档正文\n\t01-abaaba/\t\t#正式章节\n\t\tREADME.md\t\t#章节的封面\n\t\t1.md\n\t02-balabala/\t#数字用于排序\n\tREADME.md\t\t#文档封面\n\tSUMMARY.md\t\t#目录\n\tGLORSSARY.md\t#词汇表\nscripts/\t\t#用于自动部署的脚本\nstyles/\t\t\t#用于渲染网页的css文件\ntemplate/\t\t#写文档时的模板\n```\n\n### `book.json`的配置\n\n`book.json`使用json格式配置书籍的各种信息\n\n```json\n{\n    \"title\": \"Apollo2d-learning\",\n    \"root\": \"./doc\",\n    \"description\": \"来自南邮Apllo2d的2d仿真教程\",\n    \"author\": \"teammates from apollo2d@2021\",\n    \"language\": \"zh-hans\",\n    \"disableTitleFormatting\": true,\n    \"styles\": {\n        \"website\": null,\n    },\n    \"variables\": {\n        \"apollo\": 0\n    },\n    \"plugins\": [\n        \"theme-default\",\n        \"fontsettings\",\n        \"flexible-alerts\",\n        \"anchors\",\n        \"-anchor-navigation-ex\",\n        \"back-to-top-button\",\n        \"chapter-fold\",\n        \"code\",\n        \"expandable-chapters-small\",\n        \"book-summary-scroll-position-saver\",\n        \"tbfed-pagefooter\",\n        \"-page-copyright\",\n        \"pageview-count\",\n        \"-lunr\",\n        \"-search\",\n        \"search-pro\",\n        \"-sharing\",\n        \"splitter\",\n        \"intopic-toc\",\n        \"-toc2\",\n        \"prism\",\n        \"prism-themes\",\n        \"-highlight\"\n    ],\n    \"pluginsConfig\": {\n        \"theme-default\": {\n            \"showLevel\": false\n        },\n        \"anchor-navigation-ex\": {\n            \"showLevel\": true,\n            \"associatedWithSummary\": true,\n            \"printLog\": false,\n            \"multipleH1\": false,\n            \"mode\": \"\",\n            \"showGoTop\": true,\n            \"float\": {\n                \"floatIcon\": \"fa fa-navicon\",\n                \"showLevelIcon\": false,\n                \"level1Icon\": \"fa fa-hand-o-right\",\n                \"level2Icon\": \"fa fa-hand-o-right\",\n                \"level3Icon\": \"fa fa-hand-o-right\"\n            },\n            \"pageTop\": {\n                \"showLevelIcon\": false,\n                \"level1Icon\": \"fa fa-hand-o-right\",\n                \"level2Icon\": \"fa fa-hand-o-right\",\n                \"level3Icon\": \"fa fa-hand-o-right\"\n            }\n        },\n        \"fontsettings\": {\n            \"theme\": \"white\",\n            \"family\": \"sans\",\n            \"size\": 2\n        },\n        \"tbfed-pagefooter\": {\n            \"copyright\": \"Copyright@Njupt-Apollo-2d-2021\",\n            \"modify_label\": \"该文件最新修订时间：\",\n            \"modify_format\": \"YYYY-MM-DD HH:mm:ss\"\n        },\n        \"toc2\": {\n            \"addClass\": true,\n            \"className\": \"toc\"\n        },\n        \"prism\": {\n            \"css\": [\n                \"prismjs/themes/prism-solarizedlight.css\"\n            ]\n        },\n        \"intopic-toc\": {\n            \"selector\": \".markdown-section h1, .markdown-section h2, .markdown-section h3, .markdown-section h4, .markdown-section h5, .markdown-section h6\",\n            \"mode\": \"nested\",\n            \"maxDepth\": 2,\n            \"isCollapsed\": false,\n            \"isScrollspyActive\": true,\n            \"visible\": true,\n            \"label\": {\n                \"zh-hans\": \"本文大纲\",\n                \"en\": \"In this article\"\n            }\n        },\n        \"page-copyright\": {\n            \"description\": \"modified at\",\n            \"signature\": \"你的签名\",\n            \"wisdom\": \"Designer, Frontend Developer & overall web enthusiast\",\n            \"format\": \"YYYY-MM-dd hh:mm:ss\",\n            \"copyright\": \"Copyright © Apollo\",\n            \"timeColor\": \"#666\",\n            \"copyrightColor\": \"#666\",\n            \"utcOffset\": \"8\",\n            \"style\": \"normal\",\n            \"noPowered\": true\n        }\n    },\n    \"pdf\": {\n        \"fontSize\": 12,\n        \"footerTemplate\": null,\n        \"headerTemplate\": null,\n        \"margin\": {\n            \"bottom\": 36,\n            \"left\": 62,\n            \"right\": 62,\n            \"top\": 36\n        },\n        \"pageNumbers\": true,\n        \"paperSize\": \"a4\"\n    }\n}\n```\n\n挑几个重要的说明一下\n\n- title:文档名称\n- root:根目录,因为默认的文档目录就在根目录下,我这里为了做隔离把文档分到了doc目录下,因此这里要做修改\n- variables:这个是自定义的变量,我把它设成0,这样只要在文中写上`{% if var %}`,中间的文本就不会输出了,而我只要把这个变量的值改为1就能生成可以输出的.\n- plugins:插件列表,内容大概看看就好,短横线开头表示该插件被关闭,这是为了防止插件之间的冲突\n- pluginsConfig:插件配置\n- pdf:gitbook的pdf输出配置\n\n### `SUMMARY.md`配置\n\nSUMMARY文件应当位于doc目录下，它决定了文档的目录。一开始我采用的是手动编写的做法，然后越到后面越发现文件名与标题的对应变得困难，故改为了自动生成，一开始尝试了gitbook提供的自动生成插件，生成的SUMMARY跟个鬼一样。后面试了下gitbook-summary，这玩意好用多了，当然，还是有些美中不足的地方。\n\n安装后只需`book sm`即可自动生成SUMMARY文件。但是这个软件可能设计上和我的用法不一样，对于我这种文档目录位于doc的做法来说，它必须在doc目录下执行才能正常生成。因此合理的做法是\n\n```bash\ncd doc\nbook sm\n```\n\n同时，它允许使用自己的`book.json`来修改一些配置，这个文件位于doc目录下，与根目录的`book.json`不同（不过我倒希望它能是同一个文件）\n\n```json\n{\n    \"title\": \"Apollo2d-learning\",\n    \"outputfile\": \"SUMMARY.md\",\n    \"catalog\": \"all\",\n    \"ignores\": [],\n    \"unchanged\": [],\n    \"sortedBy\": \"-\",\n    \"disableTitleFormatting\": true\n}\n```\n\n还有一个问题就是，doc目录下必须有一个`README.md`。这个文件会被作为整个网页的入口，而如果不在SUMMARY中手动定义该文件的文件名，网页中会自动生成一个`introduction`作为入口。对于我们一堆中文标题，这个英文会比较突兀。这个问题的解决办法在下面。\n\n### 渲染的一些问题\n\n代码块这方面，prism这个插件会对不同的语言进行语法高亮，而prism是对语言的定义有严格要求的，比如\n\n```markdown\n```cpp ok\n```c++ no\n```javascript ok\n```js         no\n```bash  ok\n```shell no\n```\n\n怎么确定具体的名字呢？看prism的命名，比如cpp文件的prism渲染文件就是`prism-cpp.js`。所以搜一搜有没有`prism-你的语言.js`这个文件就行了。\n\n## gitlab配置\n\n### 权限问题\n\ngitlab的权限规则可以用一句话说清：一个group的成员可以在subgroups中自动取得原来的权限，其他情况下都要手动分配权限。这个仓库位于`apollo-2d`这个顶级group的根目录下，拥有大组身份的同学都有完整的权限，而新来的同学都在另一个`material`的group中，它们以`developer`的身份被加入到文档所在的`project`中，因此可以正常提pr来修改文档内容。\n\n### 多人协作\n\n多人协作其实是个小难点。多人协作的难点在于解决冲突问题，将SUMMARY改为自动生成也是解决这个问题的一部分，因为对文件的修改最后都要修改该文件。\n\n目前的操作应该是，从master分支clone，然后push时使用其他的分支名，然后再在gitlab仓库提交`pull request`，然后由管理员（就是我）来合并，如果有冲突，还要手动合并。\n\n## CI/CD配置\n\n### `.gitlab-ci.yml`配置\n\n因为一开始建项目的时候就选了gitbook模板，所以有现成的模板了。默认的gitlab ci一个月有2000分钟，而我们一次生成大概在两分钟左右，所以理论上可以随便deploy（\n\n不过为了减少更新次数，也为了解决上面生成SUMMARY不完美的问题，还是稍微做了些修改。修改的内容都在注释里了\n\n```yaml\n# requiring the environment of NodeJS 10\nimage: node:10\n\n# add 'node_modules' to cache for speeding up builds\ncache:\n  paths:\n    - node_modules/ # Node modules and dependencies\n\nbefore_script:\n  - npm install gitbook-cli -g # install gitbook\n  - npm install -g gitbook-summary # 这一行是我自己加的，安装了上面提到的SUMMARY生成工具\n  - gitbook fetch 3.2.3 # fetch final stable version\n  - gitbook install # add any requested plugins in book.json\n  - chmod a+x ./scripts/auto.sh # 我在script里写了个脚本来处理SUMMARY不完美的工具\n  - ./scripts/auto.sh\n\ntest:\n  stage: test\n  script:\n    - gitbook build . public # build to public path\n  only:\n    - branches # this job will affect every branch except 'master'\n  except:\n    - master\n\n# the 'pages' job will deploy and build your site to the 'public' path\npages:\n  stage: deploy\n  script:\n    - gitbook build . public # build to public path\n  artifacts:\n    paths:\n      - public\n    expire_in: 1 week\n  only:\n    changes:\t# 这里做了修改，原来是only master，我改为了如果文档的日志有所变化，则重新deploy\n      - doc/附录3-log/*\n```\n\n然后是两个脚本\n\n```bash\n# auto.sh\ncd ./doc\nbook sm #首先生成SUMMARY文件\ncd ..\nnode ./scripts/test.js # 然后是要给README.md一个名字，不让它自动生成introduction\n# 一开始想到的是用sed来添加，然后发现这么做没用，可能是因为在容器里。然后我一看是个node的镜像，那就用nodejs来解决好了，故编写了个js文件\n```\n\n```javascript\n//test.js\nconst fs = require(\"fs\");\n\n// fs.appendFile 追加文件内容\n// 1, 参数1:表示要向那个文件追加内容,只一个文件的路径\n// 2, 参数2:表示要追加的内容\n// 3, 可选参数,表示追加文本内容的编码格式,如果省略,默认为utf-8\n// 4, 参数4: 表示追加完成之后的回调[有一个参数err,是判断是否追加成功]\nfs.appendFile(\"./doc/SUMMARY.md\", \"- [关于](README.md)\", (error) => {\n    if (error) return console.log(\"追加文件失败\" + error.message);\n    console.log(\"追加成功\");\n});\n// 因为是抄下来的，所以注释就懒得删了，感谢原作者\n```\n\n","slug":"Apollo文档的自动构建","published":1,"category":"Auto","updated":"2022-02-11T05:17:56.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irwo00038wul4755den3","content":"<h1 id=\"Apollo文档的自动构建\"><a href=\"#Apollo文档的自动构建\" class=\"headerlink\" title=\"Apollo文档的自动构建\"></a>Apollo文档的自动构建</h1><p>加入apollo2d组后发现，这个社团除了一份年代久远的代码，啥都没有了。上上任学长不写注释，指导老师在摸鱼，上任学长老惨了，就他一个人搞这些。Thus，我觉得把apollo的文档体系建立起来。</p>\n<p>根据先前的经验，也为了让我的队友们了解一些规范，我选择了gitbook+gitlab+CI&#x2F;CD的方案。这样大家可以熟悉下git、md，同时生成的网页也方便大家阅读。</p>\n<h2 id=\"gitbook配置\"><a href=\"#gitbook配置\" class=\"headerlink\" title=\"gitbook配置\"></a>gitbook配置</h2><p>从gitlab中创建了一个gitbook的模板，然后对它做一些配置和修改。</p>\n<h3 id=\"目录格式\"><a href=\"#目录格式\" class=\"headerlink\" title=\"目录格式\"></a>目录格式</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">README.md\t\t<span class=\"token comment\">#仓库的说明</span>\nbook.json\t\t<span class=\"token comment\">#书籍的设置</span>\ndoc/\t\t\t<span class=\"token comment\">#文档正文</span>\n\t01-abaaba/\t\t<span class=\"token comment\">#正式章节</span>\n\t\tREADME.md\t\t<span class=\"token comment\">#章节的封面</span>\n\t\t<span class=\"token number\">1</span>.md\n\t02-balabala/\t<span class=\"token comment\">#数字用于排序</span>\n\tREADME.md\t\t<span class=\"token comment\">#文档封面</span>\n\tSUMMARY.md\t\t<span class=\"token comment\">#目录</span>\n\tGLORSSARY.md\t<span class=\"token comment\">#词汇表</span>\nscripts/\t\t<span class=\"token comment\">#用于自动部署的脚本</span>\nstyles/\t\t\t<span class=\"token comment\">#用于渲染网页的css文件</span>\ntemplate/\t\t<span class=\"token comment\">#写文档时的模板</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"book-json的配置\"><a href=\"#book-json的配置\" class=\"headerlink\" title=\"book.json的配置\"></a><code>book.json</code>的配置</h3><p><code>book.json</code>使用json格式配置书籍的各种信息</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Apollo2d-learning\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"root\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./doc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"来自南邮Apllo2d的2d仿真教程\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"teammates from apollo2d@2021\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"language\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zh-hans\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"disableTitleFormatting\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"styles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"website\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"variables\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"apollo\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"theme-default\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"fontsettings\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"flexible-alerts\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"anchors\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"-anchor-navigation-ex\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"back-to-top-button\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"chapter-fold\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"code\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"expandable-chapters-small\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"book-summary-scroll-position-saver\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"tbfed-pagefooter\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"-page-copyright\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"pageview-count\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"-lunr\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"-search\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"search-pro\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"-sharing\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"splitter\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"intopic-toc\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"-toc2\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"prism\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"prism-themes\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"-highlight\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"pluginsConfig\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"theme-default\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"showLevel\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"anchor-navigation-ex\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"showLevel\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"associatedWithSummary\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"printLog\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"multipleH1\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"mode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"showGoTop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"float\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token property\">\"floatIcon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fa fa-navicon\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"showLevelIcon\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"level1Icon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fa fa-hand-o-right\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"level2Icon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fa fa-hand-o-right\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"level3Icon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fa fa-hand-o-right\"</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"pageTop\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token property\">\"showLevelIcon\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"level1Icon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fa fa-hand-o-right\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"level2Icon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fa fa-hand-o-right\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"level3Icon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fa fa-hand-o-right\"</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"fontsettings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"theme\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"family\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sans\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"tbfed-pagefooter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"copyright\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Copyright@Njupt-Apollo-2d-2021\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"modify_label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"该文件最新修订时间：\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"modify_format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"YYYY-MM-DD HH:mm:ss\"</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"toc2\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"addClass\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"className\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"toc\"</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"prism\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"css\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"prismjs/themes/prism-solarizedlight.css\"</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"intopic-toc\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"selector\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".markdown-section h1, .markdown-section h2, .markdown-section h3, .markdown-section h4, .markdown-section h5, .markdown-section h6\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"mode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nested\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"maxDepth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"isCollapsed\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"isScrollspyActive\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"visible\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token property\">\"zh-hans\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"本文大纲\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"en\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"In this article\"</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"page-copyright\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"modified at\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"signature\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"你的签名\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"wisdom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Designer, Frontend Developer &amp; overall web enthusiast\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"YYYY-MM-dd hh:mm:ss\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"copyright\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Copyright © Apollo\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"timeColor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#666\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"copyrightColor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#666\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"utcOffset\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"8\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"style\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"noPowered\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"pdf\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"fontSize\"</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"footerTemplate\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"headerTemplate\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"margin\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"bottom\"</span><span class=\"token operator\">:</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"left\"</span><span class=\"token operator\">:</span> <span class=\"token number\">62</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"right\"</span><span class=\"token operator\">:</span> <span class=\"token number\">62</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"top\"</span><span class=\"token operator\">:</span> <span class=\"token number\">36</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"pageNumbers\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"paperSize\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"a4\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>挑几个重要的说明一下</p>\n<ul>\n<li>title:文档名称</li>\n<li>root:根目录,因为默认的文档目录就在根目录下,我这里为了做隔离把文档分到了doc目录下,因此这里要做修改</li>\n<li>variables:这个是自定义的变量,我把它设成0,这样只要在文中写上<code>&#123;% if var %&#125;</code>,中间的文本就不会输出了,而我只要把这个变量的值改为1就能生成可以输出的.</li>\n<li>plugins:插件列表,内容大概看看就好,短横线开头表示该插件被关闭,这是为了防止插件之间的冲突</li>\n<li>pluginsConfig:插件配置</li>\n<li>pdf:gitbook的pdf输出配置</li>\n</ul>\n<h3 id=\"SUMMARY-md配置\"><a href=\"#SUMMARY-md配置\" class=\"headerlink\" title=\"SUMMARY.md配置\"></a><code>SUMMARY.md</code>配置</h3><p>SUMMARY文件应当位于doc目录下，它决定了文档的目录。一开始我采用的是手动编写的做法，然后越到后面越发现文件名与标题的对应变得困难，故改为了自动生成，一开始尝试了gitbook提供的自动生成插件，生成的SUMMARY跟个鬼一样。后面试了下gitbook-summary，这玩意好用多了，当然，还是有些美中不足的地方。</p>\n<p>安装后只需<code>book sm</code>即可自动生成SUMMARY文件。但是这个软件可能设计上和我的用法不一样，对于我这种文档目录位于doc的做法来说，它必须在doc目录下执行才能正常生成。因此合理的做法是</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> doc\nbook sm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>同时，它允许使用自己的<code>book.json</code>来修改一些配置，这个文件位于doc目录下，与根目录的<code>book.json</code>不同（不过我倒希望它能是同一个文件）</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Apollo2d-learning\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outputfile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SUMMARY.md\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"catalog\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"all\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ignores\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"unchanged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sortedBy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"disableTitleFormatting\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>还有一个问题就是，doc目录下必须有一个<code>README.md</code>。这个文件会被作为整个网页的入口，而如果不在SUMMARY中手动定义该文件的文件名，网页中会自动生成一个<code>introduction</code>作为入口。对于我们一堆中文标题，这个英文会比较突兀。这个问题的解决办法在下面。</p>\n<h3 id=\"渲染的一些问题\"><a href=\"#渲染的一些问题\" class=\"headerlink\" title=\"渲染的一些问题\"></a>渲染的一些问题</h3><p>代码块这方面，prism这个插件会对不同的语言进行语法高亮，而prism是对语言的定义有严格要求的，比如</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">```cpp ok\n```c++ no\n```javascript ok\n```js         no\n```bash  ok\n```shell no<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>怎么确定具体的名字呢？看prism的命名，比如cpp文件的prism渲染文件就是<code>prism-cpp.js</code>。所以搜一搜有没有<code>prism-你的语言.js</code>这个文件就行了。</p>\n<h2 id=\"gitlab配置\"><a href=\"#gitlab配置\" class=\"headerlink\" title=\"gitlab配置\"></a>gitlab配置</h2><h3 id=\"权限问题\"><a href=\"#权限问题\" class=\"headerlink\" title=\"权限问题\"></a>权限问题</h3><p>gitlab的权限规则可以用一句话说清：一个group的成员可以在subgroups中自动取得原来的权限，其他情况下都要手动分配权限。这个仓库位于<code>apollo-2d</code>这个顶级group的根目录下，拥有大组身份的同学都有完整的权限，而新来的同学都在另一个<code>material</code>的group中，它们以<code>developer</code>的身份被加入到文档所在的<code>project</code>中，因此可以正常提pr来修改文档内容。</p>\n<h3 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h3><p>多人协作其实是个小难点。多人协作的难点在于解决冲突问题，将SUMMARY改为自动生成也是解决这个问题的一部分，因为对文件的修改最后都要修改该文件。</p>\n<p>目前的操作应该是，从master分支clone，然后push时使用其他的分支名，然后再在gitlab仓库提交<code>pull request</code>，然后由管理员（就是我）来合并，如果有冲突，还要手动合并。</p>\n<h2 id=\"CI-x2F-CD配置\"><a href=\"#CI-x2F-CD配置\" class=\"headerlink\" title=\"CI&#x2F;CD配置\"></a>CI&#x2F;CD配置</h2><h3 id=\"gitlab-ci-yml配置\"><a href=\"#gitlab-ci-yml配置\" class=\"headerlink\" title=\".gitlab-ci.yml配置\"></a><code>.gitlab-ci.yml</code>配置</h3><p>因为一开始建项目的时候就选了gitbook模板，所以有现成的模板了。默认的gitlab ci一个月有2000分钟，而我们一次生成大概在两分钟左右，所以理论上可以随便deploy（</p>\n<p>不过为了减少更新次数，也为了解决上面生成SUMMARY不完美的问题，还是稍微做了些修改。修改的内容都在注释里了</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># requiring the environment of NodeJS 10</span>\n<span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">:</span><span class=\"token number\">10</span>\n\n<span class=\"token comment\"># add 'node_modules' to cache for speeding up builds</span>\n<span class=\"token key atrule\">cache</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> node_modules/ <span class=\"token comment\"># Node modules and dependencies</span>\n\n<span class=\"token key atrule\">before_script</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> npm install gitbook<span class=\"token punctuation\">-</span>cli <span class=\"token punctuation\">-</span>g <span class=\"token comment\"># install gitbook</span>\n  <span class=\"token punctuation\">-</span> npm install <span class=\"token punctuation\">-</span>g gitbook<span class=\"token punctuation\">-</span>summary <span class=\"token comment\"># 这一行是我自己加的，安装了上面提到的SUMMARY生成工具</span>\n  <span class=\"token punctuation\">-</span> gitbook fetch 3.2.3 <span class=\"token comment\"># fetch final stable version</span>\n  <span class=\"token punctuation\">-</span> gitbook install <span class=\"token comment\"># add any requested plugins in book.json</span>\n  <span class=\"token punctuation\">-</span> chmod a+x ./scripts/auto.sh <span class=\"token comment\"># 我在script里写了个脚本来处理SUMMARY不完美的工具</span>\n  <span class=\"token punctuation\">-</span> ./scripts/auto.sh\n\n<span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> test\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> gitbook build . public <span class=\"token comment\"># build to public path</span>\n  <span class=\"token key atrule\">only</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> branches <span class=\"token comment\"># this job will affect every branch except 'master'</span>\n  <span class=\"token key atrule\">except</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> master\n\n<span class=\"token comment\"># the 'pages' job will deploy and build your site to the 'public' path</span>\n<span class=\"token key atrule\">pages</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> deploy\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> gitbook build . public <span class=\"token comment\"># build to public path</span>\n  <span class=\"token key atrule\">artifacts</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> public\n    <span class=\"token key atrule\">expire_in</span><span class=\"token punctuation\">:</span> 1 week\n  <span class=\"token key atrule\">only</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">changes</span><span class=\"token punctuation\">:</span>\t<span class=\"token comment\"># 这里做了修改，原来是only master，我改为了如果文档的日志有所变化，则重新deploy</span>\n      <span class=\"token punctuation\">-</span> doc/附录3<span class=\"token punctuation\">-</span>log/*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后是两个脚本</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># auto.sh</span>\n<span class=\"token builtin class-name\">cd</span> ./doc\nbook sm <span class=\"token comment\">#首先生成SUMMARY文件</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\n<span class=\"token function\">node</span> ./scripts/test.js <span class=\"token comment\"># 然后是要给README.md一个名字，不让它自动生成introduction</span>\n<span class=\"token comment\"># 一开始想到的是用sed来添加，然后发现这么做没用，可能是因为在容器里。然后我一看是个node的镜像，那就用nodejs来解决好了，故编写了个js文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//test.js</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// fs.appendFile 追加文件内容</span>\n<span class=\"token comment\">// 1, 参数1:表示要向那个文件追加内容,只一个文件的路径</span>\n<span class=\"token comment\">// 2, 参数2:表示要追加的内容</span>\n<span class=\"token comment\">// 3, 可选参数,表示追加文本内容的编码格式,如果省略,默认为utf-8</span>\n<span class=\"token comment\">// 4, 参数4: 表示追加完成之后的回调[有一个参数err,是判断是否追加成功]</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">appendFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./doc/SUMMARY.md\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"- [关于](README.md)\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"追加文件失败\"</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"追加成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 因为是抄下来的，所以注释就懒得删了，感谢原作者</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/kon0.jpg","excerpt":"","more":"<h1 id=\"Apollo文档的自动构建\"><a href=\"#Apollo文档的自动构建\" class=\"headerlink\" title=\"Apollo文档的自动构建\"></a>Apollo文档的自动构建</h1><p>加入apollo2d组后发现，这个社团除了一份年代久远的代码，啥都没有了。上上任学长不写注释，指导老师在摸鱼，上任学长老惨了，就他一个人搞这些。Thus，我觉得把apollo的文档体系建立起来。</p>\n<p>根据先前的经验，也为了让我的队友们了解一些规范，我选择了gitbook+gitlab+CI&#x2F;CD的方案。这样大家可以熟悉下git、md，同时生成的网页也方便大家阅读。</p>\n<h2 id=\"gitbook配置\"><a href=\"#gitbook配置\" class=\"headerlink\" title=\"gitbook配置\"></a>gitbook配置</h2><p>从gitlab中创建了一个gitbook的模板，然后对它做一些配置和修改。</p>\n<h3 id=\"目录格式\"><a href=\"#目录格式\" class=\"headerlink\" title=\"目录格式\"></a>目录格式</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">README.md\t\t<span class=\"token comment\">#仓库的说明</span>\nbook.json\t\t<span class=\"token comment\">#书籍的设置</span>\ndoc/\t\t\t<span class=\"token comment\">#文档正文</span>\n\t01-abaaba/\t\t<span class=\"token comment\">#正式章节</span>\n\t\tREADME.md\t\t<span class=\"token comment\">#章节的封面</span>\n\t\t<span class=\"token number\">1</span>.md\n\t02-balabala/\t<span class=\"token comment\">#数字用于排序</span>\n\tREADME.md\t\t<span class=\"token comment\">#文档封面</span>\n\tSUMMARY.md\t\t<span class=\"token comment\">#目录</span>\n\tGLORSSARY.md\t<span class=\"token comment\">#词汇表</span>\nscripts/\t\t<span class=\"token comment\">#用于自动部署的脚本</span>\nstyles/\t\t\t<span class=\"token comment\">#用于渲染网页的css文件</span>\ntemplate/\t\t<span class=\"token comment\">#写文档时的模板</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"book-json的配置\"><a href=\"#book-json的配置\" class=\"headerlink\" title=\"book.json的配置\"></a><code>book.json</code>的配置</h3><p><code>book.json</code>使用json格式配置书籍的各种信息</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Apollo2d-learning\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"root\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./doc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"来自南邮Apllo2d的2d仿真教程\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"teammates from apollo2d@2021\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"language\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zh-hans\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"disableTitleFormatting\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"styles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"website\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"variables\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"apollo\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"theme-default\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"fontsettings\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"flexible-alerts\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"anchors\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"-anchor-navigation-ex\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"back-to-top-button\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"chapter-fold\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"code\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"expandable-chapters-small\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"book-summary-scroll-position-saver\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"tbfed-pagefooter\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"-page-copyright\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"pageview-count\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"-lunr\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"-search\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"search-pro\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"-sharing\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"splitter\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"intopic-toc\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"-toc2\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"prism\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"prism-themes\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"-highlight\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"pluginsConfig\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"theme-default\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"showLevel\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"anchor-navigation-ex\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"showLevel\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"associatedWithSummary\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"printLog\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"multipleH1\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"mode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"showGoTop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"float\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token property\">\"floatIcon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fa fa-navicon\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"showLevelIcon\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"level1Icon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fa fa-hand-o-right\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"level2Icon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fa fa-hand-o-right\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"level3Icon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fa fa-hand-o-right\"</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"pageTop\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token property\">\"showLevelIcon\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"level1Icon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fa fa-hand-o-right\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"level2Icon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fa fa-hand-o-right\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"level3Icon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fa fa-hand-o-right\"</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"fontsettings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"theme\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"family\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sans\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"tbfed-pagefooter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"copyright\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Copyright@Njupt-Apollo-2d-2021\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"modify_label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"该文件最新修订时间：\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"modify_format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"YYYY-MM-DD HH:mm:ss\"</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"toc2\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"addClass\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"className\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"toc\"</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"prism\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"css\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"prismjs/themes/prism-solarizedlight.css\"</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"intopic-toc\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"selector\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".markdown-section h1, .markdown-section h2, .markdown-section h3, .markdown-section h4, .markdown-section h5, .markdown-section h6\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"mode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nested\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"maxDepth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"isCollapsed\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"isScrollspyActive\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"visible\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token property\">\"zh-hans\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"本文大纲\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"en\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"In this article\"</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"page-copyright\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"modified at\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"signature\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"你的签名\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"wisdom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Designer, Frontend Developer &amp; overall web enthusiast\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"YYYY-MM-dd hh:mm:ss\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"copyright\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Copyright © Apollo\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"timeColor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#666\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"copyrightColor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"#666\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"utcOffset\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"8\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"style\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"noPowered\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"pdf\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"fontSize\"</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"footerTemplate\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"headerTemplate\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"margin\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">\"bottom\"</span><span class=\"token operator\">:</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"left\"</span><span class=\"token operator\">:</span> <span class=\"token number\">62</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"right\"</span><span class=\"token operator\">:</span> <span class=\"token number\">62</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"top\"</span><span class=\"token operator\">:</span> <span class=\"token number\">36</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"pageNumbers\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"paperSize\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"a4\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>挑几个重要的说明一下</p>\n<ul>\n<li>title:文档名称</li>\n<li>root:根目录,因为默认的文档目录就在根目录下,我这里为了做隔离把文档分到了doc目录下,因此这里要做修改</li>\n<li>variables:这个是自定义的变量,我把它设成0,这样只要在文中写上<code>&#123;% if var %&#125;</code>,中间的文本就不会输出了,而我只要把这个变量的值改为1就能生成可以输出的.</li>\n<li>plugins:插件列表,内容大概看看就好,短横线开头表示该插件被关闭,这是为了防止插件之间的冲突</li>\n<li>pluginsConfig:插件配置</li>\n<li>pdf:gitbook的pdf输出配置</li>\n</ul>\n<h3 id=\"SUMMARY-md配置\"><a href=\"#SUMMARY-md配置\" class=\"headerlink\" title=\"SUMMARY.md配置\"></a><code>SUMMARY.md</code>配置</h3><p>SUMMARY文件应当位于doc目录下，它决定了文档的目录。一开始我采用的是手动编写的做法，然后越到后面越发现文件名与标题的对应变得困难，故改为了自动生成，一开始尝试了gitbook提供的自动生成插件，生成的SUMMARY跟个鬼一样。后面试了下gitbook-summary，这玩意好用多了，当然，还是有些美中不足的地方。</p>\n<p>安装后只需<code>book sm</code>即可自动生成SUMMARY文件。但是这个软件可能设计上和我的用法不一样，对于我这种文档目录位于doc的做法来说，它必须在doc目录下执行才能正常生成。因此合理的做法是</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> doc\nbook sm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>同时，它允许使用自己的<code>book.json</code>来修改一些配置，这个文件位于doc目录下，与根目录的<code>book.json</code>不同（不过我倒希望它能是同一个文件）</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Apollo2d-learning\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outputfile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SUMMARY.md\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"catalog\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"all\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ignores\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"unchanged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sortedBy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"disableTitleFormatting\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>还有一个问题就是，doc目录下必须有一个<code>README.md</code>。这个文件会被作为整个网页的入口，而如果不在SUMMARY中手动定义该文件的文件名，网页中会自动生成一个<code>introduction</code>作为入口。对于我们一堆中文标题，这个英文会比较突兀。这个问题的解决办法在下面。</p>\n<h3 id=\"渲染的一些问题\"><a href=\"#渲染的一些问题\" class=\"headerlink\" title=\"渲染的一些问题\"></a>渲染的一些问题</h3><p>代码块这方面，prism这个插件会对不同的语言进行语法高亮，而prism是对语言的定义有严格要求的，比如</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">```cpp ok\n```c++ no\n```javascript ok\n```js         no\n```bash  ok\n```shell no<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>怎么确定具体的名字呢？看prism的命名，比如cpp文件的prism渲染文件就是<code>prism-cpp.js</code>。所以搜一搜有没有<code>prism-你的语言.js</code>这个文件就行了。</p>\n<h2 id=\"gitlab配置\"><a href=\"#gitlab配置\" class=\"headerlink\" title=\"gitlab配置\"></a>gitlab配置</h2><h3 id=\"权限问题\"><a href=\"#权限问题\" class=\"headerlink\" title=\"权限问题\"></a>权限问题</h3><p>gitlab的权限规则可以用一句话说清：一个group的成员可以在subgroups中自动取得原来的权限，其他情况下都要手动分配权限。这个仓库位于<code>apollo-2d</code>这个顶级group的根目录下，拥有大组身份的同学都有完整的权限，而新来的同学都在另一个<code>material</code>的group中，它们以<code>developer</code>的身份被加入到文档所在的<code>project</code>中，因此可以正常提pr来修改文档内容。</p>\n<h3 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h3><p>多人协作其实是个小难点。多人协作的难点在于解决冲突问题，将SUMMARY改为自动生成也是解决这个问题的一部分，因为对文件的修改最后都要修改该文件。</p>\n<p>目前的操作应该是，从master分支clone，然后push时使用其他的分支名，然后再在gitlab仓库提交<code>pull request</code>，然后由管理员（就是我）来合并，如果有冲突，还要手动合并。</p>\n<h2 id=\"CI-x2F-CD配置\"><a href=\"#CI-x2F-CD配置\" class=\"headerlink\" title=\"CI&#x2F;CD配置\"></a>CI&#x2F;CD配置</h2><h3 id=\"gitlab-ci-yml配置\"><a href=\"#gitlab-ci-yml配置\" class=\"headerlink\" title=\".gitlab-ci.yml配置\"></a><code>.gitlab-ci.yml</code>配置</h3><p>因为一开始建项目的时候就选了gitbook模板，所以有现成的模板了。默认的gitlab ci一个月有2000分钟，而我们一次生成大概在两分钟左右，所以理论上可以随便deploy（</p>\n<p>不过为了减少更新次数，也为了解决上面生成SUMMARY不完美的问题，还是稍微做了些修改。修改的内容都在注释里了</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># requiring the environment of NodeJS 10</span>\n<span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">:</span><span class=\"token number\">10</span>\n\n<span class=\"token comment\"># add 'node_modules' to cache for speeding up builds</span>\n<span class=\"token key atrule\">cache</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> node_modules/ <span class=\"token comment\"># Node modules and dependencies</span>\n\n<span class=\"token key atrule\">before_script</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> npm install gitbook<span class=\"token punctuation\">-</span>cli <span class=\"token punctuation\">-</span>g <span class=\"token comment\"># install gitbook</span>\n  <span class=\"token punctuation\">-</span> npm install <span class=\"token punctuation\">-</span>g gitbook<span class=\"token punctuation\">-</span>summary <span class=\"token comment\"># 这一行是我自己加的，安装了上面提到的SUMMARY生成工具</span>\n  <span class=\"token punctuation\">-</span> gitbook fetch 3.2.3 <span class=\"token comment\"># fetch final stable version</span>\n  <span class=\"token punctuation\">-</span> gitbook install <span class=\"token comment\"># add any requested plugins in book.json</span>\n  <span class=\"token punctuation\">-</span> chmod a+x ./scripts/auto.sh <span class=\"token comment\"># 我在script里写了个脚本来处理SUMMARY不完美的工具</span>\n  <span class=\"token punctuation\">-</span> ./scripts/auto.sh\n\n<span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> test\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> gitbook build . public <span class=\"token comment\"># build to public path</span>\n  <span class=\"token key atrule\">only</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> branches <span class=\"token comment\"># this job will affect every branch except 'master'</span>\n  <span class=\"token key atrule\">except</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> master\n\n<span class=\"token comment\"># the 'pages' job will deploy and build your site to the 'public' path</span>\n<span class=\"token key atrule\">pages</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> deploy\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> gitbook build . public <span class=\"token comment\"># build to public path</span>\n  <span class=\"token key atrule\">artifacts</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> public\n    <span class=\"token key atrule\">expire_in</span><span class=\"token punctuation\">:</span> 1 week\n  <span class=\"token key atrule\">only</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">changes</span><span class=\"token punctuation\">:</span>\t<span class=\"token comment\"># 这里做了修改，原来是only master，我改为了如果文档的日志有所变化，则重新deploy</span>\n      <span class=\"token punctuation\">-</span> doc/附录3<span class=\"token punctuation\">-</span>log/*<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后是两个脚本</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># auto.sh</span>\n<span class=\"token builtin class-name\">cd</span> ./doc\nbook sm <span class=\"token comment\">#首先生成SUMMARY文件</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\n<span class=\"token function\">node</span> ./scripts/test.js <span class=\"token comment\"># 然后是要给README.md一个名字，不让它自动生成introduction</span>\n<span class=\"token comment\"># 一开始想到的是用sed来添加，然后发现这么做没用，可能是因为在容器里。然后我一看是个node的镜像，那就用nodejs来解决好了，故编写了个js文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//test.js</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// fs.appendFile 追加文件内容</span>\n<span class=\"token comment\">// 1, 参数1:表示要向那个文件追加内容,只一个文件的路径</span>\n<span class=\"token comment\">// 2, 参数2:表示要追加的内容</span>\n<span class=\"token comment\">// 3, 可选参数,表示追加文本内容的编码格式,如果省略,默认为utf-8</span>\n<span class=\"token comment\">// 4, 参数4: 表示追加完成之后的回调[有一个参数err,是判断是否追加成功]</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">appendFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./doc/SUMMARY.md\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"- [关于](README.md)\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"追加文件失败\"</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"追加成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 因为是抄下来的，所以注释就懒得删了，感谢原作者</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"ROS学习笔记（1）","description":"ROS学习笔记（1）","abbrlink":"e6d71455","date":"2022-01-20T01:55:13.000Z","_content":"# ROS的环境和基本概念\nros是一个基于linux的操作系统，它通过提供一套自己的工具，把linux变的像是另一套系统。ros也有众多发行版，我这里选择的是`melodic`。接下来会用`<distro>`来表示当前发行版\n\n通过`printenv | grep ROS`可以查看当前的ros环境。为了启动时就进入某个ros环境，需要在启动文件`.bashrc`中加入`source /opt/ros/<distro>/setup.bash`\n\n## Create ROS workspace\n\n有两种工具`catkin`和`rosbuild`，怎么选？官方这样说\n\n> These instructions are for ROS Groovy and later. For ROS Fuerte and earlier, select rosbuild.\n\n`ROS Groovy`是啥？<http://wiki.ros.org/groovy>，总之ubuntu12以上都算。\n\n```bash\nmkdir -p ~/catkin_ws/src\ncd ~/catkin_ws/\ncatkin_make\n# 如果一开始设置成了python3，那就要这样\ncatkin_make -DPYTHON_EXECUTABLE=/usr/bin/python3\n# 设置workspace环境\nsource devel/setup.bash\n# 看一眼设置好没有\necho $ROS_PACKAGE_PATH\n/home/youruser/catkin_ws/src:/opt/ros/kinetic/share\n```\n\n# ROS文件系统\n\n> 接下来几章都是ros专门的教程内容，如果安装时选择了`full-installation`，那下面的不用看，如果没有，请先安装教程\n>\n> ```bash\n> sudo apt-get install ros-<distro>-ros-tutorials\n> ```\n\n上一章提到，ros是通过一系列工具让linux看起来像另一个操作系统。这里的文件系统就是个很好的体现。\n\n## rospack\n\n```bash\nrospack find [package_name]\nrospack install [package_name]\n```\n\n相当于ros的包管理器\n\n## roscd\n\n```bash\nroscd <package-or-stack>/[/subdir]\nroscd log # 当某个ros program 跑起来的时候才有用\n```\n\nros版本的cd，ros可能是有另一套filesystem，不过还是基于linux的fs构建的，所以也算是一个方便的工具，毕竟package可能会被安装在各种地方。package的安装位置可以通过`echo $ROS_PACKAGE_PATH`查看。\n\n## rosls\n\nros版的ls，略了。\n\n## tab补全\n\n略了\n\n# Create ROS Package\n\n## 准备工作\n\n`catkin package`的必要条件\n\n- 一个`package.xml`文件\n- 一个`CMakeLists.txt`文件\n- 为每个package准备独立的文件夹\n\n像这样\n\n```bash\n workspace_folder/        -- WORKSPACE\n    src/                   -- SOURCE SPACE\n      CMakeLists.txt       -- 'Toplevel' CMake file, provided by catkin\n      package_1/\n       CMakeLists.txt     -- CMakeLists.txt file for package_1\n       package.xml        -- Package manifest for package_1\n     ...\n     package_n/\n       CMakeLists.txt     -- CMakeLists.txt file for package_n\n       package.xml        -- Package manifest for package_n\n```\n\n## 开始建立\n\n```bash\n# cd ~/catkin_ws/src\ncatkin_create_pkg beginner_tutorials std_msgs rospy roscpp\ncd ~/catkin_ws\ncatkin_make\n. ~/catkin_ws/devel/setup.bash # . 相当于source\n```\n\n以下为`catkin_create_pkg`的用法\n\n```bash\n# 格式\ncatkin_create_pkg <package_name> [depend1] [depend2] [depend3]\n```\n\n## 查看依赖\n\n### 查看直接依赖\n\n1. 通过rospack查看\n\n```bash\nrospack depends1 beginner_tutorials \n\troscpp\n\trospy\n\tstd_msgs\n```\n\n2. 通过xml文件查看\n\n```bash\nroscd beginner_tutorials\ncat package.xml\n```\n\n### 查看间接依赖\n\n```bash\nrospack depends1 rospy # 子依赖的直接依赖\nrospack depends beginner_tutorials # 查看包括嵌套的所有子依赖项\n```\n\n## 自定义package\n\n### 首先要修改xml文件\n\n```xml\n<!--首先是描述标签-->\n<description>The beginner_tutorials package</description>\n```\n\n```xml\n<!--然后是持有者信息标签-->\n<!-- One maintainer tag required, multiple allowed, one person per tag --> \n<!-- Example:  -->\n<!-- <maintainer email=\"jane.doe@example.com\">Jane Doe</maintainer> -->\n<maintainer email=\"user@todo.todo\">user</maintainer>\n```\n\n```xml\n<!--然后是license-->\n<!-- One license tag required, multiple allowed, one license per tag -->\n<!-- Commonly used license strings: -->\n<!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 -->\n<license>TODO</license>\n```\n\n```xml\n<!--然后是依赖标签-->\n<!-- The *_depend tags are used to specify dependencies -->\n<!-- Dependencies can be catkin packages or system dependencies -->\n<!-- Examples: -->\n<!-- Use build_depend for packages you need at compile time: -->\n<!--   <build_depend>genmsg</build_depend> -->\n<!-- Use buildtool_depend for build tool packages: -->\n<!--   <buildtool_depend>catkin</buildtool_depend> -->\n<!-- Use exec_depend for packages you need at runtime: -->\n<!--   <exec_depend>python-yaml</exec_depend> -->\n<!-- Use test_depend for packages you need only for testing: -->\n<!--   <test_depend>gtest</test_depend> -->\n<buildtool_depend>catkin</buildtool_depend>\n<build_depend>roscpp</build_depend>\n<build_depend>rospy</build_depend>\n<build_depend>std_msgs</build_depend>\n```\n\n```xml\n<!--对于希望在build和run的时候能用上的依赖，还要加上下面的-->\n<exec_depend>roscpp</exec_depend>\n<exec_depend>rospy</exec_depend>\n<exec_depend>std_msgs</exec_depend>\n```\n\n最后的结果\n\n```xml\n<?xml version=\"1.0\"?>\n<package format=\"2\">\n  <name>beginner_tutorials</name>\n  <version>0.1.0</version>\n  <description>The beginner_tutorials package</description>\n\n  <maintainer email=\"you@yourdomain.tld\">Your Name</maintainer>\n  <license>BSD</license>\n  <url type=\"website\">http://wiki.ros.org/beginner_tutorials</url>\n  <author email=\"you@yourdomain.tld\">Jane Doe</author>\n\n  <buildtool_depend>catkin</buildtool_depend>\n\n  <build_depend>roscpp</build_depend>\n  <build_depend>rospy</build_depend>\n  <build_depend>std_msgs</build_depend>\n\n  <exec_depend>roscpp</exec_depend>\n  <exec_depend>rospy</exec_depend>\n  <exec_depend>std_msgs</exec_depend>\n\n</package>\n```\n\n## 然后修改CMakeLists.txt\n\n教程没说，自己看吧。\n\n# Build Ros Package\n\n```bash\n# 常规的CMake\n# In a CMake project\n$ mkdir build\n$ cd build\n$ cmake ..\n$ make\n$ make install  # (optionally)\n# 现在的catkin_make\n# In a catkin workspace\n$ catkin_make --source my_src\n$ catkin_make install --source my_src  # (optionally)\n```\n\n# ROS Nodes\n\n## 理论\n\n- [Nodes](http://wiki.ros.org/Nodes): A node is an executable that uses ROS to communicate with other nodes.\n- [Messages](http://wiki.ros.org/Messages): ROS data type used when subscribing or publishing to a topic.\n- [Topics](http://wiki.ros.org/Topics): Nodes can *publish* messages to a topic as well as *subscribe* to a topic to receive messages.\n- [Master](http://wiki.ros.org/Master): Name service for ROS (i.e. helps nodes find each other)\n- [rosout](http://wiki.ros.org/rosout): ROS equivalent of stdout/stderr\n- [roscore](http://wiki.ros.org/roscore): Master + rosout + parameter server (parameter server will be introduced later)\n\n## Nodes\n\n> Nodes can publish or subscribe to a Topic. Nodes can also provide or use a Service.\n\n## rosnode\n\n```bash\n# run roscore first\nroscore\n# using rosnode\nrosnode list\n\t/rosout\nrosnode info /rosout\n```\n\n## rosrun\n\n```bash\n# rosrun [package_name] [node_name]\nrosrun turtlesim turtlesim_node\nrosrun turtlesim turtlesim_node __name:=my_turtle\n# 使用rosnode list 查看\nrosnode list\n\t/my_turtle\n\t/rosout\n# 使用rosnode ping 检查\nrosnode ping\n```\n\n# ROS Topics\n\n## 启动小海龟\n\n```bash\nroscore &\nrosrun turtlesim turtlesim_node &\ntorrun turtlesim turtle_teletop_key\n# new terminal\nrosrun rqt_graph rqt_graph\n# 打开rqt_graph工具，查看nodes和topics之间的通信方式（订阅关系）\n```\n\n## rostopic\n\n```bash\n$ rostopic -h\nrostopic bw     display bandwidth used by topic\nrostopic echo   print messages to screen\nrostopic hz     display publishing rate of topic    \nrostopic list   print information about active topics\nrostopic pub    publish data to topic\nrostopic type   print topic type\n```\n\n### rostopic echo\n\n```bash\n# rostopic echo [topic]\n# For ROS Hydro and later, this data is published on the /turtle1/cmd_vel topic.\nrostopic echo /turtle1/cmd_vel\n# For ROS Groovy and earlier, this data is published on the /turtle1/command_velocity topic.\n# 略了\n```\n\n此时在rqt刷新一下可以看到，rostopic也在获取信息\n\n### rostopic list\n\n```bash\nrostopic list -h\nUsage: rostopic list [/topic]\n\nOptions:\n  -h, --help            show this help message and exit\n  -b BAGFILE, --bag=BAGFILE\n                        list topics in .bag file\n  -v, --verbose         list full details about each topic\n  -p                    list only publishers\n  -s                    list only subscribers\n```\n\nverbose option\n\n```bash\nrostopic list -v\n```\n\n### rostopic type && rosmsg初探\n\n上面都是对node的查看，下面是对`ros message`的查看。\n\n```bash\n# rostopic type [topic]\n# 首先查看topic的类型\nrostopic type /turtle1/cmd_vel\n# 然后使用rosmsg查看msg的内容\nrosmsg show geometry_msgs/Twist\n```\n\n### rostopic pub\n\n手动发送信息\n\n```bash\n# rostopic pub [topic] [msg_type] [args]\nrostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'\n# 小海龟转圈\nrostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, -1.8]'\n```\n\n### rostopic hz\n\n> `rostopic hz` reports the rate at which data is published.\n\n```bash\n# rostopic hz [topic]\nrostopic hz /turtle1/pose\nrostopic type /turtle1/cmd_vel | rosmsg show\n```\n\n### rqt_plot\n\n```bash\nrosrun rqt_plot rqt_plot\n```\n\n对数据绘图\n","source":"_posts/Auto/ROS学习笔记（1）.md","raw":"---\ntitle: ROS学习笔记（1）\ntags:\n  - tag1\n  - tag2\ndescription: ROS学习笔记（1）\ncategories:\n  - Auto\nabbrlink: e6d71455\ndate: 2022-01-20 09:55:13\n---\n# ROS的环境和基本概念\nros是一个基于linux的操作系统，它通过提供一套自己的工具，把linux变的像是另一套系统。ros也有众多发行版，我这里选择的是`melodic`。接下来会用`<distro>`来表示当前发行版\n\n通过`printenv | grep ROS`可以查看当前的ros环境。为了启动时就进入某个ros环境，需要在启动文件`.bashrc`中加入`source /opt/ros/<distro>/setup.bash`\n\n## Create ROS workspace\n\n有两种工具`catkin`和`rosbuild`，怎么选？官方这样说\n\n> These instructions are for ROS Groovy and later. For ROS Fuerte and earlier, select rosbuild.\n\n`ROS Groovy`是啥？<http://wiki.ros.org/groovy>，总之ubuntu12以上都算。\n\n```bash\nmkdir -p ~/catkin_ws/src\ncd ~/catkin_ws/\ncatkin_make\n# 如果一开始设置成了python3，那就要这样\ncatkin_make -DPYTHON_EXECUTABLE=/usr/bin/python3\n# 设置workspace环境\nsource devel/setup.bash\n# 看一眼设置好没有\necho $ROS_PACKAGE_PATH\n/home/youruser/catkin_ws/src:/opt/ros/kinetic/share\n```\n\n# ROS文件系统\n\n> 接下来几章都是ros专门的教程内容，如果安装时选择了`full-installation`，那下面的不用看，如果没有，请先安装教程\n>\n> ```bash\n> sudo apt-get install ros-<distro>-ros-tutorials\n> ```\n\n上一章提到，ros是通过一系列工具让linux看起来像另一个操作系统。这里的文件系统就是个很好的体现。\n\n## rospack\n\n```bash\nrospack find [package_name]\nrospack install [package_name]\n```\n\n相当于ros的包管理器\n\n## roscd\n\n```bash\nroscd <package-or-stack>/[/subdir]\nroscd log # 当某个ros program 跑起来的时候才有用\n```\n\nros版本的cd，ros可能是有另一套filesystem，不过还是基于linux的fs构建的，所以也算是一个方便的工具，毕竟package可能会被安装在各种地方。package的安装位置可以通过`echo $ROS_PACKAGE_PATH`查看。\n\n## rosls\n\nros版的ls，略了。\n\n## tab补全\n\n略了\n\n# Create ROS Package\n\n## 准备工作\n\n`catkin package`的必要条件\n\n- 一个`package.xml`文件\n- 一个`CMakeLists.txt`文件\n- 为每个package准备独立的文件夹\n\n像这样\n\n```bash\n workspace_folder/        -- WORKSPACE\n    src/                   -- SOURCE SPACE\n      CMakeLists.txt       -- 'Toplevel' CMake file, provided by catkin\n      package_1/\n       CMakeLists.txt     -- CMakeLists.txt file for package_1\n       package.xml        -- Package manifest for package_1\n     ...\n     package_n/\n       CMakeLists.txt     -- CMakeLists.txt file for package_n\n       package.xml        -- Package manifest for package_n\n```\n\n## 开始建立\n\n```bash\n# cd ~/catkin_ws/src\ncatkin_create_pkg beginner_tutorials std_msgs rospy roscpp\ncd ~/catkin_ws\ncatkin_make\n. ~/catkin_ws/devel/setup.bash # . 相当于source\n```\n\n以下为`catkin_create_pkg`的用法\n\n```bash\n# 格式\ncatkin_create_pkg <package_name> [depend1] [depend2] [depend3]\n```\n\n## 查看依赖\n\n### 查看直接依赖\n\n1. 通过rospack查看\n\n```bash\nrospack depends1 beginner_tutorials \n\troscpp\n\trospy\n\tstd_msgs\n```\n\n2. 通过xml文件查看\n\n```bash\nroscd beginner_tutorials\ncat package.xml\n```\n\n### 查看间接依赖\n\n```bash\nrospack depends1 rospy # 子依赖的直接依赖\nrospack depends beginner_tutorials # 查看包括嵌套的所有子依赖项\n```\n\n## 自定义package\n\n### 首先要修改xml文件\n\n```xml\n<!--首先是描述标签-->\n<description>The beginner_tutorials package</description>\n```\n\n```xml\n<!--然后是持有者信息标签-->\n<!-- One maintainer tag required, multiple allowed, one person per tag --> \n<!-- Example:  -->\n<!-- <maintainer email=\"jane.doe@example.com\">Jane Doe</maintainer> -->\n<maintainer email=\"user@todo.todo\">user</maintainer>\n```\n\n```xml\n<!--然后是license-->\n<!-- One license tag required, multiple allowed, one license per tag -->\n<!-- Commonly used license strings: -->\n<!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 -->\n<license>TODO</license>\n```\n\n```xml\n<!--然后是依赖标签-->\n<!-- The *_depend tags are used to specify dependencies -->\n<!-- Dependencies can be catkin packages or system dependencies -->\n<!-- Examples: -->\n<!-- Use build_depend for packages you need at compile time: -->\n<!--   <build_depend>genmsg</build_depend> -->\n<!-- Use buildtool_depend for build tool packages: -->\n<!--   <buildtool_depend>catkin</buildtool_depend> -->\n<!-- Use exec_depend for packages you need at runtime: -->\n<!--   <exec_depend>python-yaml</exec_depend> -->\n<!-- Use test_depend for packages you need only for testing: -->\n<!--   <test_depend>gtest</test_depend> -->\n<buildtool_depend>catkin</buildtool_depend>\n<build_depend>roscpp</build_depend>\n<build_depend>rospy</build_depend>\n<build_depend>std_msgs</build_depend>\n```\n\n```xml\n<!--对于希望在build和run的时候能用上的依赖，还要加上下面的-->\n<exec_depend>roscpp</exec_depend>\n<exec_depend>rospy</exec_depend>\n<exec_depend>std_msgs</exec_depend>\n```\n\n最后的结果\n\n```xml\n<?xml version=\"1.0\"?>\n<package format=\"2\">\n  <name>beginner_tutorials</name>\n  <version>0.1.0</version>\n  <description>The beginner_tutorials package</description>\n\n  <maintainer email=\"you@yourdomain.tld\">Your Name</maintainer>\n  <license>BSD</license>\n  <url type=\"website\">http://wiki.ros.org/beginner_tutorials</url>\n  <author email=\"you@yourdomain.tld\">Jane Doe</author>\n\n  <buildtool_depend>catkin</buildtool_depend>\n\n  <build_depend>roscpp</build_depend>\n  <build_depend>rospy</build_depend>\n  <build_depend>std_msgs</build_depend>\n\n  <exec_depend>roscpp</exec_depend>\n  <exec_depend>rospy</exec_depend>\n  <exec_depend>std_msgs</exec_depend>\n\n</package>\n```\n\n## 然后修改CMakeLists.txt\n\n教程没说，自己看吧。\n\n# Build Ros Package\n\n```bash\n# 常规的CMake\n# In a CMake project\n$ mkdir build\n$ cd build\n$ cmake ..\n$ make\n$ make install  # (optionally)\n# 现在的catkin_make\n# In a catkin workspace\n$ catkin_make --source my_src\n$ catkin_make install --source my_src  # (optionally)\n```\n\n# ROS Nodes\n\n## 理论\n\n- [Nodes](http://wiki.ros.org/Nodes): A node is an executable that uses ROS to communicate with other nodes.\n- [Messages](http://wiki.ros.org/Messages): ROS data type used when subscribing or publishing to a topic.\n- [Topics](http://wiki.ros.org/Topics): Nodes can *publish* messages to a topic as well as *subscribe* to a topic to receive messages.\n- [Master](http://wiki.ros.org/Master): Name service for ROS (i.e. helps nodes find each other)\n- [rosout](http://wiki.ros.org/rosout): ROS equivalent of stdout/stderr\n- [roscore](http://wiki.ros.org/roscore): Master + rosout + parameter server (parameter server will be introduced later)\n\n## Nodes\n\n> Nodes can publish or subscribe to a Topic. Nodes can also provide or use a Service.\n\n## rosnode\n\n```bash\n# run roscore first\nroscore\n# using rosnode\nrosnode list\n\t/rosout\nrosnode info /rosout\n```\n\n## rosrun\n\n```bash\n# rosrun [package_name] [node_name]\nrosrun turtlesim turtlesim_node\nrosrun turtlesim turtlesim_node __name:=my_turtle\n# 使用rosnode list 查看\nrosnode list\n\t/my_turtle\n\t/rosout\n# 使用rosnode ping 检查\nrosnode ping\n```\n\n# ROS Topics\n\n## 启动小海龟\n\n```bash\nroscore &\nrosrun turtlesim turtlesim_node &\ntorrun turtlesim turtle_teletop_key\n# new terminal\nrosrun rqt_graph rqt_graph\n# 打开rqt_graph工具，查看nodes和topics之间的通信方式（订阅关系）\n```\n\n## rostopic\n\n```bash\n$ rostopic -h\nrostopic bw     display bandwidth used by topic\nrostopic echo   print messages to screen\nrostopic hz     display publishing rate of topic    \nrostopic list   print information about active topics\nrostopic pub    publish data to topic\nrostopic type   print topic type\n```\n\n### rostopic echo\n\n```bash\n# rostopic echo [topic]\n# For ROS Hydro and later, this data is published on the /turtle1/cmd_vel topic.\nrostopic echo /turtle1/cmd_vel\n# For ROS Groovy and earlier, this data is published on the /turtle1/command_velocity topic.\n# 略了\n```\n\n此时在rqt刷新一下可以看到，rostopic也在获取信息\n\n### rostopic list\n\n```bash\nrostopic list -h\nUsage: rostopic list [/topic]\n\nOptions:\n  -h, --help            show this help message and exit\n  -b BAGFILE, --bag=BAGFILE\n                        list topics in .bag file\n  -v, --verbose         list full details about each topic\n  -p                    list only publishers\n  -s                    list only subscribers\n```\n\nverbose option\n\n```bash\nrostopic list -v\n```\n\n### rostopic type && rosmsg初探\n\n上面都是对node的查看，下面是对`ros message`的查看。\n\n```bash\n# rostopic type [topic]\n# 首先查看topic的类型\nrostopic type /turtle1/cmd_vel\n# 然后使用rosmsg查看msg的内容\nrosmsg show geometry_msgs/Twist\n```\n\n### rostopic pub\n\n手动发送信息\n\n```bash\n# rostopic pub [topic] [msg_type] [args]\nrostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'\n# 小海龟转圈\nrostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, -1.8]'\n```\n\n### rostopic hz\n\n> `rostopic hz` reports the rate at which data is published.\n\n```bash\n# rostopic hz [topic]\nrostopic hz /turtle1/pose\nrostopic type /turtle1/cmd_vel | rosmsg show\n```\n\n### rqt_plot\n\n```bash\nrosrun rqt_plot rqt_plot\n```\n\n对数据绘图\n","slug":"ROS学习笔记（1）","published":1,"category":"Auto","updated":"2022-02-11T05:17:56.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irwq00058wul9c5w0e64","content":"<h1 id=\"ROS的环境和基本概念\"><a href=\"#ROS的环境和基本概念\" class=\"headerlink\" title=\"ROS的环境和基本概念\"></a>ROS的环境和基本概念</h1><p>ros是一个基于linux的操作系统，它通过提供一套自己的工具，把linux变的像是另一套系统。ros也有众多发行版，我这里选择的是<code>melodic</code>。接下来会用<code>&lt;distro&gt;</code>来表示当前发行版</p>\n<p>通过<code>printenv | grep ROS</code>可以查看当前的ros环境。为了启动时就进入某个ros环境，需要在启动文件<code>.bashrc</code>中加入<code>source /opt/ros/&lt;distro&gt;/setup.bash</code></p>\n<h2 id=\"Create-ROS-workspace\"><a href=\"#Create-ROS-workspace\" class=\"headerlink\" title=\"Create ROS workspace\"></a>Create ROS workspace</h2><p>有两种工具<code>catkin</code>和<code>rosbuild</code>，怎么选？官方这样说</p>\n<blockquote>\n<p>These instructions are for ROS Groovy and later. For ROS Fuerte and earlier, select rosbuild.</p>\n</blockquote>\n<p><code>ROS Groovy</code>是啥？<a href=\"http://wiki.ros.org/groovy\">http://wiki.ros.org/groovy</a>，总之ubuntu12以上都算。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p ~/catkin_ws/src\n<span class=\"token builtin class-name\">cd</span> ~/catkin_ws/\ncatkin_make\n<span class=\"token comment\"># 如果一开始设置成了python3，那就要这样</span>\ncatkin_make -DPYTHON_EXECUTABLE<span class=\"token operator\">=</span>/usr/bin/python3\n<span class=\"token comment\"># 设置workspace环境</span>\n<span class=\"token builtin class-name\">source</span> devel/setup.bash\n<span class=\"token comment\"># 看一眼设置好没有</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$ROS_PACKAGE_PATH</span>\n/home/youruser/catkin_ws/src:/opt/ros/kinetic/share<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"ROS文件系统\"><a href=\"#ROS文件系统\" class=\"headerlink\" title=\"ROS文件系统\"></a>ROS文件系统</h1><blockquote>\n<p>接下来几章都是ros专门的教程内容，如果安装时选择了<code>full-installation</code>，那下面的不用看，如果没有，请先安装教程</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> ros-<span class=\"token operator\">&lt;</span>distro<span class=\"token operator\">></span>-ros-tutorials<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上一章提到，ros是通过一系列工具让linux看起来像另一个操作系统。这里的文件系统就是个很好的体现。</p>\n<h2 id=\"rospack\"><a href=\"#rospack\" class=\"headerlink\" title=\"rospack\"></a>rospack</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rospack <span class=\"token function\">find</span> <span class=\"token punctuation\">[</span>package_name<span class=\"token punctuation\">]</span>\nrospack <span class=\"token function\">install</span> <span class=\"token punctuation\">[</span>package_name<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>相当于ros的包管理器</p>\n<h2 id=\"roscd\"><a href=\"#roscd\" class=\"headerlink\" title=\"roscd\"></a>roscd</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">roscd <span class=\"token operator\">&lt;</span>package-or-stack<span class=\"token operator\">></span>/<span class=\"token punctuation\">[</span>/subdir<span class=\"token punctuation\">]</span>\nroscd log <span class=\"token comment\"># 当某个ros program 跑起来的时候才有用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>ros版本的cd，ros可能是有另一套filesystem，不过还是基于linux的fs构建的，所以也算是一个方便的工具，毕竟package可能会被安装在各种地方。package的安装位置可以通过<code>echo $ROS_PACKAGE_PATH</code>查看。</p>\n<h2 id=\"rosls\"><a href=\"#rosls\" class=\"headerlink\" title=\"rosls\"></a>rosls</h2><p>ros版的ls，略了。</p>\n<h2 id=\"tab补全\"><a href=\"#tab补全\" class=\"headerlink\" title=\"tab补全\"></a>tab补全</h2><p>略了</p>\n<h1 id=\"Create-ROS-Package\"><a href=\"#Create-ROS-Package\" class=\"headerlink\" title=\"Create ROS Package\"></a>Create ROS Package</h1><h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p><code>catkin package</code>的必要条件</p>\n<ul>\n<li>一个<code>package.xml</code>文件</li>\n<li>一个<code>CMakeLists.txt</code>文件</li>\n<li>为每个package准备独立的文件夹</li>\n</ul>\n<p>像这样</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">workspace_folder/        -- WORKSPACE\n   src/                   -- SOURCE SPACE\n     CMakeLists.txt       -- <span class=\"token string\">'Toplevel'</span> CMake file, provided by catkin\n     package_1/\n      CMakeLists.txt     -- CMakeLists.txt <span class=\"token function\">file</span> <span class=\"token keyword\">for</span> package_1\n      package.xml        -- Package manifest <span class=\"token keyword\">for</span> package_1\n    <span class=\"token punctuation\">..</span>.\n    package_n/\n      CMakeLists.txt     -- CMakeLists.txt <span class=\"token function\">file</span> <span class=\"token keyword\">for</span> package_n\n      package.xml        -- Package manifest <span class=\"token keyword\">for</span> package_n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"开始建立\"><a href=\"#开始建立\" class=\"headerlink\" title=\"开始建立\"></a>开始建立</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># cd ~/catkin_ws/src</span>\ncatkin_create_pkg beginner_tutorials std_msgs rospy roscpp\n<span class=\"token builtin class-name\">cd</span> ~/catkin_ws\ncatkin_make\n<span class=\"token builtin class-name\">.</span> ~/catkin_ws/devel/setup.bash <span class=\"token comment\"># . 相当于source</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以下为<code>catkin_create_pkg</code>的用法</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 格式</span>\ncatkin_create_pkg <span class=\"token operator\">&lt;</span>package_name<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>depend1<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>depend2<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>depend3<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"查看依赖\"><a href=\"#查看依赖\" class=\"headerlink\" title=\"查看依赖\"></a>查看依赖</h2><h3 id=\"查看直接依赖\"><a href=\"#查看直接依赖\" class=\"headerlink\" title=\"查看直接依赖\"></a>查看直接依赖</h3><ol>\n<li>通过rospack查看</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rospack depends1 beginner_tutorials \n\troscpp\n\trospy\n\tstd_msgs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>通过xml文件查看</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">roscd beginner_tutorials\n<span class=\"token function\">cat</span> package.xml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"查看间接依赖\"><a href=\"#查看间接依赖\" class=\"headerlink\" title=\"查看间接依赖\"></a>查看间接依赖</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rospack depends1 rospy <span class=\"token comment\"># 子依赖的直接依赖</span>\nrospack depends beginner_tutorials <span class=\"token comment\"># 查看包括嵌套的所有子依赖项</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"自定义package\"><a href=\"#自定义package\" class=\"headerlink\" title=\"自定义package\"></a>自定义package</h2><h3 id=\"首先要修改xml文件\"><a href=\"#首先要修改xml文件\" class=\"headerlink\" title=\"首先要修改xml文件\"></a>首先要修改xml文件</h3><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--首先是描述标签--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>The beginner_tutorials package<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--然后是持有者信息标签--></span>\n<span class=\"token comment\">&lt;!-- One maintainer tag required, multiple allowed, one person per tag --></span> \n<span class=\"token comment\">&lt;!-- Example:  --></span>\n<span class=\"token comment\">&lt;!-- &lt;maintainer email=\"jane.doe@example.com\">Jane Doe&lt;/maintainer> --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maintainer</span> <span class=\"token attr-name\">email</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user@todo.todo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>user<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maintainer</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--然后是license--></span>\n<span class=\"token comment\">&lt;!-- One license tag required, multiple allowed, one license per tag --></span>\n<span class=\"token comment\">&lt;!-- Commonly used license strings: --></span>\n<span class=\"token comment\">&lt;!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>license</span><span class=\"token punctuation\">></span></span>TODO<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>license</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--然后是依赖标签--></span>\n<span class=\"token comment\">&lt;!-- The *_depend tags are used to specify dependencies --></span>\n<span class=\"token comment\">&lt;!-- Dependencies can be catkin packages or system dependencies --></span>\n<span class=\"token comment\">&lt;!-- Examples: --></span>\n<span class=\"token comment\">&lt;!-- Use build_depend for packages you need at compile time: --></span>\n<span class=\"token comment\">&lt;!--   &lt;build_depend>genmsg&lt;/build_depend> --></span>\n<span class=\"token comment\">&lt;!-- Use buildtool_depend for build tool packages: --></span>\n<span class=\"token comment\">&lt;!--   &lt;buildtool_depend>catkin&lt;/buildtool_depend> --></span>\n<span class=\"token comment\">&lt;!-- Use exec_depend for packages you need at runtime: --></span>\n<span class=\"token comment\">&lt;!--   &lt;exec_depend>python-yaml&lt;/exec_depend> --></span>\n<span class=\"token comment\">&lt;!-- Use test_depend for packages you need only for testing: --></span>\n<span class=\"token comment\">&lt;!--   &lt;test_depend>gtest&lt;/test_depend> --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>buildtool_depend</span><span class=\"token punctuation\">></span></span>catkin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>buildtool_depend</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build_depend</span><span class=\"token punctuation\">></span></span>roscpp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build_depend</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build_depend</span><span class=\"token punctuation\">></span></span>rospy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build_depend</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build_depend</span><span class=\"token punctuation\">></span></span>std_msgs<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build_depend</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--对于希望在build和run的时候能用上的依赖，还要加上下面的--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exec_depend</span><span class=\"token punctuation\">></span></span>roscpp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exec_depend</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exec_depend</span><span class=\"token punctuation\">></span></span>rospy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exec_depend</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exec_depend</span><span class=\"token punctuation\">></span></span>std_msgs<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exec_depend</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>最后的结果</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">format</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>beginner_tutorials<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>The beginner_tutorials package<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maintainer</span> <span class=\"token attr-name\">email</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>you@yourdomain.tld<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Your Name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maintainer</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>license</span><span class=\"token punctuation\">></span></span>BSD<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>license</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>website<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>http://wiki.ros.org/beginner_tutorials<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>author</span> <span class=\"token attr-name\">email</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>you@yourdomain.tld<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Jane Doe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>author</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>buildtool_depend</span><span class=\"token punctuation\">></span></span>catkin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>buildtool_depend</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build_depend</span><span class=\"token punctuation\">></span></span>roscpp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build_depend</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build_depend</span><span class=\"token punctuation\">></span></span>rospy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build_depend</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build_depend</span><span class=\"token punctuation\">></span></span>std_msgs<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build_depend</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exec_depend</span><span class=\"token punctuation\">></span></span>roscpp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exec_depend</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exec_depend</span><span class=\"token punctuation\">></span></span>rospy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exec_depend</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exec_depend</span><span class=\"token punctuation\">></span></span>std_msgs<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exec_depend</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>package</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"然后修改CMakeLists-txt\"><a href=\"#然后修改CMakeLists-txt\" class=\"headerlink\" title=\"然后修改CMakeLists.txt\"></a>然后修改CMakeLists.txt</h2><p>教程没说，自己看吧。</p>\n<h1 id=\"Build-Ros-Package\"><a href=\"#Build-Ros-Package\" class=\"headerlink\" title=\"Build Ros Package\"></a>Build Ros Package</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 常规的CMake</span>\n<span class=\"token comment\"># In a CMake project</span>\n$ <span class=\"token function\">mkdir</span> build\n$ <span class=\"token builtin class-name\">cd</span> build\n$ cmake <span class=\"token punctuation\">..</span>\n$ <span class=\"token function\">make</span>\n$ <span class=\"token function\">make</span> <span class=\"token function\">install</span>  <span class=\"token comment\"># (optionally)</span>\n<span class=\"token comment\"># 现在的catkin_make</span>\n<span class=\"token comment\"># In a catkin workspace</span>\n$ catkin_make --source my_src\n$ catkin_make <span class=\"token function\">install</span> --source my_src  <span class=\"token comment\"># (optionally)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"ROS-Nodes\"><a href=\"#ROS-Nodes\" class=\"headerlink\" title=\"ROS Nodes\"></a>ROS Nodes</h1><h2 id=\"理论\"><a href=\"#理论\" class=\"headerlink\" title=\"理论\"></a>理论</h2><ul>\n<li><a href=\"http://wiki.ros.org/Nodes\">Nodes</a>: A node is an executable that uses ROS to communicate with other nodes.</li>\n<li><a href=\"http://wiki.ros.org/Messages\">Messages</a>: ROS data type used when subscribing or publishing to a topic.</li>\n<li><a href=\"http://wiki.ros.org/Topics\">Topics</a>: Nodes can <em>publish</em> messages to a topic as well as <em>subscribe</em> to a topic to receive messages.</li>\n<li><a href=\"http://wiki.ros.org/Master\">Master</a>: Name service for ROS (i.e. helps nodes find each other)</li>\n<li><a href=\"http://wiki.ros.org/rosout\">rosout</a>: ROS equivalent of stdout&#x2F;stderr</li>\n<li><a href=\"http://wiki.ros.org/roscore\">roscore</a>: Master + rosout + parameter server (parameter server will be introduced later)</li>\n</ul>\n<h2 id=\"Nodes\"><a href=\"#Nodes\" class=\"headerlink\" title=\"Nodes\"></a>Nodes</h2><blockquote>\n<p>Nodes can publish or subscribe to a Topic. Nodes can also provide or use a Service.</p>\n</blockquote>\n<h2 id=\"rosnode\"><a href=\"#rosnode\" class=\"headerlink\" title=\"rosnode\"></a>rosnode</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># run roscore first</span>\nroscore\n<span class=\"token comment\"># using rosnode</span>\nrosnode list\n\t/rosout\nrosnode info /rosout<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"rosrun\"><a href=\"#rosrun\" class=\"headerlink\" title=\"rosrun\"></a>rosrun</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># rosrun [package_name] [node_name]</span>\nrosrun turtlesim turtlesim_node\nrosrun turtlesim turtlesim_node __name:<span class=\"token operator\">=</span>my_turtle\n<span class=\"token comment\"># 使用rosnode list 查看</span>\nrosnode list\n\t/my_turtle\n\t/rosout\n<span class=\"token comment\"># 使用rosnode ping 检查</span>\nrosnode <span class=\"token function\">ping</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"ROS-Topics\"><a href=\"#ROS-Topics\" class=\"headerlink\" title=\"ROS Topics\"></a>ROS Topics</h1><h2 id=\"启动小海龟\"><a href=\"#启动小海龟\" class=\"headerlink\" title=\"启动小海龟\"></a>启动小海龟</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">roscore <span class=\"token operator\">&amp;</span>\nrosrun turtlesim turtlesim_node <span class=\"token operator\">&amp;</span>\ntorrun turtlesim turtle_teletop_key\n<span class=\"token comment\"># new terminal</span>\nrosrun rqt_graph rqt_graph\n<span class=\"token comment\"># 打开rqt_graph工具，查看nodes和topics之间的通信方式（订阅关系）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"rostopic\"><a href=\"#rostopic\" class=\"headerlink\" title=\"rostopic\"></a>rostopic</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ rostopic -h\nrostopic bw     display bandwidth used by topic\nrostopic <span class=\"token builtin class-name\">echo</span>   print messages to <span class=\"token function\">screen</span>\nrostopic hz     display publishing rate of topic    \nrostopic list   print information about active topics\nrostopic pub    publish data to topic\nrostopic <span class=\"token builtin class-name\">type</span>   print topic <span class=\"token builtin class-name\">type</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"rostopic-echo\"><a href=\"#rostopic-echo\" class=\"headerlink\" title=\"rostopic echo\"></a>rostopic echo</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># rostopic echo [topic]</span>\n<span class=\"token comment\"># For ROS Hydro and later, this data is published on the /turtle1/cmd_vel topic.</span>\nrostopic <span class=\"token builtin class-name\">echo</span> /turtle1/cmd_vel\n<span class=\"token comment\"># For ROS Groovy and earlier, this data is published on the /turtle1/command_velocity topic.</span>\n<span class=\"token comment\"># 略了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此时在rqt刷新一下可以看到，rostopic也在获取信息</p>\n<h3 id=\"rostopic-list\"><a href=\"#rostopic-list\" class=\"headerlink\" title=\"rostopic list\"></a>rostopic list</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rostopic list -h\nUsage: rostopic list <span class=\"token punctuation\">[</span>/topic<span class=\"token punctuation\">]</span>\n\nOptions:\n  -h, --help            show this <span class=\"token builtin class-name\">help</span> message and <span class=\"token builtin class-name\">exit</span>\n  -b BAGFILE, --bag<span class=\"token operator\">=</span>BAGFILE\n                        list topics <span class=\"token keyword\">in</span> .bag <span class=\"token function\">file</span>\n  -v, --verbose         list full details about each topic\n  -p                    list only publishers\n  -s                    list only subscribers<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>verbose option</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rostopic list -v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"rostopic-type-amp-amp-rosmsg初探\"><a href=\"#rostopic-type-amp-amp-rosmsg初探\" class=\"headerlink\" title=\"rostopic type &amp;&amp; rosmsg初探\"></a>rostopic type &amp;&amp; rosmsg初探</h3><p>上面都是对node的查看，下面是对<code>ros message</code>的查看。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># rostopic type [topic]</span>\n<span class=\"token comment\"># 首先查看topic的类型</span>\nrostopic <span class=\"token builtin class-name\">type</span> /turtle1/cmd_vel\n<span class=\"token comment\"># 然后使用rosmsg查看msg的内容</span>\nrosmsg show geometry_msgs/Twist<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"rostopic-pub\"><a href=\"#rostopic-pub\" class=\"headerlink\" title=\"rostopic pub\"></a>rostopic pub</h3><p>手动发送信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># rostopic pub [topic] [msg_type] [args]</span>\nrostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- <span class=\"token string\">'[2.0, 0.0, 0.0]'</span> <span class=\"token string\">'[0.0, 0.0, 1.8]'</span>\n<span class=\"token comment\"># 小海龟转圈</span>\nrostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r <span class=\"token number\">1</span> -- <span class=\"token string\">'[2.0, 0.0, 0.0]'</span> <span class=\"token string\">'[0.0, 0.0, -1.8]'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"rostopic-hz\"><a href=\"#rostopic-hz\" class=\"headerlink\" title=\"rostopic hz\"></a>rostopic hz</h3><blockquote>\n<p><code>rostopic hz</code> reports the rate at which data is published.</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># rostopic hz [topic]</span>\nrostopic hz /turtle1/pose\nrostopic <span class=\"token builtin class-name\">type</span> /turtle1/cmd_vel <span class=\"token operator\">|</span> rosmsg show<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"rqt-plot\"><a href=\"#rqt-plot\" class=\"headerlink\" title=\"rqt_plot\"></a>rqt_plot</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rosrun rqt_plot rqt_plot<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>对数据绘图</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/bingguo2.jpg","excerpt":"","more":"<h1 id=\"ROS的环境和基本概念\"><a href=\"#ROS的环境和基本概念\" class=\"headerlink\" title=\"ROS的环境和基本概念\"></a>ROS的环境和基本概念</h1><p>ros是一个基于linux的操作系统，它通过提供一套自己的工具，把linux变的像是另一套系统。ros也有众多发行版，我这里选择的是<code>melodic</code>。接下来会用<code>&lt;distro&gt;</code>来表示当前发行版</p>\n<p>通过<code>printenv | grep ROS</code>可以查看当前的ros环境。为了启动时就进入某个ros环境，需要在启动文件<code>.bashrc</code>中加入<code>source /opt/ros/&lt;distro&gt;/setup.bash</code></p>\n<h2 id=\"Create-ROS-workspace\"><a href=\"#Create-ROS-workspace\" class=\"headerlink\" title=\"Create ROS workspace\"></a>Create ROS workspace</h2><p>有两种工具<code>catkin</code>和<code>rosbuild</code>，怎么选？官方这样说</p>\n<blockquote>\n<p>These instructions are for ROS Groovy and later. For ROS Fuerte and earlier, select rosbuild.</p>\n</blockquote>\n<p><code>ROS Groovy</code>是啥？<a href=\"http://wiki.ros.org/groovy\">http://wiki.ros.org/groovy</a>，总之ubuntu12以上都算。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p ~/catkin_ws/src\n<span class=\"token builtin class-name\">cd</span> ~/catkin_ws/\ncatkin_make\n<span class=\"token comment\"># 如果一开始设置成了python3，那就要这样</span>\ncatkin_make -DPYTHON_EXECUTABLE<span class=\"token operator\">=</span>/usr/bin/python3\n<span class=\"token comment\"># 设置workspace环境</span>\n<span class=\"token builtin class-name\">source</span> devel/setup.bash\n<span class=\"token comment\"># 看一眼设置好没有</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$ROS_PACKAGE_PATH</span>\n/home/youruser/catkin_ws/src:/opt/ros/kinetic/share<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"ROS文件系统\"><a href=\"#ROS文件系统\" class=\"headerlink\" title=\"ROS文件系统\"></a>ROS文件系统</h1><blockquote>\n<p>接下来几章都是ros专门的教程内容，如果安装时选择了<code>full-installation</code>，那下面的不用看，如果没有，请先安装教程</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> ros-<span class=\"token operator\">&lt;</span>distro<span class=\"token operator\">></span>-ros-tutorials<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<p>上一章提到，ros是通过一系列工具让linux看起来像另一个操作系统。这里的文件系统就是个很好的体现。</p>\n<h2 id=\"rospack\"><a href=\"#rospack\" class=\"headerlink\" title=\"rospack\"></a>rospack</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rospack <span class=\"token function\">find</span> <span class=\"token punctuation\">[</span>package_name<span class=\"token punctuation\">]</span>\nrospack <span class=\"token function\">install</span> <span class=\"token punctuation\">[</span>package_name<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>相当于ros的包管理器</p>\n<h2 id=\"roscd\"><a href=\"#roscd\" class=\"headerlink\" title=\"roscd\"></a>roscd</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">roscd <span class=\"token operator\">&lt;</span>package-or-stack<span class=\"token operator\">></span>/<span class=\"token punctuation\">[</span>/subdir<span class=\"token punctuation\">]</span>\nroscd log <span class=\"token comment\"># 当某个ros program 跑起来的时候才有用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>ros版本的cd，ros可能是有另一套filesystem，不过还是基于linux的fs构建的，所以也算是一个方便的工具，毕竟package可能会被安装在各种地方。package的安装位置可以通过<code>echo $ROS_PACKAGE_PATH</code>查看。</p>\n<h2 id=\"rosls\"><a href=\"#rosls\" class=\"headerlink\" title=\"rosls\"></a>rosls</h2><p>ros版的ls，略了。</p>\n<h2 id=\"tab补全\"><a href=\"#tab补全\" class=\"headerlink\" title=\"tab补全\"></a>tab补全</h2><p>略了</p>\n<h1 id=\"Create-ROS-Package\"><a href=\"#Create-ROS-Package\" class=\"headerlink\" title=\"Create ROS Package\"></a>Create ROS Package</h1><h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p><code>catkin package</code>的必要条件</p>\n<ul>\n<li>一个<code>package.xml</code>文件</li>\n<li>一个<code>CMakeLists.txt</code>文件</li>\n<li>为每个package准备独立的文件夹</li>\n</ul>\n<p>像这样</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">workspace_folder/        -- WORKSPACE\n   src/                   -- SOURCE SPACE\n     CMakeLists.txt       -- <span class=\"token string\">'Toplevel'</span> CMake file, provided by catkin\n     package_1/\n      CMakeLists.txt     -- CMakeLists.txt <span class=\"token function\">file</span> <span class=\"token keyword\">for</span> package_1\n      package.xml        -- Package manifest <span class=\"token keyword\">for</span> package_1\n    <span class=\"token punctuation\">..</span>.\n    package_n/\n      CMakeLists.txt     -- CMakeLists.txt <span class=\"token function\">file</span> <span class=\"token keyword\">for</span> package_n\n      package.xml        -- Package manifest <span class=\"token keyword\">for</span> package_n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"开始建立\"><a href=\"#开始建立\" class=\"headerlink\" title=\"开始建立\"></a>开始建立</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># cd ~/catkin_ws/src</span>\ncatkin_create_pkg beginner_tutorials std_msgs rospy roscpp\n<span class=\"token builtin class-name\">cd</span> ~/catkin_ws\ncatkin_make\n<span class=\"token builtin class-name\">.</span> ~/catkin_ws/devel/setup.bash <span class=\"token comment\"># . 相当于source</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以下为<code>catkin_create_pkg</code>的用法</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 格式</span>\ncatkin_create_pkg <span class=\"token operator\">&lt;</span>package_name<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>depend1<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>depend2<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>depend3<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"查看依赖\"><a href=\"#查看依赖\" class=\"headerlink\" title=\"查看依赖\"></a>查看依赖</h2><h3 id=\"查看直接依赖\"><a href=\"#查看直接依赖\" class=\"headerlink\" title=\"查看直接依赖\"></a>查看直接依赖</h3><ol>\n<li>通过rospack查看</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rospack depends1 beginner_tutorials \n\troscpp\n\trospy\n\tstd_msgs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>通过xml文件查看</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">roscd beginner_tutorials\n<span class=\"token function\">cat</span> package.xml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"查看间接依赖\"><a href=\"#查看间接依赖\" class=\"headerlink\" title=\"查看间接依赖\"></a>查看间接依赖</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rospack depends1 rospy <span class=\"token comment\"># 子依赖的直接依赖</span>\nrospack depends beginner_tutorials <span class=\"token comment\"># 查看包括嵌套的所有子依赖项</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"自定义package\"><a href=\"#自定义package\" class=\"headerlink\" title=\"自定义package\"></a>自定义package</h2><h3 id=\"首先要修改xml文件\"><a href=\"#首先要修改xml文件\" class=\"headerlink\" title=\"首先要修改xml文件\"></a>首先要修改xml文件</h3><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--首先是描述标签--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>The beginner_tutorials package<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--然后是持有者信息标签--></span>\n<span class=\"token comment\">&lt;!-- One maintainer tag required, multiple allowed, one person per tag --></span> \n<span class=\"token comment\">&lt;!-- Example:  --></span>\n<span class=\"token comment\">&lt;!-- &lt;maintainer email=\"jane.doe@example.com\">Jane Doe&lt;/maintainer> --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maintainer</span> <span class=\"token attr-name\">email</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user@todo.todo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>user<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maintainer</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--然后是license--></span>\n<span class=\"token comment\">&lt;!-- One license tag required, multiple allowed, one license per tag --></span>\n<span class=\"token comment\">&lt;!-- Commonly used license strings: --></span>\n<span class=\"token comment\">&lt;!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>license</span><span class=\"token punctuation\">></span></span>TODO<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>license</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--然后是依赖标签--></span>\n<span class=\"token comment\">&lt;!-- The *_depend tags are used to specify dependencies --></span>\n<span class=\"token comment\">&lt;!-- Dependencies can be catkin packages or system dependencies --></span>\n<span class=\"token comment\">&lt;!-- Examples: --></span>\n<span class=\"token comment\">&lt;!-- Use build_depend for packages you need at compile time: --></span>\n<span class=\"token comment\">&lt;!--   &lt;build_depend>genmsg&lt;/build_depend> --></span>\n<span class=\"token comment\">&lt;!-- Use buildtool_depend for build tool packages: --></span>\n<span class=\"token comment\">&lt;!--   &lt;buildtool_depend>catkin&lt;/buildtool_depend> --></span>\n<span class=\"token comment\">&lt;!-- Use exec_depend for packages you need at runtime: --></span>\n<span class=\"token comment\">&lt;!--   &lt;exec_depend>python-yaml&lt;/exec_depend> --></span>\n<span class=\"token comment\">&lt;!-- Use test_depend for packages you need only for testing: --></span>\n<span class=\"token comment\">&lt;!--   &lt;test_depend>gtest&lt;/test_depend> --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>buildtool_depend</span><span class=\"token punctuation\">></span></span>catkin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>buildtool_depend</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build_depend</span><span class=\"token punctuation\">></span></span>roscpp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build_depend</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build_depend</span><span class=\"token punctuation\">></span></span>rospy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build_depend</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build_depend</span><span class=\"token punctuation\">></span></span>std_msgs<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build_depend</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--对于希望在build和run的时候能用上的依赖，还要加上下面的--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exec_depend</span><span class=\"token punctuation\">></span></span>roscpp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exec_depend</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exec_depend</span><span class=\"token punctuation\">></span></span>rospy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exec_depend</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exec_depend</span><span class=\"token punctuation\">></span></span>std_msgs<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exec_depend</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>最后的结果</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">format</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>beginner_tutorials<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>The beginner_tutorials package<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maintainer</span> <span class=\"token attr-name\">email</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>you@yourdomain.tld<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Your Name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maintainer</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>license</span><span class=\"token punctuation\">></span></span>BSD<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>license</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>website<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>http://wiki.ros.org/beginner_tutorials<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>author</span> <span class=\"token attr-name\">email</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>you@yourdomain.tld<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Jane Doe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>author</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>buildtool_depend</span><span class=\"token punctuation\">></span></span>catkin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>buildtool_depend</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build_depend</span><span class=\"token punctuation\">></span></span>roscpp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build_depend</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build_depend</span><span class=\"token punctuation\">></span></span>rospy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build_depend</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build_depend</span><span class=\"token punctuation\">></span></span>std_msgs<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build_depend</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exec_depend</span><span class=\"token punctuation\">></span></span>roscpp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exec_depend</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exec_depend</span><span class=\"token punctuation\">></span></span>rospy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exec_depend</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exec_depend</span><span class=\"token punctuation\">></span></span>std_msgs<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exec_depend</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>package</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"然后修改CMakeLists-txt\"><a href=\"#然后修改CMakeLists-txt\" class=\"headerlink\" title=\"然后修改CMakeLists.txt\"></a>然后修改CMakeLists.txt</h2><p>教程没说，自己看吧。</p>\n<h1 id=\"Build-Ros-Package\"><a href=\"#Build-Ros-Package\" class=\"headerlink\" title=\"Build Ros Package\"></a>Build Ros Package</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 常规的CMake</span>\n<span class=\"token comment\"># In a CMake project</span>\n$ <span class=\"token function\">mkdir</span> build\n$ <span class=\"token builtin class-name\">cd</span> build\n$ cmake <span class=\"token punctuation\">..</span>\n$ <span class=\"token function\">make</span>\n$ <span class=\"token function\">make</span> <span class=\"token function\">install</span>  <span class=\"token comment\"># (optionally)</span>\n<span class=\"token comment\"># 现在的catkin_make</span>\n<span class=\"token comment\"># In a catkin workspace</span>\n$ catkin_make --source my_src\n$ catkin_make <span class=\"token function\">install</span> --source my_src  <span class=\"token comment\"># (optionally)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"ROS-Nodes\"><a href=\"#ROS-Nodes\" class=\"headerlink\" title=\"ROS Nodes\"></a>ROS Nodes</h1><h2 id=\"理论\"><a href=\"#理论\" class=\"headerlink\" title=\"理论\"></a>理论</h2><ul>\n<li><a href=\"http://wiki.ros.org/Nodes\">Nodes</a>: A node is an executable that uses ROS to communicate with other nodes.</li>\n<li><a href=\"http://wiki.ros.org/Messages\">Messages</a>: ROS data type used when subscribing or publishing to a topic.</li>\n<li><a href=\"http://wiki.ros.org/Topics\">Topics</a>: Nodes can <em>publish</em> messages to a topic as well as <em>subscribe</em> to a topic to receive messages.</li>\n<li><a href=\"http://wiki.ros.org/Master\">Master</a>: Name service for ROS (i.e. helps nodes find each other)</li>\n<li><a href=\"http://wiki.ros.org/rosout\">rosout</a>: ROS equivalent of stdout&#x2F;stderr</li>\n<li><a href=\"http://wiki.ros.org/roscore\">roscore</a>: Master + rosout + parameter server (parameter server will be introduced later)</li>\n</ul>\n<h2 id=\"Nodes\"><a href=\"#Nodes\" class=\"headerlink\" title=\"Nodes\"></a>Nodes</h2><blockquote>\n<p>Nodes can publish or subscribe to a Topic. Nodes can also provide or use a Service.</p>\n</blockquote>\n<h2 id=\"rosnode\"><a href=\"#rosnode\" class=\"headerlink\" title=\"rosnode\"></a>rosnode</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># run roscore first</span>\nroscore\n<span class=\"token comment\"># using rosnode</span>\nrosnode list\n\t/rosout\nrosnode info /rosout<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"rosrun\"><a href=\"#rosrun\" class=\"headerlink\" title=\"rosrun\"></a>rosrun</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># rosrun [package_name] [node_name]</span>\nrosrun turtlesim turtlesim_node\nrosrun turtlesim turtlesim_node __name:<span class=\"token operator\">=</span>my_turtle\n<span class=\"token comment\"># 使用rosnode list 查看</span>\nrosnode list\n\t/my_turtle\n\t/rosout\n<span class=\"token comment\"># 使用rosnode ping 检查</span>\nrosnode <span class=\"token function\">ping</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"ROS-Topics\"><a href=\"#ROS-Topics\" class=\"headerlink\" title=\"ROS Topics\"></a>ROS Topics</h1><h2 id=\"启动小海龟\"><a href=\"#启动小海龟\" class=\"headerlink\" title=\"启动小海龟\"></a>启动小海龟</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">roscore <span class=\"token operator\">&amp;</span>\nrosrun turtlesim turtlesim_node <span class=\"token operator\">&amp;</span>\ntorrun turtlesim turtle_teletop_key\n<span class=\"token comment\"># new terminal</span>\nrosrun rqt_graph rqt_graph\n<span class=\"token comment\"># 打开rqt_graph工具，查看nodes和topics之间的通信方式（订阅关系）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"rostopic\"><a href=\"#rostopic\" class=\"headerlink\" title=\"rostopic\"></a>rostopic</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ rostopic -h\nrostopic bw     display bandwidth used by topic\nrostopic <span class=\"token builtin class-name\">echo</span>   print messages to <span class=\"token function\">screen</span>\nrostopic hz     display publishing rate of topic    \nrostopic list   print information about active topics\nrostopic pub    publish data to topic\nrostopic <span class=\"token builtin class-name\">type</span>   print topic <span class=\"token builtin class-name\">type</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"rostopic-echo\"><a href=\"#rostopic-echo\" class=\"headerlink\" title=\"rostopic echo\"></a>rostopic echo</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># rostopic echo [topic]</span>\n<span class=\"token comment\"># For ROS Hydro and later, this data is published on the /turtle1/cmd_vel topic.</span>\nrostopic <span class=\"token builtin class-name\">echo</span> /turtle1/cmd_vel\n<span class=\"token comment\"># For ROS Groovy and earlier, this data is published on the /turtle1/command_velocity topic.</span>\n<span class=\"token comment\"># 略了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此时在rqt刷新一下可以看到，rostopic也在获取信息</p>\n<h3 id=\"rostopic-list\"><a href=\"#rostopic-list\" class=\"headerlink\" title=\"rostopic list\"></a>rostopic list</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rostopic list -h\nUsage: rostopic list <span class=\"token punctuation\">[</span>/topic<span class=\"token punctuation\">]</span>\n\nOptions:\n  -h, --help            show this <span class=\"token builtin class-name\">help</span> message and <span class=\"token builtin class-name\">exit</span>\n  -b BAGFILE, --bag<span class=\"token operator\">=</span>BAGFILE\n                        list topics <span class=\"token keyword\">in</span> .bag <span class=\"token function\">file</span>\n  -v, --verbose         list full details about each topic\n  -p                    list only publishers\n  -s                    list only subscribers<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>verbose option</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rostopic list -v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"rostopic-type-amp-amp-rosmsg初探\"><a href=\"#rostopic-type-amp-amp-rosmsg初探\" class=\"headerlink\" title=\"rostopic type &amp;&amp; rosmsg初探\"></a>rostopic type &amp;&amp; rosmsg初探</h3><p>上面都是对node的查看，下面是对<code>ros message</code>的查看。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># rostopic type [topic]</span>\n<span class=\"token comment\"># 首先查看topic的类型</span>\nrostopic <span class=\"token builtin class-name\">type</span> /turtle1/cmd_vel\n<span class=\"token comment\"># 然后使用rosmsg查看msg的内容</span>\nrosmsg show geometry_msgs/Twist<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"rostopic-pub\"><a href=\"#rostopic-pub\" class=\"headerlink\" title=\"rostopic pub\"></a>rostopic pub</h3><p>手动发送信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># rostopic pub [topic] [msg_type] [args]</span>\nrostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- <span class=\"token string\">'[2.0, 0.0, 0.0]'</span> <span class=\"token string\">'[0.0, 0.0, 1.8]'</span>\n<span class=\"token comment\"># 小海龟转圈</span>\nrostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r <span class=\"token number\">1</span> -- <span class=\"token string\">'[2.0, 0.0, 0.0]'</span> <span class=\"token string\">'[0.0, 0.0, -1.8]'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"rostopic-hz\"><a href=\"#rostopic-hz\" class=\"headerlink\" title=\"rostopic hz\"></a>rostopic hz</h3><blockquote>\n<p><code>rostopic hz</code> reports the rate at which data is published.</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># rostopic hz [topic]</span>\nrostopic hz /turtle1/pose\nrostopic <span class=\"token builtin class-name\">type</span> /turtle1/cmd_vel <span class=\"token operator\">|</span> rosmsg show<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"rqt-plot\"><a href=\"#rqt-plot\" class=\"headerlink\" title=\"rqt_plot\"></a>rqt_plot</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rosrun rqt_plot rqt_plot<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>对数据绘图</p>\n"},{"title":"ROS学习笔记（0）","description":"ROS学习笔记（0）","abbrlink":"5e6b7330","date":"2022-01-15T06:51:00.000Z","_content":"\n# 开始\n\n要开始学机器人咯，从ros开始的那种。有人说不要通过ros来学机器人，没有关系撒。先看看机器人咋样再说。\n\n官网：<https://www.ros.org/>\n\n文档：<http://wiki.ros.org/>\n\n教程：<http://wiki.ros.org/ROS/Tutorials>\n\n# 装环境\n\n看官方教程，据李总说有很多坑，不过目前看来感觉还好（虽然确实踩了一脚）。\n\n首先是选发行版吧，ros其实就是一堆工具包，底层还是要依赖别的Operation System的。我选择的方案是先上虚拟机，用apollo那台ubuntu18.04来配。这里李总给的建议是用`ROS Melodic Morenia`，就是melodic这个版本，它确实也说了这句\n\n> ROS Melodic Morenia is primarily targeted at the Ubuntu 18.04 (Bionic) release, though other Linux systems as well as Mac OS X, Android, and Windows are supported to varying degrees.\n\n整挺好，专门适配18.04，那就不客气了。上链接<http://wiki.ros.org/melodic/Installation/Ubuntu>\n\n这玩意一上来就坑人，他让我用他的源，结果公钥匹配过不了。还好有经验，点了那个mirror发现有清华源。把整个ubuntu的源换成清华源并按照清华源官方的文档加入`source.list`之后就可以直接`apt install`了。第一次装毫无疑问是无脑`full installation`。\n\n然后按照它说的environment setup把脚本加入`./.bashrc`里（完全不知道这步在干什么呢，晚点回来看一眼）\n\n后面的`Dependencies for building packages`又来坑人了。他给的\n\n```bash\nsudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential\n```\n\n确实是能跑的，但下一步\n\n```bash\nsudo rosdep init\nrosdep update\n```\n\n就出问题了，`sudo rosdep init`会说ubuntu版本不对。查了下发现另一篇文章里是这么写的\n\n```bash\nsudo apt install python3-rosdep\n```\n\n好家伙有python3为啥不用3，然后直接这么输会发现无法安装，因为`python3-rosdep`要依赖`python3-rosinstall`，也就是说我装了python2的都得换成python3，彳亍。我还得把上面的包全给删了，然后重新输\n\n```bash\nsudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool\n```\n\n然后就回到上面`init`那一步了，这步据说会出网络问题，随便贴个网上的解决方案吧：<https://blog.csdn.net/qq_41484927/article/details/107494715>，网上一搜一大把。我选择直接挂梯子（\n\n这里需要注意的一点是`sudo rosdep init`，是要加`sudo`的，而`rosdep update`是万万不能加的，虽然不知道会怎么样，但毕竟官方文档说了这事：\n\n> Do **NOT** run `rosdep update` with sudo. It is not required and will result in permission errors later on.\n\n这玩意前面还有个大感叹号呢，注意点。\n\n先到这里，收拾东西准备回家去了。\n","source":"_posts/Auto/ROS学习笔记（0）.md","raw":"---\ntitle: ROS学习笔记（0）\ntags:\n  - linux\n  - ros\n  - 专栏：ros学习笔记\ndescription: ROS学习笔记（0）\ncategories:\n  - Auto\nabbrlink: 5e6b7330\ndate: 2022-01-15 14:51:00\n---\n\n# 开始\n\n要开始学机器人咯，从ros开始的那种。有人说不要通过ros来学机器人，没有关系撒。先看看机器人咋样再说。\n\n官网：<https://www.ros.org/>\n\n文档：<http://wiki.ros.org/>\n\n教程：<http://wiki.ros.org/ROS/Tutorials>\n\n# 装环境\n\n看官方教程，据李总说有很多坑，不过目前看来感觉还好（虽然确实踩了一脚）。\n\n首先是选发行版吧，ros其实就是一堆工具包，底层还是要依赖别的Operation System的。我选择的方案是先上虚拟机，用apollo那台ubuntu18.04来配。这里李总给的建议是用`ROS Melodic Morenia`，就是melodic这个版本，它确实也说了这句\n\n> ROS Melodic Morenia is primarily targeted at the Ubuntu 18.04 (Bionic) release, though other Linux systems as well as Mac OS X, Android, and Windows are supported to varying degrees.\n\n整挺好，专门适配18.04，那就不客气了。上链接<http://wiki.ros.org/melodic/Installation/Ubuntu>\n\n这玩意一上来就坑人，他让我用他的源，结果公钥匹配过不了。还好有经验，点了那个mirror发现有清华源。把整个ubuntu的源换成清华源并按照清华源官方的文档加入`source.list`之后就可以直接`apt install`了。第一次装毫无疑问是无脑`full installation`。\n\n然后按照它说的environment setup把脚本加入`./.bashrc`里（完全不知道这步在干什么呢，晚点回来看一眼）\n\n后面的`Dependencies for building packages`又来坑人了。他给的\n\n```bash\nsudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential\n```\n\n确实是能跑的，但下一步\n\n```bash\nsudo rosdep init\nrosdep update\n```\n\n就出问题了，`sudo rosdep init`会说ubuntu版本不对。查了下发现另一篇文章里是这么写的\n\n```bash\nsudo apt install python3-rosdep\n```\n\n好家伙有python3为啥不用3，然后直接这么输会发现无法安装，因为`python3-rosdep`要依赖`python3-rosinstall`，也就是说我装了python2的都得换成python3，彳亍。我还得把上面的包全给删了，然后重新输\n\n```bash\nsudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool\n```\n\n然后就回到上面`init`那一步了，这步据说会出网络问题，随便贴个网上的解决方案吧：<https://blog.csdn.net/qq_41484927/article/details/107494715>，网上一搜一大把。我选择直接挂梯子（\n\n这里需要注意的一点是`sudo rosdep init`，是要加`sudo`的，而`rosdep update`是万万不能加的，虽然不知道会怎么样，但毕竟官方文档说了这事：\n\n> Do **NOT** run `rosdep update` with sudo. It is not required and will result in permission errors later on.\n\n这玩意前面还有个大感叹号呢，注意点。\n\n先到这里，收拾东西准备回家去了。\n","slug":"ROS学习笔记（0）","published":1,"category":"Auto","updated":"2022-02-11T05:17:56.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irwt00098wulg5uuhjun","content":"<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><p>要开始学机器人咯，从ros开始的那种。有人说不要通过ros来学机器人，没有关系撒。先看看机器人咋样再说。</p>\n<p>官网：<a href=\"https://www.ros.org/\">https://www.ros.org/</a></p>\n<p>文档：<a href=\"http://wiki.ros.org/\">http://wiki.ros.org/</a></p>\n<p>教程：<a href=\"http://wiki.ros.org/ROS/Tutorials\">http://wiki.ros.org/ROS/Tutorials</a></p>\n<h1 id=\"装环境\"><a href=\"#装环境\" class=\"headerlink\" title=\"装环境\"></a>装环境</h1><p>看官方教程，据李总说有很多坑，不过目前看来感觉还好（虽然确实踩了一脚）。</p>\n<p>首先是选发行版吧，ros其实就是一堆工具包，底层还是要依赖别的Operation System的。我选择的方案是先上虚拟机，用apollo那台ubuntu18.04来配。这里李总给的建议是用<code>ROS Melodic Morenia</code>，就是melodic这个版本，它确实也说了这句</p>\n<blockquote>\n<p>ROS Melodic Morenia is primarily targeted at the Ubuntu 18.04 (Bionic) release, though other Linux systems as well as Mac OS X, Android, and Windows are supported to varying degrees.</p>\n</blockquote>\n<p>整挺好，专门适配18.04，那就不客气了。上链接<a href=\"http://wiki.ros.org/melodic/Installation/Ubuntu\">http://wiki.ros.org/melodic/Installation/Ubuntu</a></p>\n<p>这玩意一上来就坑人，他让我用他的源，结果公钥匹配过不了。还好有经验，点了那个mirror发现有清华源。把整个ubuntu的源换成清华源并按照清华源官方的文档加入<code>source.list</code>之后就可以直接<code>apt install</code>了。第一次装毫无疑问是无脑<code>full installation</code>。</p>\n<p>然后按照它说的environment setup把脚本加入<code>./.bashrc</code>里（完全不知道这步在干什么呢，晚点回来看一眼）</p>\n<p>后面的<code>Dependencies for building packages</code>又来坑人了。他给的</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>确实是能跑的，但下一步</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> rosdep init\nrosdep update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>就出问题了，<code>sudo rosdep init</code>会说ubuntu版本不对。查了下发现另一篇文章里是这么写的</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> python3-rosdep<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>好家伙有python3为啥不用3，然后直接这么输会发现无法安装，因为<code>python3-rosdep</code>要依赖<code>python3-rosinstall</code>，也就是说我装了python2的都得换成python3，彳亍。我还得把上面的包全给删了，然后重新输</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后就回到上面<code>init</code>那一步了，这步据说会出网络问题，随便贴个网上的解决方案吧：<a href=\"https://blog.csdn.net/qq_41484927/article/details/107494715\">https://blog.csdn.net/qq_41484927/article/details/107494715</a>，网上一搜一大把。我选择直接挂梯子（</p>\n<p>这里需要注意的一点是<code>sudo rosdep init</code>，是要加<code>sudo</code>的，而<code>rosdep update</code>是万万不能加的，虽然不知道会怎么样，但毕竟官方文档说了这事：</p>\n<blockquote>\n<p>Do <strong>NOT</strong> run <code>rosdep update</code> with sudo. It is not required and will result in permission errors later on.</p>\n</blockquote>\n<p>这玩意前面还有个大感叹号呢，注意点。</p>\n<p>先到这里，收拾东西准备回家去了。</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/chaopao2.jpg","excerpt":"","more":"<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><p>要开始学机器人咯，从ros开始的那种。有人说不要通过ros来学机器人，没有关系撒。先看看机器人咋样再说。</p>\n<p>官网：<a href=\"https://www.ros.org/\">https://www.ros.org/</a></p>\n<p>文档：<a href=\"http://wiki.ros.org/\">http://wiki.ros.org/</a></p>\n<p>教程：<a href=\"http://wiki.ros.org/ROS/Tutorials\">http://wiki.ros.org/ROS/Tutorials</a></p>\n<h1 id=\"装环境\"><a href=\"#装环境\" class=\"headerlink\" title=\"装环境\"></a>装环境</h1><p>看官方教程，据李总说有很多坑，不过目前看来感觉还好（虽然确实踩了一脚）。</p>\n<p>首先是选发行版吧，ros其实就是一堆工具包，底层还是要依赖别的Operation System的。我选择的方案是先上虚拟机，用apollo那台ubuntu18.04来配。这里李总给的建议是用<code>ROS Melodic Morenia</code>，就是melodic这个版本，它确实也说了这句</p>\n<blockquote>\n<p>ROS Melodic Morenia is primarily targeted at the Ubuntu 18.04 (Bionic) release, though other Linux systems as well as Mac OS X, Android, and Windows are supported to varying degrees.</p>\n</blockquote>\n<p>整挺好，专门适配18.04，那就不客气了。上链接<a href=\"http://wiki.ros.org/melodic/Installation/Ubuntu\">http://wiki.ros.org/melodic/Installation/Ubuntu</a></p>\n<p>这玩意一上来就坑人，他让我用他的源，结果公钥匹配过不了。还好有经验，点了那个mirror发现有清华源。把整个ubuntu的源换成清华源并按照清华源官方的文档加入<code>source.list</code>之后就可以直接<code>apt install</code>了。第一次装毫无疑问是无脑<code>full installation</code>。</p>\n<p>然后按照它说的environment setup把脚本加入<code>./.bashrc</code>里（完全不知道这步在干什么呢，晚点回来看一眼）</p>\n<p>后面的<code>Dependencies for building packages</code>又来坑人了。他给的</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>确实是能跑的，但下一步</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> rosdep init\nrosdep update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>就出问题了，<code>sudo rosdep init</code>会说ubuntu版本不对。查了下发现另一篇文章里是这么写的</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> python3-rosdep<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>好家伙有python3为啥不用3，然后直接这么输会发现无法安装，因为<code>python3-rosdep</code>要依赖<code>python3-rosinstall</code>，也就是说我装了python2的都得换成python3，彳亍。我还得把上面的包全给删了，然后重新输</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后就回到上面<code>init</code>那一步了，这步据说会出网络问题，随便贴个网上的解决方案吧：<a href=\"https://blog.csdn.net/qq_41484927/article/details/107494715\">https://blog.csdn.net/qq_41484927/article/details/107494715</a>，网上一搜一大把。我选择直接挂梯子（</p>\n<p>这里需要注意的一点是<code>sudo rosdep init</code>，是要加<code>sudo</code>的，而<code>rosdep update</code>是万万不能加的，虽然不知道会怎么样，但毕竟官方文档说了这事：</p>\n<blockquote>\n<p>Do <strong>NOT</strong> run <code>rosdep update</code> with sudo. It is not required and will result in permission errors later on.</p>\n</blockquote>\n<p>这玩意前面还有个大感叹号呢，注意点。</p>\n<p>先到这里，收拾东西准备回家去了。</p>\n"},{"title":"ROS学习笔记（3）","description":"ROS学习笔记（3）","abbrlink":"4cdedcde","date":"2022-01-23T02:12:25.000Z","_content":"\n# 写一个简单的publisher和subscriber\n\n## 基本流程\n\n1. 在package目录下建立`src`文件夹\n2. 向其中写入一个`talker.cpp`和一个`listener.cpp`\n3. 向`CMakeLists.txt`中写入依赖项\n4. 回到workspace目录，`catkin_make`\n5. 切换到workspace环境，并启动roscore\n6. `rosrun begginer_tutorials talker`\n7. `rosrun begginer_tutorials listener`\n\n## 文件说明\n\n```cpp\n// talker.cpp\n#include \"ros/ros.h\" //这是一个大的头文件，包含了所有需要的头文件，偷懒专用\n#include \"std_msgs/String.h\" //使用msg包\n\n#include <sstream>\n\n/**\n * This tutorial demonstrates simple sending of messages over the ROS system.\n */\nint main(int argc, char **argv)\n{\n  /**\n   * The ros::init() function needs to see argc and argv so that it can perform\n   * any ROS arguments and name remapping that were provided at the command line.\n   * For programmatic remappings you can use a different version of init() which takes\n   * remappings directly, but for most command-line programs, passing argc and argv is\n   * the easiest way to do it.  The third argument to init() is the name of the node.\n   *\n   * You must call one of the versions of ros::init() before using any other\n   * part of the ROS system.\n   */\n  ros::init(argc, argv, \"talker\"); //初始化ros，并将该node的名字定为“talker”\n\n  /**\n   * NodeHandle is the main access point to communications with the ROS system.\n   * The first NodeHandle constructed will fully initialize this node, and the last\n   * NodeHandle destructed will close down the node.\n   */\n  ros::NodeHandle n; //\n\n  /**\n   * The advertise() function is how you tell ROS that you want to\n   * publish on a given topic name. This invokes a call to the ROS\n   * master node, which keeps a registry of who is publishing and who\n   * is subscribing. After this advertise() call is made, the master\n   * node will notify anyone who is trying to subscribe to this topic name,\n   * and they will in turn negotiate a peer-to-peer connection with this\n   * node.  advertise() returns a Publisher object which allows you to\n   * publish messages on that topic through a call to publish().  Once\n   * all copies of the returned Publisher object are destroyed, the topic\n   * will be automatically unadvertised.\n   *\n   * The second parameter to advertise() is the size of the message queue\n   * used for publishing messages.  If messages are published more quickly\n   * than we can send them, the number here specifies how many messages to\n   * buffer up before throwing some away.\n   */\n  ros::Publisher chatter_pub = n.advertise<std_msgs::String>(\"chatter\", 1000); // 创建msg的publisher\n\n  ros::Rate loop_rate(10); // 设定频率，单位Hz，与sleep（）搭配使用\n\n  /**\n   * A count of how many messages we have sent. This is used to create\n   * a unique string for each message.\n   */\n  int count = 0;\n  while (ros::ok()) // 循环\n  {\n    /**\n     * This is a message object. You stuff it with data, and then publish it.\n     */\n    std_msgs::String msg;\n\n    std::stringstream ss;\n    ss << \"hello world \" << count;\n    msg.data = ss.str();\n\n    ROS_INFO(\"%s\", msg.data.c_str()); //这是print/cout的ros写法\n\n    /**\n     * The publish() function is how you send messages. The parameter\n     * is the message object. The type of this object must agree with the type\n     * given as a template parameter to the advertise<>() call, as was done\n     * in the constructor above.\n     */\n    chatter_pub.publish(msg); // 这里发出去了\n\n    ros::spinOnce(); //接受反馈用的，但是在这里没用\n\n    loop_rate.sleep(); //和上面的循环搭配使用\n    ++count;\n  }\n\n\n  return 0;\n}\n```\n\n```cpp\n// listener.cpp\n#include \"ros/ros.h\"\n#include \"std_msgs/String.h\"\n\n/**\n * This tutorial demonstrates simple receipt of messages over the ROS system.\n */\nvoid chatterCallback(const std_msgs::String::ConstPtr& msg)\n{\n  ROS_INFO(\"I heard: [%s]\", msg->data.c_str());\n}\n// 一个回调函数，便于处理消息\n\nint main(int argc, char **argv)\n{\n  /**\n   * The ros::init() function needs to see argc and argv so that it can perform\n   * any ROS arguments and name remapping that were provided at the command line.\n   * For programmatic remappings you can use a different version of init() which takes\n   * remappings directly, but for most command-line programs, passing argc and argv is\n   * the easiest way to do it.  The third argument to init() is the name of the node.\n   *\n   * You must call one of the versions of ros::init() before using any other\n   * part of the ROS system.\n   */\n  ros::init(argc, argv, \"listener\");\n\n  /**\n   * NodeHandle is the main access point to communications with the ROS system.\n   * The first NodeHandle constructed will fully initialize this node, and the last\n   * NodeHandle destructed will close down the node.\n   */\n  ros::NodeHandle n;\n\n  /**\n   * The subscribe() call is how you tell ROS that you want to receive messages\n   * on a given topic.  This invokes a call to the ROS\n   * master node, which keeps a registry of who is publishing and who\n   * is subscribing.  Messages are passed to a callback function, here\n   * called chatterCallback.  subscribe() returns a Subscriber object that you\n   * must hold on to until you want to unsubscribe.  When all copies of the Subscriber\n   * object go out of scope, this callback will automatically be unsubscribed from\n   * this topic.\n   *\n   * The second parameter to the subscribe() function is the size of the message\n   * queue.  If messages are arriving faster than they are being processed, this\n   * is the number of messages that will be buffered up before beginning to throw\n   * away the oldest ones.\n   */\n  ros::Subscriber sub = n.subscribe(\"chatter\", 1000, chatterCallback); // 创建一个订阅“chatter”topic的subscriber，并使用函数“chatterCallback”来处理\n\n  /**\n   * ros::spin() will enter a loop, pumping callbacks.  With this version, all\n   * callbacks will be called from within this thread (the main one).  ros::spin()\n   * will exit when Ctrl-C is pressed, or the node is shutdown by the master.\n   */\n  ros::spin(); // 进入循环\n\n  return 0;\n}\n```\n\n```cmake\n# CMakeLists.txt\nadd_executable(talker src/talker.cpp)\ntarget_link_libraries(talker ${catkin_LIBRARIES})\nadd_dependencies(talker beginner_tutorials_generate_messages_cpp)\n\nadd_executable(listener src/listener.cpp)\ntarget_link_libraries(listener ${catkin_LIBRARIES})\nadd_dependencies(listener beginner_tutorials_generate_messages_cpp)\n```\n\n# 写一个简单的service和client\n\n## 基本流程\n\n同上\n\n## 文件说明\n\n```cpp\n// add_two_ints_server.cpp\n#include \"ros/ros.h\"\n#include \"beginner_tutorials/AddTwoInts.h\" //之前生成的msg头文件\n\n// 一个相加函数\nbool add(beginner_tutorials::AddTwoInts::Request  &req,\n         beginner_tutorials::AddTwoInts::Response &res)\n{\n  res.sum = req.a + req.b;\n  ROS_INFO(\"request: x=%ld, y=%ld\", (long int)req.a, (long int)req.b);\n  ROS_INFO(\"sending back response: [%ld]\", (long int)res.sum);\n  return true;\n}\n\nint main(int argc, char **argv)\n{\n  ros::init(argc, argv, \"add_two_ints_server\");\n  ros::NodeHandle n;\n\n  ros::ServiceServer service = n.advertiseService(\"add_two_ints\", add); //创建service\n  ROS_INFO(\"Ready to add two ints.\");\n  ros::spin();\n\n  return 0;\n}\n```\n\n```cpp\n// add_two_ints_client.cpp\n#include \"ros/ros.h\"\n#include \"beginner_tutorials/AddTwoInts.h\"\n#include <cstdlib>\n\nint main(int argc, char **argv)\n{\n  ros::init(argc, argv, \"add_two_ints_client\");\n  if (argc != 3)\n  {\n    ROS_INFO(\"usage: add_two_ints_client X Y\");\n    return 1;\n  }\n\n  ros::NodeHandle n;\n  ros::ServiceClient client = n.serviceClient<beginner_tutorials::AddTwoInts>(\"add_two_ints\"); // 创建client\n  beginner_tutorials::AddTwoInts srv; //创建service\n  srv.request.a = atoll(argv[1]);\n  srv.request.b = atoll(argv[2]);\n  if (client.call(srv)) //调用service\n  {\n    ROS_INFO(\"Sum: %ld\", (long int)srv.response.sum);\n  }\n  else\n  {\n    ROS_ERROR(\"Failed to call service add_two_ints\");\n    return 1;\n  }\n\n  return 0;\n}\n```\n\n```cmake\n# CMakeLists.txt\nadd_executable(add_two_ints_server src/add_two_ints_server.cpp)\ntarget_link_libraries(add_two_ints_server ${catkin_LIBRARIES})\nadd_dependencies(add_two_ints_server beginner_tutorials_gencpp)\n\nadd_executable(add_two_ints_client src/add_two_ints_client.cpp)\ntarget_link_libraries(add_two_ints_client ${catkin_LIBRARIES})\nadd_dependencies(add_two_ints_client beginner_tutorials_gencpp)\n```\n\n# 记录与回放数据\n\n## 记录流程\n\n使用`rosbag`\n\n```bash\nmkdir ~/bagfiles\ncd ~/bagfiles\nrosbag record -a\n```\n\n## 查看记录信息\n\n```bash\nrosbag info <your bagfile>\n```\n\n## 回放\n\n```bash\nrosbag play <your bagfile>\n```\n\n## 记录信息中的一部分\n\n```bash\nrosbag record -O subset /turtle1/cmd_vel /turtle1/pose\n```\n\n## 回放的偏差\n\n> In the previous section you may have noted that the turtle's path may not have exactly mapped to the original keyboard input - the rough shape should have been the same, but the turtle may not have exactly tracked the same path. The reason for this is that the path tracked by turtlesim is very sensitive to small changes in timing in the system, and rosbag is limited in its ability to exactly duplicate the behavior of a running system in terms of when messages are recorded and processed by rosbag record, and when messages are produced and processed when using rosbag play. For nodes like turtlesim, where minor timing changes in when command messages are processed can subtly alter behavior, the user should not expect perfectly mimicked behavior.\n\n# 从bag文件中读取信息\n\n## 法一\n\n跑一遍，看terminal输出\n\n## 法二\n\n用`ros_readbagfile`脚本\n\n# 纠错\n\n使用`roswtf`。这个名字真的wtf。\n\n# 结语\n\n看了三四天吧，把官方的`begging level tutorial`看完了，然后分配任务发现以后可能用不到ROS，不过也算是有收获。ROS这种把自己建在另一个操作系统上的方式还真的有意思，它的设计让它很适合作为分布式系统，适用于解决多agent协同。以后用到了再说吧。\n","source":"_posts/Auto/ROS学习笔记（3）.md","raw":"---\ntitle: ROS学习笔记（3）\ntags:\n  - linux\n  - ros\n  - 专栏：ros学习笔记\ndescription: ROS学习笔记（3）\ncategories:\n  - Auto\nabbrlink: 4cdedcde\ndate: 2022-01-23 10:12:25\n---\n\n# 写一个简单的publisher和subscriber\n\n## 基本流程\n\n1. 在package目录下建立`src`文件夹\n2. 向其中写入一个`talker.cpp`和一个`listener.cpp`\n3. 向`CMakeLists.txt`中写入依赖项\n4. 回到workspace目录，`catkin_make`\n5. 切换到workspace环境，并启动roscore\n6. `rosrun begginer_tutorials talker`\n7. `rosrun begginer_tutorials listener`\n\n## 文件说明\n\n```cpp\n// talker.cpp\n#include \"ros/ros.h\" //这是一个大的头文件，包含了所有需要的头文件，偷懒专用\n#include \"std_msgs/String.h\" //使用msg包\n\n#include <sstream>\n\n/**\n * This tutorial demonstrates simple sending of messages over the ROS system.\n */\nint main(int argc, char **argv)\n{\n  /**\n   * The ros::init() function needs to see argc and argv so that it can perform\n   * any ROS arguments and name remapping that were provided at the command line.\n   * For programmatic remappings you can use a different version of init() which takes\n   * remappings directly, but for most command-line programs, passing argc and argv is\n   * the easiest way to do it.  The third argument to init() is the name of the node.\n   *\n   * You must call one of the versions of ros::init() before using any other\n   * part of the ROS system.\n   */\n  ros::init(argc, argv, \"talker\"); //初始化ros，并将该node的名字定为“talker”\n\n  /**\n   * NodeHandle is the main access point to communications with the ROS system.\n   * The first NodeHandle constructed will fully initialize this node, and the last\n   * NodeHandle destructed will close down the node.\n   */\n  ros::NodeHandle n; //\n\n  /**\n   * The advertise() function is how you tell ROS that you want to\n   * publish on a given topic name. This invokes a call to the ROS\n   * master node, which keeps a registry of who is publishing and who\n   * is subscribing. After this advertise() call is made, the master\n   * node will notify anyone who is trying to subscribe to this topic name,\n   * and they will in turn negotiate a peer-to-peer connection with this\n   * node.  advertise() returns a Publisher object which allows you to\n   * publish messages on that topic through a call to publish().  Once\n   * all copies of the returned Publisher object are destroyed, the topic\n   * will be automatically unadvertised.\n   *\n   * The second parameter to advertise() is the size of the message queue\n   * used for publishing messages.  If messages are published more quickly\n   * than we can send them, the number here specifies how many messages to\n   * buffer up before throwing some away.\n   */\n  ros::Publisher chatter_pub = n.advertise<std_msgs::String>(\"chatter\", 1000); // 创建msg的publisher\n\n  ros::Rate loop_rate(10); // 设定频率，单位Hz，与sleep（）搭配使用\n\n  /**\n   * A count of how many messages we have sent. This is used to create\n   * a unique string for each message.\n   */\n  int count = 0;\n  while (ros::ok()) // 循环\n  {\n    /**\n     * This is a message object. You stuff it with data, and then publish it.\n     */\n    std_msgs::String msg;\n\n    std::stringstream ss;\n    ss << \"hello world \" << count;\n    msg.data = ss.str();\n\n    ROS_INFO(\"%s\", msg.data.c_str()); //这是print/cout的ros写法\n\n    /**\n     * The publish() function is how you send messages. The parameter\n     * is the message object. The type of this object must agree with the type\n     * given as a template parameter to the advertise<>() call, as was done\n     * in the constructor above.\n     */\n    chatter_pub.publish(msg); // 这里发出去了\n\n    ros::spinOnce(); //接受反馈用的，但是在这里没用\n\n    loop_rate.sleep(); //和上面的循环搭配使用\n    ++count;\n  }\n\n\n  return 0;\n}\n```\n\n```cpp\n// listener.cpp\n#include \"ros/ros.h\"\n#include \"std_msgs/String.h\"\n\n/**\n * This tutorial demonstrates simple receipt of messages over the ROS system.\n */\nvoid chatterCallback(const std_msgs::String::ConstPtr& msg)\n{\n  ROS_INFO(\"I heard: [%s]\", msg->data.c_str());\n}\n// 一个回调函数，便于处理消息\n\nint main(int argc, char **argv)\n{\n  /**\n   * The ros::init() function needs to see argc and argv so that it can perform\n   * any ROS arguments and name remapping that were provided at the command line.\n   * For programmatic remappings you can use a different version of init() which takes\n   * remappings directly, but for most command-line programs, passing argc and argv is\n   * the easiest way to do it.  The third argument to init() is the name of the node.\n   *\n   * You must call one of the versions of ros::init() before using any other\n   * part of the ROS system.\n   */\n  ros::init(argc, argv, \"listener\");\n\n  /**\n   * NodeHandle is the main access point to communications with the ROS system.\n   * The first NodeHandle constructed will fully initialize this node, and the last\n   * NodeHandle destructed will close down the node.\n   */\n  ros::NodeHandle n;\n\n  /**\n   * The subscribe() call is how you tell ROS that you want to receive messages\n   * on a given topic.  This invokes a call to the ROS\n   * master node, which keeps a registry of who is publishing and who\n   * is subscribing.  Messages are passed to a callback function, here\n   * called chatterCallback.  subscribe() returns a Subscriber object that you\n   * must hold on to until you want to unsubscribe.  When all copies of the Subscriber\n   * object go out of scope, this callback will automatically be unsubscribed from\n   * this topic.\n   *\n   * The second parameter to the subscribe() function is the size of the message\n   * queue.  If messages are arriving faster than they are being processed, this\n   * is the number of messages that will be buffered up before beginning to throw\n   * away the oldest ones.\n   */\n  ros::Subscriber sub = n.subscribe(\"chatter\", 1000, chatterCallback); // 创建一个订阅“chatter”topic的subscriber，并使用函数“chatterCallback”来处理\n\n  /**\n   * ros::spin() will enter a loop, pumping callbacks.  With this version, all\n   * callbacks will be called from within this thread (the main one).  ros::spin()\n   * will exit when Ctrl-C is pressed, or the node is shutdown by the master.\n   */\n  ros::spin(); // 进入循环\n\n  return 0;\n}\n```\n\n```cmake\n# CMakeLists.txt\nadd_executable(talker src/talker.cpp)\ntarget_link_libraries(talker ${catkin_LIBRARIES})\nadd_dependencies(talker beginner_tutorials_generate_messages_cpp)\n\nadd_executable(listener src/listener.cpp)\ntarget_link_libraries(listener ${catkin_LIBRARIES})\nadd_dependencies(listener beginner_tutorials_generate_messages_cpp)\n```\n\n# 写一个简单的service和client\n\n## 基本流程\n\n同上\n\n## 文件说明\n\n```cpp\n// add_two_ints_server.cpp\n#include \"ros/ros.h\"\n#include \"beginner_tutorials/AddTwoInts.h\" //之前生成的msg头文件\n\n// 一个相加函数\nbool add(beginner_tutorials::AddTwoInts::Request  &req,\n         beginner_tutorials::AddTwoInts::Response &res)\n{\n  res.sum = req.a + req.b;\n  ROS_INFO(\"request: x=%ld, y=%ld\", (long int)req.a, (long int)req.b);\n  ROS_INFO(\"sending back response: [%ld]\", (long int)res.sum);\n  return true;\n}\n\nint main(int argc, char **argv)\n{\n  ros::init(argc, argv, \"add_two_ints_server\");\n  ros::NodeHandle n;\n\n  ros::ServiceServer service = n.advertiseService(\"add_two_ints\", add); //创建service\n  ROS_INFO(\"Ready to add two ints.\");\n  ros::spin();\n\n  return 0;\n}\n```\n\n```cpp\n// add_two_ints_client.cpp\n#include \"ros/ros.h\"\n#include \"beginner_tutorials/AddTwoInts.h\"\n#include <cstdlib>\n\nint main(int argc, char **argv)\n{\n  ros::init(argc, argv, \"add_two_ints_client\");\n  if (argc != 3)\n  {\n    ROS_INFO(\"usage: add_two_ints_client X Y\");\n    return 1;\n  }\n\n  ros::NodeHandle n;\n  ros::ServiceClient client = n.serviceClient<beginner_tutorials::AddTwoInts>(\"add_two_ints\"); // 创建client\n  beginner_tutorials::AddTwoInts srv; //创建service\n  srv.request.a = atoll(argv[1]);\n  srv.request.b = atoll(argv[2]);\n  if (client.call(srv)) //调用service\n  {\n    ROS_INFO(\"Sum: %ld\", (long int)srv.response.sum);\n  }\n  else\n  {\n    ROS_ERROR(\"Failed to call service add_two_ints\");\n    return 1;\n  }\n\n  return 0;\n}\n```\n\n```cmake\n# CMakeLists.txt\nadd_executable(add_two_ints_server src/add_two_ints_server.cpp)\ntarget_link_libraries(add_two_ints_server ${catkin_LIBRARIES})\nadd_dependencies(add_two_ints_server beginner_tutorials_gencpp)\n\nadd_executable(add_two_ints_client src/add_two_ints_client.cpp)\ntarget_link_libraries(add_two_ints_client ${catkin_LIBRARIES})\nadd_dependencies(add_two_ints_client beginner_tutorials_gencpp)\n```\n\n# 记录与回放数据\n\n## 记录流程\n\n使用`rosbag`\n\n```bash\nmkdir ~/bagfiles\ncd ~/bagfiles\nrosbag record -a\n```\n\n## 查看记录信息\n\n```bash\nrosbag info <your bagfile>\n```\n\n## 回放\n\n```bash\nrosbag play <your bagfile>\n```\n\n## 记录信息中的一部分\n\n```bash\nrosbag record -O subset /turtle1/cmd_vel /turtle1/pose\n```\n\n## 回放的偏差\n\n> In the previous section you may have noted that the turtle's path may not have exactly mapped to the original keyboard input - the rough shape should have been the same, but the turtle may not have exactly tracked the same path. The reason for this is that the path tracked by turtlesim is very sensitive to small changes in timing in the system, and rosbag is limited in its ability to exactly duplicate the behavior of a running system in terms of when messages are recorded and processed by rosbag record, and when messages are produced and processed when using rosbag play. For nodes like turtlesim, where minor timing changes in when command messages are processed can subtly alter behavior, the user should not expect perfectly mimicked behavior.\n\n# 从bag文件中读取信息\n\n## 法一\n\n跑一遍，看terminal输出\n\n## 法二\n\n用`ros_readbagfile`脚本\n\n# 纠错\n\n使用`roswtf`。这个名字真的wtf。\n\n# 结语\n\n看了三四天吧，把官方的`begging level tutorial`看完了，然后分配任务发现以后可能用不到ROS，不过也算是有收获。ROS这种把自己建在另一个操作系统上的方式还真的有意思，它的设计让它很适合作为分布式系统，适用于解决多agent协同。以后用到了再说吧。\n","slug":"ROS学习笔记（3）","published":1,"category":"Auto","updated":"2022-02-11T05:17:56.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irwu000a8wul70kphd2z","content":"<h1 id=\"写一个简单的publisher和subscriber\"><a href=\"#写一个简单的publisher和subscriber\" class=\"headerlink\" title=\"写一个简单的publisher和subscriber\"></a>写一个简单的publisher和subscriber</h1><h2 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h2><ol>\n<li>在package目录下建立<code>src</code>文件夹</li>\n<li>向其中写入一个<code>talker.cpp</code>和一个<code>listener.cpp</code></li>\n<li>向<code>CMakeLists.txt</code>中写入依赖项</li>\n<li>回到workspace目录，<code>catkin_make</code></li>\n<li>切换到workspace环境，并启动roscore</li>\n<li><code>rosrun begginer_tutorials talker</code></li>\n<li><code>rosrun begginer_tutorials listener</code></li>\n</ol>\n<h2 id=\"文件说明\"><a href=\"#文件说明\" class=\"headerlink\" title=\"文件说明\"></a>文件说明</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// talker.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ros/ros.h\"</span> <span class=\"token comment\">//这是一个大的头文件，包含了所有需要的头文件，偷懒专用</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"std_msgs/String.h\"</span> <span class=\"token comment\">//使用msg包</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span></span>\n\n<span class=\"token comment\">/**\n * This tutorial demonstrates simple sending of messages over the ROS system.\n */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/**\n   * The ros::init() function needs to see argc and argv so that it can perform\n   * any ROS arguments and name remapping that were provided at the command line.\n   * For programmatic remappings you can use a different version of init() which takes\n   * remappings directly, but for most command-line programs, passing argc and argv is\n   * the easiest way to do it.  The third argument to init() is the name of the node.\n   *\n   * You must call one of the versions of ros::init() before using any other\n   * part of the ROS system.\n   */</span>\n  ros<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> <span class=\"token string\">\"talker\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//初始化ros，并将该node的名字定为“talker”</span>\n\n  <span class=\"token comment\">/**\n   * NodeHandle is the main access point to communications with the ROS system.\n   * The first NodeHandle constructed will fully initialize this node, and the last\n   * NodeHandle destructed will close down the node.\n   */</span>\n  ros<span class=\"token double-colon punctuation\">::</span>NodeHandle n<span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span>\n\n  <span class=\"token comment\">/**\n   * The advertise() function is how you tell ROS that you want to\n   * publish on a given topic name. This invokes a call to the ROS\n   * master node, which keeps a registry of who is publishing and who\n   * is subscribing. After this advertise() call is made, the master\n   * node will notify anyone who is trying to subscribe to this topic name,\n   * and they will in turn negotiate a peer-to-peer connection with this\n   * node.  advertise() returns a Publisher object which allows you to\n   * publish messages on that topic through a call to publish().  Once\n   * all copies of the returned Publisher object are destroyed, the topic\n   * will be automatically unadvertised.\n   *\n   * The second parameter to advertise() is the size of the message queue\n   * used for publishing messages.  If messages are published more quickly\n   * than we can send them, the number here specifies how many messages to\n   * buffer up before throwing some away.\n   */</span>\n  ros<span class=\"token double-colon punctuation\">::</span>Publisher chatter_pub <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">advertise</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std_msgs<span class=\"token double-colon punctuation\">::</span>String<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chatter\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建msg的publisher</span>\n\n  ros<span class=\"token double-colon punctuation\">::</span>Rate <span class=\"token function\">loop_rate</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设定频率，单位Hz，与sleep（）搭配使用</span>\n\n  <span class=\"token comment\">/**\n   * A count of how many messages we have sent. This is used to create\n   * a unique string for each message.\n   */</span>\n  <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ros<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 循环</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * This is a message object. You stuff it with data, and then publish it.\n     */</span>\n    std_msgs<span class=\"token double-colon punctuation\">::</span>String msg<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token double-colon punctuation\">::</span>stringstream ss<span class=\"token punctuation\">;</span>\n    ss <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"hello world \"</span> <span class=\"token operator\">&lt;&lt;</span> count<span class=\"token punctuation\">;</span>\n    msg<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> ss<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ROS_INFO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//这是print/cout的ros写法</span>\n\n    <span class=\"token comment\">/**\n     * The publish() function is how you send messages. The parameter\n     * is the message object. The type of this object must agree with the type\n     * given as a template parameter to the advertise&lt;>() call, as was done\n     * in the constructor above.\n     */</span>\n    chatter_pub<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里发出去了</span>\n\n    ros<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">spinOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//接受反馈用的，但是在这里没用</span>\n\n    loop_rate<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//和上面的循环搭配使用</span>\n    <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// listener.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ros/ros.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"std_msgs/String.h\"</span></span>\n\n<span class=\"token comment\">/**\n * This tutorial demonstrates simple receipt of messages over the ROS system.\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">chatterCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std_msgs<span class=\"token double-colon punctuation\">::</span>String<span class=\"token double-colon punctuation\">::</span>ConstPtr<span class=\"token operator\">&amp;</span> msg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">ROS_INFO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I heard: [%s]\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 一个回调函数，便于处理消息</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/**\n   * The ros::init() function needs to see argc and argv so that it can perform\n   * any ROS arguments and name remapping that were provided at the command line.\n   * For programmatic remappings you can use a different version of init() which takes\n   * remappings directly, but for most command-line programs, passing argc and argv is\n   * the easiest way to do it.  The third argument to init() is the name of the node.\n   *\n   * You must call one of the versions of ros::init() before using any other\n   * part of the ROS system.\n   */</span>\n  ros<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> <span class=\"token string\">\"listener\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * NodeHandle is the main access point to communications with the ROS system.\n   * The first NodeHandle constructed will fully initialize this node, and the last\n   * NodeHandle destructed will close down the node.\n   */</span>\n  ros<span class=\"token double-colon punctuation\">::</span>NodeHandle n<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * The subscribe() call is how you tell ROS that you want to receive messages\n   * on a given topic.  This invokes a call to the ROS\n   * master node, which keeps a registry of who is publishing and who\n   * is subscribing.  Messages are passed to a callback function, here\n   * called chatterCallback.  subscribe() returns a Subscriber object that you\n   * must hold on to until you want to unsubscribe.  When all copies of the Subscriber\n   * object go out of scope, this callback will automatically be unsubscribed from\n   * this topic.\n   *\n   * The second parameter to the subscribe() function is the size of the message\n   * queue.  If messages are arriving faster than they are being processed, this\n   * is the number of messages that will be buffered up before beginning to throw\n   * away the oldest ones.\n   */</span>\n  ros<span class=\"token double-colon punctuation\">::</span>Subscriber sub <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chatter\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> chatterCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建一个订阅“chatter”topic的subscriber，并使用函数“chatterCallback”来处理</span>\n\n  <span class=\"token comment\">/**\n   * ros::spin() will enter a loop, pumping callbacks.  With this version, all\n   * callbacks will be called from within this thread (the main one).  ros::spin()\n   * will exit when Ctrl-C is pressed, or the node is shutdown by the master.\n   */</span>\n  ros<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 进入循环</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\"><span class=\"token comment\"># CMakeLists.txt</span>\n<span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>talker src/talker.cpp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>talker <span class=\"token punctuation\">$&#123;</span>catkin_LIBRARIES<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">add_dependencies</span><span class=\"token punctuation\">(</span>talker beginner_tutorials_generate_messages_cpp<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>listener src/listener.cpp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>listener <span class=\"token punctuation\">$&#123;</span>catkin_LIBRARIES<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">add_dependencies</span><span class=\"token punctuation\">(</span>listener beginner_tutorials_generate_messages_cpp<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"写一个简单的service和client\"><a href=\"#写一个简单的service和client\" class=\"headerlink\" title=\"写一个简单的service和client\"></a>写一个简单的service和client</h1><h2 id=\"基本流程-1\"><a href=\"#基本流程-1\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h2><p>同上</p>\n<h2 id=\"文件说明-1\"><a href=\"#文件说明-1\" class=\"headerlink\" title=\"文件说明\"></a>文件说明</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// add_two_ints_server.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ros/ros.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"beginner_tutorials/AddTwoInts.h\"</span> <span class=\"token comment\">//之前生成的msg头文件</span></span>\n\n<span class=\"token comment\">// 一个相加函数</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beginner_tutorials<span class=\"token double-colon punctuation\">::</span>AddTwoInts<span class=\"token double-colon punctuation\">::</span>Request  <span class=\"token operator\">&amp;</span>req<span class=\"token punctuation\">,</span>\n         beginner_tutorials<span class=\"token double-colon punctuation\">::</span>AddTwoInts<span class=\"token double-colon punctuation\">::</span>Response <span class=\"token operator\">&amp;</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  res<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ROS_INFO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request: x=%ld, y=%ld\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>req<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>req<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ROS_INFO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sending back response: [%ld]\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>res<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  ros<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> <span class=\"token string\">\"add_two_ints_server\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ros<span class=\"token double-colon punctuation\">::</span>NodeHandle n<span class=\"token punctuation\">;</span>\n\n  ros<span class=\"token double-colon punctuation\">::</span>ServiceServer service <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">advertiseService</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add_two_ints\"</span><span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建service</span>\n  <span class=\"token function\">ROS_INFO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ready to add two ints.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ros<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// add_two_ints_client.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ros/ros.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"beginner_tutorials/AddTwoInts.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  ros<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> <span class=\"token string\">\"add_two_ints_client\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">ROS_INFO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"usage: add_two_ints_client X Y\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  ros<span class=\"token double-colon punctuation\">::</span>NodeHandle n<span class=\"token punctuation\">;</span>\n  ros<span class=\"token double-colon punctuation\">::</span>ServiceClient client <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">serviceClient</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>beginner_tutorials<span class=\"token double-colon punctuation\">::</span>AddTwoInts<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add_two_ints\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建client</span>\n  beginner_tutorials<span class=\"token double-colon punctuation\">::</span>AddTwoInts srv<span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建service</span>\n  srv<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token function\">atoll</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  srv<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token function\">atoll</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>srv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//调用service</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">ROS_INFO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sum: %ld\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>srv<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">ROS_ERROR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to call service add_two_ints\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\"><span class=\"token comment\"># CMakeLists.txt</span>\n<span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>add_two_ints_server src/add_two_ints_server.cpp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>add_two_ints_server <span class=\"token punctuation\">$&#123;</span>catkin_LIBRARIES<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">add_dependencies</span><span class=\"token punctuation\">(</span>add_two_ints_server beginner_tutorials_gencpp<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>add_two_ints_client src/add_two_ints_client.cpp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>add_two_ints_client <span class=\"token punctuation\">$&#123;</span>catkin_LIBRARIES<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">add_dependencies</span><span class=\"token punctuation\">(</span>add_two_ints_client beginner_tutorials_gencpp<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"记录与回放数据\"><a href=\"#记录与回放数据\" class=\"headerlink\" title=\"记录与回放数据\"></a>记录与回放数据</h1><h2 id=\"记录流程\"><a href=\"#记录流程\" class=\"headerlink\" title=\"记录流程\"></a>记录流程</h2><p>使用<code>rosbag</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> ~/bagfiles\n<span class=\"token builtin class-name\">cd</span> ~/bagfiles\nrosbag record -a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"查看记录信息\"><a href=\"#查看记录信息\" class=\"headerlink\" title=\"查看记录信息\"></a>查看记录信息</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rosbag info <span class=\"token operator\">&lt;</span>your bagfile<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"回放\"><a href=\"#回放\" class=\"headerlink\" title=\"回放\"></a>回放</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rosbag play <span class=\"token operator\">&lt;</span>your bagfile<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"记录信息中的一部分\"><a href=\"#记录信息中的一部分\" class=\"headerlink\" title=\"记录信息中的一部分\"></a>记录信息中的一部分</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rosbag record -O subset /turtle1/cmd_vel /turtle1/pose<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"回放的偏差\"><a href=\"#回放的偏差\" class=\"headerlink\" title=\"回放的偏差\"></a>回放的偏差</h2><blockquote>\n<p>In the previous section you may have noted that the turtle’s path may not have exactly mapped to the original keyboard input - the rough shape should have been the same, but the turtle may not have exactly tracked the same path. The reason for this is that the path tracked by turtlesim is very sensitive to small changes in timing in the system, and rosbag is limited in its ability to exactly duplicate the behavior of a running system in terms of when messages are recorded and processed by rosbag record, and when messages are produced and processed when using rosbag play. For nodes like turtlesim, where minor timing changes in when command messages are processed can subtly alter behavior, the user should not expect perfectly mimicked behavior.</p>\n</blockquote>\n<h1 id=\"从bag文件中读取信息\"><a href=\"#从bag文件中读取信息\" class=\"headerlink\" title=\"从bag文件中读取信息\"></a>从bag文件中读取信息</h1><h2 id=\"法一\"><a href=\"#法一\" class=\"headerlink\" title=\"法一\"></a>法一</h2><p>跑一遍，看terminal输出</p>\n<h2 id=\"法二\"><a href=\"#法二\" class=\"headerlink\" title=\"法二\"></a>法二</h2><p>用<code>ros_readbagfile</code>脚本</p>\n<h1 id=\"纠错\"><a href=\"#纠错\" class=\"headerlink\" title=\"纠错\"></a>纠错</h1><p>使用<code>roswtf</code>。这个名字真的wtf。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>看了三四天吧，把官方的<code>begging level tutorial</code>看完了，然后分配任务发现以后可能用不到ROS，不过也算是有收获。ROS这种把自己建在另一个操作系统上的方式还真的有意思，它的设计让它很适合作为分布式系统，适用于解决多agent协同。以后用到了再说吧。</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/bingguo2.jpg","excerpt":"","more":"<h1 id=\"写一个简单的publisher和subscriber\"><a href=\"#写一个简单的publisher和subscriber\" class=\"headerlink\" title=\"写一个简单的publisher和subscriber\"></a>写一个简单的publisher和subscriber</h1><h2 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h2><ol>\n<li>在package目录下建立<code>src</code>文件夹</li>\n<li>向其中写入一个<code>talker.cpp</code>和一个<code>listener.cpp</code></li>\n<li>向<code>CMakeLists.txt</code>中写入依赖项</li>\n<li>回到workspace目录，<code>catkin_make</code></li>\n<li>切换到workspace环境，并启动roscore</li>\n<li><code>rosrun begginer_tutorials talker</code></li>\n<li><code>rosrun begginer_tutorials listener</code></li>\n</ol>\n<h2 id=\"文件说明\"><a href=\"#文件说明\" class=\"headerlink\" title=\"文件说明\"></a>文件说明</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// talker.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ros/ros.h\"</span> <span class=\"token comment\">//这是一个大的头文件，包含了所有需要的头文件，偷懒专用</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"std_msgs/String.h\"</span> <span class=\"token comment\">//使用msg包</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span></span>\n\n<span class=\"token comment\">/**\n * This tutorial demonstrates simple sending of messages over the ROS system.\n */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/**\n   * The ros::init() function needs to see argc and argv so that it can perform\n   * any ROS arguments and name remapping that were provided at the command line.\n   * For programmatic remappings you can use a different version of init() which takes\n   * remappings directly, but for most command-line programs, passing argc and argv is\n   * the easiest way to do it.  The third argument to init() is the name of the node.\n   *\n   * You must call one of the versions of ros::init() before using any other\n   * part of the ROS system.\n   */</span>\n  ros<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> <span class=\"token string\">\"talker\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//初始化ros，并将该node的名字定为“talker”</span>\n\n  <span class=\"token comment\">/**\n   * NodeHandle is the main access point to communications with the ROS system.\n   * The first NodeHandle constructed will fully initialize this node, and the last\n   * NodeHandle destructed will close down the node.\n   */</span>\n  ros<span class=\"token double-colon punctuation\">::</span>NodeHandle n<span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span>\n\n  <span class=\"token comment\">/**\n   * The advertise() function is how you tell ROS that you want to\n   * publish on a given topic name. This invokes a call to the ROS\n   * master node, which keeps a registry of who is publishing and who\n   * is subscribing. After this advertise() call is made, the master\n   * node will notify anyone who is trying to subscribe to this topic name,\n   * and they will in turn negotiate a peer-to-peer connection with this\n   * node.  advertise() returns a Publisher object which allows you to\n   * publish messages on that topic through a call to publish().  Once\n   * all copies of the returned Publisher object are destroyed, the topic\n   * will be automatically unadvertised.\n   *\n   * The second parameter to advertise() is the size of the message queue\n   * used for publishing messages.  If messages are published more quickly\n   * than we can send them, the number here specifies how many messages to\n   * buffer up before throwing some away.\n   */</span>\n  ros<span class=\"token double-colon punctuation\">::</span>Publisher chatter_pub <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">advertise</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std_msgs<span class=\"token double-colon punctuation\">::</span>String<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chatter\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建msg的publisher</span>\n\n  ros<span class=\"token double-colon punctuation\">::</span>Rate <span class=\"token function\">loop_rate</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设定频率，单位Hz，与sleep（）搭配使用</span>\n\n  <span class=\"token comment\">/**\n   * A count of how many messages we have sent. This is used to create\n   * a unique string for each message.\n   */</span>\n  <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ros<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 循环</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * This is a message object. You stuff it with data, and then publish it.\n     */</span>\n    std_msgs<span class=\"token double-colon punctuation\">::</span>String msg<span class=\"token punctuation\">;</span>\n\n    std<span class=\"token double-colon punctuation\">::</span>stringstream ss<span class=\"token punctuation\">;</span>\n    ss <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"hello world \"</span> <span class=\"token operator\">&lt;&lt;</span> count<span class=\"token punctuation\">;</span>\n    msg<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> ss<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ROS_INFO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//这是print/cout的ros写法</span>\n\n    <span class=\"token comment\">/**\n     * The publish() function is how you send messages. The parameter\n     * is the message object. The type of this object must agree with the type\n     * given as a template parameter to the advertise&lt;>() call, as was done\n     * in the constructor above.\n     */</span>\n    chatter_pub<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里发出去了</span>\n\n    ros<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">spinOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//接受反馈用的，但是在这里没用</span>\n\n    loop_rate<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//和上面的循环搭配使用</span>\n    <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// listener.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ros/ros.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"std_msgs/String.h\"</span></span>\n\n<span class=\"token comment\">/**\n * This tutorial demonstrates simple receipt of messages over the ROS system.\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">chatterCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std_msgs<span class=\"token double-colon punctuation\">::</span>String<span class=\"token double-colon punctuation\">::</span>ConstPtr<span class=\"token operator\">&amp;</span> msg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">ROS_INFO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I heard: [%s]\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 一个回调函数，便于处理消息</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/**\n   * The ros::init() function needs to see argc and argv so that it can perform\n   * any ROS arguments and name remapping that were provided at the command line.\n   * For programmatic remappings you can use a different version of init() which takes\n   * remappings directly, but for most command-line programs, passing argc and argv is\n   * the easiest way to do it.  The third argument to init() is the name of the node.\n   *\n   * You must call one of the versions of ros::init() before using any other\n   * part of the ROS system.\n   */</span>\n  ros<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> <span class=\"token string\">\"listener\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * NodeHandle is the main access point to communications with the ROS system.\n   * The first NodeHandle constructed will fully initialize this node, and the last\n   * NodeHandle destructed will close down the node.\n   */</span>\n  ros<span class=\"token double-colon punctuation\">::</span>NodeHandle n<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * The subscribe() call is how you tell ROS that you want to receive messages\n   * on a given topic.  This invokes a call to the ROS\n   * master node, which keeps a registry of who is publishing and who\n   * is subscribing.  Messages are passed to a callback function, here\n   * called chatterCallback.  subscribe() returns a Subscriber object that you\n   * must hold on to until you want to unsubscribe.  When all copies of the Subscriber\n   * object go out of scope, this callback will automatically be unsubscribed from\n   * this topic.\n   *\n   * The second parameter to the subscribe() function is the size of the message\n   * queue.  If messages are arriving faster than they are being processed, this\n   * is the number of messages that will be buffered up before beginning to throw\n   * away the oldest ones.\n   */</span>\n  ros<span class=\"token double-colon punctuation\">::</span>Subscriber sub <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chatter\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> chatterCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建一个订阅“chatter”topic的subscriber，并使用函数“chatterCallback”来处理</span>\n\n  <span class=\"token comment\">/**\n   * ros::spin() will enter a loop, pumping callbacks.  With this version, all\n   * callbacks will be called from within this thread (the main one).  ros::spin()\n   * will exit when Ctrl-C is pressed, or the node is shutdown by the master.\n   */</span>\n  ros<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 进入循环</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\"><span class=\"token comment\"># CMakeLists.txt</span>\n<span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>talker src/talker.cpp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>talker <span class=\"token punctuation\">$&#123;</span>catkin_LIBRARIES<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">add_dependencies</span><span class=\"token punctuation\">(</span>talker beginner_tutorials_generate_messages_cpp<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>listener src/listener.cpp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>listener <span class=\"token punctuation\">$&#123;</span>catkin_LIBRARIES<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">add_dependencies</span><span class=\"token punctuation\">(</span>listener beginner_tutorials_generate_messages_cpp<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"写一个简单的service和client\"><a href=\"#写一个简单的service和client\" class=\"headerlink\" title=\"写一个简单的service和client\"></a>写一个简单的service和client</h1><h2 id=\"基本流程-1\"><a href=\"#基本流程-1\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h2><p>同上</p>\n<h2 id=\"文件说明-1\"><a href=\"#文件说明-1\" class=\"headerlink\" title=\"文件说明\"></a>文件说明</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// add_two_ints_server.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ros/ros.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"beginner_tutorials/AddTwoInts.h\"</span> <span class=\"token comment\">//之前生成的msg头文件</span></span>\n\n<span class=\"token comment\">// 一个相加函数</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>beginner_tutorials<span class=\"token double-colon punctuation\">::</span>AddTwoInts<span class=\"token double-colon punctuation\">::</span>Request  <span class=\"token operator\">&amp;</span>req<span class=\"token punctuation\">,</span>\n         beginner_tutorials<span class=\"token double-colon punctuation\">::</span>AddTwoInts<span class=\"token double-colon punctuation\">::</span>Response <span class=\"token operator\">&amp;</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  res<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ROS_INFO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request: x=%ld, y=%ld\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>req<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>req<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ROS_INFO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sending back response: [%ld]\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>res<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  ros<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> <span class=\"token string\">\"add_two_ints_server\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ros<span class=\"token double-colon punctuation\">::</span>NodeHandle n<span class=\"token punctuation\">;</span>\n\n  ros<span class=\"token double-colon punctuation\">::</span>ServiceServer service <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">advertiseService</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add_two_ints\"</span><span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建service</span>\n  <span class=\"token function\">ROS_INFO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ready to add two ints.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ros<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">spin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// add_two_ints_client.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ros/ros.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"beginner_tutorials/AddTwoInts.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  ros<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> <span class=\"token string\">\"add_two_ints_client\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">!=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">ROS_INFO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"usage: add_two_ints_client X Y\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  ros<span class=\"token double-colon punctuation\">::</span>NodeHandle n<span class=\"token punctuation\">;</span>\n  ros<span class=\"token double-colon punctuation\">::</span>ServiceClient client <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">serviceClient</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>beginner_tutorials<span class=\"token double-colon punctuation\">::</span>AddTwoInts<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add_two_ints\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建client</span>\n  beginner_tutorials<span class=\"token double-colon punctuation\">::</span>AddTwoInts srv<span class=\"token punctuation\">;</span> <span class=\"token comment\">//创建service</span>\n  srv<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token function\">atoll</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  srv<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token function\">atoll</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>srv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//调用service</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">ROS_INFO</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sum: %ld\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>srv<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">ROS_ERROR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to call service add_two_ints\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\"><span class=\"token comment\"># CMakeLists.txt</span>\n<span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>add_two_ints_server src/add_two_ints_server.cpp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>add_two_ints_server <span class=\"token punctuation\">$&#123;</span>catkin_LIBRARIES<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">add_dependencies</span><span class=\"token punctuation\">(</span>add_two_ints_server beginner_tutorials_gencpp<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>add_two_ints_client src/add_two_ints_client.cpp<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>add_two_ints_client <span class=\"token punctuation\">$&#123;</span>catkin_LIBRARIES<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">add_dependencies</span><span class=\"token punctuation\">(</span>add_two_ints_client beginner_tutorials_gencpp<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"记录与回放数据\"><a href=\"#记录与回放数据\" class=\"headerlink\" title=\"记录与回放数据\"></a>记录与回放数据</h1><h2 id=\"记录流程\"><a href=\"#记录流程\" class=\"headerlink\" title=\"记录流程\"></a>记录流程</h2><p>使用<code>rosbag</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> ~/bagfiles\n<span class=\"token builtin class-name\">cd</span> ~/bagfiles\nrosbag record -a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"查看记录信息\"><a href=\"#查看记录信息\" class=\"headerlink\" title=\"查看记录信息\"></a>查看记录信息</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rosbag info <span class=\"token operator\">&lt;</span>your bagfile<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"回放\"><a href=\"#回放\" class=\"headerlink\" title=\"回放\"></a>回放</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rosbag play <span class=\"token operator\">&lt;</span>your bagfile<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"记录信息中的一部分\"><a href=\"#记录信息中的一部分\" class=\"headerlink\" title=\"记录信息中的一部分\"></a>记录信息中的一部分</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rosbag record -O subset /turtle1/cmd_vel /turtle1/pose<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"回放的偏差\"><a href=\"#回放的偏差\" class=\"headerlink\" title=\"回放的偏差\"></a>回放的偏差</h2><blockquote>\n<p>In the previous section you may have noted that the turtle’s path may not have exactly mapped to the original keyboard input - the rough shape should have been the same, but the turtle may not have exactly tracked the same path. The reason for this is that the path tracked by turtlesim is very sensitive to small changes in timing in the system, and rosbag is limited in its ability to exactly duplicate the behavior of a running system in terms of when messages are recorded and processed by rosbag record, and when messages are produced and processed when using rosbag play. For nodes like turtlesim, where minor timing changes in when command messages are processed can subtly alter behavior, the user should not expect perfectly mimicked behavior.</p>\n</blockquote>\n<h1 id=\"从bag文件中读取信息\"><a href=\"#从bag文件中读取信息\" class=\"headerlink\" title=\"从bag文件中读取信息\"></a>从bag文件中读取信息</h1><h2 id=\"法一\"><a href=\"#法一\" class=\"headerlink\" title=\"法一\"></a>法一</h2><p>跑一遍，看terminal输出</p>\n<h2 id=\"法二\"><a href=\"#法二\" class=\"headerlink\" title=\"法二\"></a>法二</h2><p>用<code>ros_readbagfile</code>脚本</p>\n<h1 id=\"纠错\"><a href=\"#纠错\" class=\"headerlink\" title=\"纠错\"></a>纠错</h1><p>使用<code>roswtf</code>。这个名字真的wtf。</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>看了三四天吧，把官方的<code>begging level tutorial</code>看完了，然后分配任务发现以后可能用不到ROS，不过也算是有收获。ROS这种把自己建在另一个操作系统上的方式还真的有意思，它的设计让它很适合作为分布式系统，适用于解决多agent协同。以后用到了再说吧。</p>\n"},{"title":"ROS学习笔记（2）","description":"ROS学习笔记（2）","abbrlink":"f462bbbb","date":"2022-01-21T07:15:08.000Z","_content":"\n# ROS Service\n\n## rosservice\n\n> Services are another way that nodes can communicate with each other. Services allow nodes to send a **request** and receive a **response**.\n\n```bash\nrosservice list         print information about active services\nrosservice call         call the service with the provided args\nrosservice type         print service type\nrosservice find         find services by service type\nrosservice uri          print service ROSRPC uri\n```\n\n## rosparam\n\n```bash\nrosparam set            set parameter\nrosparam get            get parameter\nrosparam load           load parameters from file\nrosparam dump           dump parameters to file\nrosparam delete         delete parameter\nrosparam list           list parameter names\n```\n\n# 使用rqt_console和roslaunch\n\n## rqt_console\n\n```bash\nrosrun rqt_console rqt_console # 查看日志\nrosrun rqt_logger_level rqt_logger_level # 设置日志等级，来源\n```\n\n## roslaunch\n\n自定义xml文件，使一只小海龟模仿另一只。\n\n```bash\nroslaunch [package] [filename.launch]\n```\n\n# ROS ed\n\n### rosed\n\n```bash\n# rosed [package_name] [filename]\nrosed roscpp Logger.msg\n```\n\n使用`echo $EDITOR`查看当前的编辑器（为空说明使用了默认的`vim`）\n\n可使用`export EDITOR='nano -w'`之类的方式修改编辑器（永久修改的话最好把这行加入`.bashrc`）\n\n# 创建ROS msg和srv文件\n\n> - [msg](http://wiki.ros.org/msg): msg files are simple text files that describe the fields of a ROS message. They are used to generate source code for messages in different languages.\n> - [srv](http://wiki.ros.org/srv): an srv file describes a service. It is composed of two parts: a request and a response.\n\n> msgs are just simple text files with a field type and field name per line. The field types you can use are:\n>\n> - int8, int16, int32, int64 (plus uint*)\n> - float32, float64\n> - string\n> - time, duration\n> - other msg files\n> - variable-length array[] and fixed-length array[C]\n\n> srv files are just like msg files, except they contain two parts: a request and a response. The two parts are separated by a '---' line. Here is an example of a srv file:\n>\n> \n>\n> ```bash\n> int64 A\n> int64 B\n> ---\n> int64 Sum\n> ```\n\n## 创建msg文件\n\n1. 在package目录下建立`msg`文件夹，向该文件夹写入一个`.msg`文件。\n\n2. 回到package目录下，修改`package.xml`文件\n\n   ```xml\n     <build_depend>message_generation</build_depend>\n     <exec_depend>message_runtime</exec_depend>\n   ```\n\n3. 修改`CMakeLists.txt`\n\n   1. `find_package`中添加`message_generation`\n   2. `catkin_package`的`CATKIN_DEPENDS`后添加`message_runtime`\n   3. 取消`add_message_files`的注释，并向其中添加之前写的`.msg`文件\n   4. 取消`generate_messages`的注释\n\n4. 查看msg文件，使用`rosmsg show`如果文件格式没问题，会显示出定义的数据\n\n### rosmsg\n\n```bash\n  rosmsg show     Show message description\n  rosmsg list     List all messages\n  rosmsg md5      Display message md5sum\n  rosmsg package  List messages in a package\n  rosmsg packages List packages that contain messages\n```\n\n## 创建srv文件\n\n1. 在package下建立`srv`文件夹\n1. 使用`roscp`从其他地方复制个写好的`.srv`文件过来（肯定也能自己写拉）\n1. 同[创建msg文件](#创建msg文件) ，要确保`package.xml`和`CMakeLists.txt`中有相应的内容\n1. `CMakeLists.txt`中，取消`add_service_files`的注释，并向其中添加之前写的`.srv`文件\n\n### roscp\n\n```bash\n$ roscp [package_name] [file_to_copy_path] [copy_path]\n```\n\n### rossrv\n\n```bash\nrossrv show <service type>\n```\n\n## 生成msg和srv文件\n\n1. 切换到package目录的上两层（就是workspace所在的目录，这里是`~/catkin_ws`）\n2. `catkin build`或者`catkin_make`\n3. 文件生成好了，具体放在哪见下方参考\n\n> Any .msg file in the msg directory will generate code for use in all supported languages. The C++ message header file will be generated in `~/catkin_ws/devel/include/beginner_tutorials/`. The Python script will be created in `~/catkin_ws/devel/lib/python2.7/dist-packages/beginner_tutorials/msg`. The lisp file appears in `~/catkin_ws/devel/share/common-lisp/ros/beginner_tutorials/msg/`.\n>\n> Similarly, any .srv files in the srv directory will have generated code in supported languages. For C++, this will generate header files in the same directory as the message header files. For Python and Lisp, there will be an 'srv' folder beside the 'msg' folders.\n>\n> The full specification for the message format is available at the [Message Description Language](http://wiki.ros.org/ROS/Message_Description_Language) page.\n","source":"_posts/Auto/ROS学习笔记（2）.md","raw":"---\ntitle: ROS学习笔记（2）\ntags:\n  - linux\n  - ros\n  - 专栏：ros学习笔记\ndescription: ROS学习笔记（2）\ncategories:\n  - Auto\nabbrlink: f462bbbb\ndate: 2022-01-21 15:15:08\n---\n\n# ROS Service\n\n## rosservice\n\n> Services are another way that nodes can communicate with each other. Services allow nodes to send a **request** and receive a **response**.\n\n```bash\nrosservice list         print information about active services\nrosservice call         call the service with the provided args\nrosservice type         print service type\nrosservice find         find services by service type\nrosservice uri          print service ROSRPC uri\n```\n\n## rosparam\n\n```bash\nrosparam set            set parameter\nrosparam get            get parameter\nrosparam load           load parameters from file\nrosparam dump           dump parameters to file\nrosparam delete         delete parameter\nrosparam list           list parameter names\n```\n\n# 使用rqt_console和roslaunch\n\n## rqt_console\n\n```bash\nrosrun rqt_console rqt_console # 查看日志\nrosrun rqt_logger_level rqt_logger_level # 设置日志等级，来源\n```\n\n## roslaunch\n\n自定义xml文件，使一只小海龟模仿另一只。\n\n```bash\nroslaunch [package] [filename.launch]\n```\n\n# ROS ed\n\n### rosed\n\n```bash\n# rosed [package_name] [filename]\nrosed roscpp Logger.msg\n```\n\n使用`echo $EDITOR`查看当前的编辑器（为空说明使用了默认的`vim`）\n\n可使用`export EDITOR='nano -w'`之类的方式修改编辑器（永久修改的话最好把这行加入`.bashrc`）\n\n# 创建ROS msg和srv文件\n\n> - [msg](http://wiki.ros.org/msg): msg files are simple text files that describe the fields of a ROS message. They are used to generate source code for messages in different languages.\n> - [srv](http://wiki.ros.org/srv): an srv file describes a service. It is composed of two parts: a request and a response.\n\n> msgs are just simple text files with a field type and field name per line. The field types you can use are:\n>\n> - int8, int16, int32, int64 (plus uint*)\n> - float32, float64\n> - string\n> - time, duration\n> - other msg files\n> - variable-length array[] and fixed-length array[C]\n\n> srv files are just like msg files, except they contain two parts: a request and a response. The two parts are separated by a '---' line. Here is an example of a srv file:\n>\n> \n>\n> ```bash\n> int64 A\n> int64 B\n> ---\n> int64 Sum\n> ```\n\n## 创建msg文件\n\n1. 在package目录下建立`msg`文件夹，向该文件夹写入一个`.msg`文件。\n\n2. 回到package目录下，修改`package.xml`文件\n\n   ```xml\n     <build_depend>message_generation</build_depend>\n     <exec_depend>message_runtime</exec_depend>\n   ```\n\n3. 修改`CMakeLists.txt`\n\n   1. `find_package`中添加`message_generation`\n   2. `catkin_package`的`CATKIN_DEPENDS`后添加`message_runtime`\n   3. 取消`add_message_files`的注释，并向其中添加之前写的`.msg`文件\n   4. 取消`generate_messages`的注释\n\n4. 查看msg文件，使用`rosmsg show`如果文件格式没问题，会显示出定义的数据\n\n### rosmsg\n\n```bash\n  rosmsg show     Show message description\n  rosmsg list     List all messages\n  rosmsg md5      Display message md5sum\n  rosmsg package  List messages in a package\n  rosmsg packages List packages that contain messages\n```\n\n## 创建srv文件\n\n1. 在package下建立`srv`文件夹\n1. 使用`roscp`从其他地方复制个写好的`.srv`文件过来（肯定也能自己写拉）\n1. 同[创建msg文件](#创建msg文件) ，要确保`package.xml`和`CMakeLists.txt`中有相应的内容\n1. `CMakeLists.txt`中，取消`add_service_files`的注释，并向其中添加之前写的`.srv`文件\n\n### roscp\n\n```bash\n$ roscp [package_name] [file_to_copy_path] [copy_path]\n```\n\n### rossrv\n\n```bash\nrossrv show <service type>\n```\n\n## 生成msg和srv文件\n\n1. 切换到package目录的上两层（就是workspace所在的目录，这里是`~/catkin_ws`）\n2. `catkin build`或者`catkin_make`\n3. 文件生成好了，具体放在哪见下方参考\n\n> Any .msg file in the msg directory will generate code for use in all supported languages. The C++ message header file will be generated in `~/catkin_ws/devel/include/beginner_tutorials/`. The Python script will be created in `~/catkin_ws/devel/lib/python2.7/dist-packages/beginner_tutorials/msg`. The lisp file appears in `~/catkin_ws/devel/share/common-lisp/ros/beginner_tutorials/msg/`.\n>\n> Similarly, any .srv files in the srv directory will have generated code in supported languages. For C++, this will generate header files in the same directory as the message header files. For Python and Lisp, there will be an 'srv' folder beside the 'msg' folders.\n>\n> The full specification for the message format is available at the [Message Description Language](http://wiki.ros.org/ROS/Message_Description_Language) page.\n","slug":"ROS学习笔记（2）","published":1,"category":"Auto","updated":"2022-02-11T05:17:56.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irwv000b8wuldrgt0udi","content":"<h1 id=\"ROS-Service\"><a href=\"#ROS-Service\" class=\"headerlink\" title=\"ROS Service\"></a>ROS Service</h1><h2 id=\"rosservice\"><a href=\"#rosservice\" class=\"headerlink\" title=\"rosservice\"></a>rosservice</h2><blockquote>\n<p>Services are another way that nodes can communicate with each other. Services allow nodes to send a <strong>request</strong> and receive a <strong>response</strong>.</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rosservice list         print information about active services\nrosservice call         call the <span class=\"token function\">service</span> with the provided args\nrosservice <span class=\"token builtin class-name\">type</span>         print <span class=\"token function\">service</span> <span class=\"token builtin class-name\">type</span>\nrosservice <span class=\"token function\">find</span>         <span class=\"token function\">find</span> services by <span class=\"token function\">service</span> <span class=\"token builtin class-name\">type</span>\nrosservice uri          print <span class=\"token function\">service</span> ROSRPC uri<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"rosparam\"><a href=\"#rosparam\" class=\"headerlink\" title=\"rosparam\"></a>rosparam</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rosparam <span class=\"token builtin class-name\">set</span>            <span class=\"token builtin class-name\">set</span> parameter\nrosparam get            get parameter\nrosparam load           load parameters from <span class=\"token function\">file</span>\nrosparam dump           dump parameters to <span class=\"token function\">file</span>\nrosparam delete         delete parameter\nrosparam list           list parameter names<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"使用rqt-console和roslaunch\"><a href=\"#使用rqt-console和roslaunch\" class=\"headerlink\" title=\"使用rqt_console和roslaunch\"></a>使用rqt_console和roslaunch</h1><h2 id=\"rqt-console\"><a href=\"#rqt-console\" class=\"headerlink\" title=\"rqt_console\"></a>rqt_console</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rosrun rqt_console rqt_console <span class=\"token comment\"># 查看日志</span>\nrosrun rqt_logger_level rqt_logger_level <span class=\"token comment\"># 设置日志等级，来源</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"roslaunch\"><a href=\"#roslaunch\" class=\"headerlink\" title=\"roslaunch\"></a>roslaunch</h2><p>自定义xml文件，使一只小海龟模仿另一只。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">roslaunch <span class=\"token punctuation\">[</span>package<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>filename.launch<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"ROS-ed\"><a href=\"#ROS-ed\" class=\"headerlink\" title=\"ROS ed\"></a>ROS ed</h1><h3 id=\"rosed\"><a href=\"#rosed\" class=\"headerlink\" title=\"rosed\"></a>rosed</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># rosed [package_name] [filename]</span>\nrosed roscpp Logger.msg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>使用<code>echo $EDITOR</code>查看当前的编辑器（为空说明使用了默认的<code>vim</code>）</p>\n<p>可使用<code>export EDITOR=&#39;nano -w&#39;</code>之类的方式修改编辑器（永久修改的话最好把这行加入<code>.bashrc</code>）</p>\n<h1 id=\"创建ROS-msg和srv文件\"><a href=\"#创建ROS-msg和srv文件\" class=\"headerlink\" title=\"创建ROS msg和srv文件\"></a>创建ROS msg和srv文件</h1><blockquote>\n<ul>\n<li><a href=\"http://wiki.ros.org/msg\">msg</a>: msg files are simple text files that describe the fields of a ROS message. They are used to generate source code for messages in different languages.</li>\n<li><a href=\"http://wiki.ros.org/srv\">srv</a>: an srv file describes a service. It is composed of two parts: a request and a response.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>msgs are just simple text files with a field type and field name per line. The field types you can use are:</p>\n<ul>\n<li>int8, int16, int32, int64 (plus uint*)</li>\n<li>float32, float64</li>\n<li>string</li>\n<li>time, duration</li>\n<li>other msg files</li>\n<li>variable-length array[] and fixed-length array[C]</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>srv files are just like msg files, except they contain two parts: a request and a response. The two parts are separated by a ‘—‘ line. Here is an example of a srv file:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">int64 A\nint64 B\n---\nint64 Sum<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"创建msg文件\"><a href=\"#创建msg文件\" class=\"headerlink\" title=\"创建msg文件\"></a>创建msg文件</h2><ol>\n<li><p>在package目录下建立<code>msg</code>文件夹，向该文件夹写入一个<code>.msg</code>文件。</p>\n</li>\n<li><p>回到package目录下，修改<code>package.xml</code>文件</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build_depend</span><span class=\"token punctuation\">></span></span>message_generation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build_depend</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exec_depend</span><span class=\"token punctuation\">></span></span>message_runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exec_depend</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>修改<code>CMakeLists.txt</code></p>\n<ol>\n<li><code>find_package</code>中添加<code>message_generation</code></li>\n<li><code>catkin_package</code>的<code>CATKIN_DEPENDS</code>后添加<code>message_runtime</code></li>\n<li>取消<code>add_message_files</code>的注释，并向其中添加之前写的<code>.msg</code>文件</li>\n<li>取消<code>generate_messages</code>的注释</li>\n</ol>\n</li>\n<li><p>查看msg文件，使用<code>rosmsg show</code>如果文件格式没问题，会显示出定义的数据</p>\n</li>\n</ol>\n<h3 id=\"rosmsg\"><a href=\"#rosmsg\" class=\"headerlink\" title=\"rosmsg\"></a>rosmsg</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rosmsg show     Show message description\nrosmsg list     List all messages\nrosmsg md5      Display message md5sum\nrosmsg package  List messages <span class=\"token keyword\">in</span> a package\nrosmsg packages List packages that contain messages<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"创建srv文件\"><a href=\"#创建srv文件\" class=\"headerlink\" title=\"创建srv文件\"></a>创建srv文件</h2><ol>\n<li>在package下建立<code>srv</code>文件夹</li>\n<li>使用<code>roscp</code>从其他地方复制个写好的<code>.srv</code>文件过来（肯定也能自己写拉）</li>\n<li>同<a href=\"#%E5%88%9B%E5%BB%BAmsg%E6%96%87%E4%BB%B6\">创建msg文件</a> ，要确保<code>package.xml</code>和<code>CMakeLists.txt</code>中有相应的内容</li>\n<li><code>CMakeLists.txt</code>中，取消<code>add_service_files</code>的注释，并向其中添加之前写的<code>.srv</code>文件</li>\n</ol>\n<h3 id=\"roscp\"><a href=\"#roscp\" class=\"headerlink\" title=\"roscp\"></a>roscp</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ roscp <span class=\"token punctuation\">[</span>package_name<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>file_to_copy_path<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>copy_path<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"rossrv\"><a href=\"#rossrv\" class=\"headerlink\" title=\"rossrv\"></a>rossrv</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rossrv show <span class=\"token operator\">&lt;</span>service type<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"生成msg和srv文件\"><a href=\"#生成msg和srv文件\" class=\"headerlink\" title=\"生成msg和srv文件\"></a>生成msg和srv文件</h2><ol>\n<li>切换到package目录的上两层（就是workspace所在的目录，这里是<code>~/catkin_ws</code>）</li>\n<li><code>catkin build</code>或者<code>catkin_make</code></li>\n<li>文件生成好了，具体放在哪见下方参考</li>\n</ol>\n<blockquote>\n<p>Any .msg file in the msg directory will generate code for use in all supported languages. The C++ message header file will be generated in <code>~/catkin_ws/devel/include/beginner_tutorials/</code>. The Python script will be created in <code>~/catkin_ws/devel/lib/python2.7/dist-packages/beginner_tutorials/msg</code>. The lisp file appears in <code>~/catkin_ws/devel/share/common-lisp/ros/beginner_tutorials/msg/</code>.</p>\n<p>Similarly, any .srv files in the srv directory will have generated code in supported languages. For C++, this will generate header files in the same directory as the message header files. For Python and Lisp, there will be an ‘srv’ folder beside the ‘msg’ folders.</p>\n<p>The full specification for the message format is available at the <a href=\"http://wiki.ros.org/ROS/Message_Description_Language\">Message Description Language</a> page.</p>\n</blockquote>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/re05.jpg","excerpt":"","more":"<h1 id=\"ROS-Service\"><a href=\"#ROS-Service\" class=\"headerlink\" title=\"ROS Service\"></a>ROS Service</h1><h2 id=\"rosservice\"><a href=\"#rosservice\" class=\"headerlink\" title=\"rosservice\"></a>rosservice</h2><blockquote>\n<p>Services are another way that nodes can communicate with each other. Services allow nodes to send a <strong>request</strong> and receive a <strong>response</strong>.</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rosservice list         print information about active services\nrosservice call         call the <span class=\"token function\">service</span> with the provided args\nrosservice <span class=\"token builtin class-name\">type</span>         print <span class=\"token function\">service</span> <span class=\"token builtin class-name\">type</span>\nrosservice <span class=\"token function\">find</span>         <span class=\"token function\">find</span> services by <span class=\"token function\">service</span> <span class=\"token builtin class-name\">type</span>\nrosservice uri          print <span class=\"token function\">service</span> ROSRPC uri<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"rosparam\"><a href=\"#rosparam\" class=\"headerlink\" title=\"rosparam\"></a>rosparam</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rosparam <span class=\"token builtin class-name\">set</span>            <span class=\"token builtin class-name\">set</span> parameter\nrosparam get            get parameter\nrosparam load           load parameters from <span class=\"token function\">file</span>\nrosparam dump           dump parameters to <span class=\"token function\">file</span>\nrosparam delete         delete parameter\nrosparam list           list parameter names<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"使用rqt-console和roslaunch\"><a href=\"#使用rqt-console和roslaunch\" class=\"headerlink\" title=\"使用rqt_console和roslaunch\"></a>使用rqt_console和roslaunch</h1><h2 id=\"rqt-console\"><a href=\"#rqt-console\" class=\"headerlink\" title=\"rqt_console\"></a>rqt_console</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rosrun rqt_console rqt_console <span class=\"token comment\"># 查看日志</span>\nrosrun rqt_logger_level rqt_logger_level <span class=\"token comment\"># 设置日志等级，来源</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"roslaunch\"><a href=\"#roslaunch\" class=\"headerlink\" title=\"roslaunch\"></a>roslaunch</h2><p>自定义xml文件，使一只小海龟模仿另一只。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">roslaunch <span class=\"token punctuation\">[</span>package<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>filename.launch<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"ROS-ed\"><a href=\"#ROS-ed\" class=\"headerlink\" title=\"ROS ed\"></a>ROS ed</h1><h3 id=\"rosed\"><a href=\"#rosed\" class=\"headerlink\" title=\"rosed\"></a>rosed</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># rosed [package_name] [filename]</span>\nrosed roscpp Logger.msg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>使用<code>echo $EDITOR</code>查看当前的编辑器（为空说明使用了默认的<code>vim</code>）</p>\n<p>可使用<code>export EDITOR=&#39;nano -w&#39;</code>之类的方式修改编辑器（永久修改的话最好把这行加入<code>.bashrc</code>）</p>\n<h1 id=\"创建ROS-msg和srv文件\"><a href=\"#创建ROS-msg和srv文件\" class=\"headerlink\" title=\"创建ROS msg和srv文件\"></a>创建ROS msg和srv文件</h1><blockquote>\n<ul>\n<li><a href=\"http://wiki.ros.org/msg\">msg</a>: msg files are simple text files that describe the fields of a ROS message. They are used to generate source code for messages in different languages.</li>\n<li><a href=\"http://wiki.ros.org/srv\">srv</a>: an srv file describes a service. It is composed of two parts: a request and a response.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>msgs are just simple text files with a field type and field name per line. The field types you can use are:</p>\n<ul>\n<li>int8, int16, int32, int64 (plus uint*)</li>\n<li>float32, float64</li>\n<li>string</li>\n<li>time, duration</li>\n<li>other msg files</li>\n<li>variable-length array[] and fixed-length array[C]</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>srv files are just like msg files, except they contain two parts: a request and a response. The two parts are separated by a ‘—‘ line. Here is an example of a srv file:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">int64 A\nint64 B\n---\nint64 Sum<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<h2 id=\"创建msg文件\"><a href=\"#创建msg文件\" class=\"headerlink\" title=\"创建msg文件\"></a>创建msg文件</h2><ol>\n<li><p>在package目录下建立<code>msg</code>文件夹，向该文件夹写入一个<code>.msg</code>文件。</p>\n</li>\n<li><p>回到package目录下，修改<code>package.xml</code>文件</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build_depend</span><span class=\"token punctuation\">></span></span>message_generation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build_depend</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exec_depend</span><span class=\"token punctuation\">></span></span>message_runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exec_depend</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>修改<code>CMakeLists.txt</code></p>\n<ol>\n<li><code>find_package</code>中添加<code>message_generation</code></li>\n<li><code>catkin_package</code>的<code>CATKIN_DEPENDS</code>后添加<code>message_runtime</code></li>\n<li>取消<code>add_message_files</code>的注释，并向其中添加之前写的<code>.msg</code>文件</li>\n<li>取消<code>generate_messages</code>的注释</li>\n</ol>\n</li>\n<li><p>查看msg文件，使用<code>rosmsg show</code>如果文件格式没问题，会显示出定义的数据</p>\n</li>\n</ol>\n<h3 id=\"rosmsg\"><a href=\"#rosmsg\" class=\"headerlink\" title=\"rosmsg\"></a>rosmsg</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rosmsg show     Show message description\nrosmsg list     List all messages\nrosmsg md5      Display message md5sum\nrosmsg package  List messages <span class=\"token keyword\">in</span> a package\nrosmsg packages List packages that contain messages<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"创建srv文件\"><a href=\"#创建srv文件\" class=\"headerlink\" title=\"创建srv文件\"></a>创建srv文件</h2><ol>\n<li>在package下建立<code>srv</code>文件夹</li>\n<li>使用<code>roscp</code>从其他地方复制个写好的<code>.srv</code>文件过来（肯定也能自己写拉）</li>\n<li>同<a href=\"#%E5%88%9B%E5%BB%BAmsg%E6%96%87%E4%BB%B6\">创建msg文件</a> ，要确保<code>package.xml</code>和<code>CMakeLists.txt</code>中有相应的内容</li>\n<li><code>CMakeLists.txt</code>中，取消<code>add_service_files</code>的注释，并向其中添加之前写的<code>.srv</code>文件</li>\n</ol>\n<h3 id=\"roscp\"><a href=\"#roscp\" class=\"headerlink\" title=\"roscp\"></a>roscp</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ roscp <span class=\"token punctuation\">[</span>package_name<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>file_to_copy_path<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>copy_path<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"rossrv\"><a href=\"#rossrv\" class=\"headerlink\" title=\"rossrv\"></a>rossrv</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rossrv show <span class=\"token operator\">&lt;</span>service type<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"生成msg和srv文件\"><a href=\"#生成msg和srv文件\" class=\"headerlink\" title=\"生成msg和srv文件\"></a>生成msg和srv文件</h2><ol>\n<li>切换到package目录的上两层（就是workspace所在的目录，这里是<code>~/catkin_ws</code>）</li>\n<li><code>catkin build</code>或者<code>catkin_make</code></li>\n<li>文件生成好了，具体放在哪见下方参考</li>\n</ol>\n<blockquote>\n<p>Any .msg file in the msg directory will generate code for use in all supported languages. The C++ message header file will be generated in <code>~/catkin_ws/devel/include/beginner_tutorials/</code>. The Python script will be created in <code>~/catkin_ws/devel/lib/python2.7/dist-packages/beginner_tutorials/msg</code>. The lisp file appears in <code>~/catkin_ws/devel/share/common-lisp/ros/beginner_tutorials/msg/</code>.</p>\n<p>Similarly, any .srv files in the srv directory will have generated code in supported languages. For C++, this will generate header files in the same directory as the message header files. For Python and Lisp, there will be an ‘srv’ folder beside the ‘msg’ folders.</p>\n<p>The full specification for the message format is available at the <a href=\"http://wiki.ros.org/ROS/Message_Description_Language\">Message Description Language</a> page.</p>\n</blockquote>\n"},{"title":"记录从无人机上学到的东西","abbrlink":"12263b9c","date":"2021-11-16T12:54:45.000Z","_content":"\n# 记录从无人机上学到的东西\n\n*UAV*: Unmanned Aerial Vehicle\n\n## 项目的目的\n\n分为森林救火和森林巡逻，我被分在森林巡逻部分。主要是让飞机按一定轨迹在操场上飞行，以z形路线飞过一个操场。森姐救火则是在上述基础上加上使用视觉识别找到一个红色的正方形。我在该小组中负责通信部分。\n\n## 数传通信\n\n主要的任务是将无人机的xyz及三个偏转角通过数传发到地面站，地面站方面会有同学根据数据进行3d绘图。\n\n一开始读代码思路不对，一心想着找gps的数据，于是找到了Sensor，通过将整个sensor的数据取出来，然后获取其中的数据。后来发现库里有个MeasureSystem，可以直接获取xyz及偏转角。于是改写为直接调取。\n\n获取数据后就是发送，发送是利用飞控的Uart与数传进行连接。库中提供了Uart_Send函数，接受一个数组和一个长度作为参数，但是该数组只接受字符，因此要将实际数据转为字符后再发送，思路是将 原始数据%10+‘0’ 从而得到其ascii码值，同时用switch来遍历xyz和三个偏转角。每6个数据作为一组，一组中的数据之间使用‘，’分割，不同组之间使用‘@’分割。期间对原数据进行处理时要记得将得到的某个数据进行数组反转（再看一眼上面对原始数据处理的思路），因为这个问题还出过bug……。\n\n再具体一点，原始数据都是double 或者 float类型，单位都为厘米。一开始我在将获取的数据传到中间的handler时，将其转为（int），然后再直接处理，后面我在转为（int）前，让原始数据的右值*PRESION，设定一个精度，精度取100，从而获得了0.1mm级别的精度。但后面发现这个精度的意义不大了，于是又改回了1。\n\n再记录一下硬件的问题：\n\n1. 电调插反了，折磨了搞硬件的兄弟一下午\n2. 图传始终没有图像，一直以为是电源线的问题，后面发现是插在电脑上的输入线没有插稳\n3. 飞到一半炸机了，排查半天发现是当时调试的太久，没有注意到电量。\n4. 几乎相同的坐标发送代码（除了版本问题外，对数据处理的方式相同）在A9上正常运行，在TI上发出的数据是乱码，改用发送固定值之后，电脑端收到了稳定的乱码。更换数传和数传连接线之后问题仍然存在。直到写下此文时依然未解决。\n","source":"_posts/Auto/UAV.md","raw":"---\ntitle: 记录从无人机上学到的东西\ncategories:\n  - Auto\ntags: auto\nabbrlink: 12263b9c\ndate: 2021-11-16 20:54:45\n---\n\n# 记录从无人机上学到的东西\n\n*UAV*: Unmanned Aerial Vehicle\n\n## 项目的目的\n\n分为森林救火和森林巡逻，我被分在森林巡逻部分。主要是让飞机按一定轨迹在操场上飞行，以z形路线飞过一个操场。森姐救火则是在上述基础上加上使用视觉识别找到一个红色的正方形。我在该小组中负责通信部分。\n\n## 数传通信\n\n主要的任务是将无人机的xyz及三个偏转角通过数传发到地面站，地面站方面会有同学根据数据进行3d绘图。\n\n一开始读代码思路不对，一心想着找gps的数据，于是找到了Sensor，通过将整个sensor的数据取出来，然后获取其中的数据。后来发现库里有个MeasureSystem，可以直接获取xyz及偏转角。于是改写为直接调取。\n\n获取数据后就是发送，发送是利用飞控的Uart与数传进行连接。库中提供了Uart_Send函数，接受一个数组和一个长度作为参数，但是该数组只接受字符，因此要将实际数据转为字符后再发送，思路是将 原始数据%10+‘0’ 从而得到其ascii码值，同时用switch来遍历xyz和三个偏转角。每6个数据作为一组，一组中的数据之间使用‘，’分割，不同组之间使用‘@’分割。期间对原数据进行处理时要记得将得到的某个数据进行数组反转（再看一眼上面对原始数据处理的思路），因为这个问题还出过bug……。\n\n再具体一点，原始数据都是double 或者 float类型，单位都为厘米。一开始我在将获取的数据传到中间的handler时，将其转为（int），然后再直接处理，后面我在转为（int）前，让原始数据的右值*PRESION，设定一个精度，精度取100，从而获得了0.1mm级别的精度。但后面发现这个精度的意义不大了，于是又改回了1。\n\n再记录一下硬件的问题：\n\n1. 电调插反了，折磨了搞硬件的兄弟一下午\n2. 图传始终没有图像，一直以为是电源线的问题，后面发现是插在电脑上的输入线没有插稳\n3. 飞到一半炸机了，排查半天发现是当时调试的太久，没有注意到电量。\n4. 几乎相同的坐标发送代码（除了版本问题外，对数据处理的方式相同）在A9上正常运行，在TI上发出的数据是乱码，改用发送固定值之后，电脑端收到了稳定的乱码。更换数传和数传连接线之后问题仍然存在。直到写下此文时依然未解决。\n","slug":"UAV","published":1,"category":"Auto","updated":"2022-02-11T05:17:56.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irwx000e8wulapmk01it","content":"<h1 id=\"记录从无人机上学到的东西\"><a href=\"#记录从无人机上学到的东西\" class=\"headerlink\" title=\"记录从无人机上学到的东西\"></a>记录从无人机上学到的东西</h1><p><em>UAV</em>: Unmanned Aerial Vehicle</p>\n<h2 id=\"项目的目的\"><a href=\"#项目的目的\" class=\"headerlink\" title=\"项目的目的\"></a>项目的目的</h2><p>分为森林救火和森林巡逻，我被分在森林巡逻部分。主要是让飞机按一定轨迹在操场上飞行，以z形路线飞过一个操场。森姐救火则是在上述基础上加上使用视觉识别找到一个红色的正方形。我在该小组中负责通信部分。</p>\n<h2 id=\"数传通信\"><a href=\"#数传通信\" class=\"headerlink\" title=\"数传通信\"></a>数传通信</h2><p>主要的任务是将无人机的xyz及三个偏转角通过数传发到地面站，地面站方面会有同学根据数据进行3d绘图。</p>\n<p>一开始读代码思路不对，一心想着找gps的数据，于是找到了Sensor，通过将整个sensor的数据取出来，然后获取其中的数据。后来发现库里有个MeasureSystem，可以直接获取xyz及偏转角。于是改写为直接调取。</p>\n<p>获取数据后就是发送，发送是利用飞控的Uart与数传进行连接。库中提供了Uart_Send函数，接受一个数组和一个长度作为参数，但是该数组只接受字符，因此要将实际数据转为字符后再发送，思路是将 原始数据%10+‘0’ 从而得到其ascii码值，同时用switch来遍历xyz和三个偏转角。每6个数据作为一组，一组中的数据之间使用‘，’分割，不同组之间使用‘@’分割。期间对原数据进行处理时要记得将得到的某个数据进行数组反转（再看一眼上面对原始数据处理的思路），因为这个问题还出过bug……。</p>\n<p>再具体一点，原始数据都是double 或者 float类型，单位都为厘米。一开始我在将获取的数据传到中间的handler时，将其转为（int），然后再直接处理，后面我在转为（int）前，让原始数据的右值*PRESION，设定一个精度，精度取100，从而获得了0.1mm级别的精度。但后面发现这个精度的意义不大了，于是又改回了1。</p>\n<p>再记录一下硬件的问题：</p>\n<ol>\n<li>电调插反了，折磨了搞硬件的兄弟一下午</li>\n<li>图传始终没有图像，一直以为是电源线的问题，后面发现是插在电脑上的输入线没有插稳</li>\n<li>飞到一半炸机了，排查半天发现是当时调试的太久，没有注意到电量。</li>\n<li>几乎相同的坐标发送代码（除了版本问题外，对数据处理的方式相同）在A9上正常运行，在TI上发出的数据是乱码，改用发送固定值之后，电脑端收到了稳定的乱码。更换数传和数传连接线之后问题仍然存在。直到写下此文时依然未解决。</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/re02.jpg","excerpt":"","more":"<h1 id=\"记录从无人机上学到的东西\"><a href=\"#记录从无人机上学到的东西\" class=\"headerlink\" title=\"记录从无人机上学到的东西\"></a>记录从无人机上学到的东西</h1><p><em>UAV</em>: Unmanned Aerial Vehicle</p>\n<h2 id=\"项目的目的\"><a href=\"#项目的目的\" class=\"headerlink\" title=\"项目的目的\"></a>项目的目的</h2><p>分为森林救火和森林巡逻，我被分在森林巡逻部分。主要是让飞机按一定轨迹在操场上飞行，以z形路线飞过一个操场。森姐救火则是在上述基础上加上使用视觉识别找到一个红色的正方形。我在该小组中负责通信部分。</p>\n<h2 id=\"数传通信\"><a href=\"#数传通信\" class=\"headerlink\" title=\"数传通信\"></a>数传通信</h2><p>主要的任务是将无人机的xyz及三个偏转角通过数传发到地面站，地面站方面会有同学根据数据进行3d绘图。</p>\n<p>一开始读代码思路不对，一心想着找gps的数据，于是找到了Sensor，通过将整个sensor的数据取出来，然后获取其中的数据。后来发现库里有个MeasureSystem，可以直接获取xyz及偏转角。于是改写为直接调取。</p>\n<p>获取数据后就是发送，发送是利用飞控的Uart与数传进行连接。库中提供了Uart_Send函数，接受一个数组和一个长度作为参数，但是该数组只接受字符，因此要将实际数据转为字符后再发送，思路是将 原始数据%10+‘0’ 从而得到其ascii码值，同时用switch来遍历xyz和三个偏转角。每6个数据作为一组，一组中的数据之间使用‘，’分割，不同组之间使用‘@’分割。期间对原数据进行处理时要记得将得到的某个数据进行数组反转（再看一眼上面对原始数据处理的思路），因为这个问题还出过bug……。</p>\n<p>再具体一点，原始数据都是double 或者 float类型，单位都为厘米。一开始我在将获取的数据传到中间的handler时，将其转为（int），然后再直接处理，后面我在转为（int）前，让原始数据的右值*PRESION，设定一个精度，精度取100，从而获得了0.1mm级别的精度。但后面发现这个精度的意义不大了，于是又改回了1。</p>\n<p>再记录一下硬件的问题：</p>\n<ol>\n<li>电调插反了，折磨了搞硬件的兄弟一下午</li>\n<li>图传始终没有图像，一直以为是电源线的问题，后面发现是插在电脑上的输入线没有插稳</li>\n<li>飞到一半炸机了，排查半天发现是当时调试的太久，没有注意到电量。</li>\n<li>几乎相同的坐标发送代码（除了版本问题外，对数据处理的方式相同）在A9上正常运行，在TI上发出的数据是乱码，改用发送固定值之后，电脑端收到了稳定的乱码。更换数传和数传连接线之后问题仍然存在。直到写下此文时依然未解决。</li>\n</ol>\n"},{"title":"Daily-10-27","abbrlink":"8f47f88e","date":"2021-10-27T10:57:04.000Z","_content":"\n# Daily-10-27\n\n谁都想不到第一次挑战会来的这么快，前两天还在悠哉游哉的看镜像站，今天就遇到了空前绝后大危机。学校的服务器似乎遇上了arp广播风暴，信息办和青柚几乎所有的服务都down了。两位后端学长带着我去了信息办，用了一下午来试着恢复所有service，顺便还参观了一下信息办的机房。\n\n今天早上才写了{% post_link Qingyou-1 %}这篇文章，说到同时加班我摸鱼。这个摸鱼确实没得办法，毕竟是业务处理方面的事情，但今天这个服务器down了，可就是彻彻底底要运维干活了（然后我还是在摸鱼）。早上本来在开开心心的在github上搭自己的blog，本来很开心的发现hexo的源代码和deploy用的现成文件可以直接用`git branch`分开来。结果到了中午，突然说学校的内部网络出了超级大问题，连食堂都刷不上卡。中午两位后端学长都到了，然后带着我去了信息办，坐在某个开会的桌子边重启服务。主要是两位学长在做，我最多起一个记录的作用。下面是一些印象深刻的记录。\n\n1. 最主要的两台服务器，理论是完全一样的，但一台可以正常运行，另一台卡死，reboot都卡死。并且tomcat父进程为1，无法kill，同时其log文件夹无法打开，无法ls、du，free显示内存占满，swap分区16g全满。最后只能物理重启，重启后可以正常使用了，从另一台服务器上copy过来了配置。\n2. 搭载某部门服务的服务器，80+443端口都无法使用，但ssh连接正常，redis没有设置登录密码，但是手动登录时要求密码了，reboot之后可以正常使用了，但是证书似乎还有问题，两个学长也没解决。\n3. 搭载另一部门服务的服务器，服务down了，重启服务后可正常使用。\n\n除此之外还有各种容器需要重启，有的是学长搭建的，如果不及时记录的话，还真不一定记得住他们的作用。\n\n本来下午约了去飞无人机，果断推到明天了，不过无人机的代码倒是早就写好了。本以为明天没课的，约时间调试无人机的时候才想起来明天还有个实验课。又是不想上课的一天。\n\n不管怎么说，今天下午还是多多少少学到了点nouns，也深刻意识到一个了解服务的运维的重要性，此前的服务都是后端同学手动搭的，幸好他们还记得相关信息，不然我现在的能力可做不到完美恢复。除此之外，我对网络、数据库的了解还是差的太多。\n\n对于未来的话，希望能早点上云吧，服务也希望能够系统化一点，文档可以多写一点。\n\n以上。\n\n","source":"_posts/Daily/Daily-10-27.md","raw":"---\ntitle: Daily-10-27\ncategories: Daily\ntags:\n  - daily\nabbrlink: 8f47f88e\ndate: 2021-10-27 18:57:04\n---\n\n# Daily-10-27\n\n谁都想不到第一次挑战会来的这么快，前两天还在悠哉游哉的看镜像站，今天就遇到了空前绝后大危机。学校的服务器似乎遇上了arp广播风暴，信息办和青柚几乎所有的服务都down了。两位后端学长带着我去了信息办，用了一下午来试着恢复所有service，顺便还参观了一下信息办的机房。\n\n今天早上才写了{% post_link Qingyou-1 %}这篇文章，说到同时加班我摸鱼。这个摸鱼确实没得办法，毕竟是业务处理方面的事情，但今天这个服务器down了，可就是彻彻底底要运维干活了（然后我还是在摸鱼）。早上本来在开开心心的在github上搭自己的blog，本来很开心的发现hexo的源代码和deploy用的现成文件可以直接用`git branch`分开来。结果到了中午，突然说学校的内部网络出了超级大问题，连食堂都刷不上卡。中午两位后端学长都到了，然后带着我去了信息办，坐在某个开会的桌子边重启服务。主要是两位学长在做，我最多起一个记录的作用。下面是一些印象深刻的记录。\n\n1. 最主要的两台服务器，理论是完全一样的，但一台可以正常运行，另一台卡死，reboot都卡死。并且tomcat父进程为1，无法kill，同时其log文件夹无法打开，无法ls、du，free显示内存占满，swap分区16g全满。最后只能物理重启，重启后可以正常使用了，从另一台服务器上copy过来了配置。\n2. 搭载某部门服务的服务器，80+443端口都无法使用，但ssh连接正常，redis没有设置登录密码，但是手动登录时要求密码了，reboot之后可以正常使用了，但是证书似乎还有问题，两个学长也没解决。\n3. 搭载另一部门服务的服务器，服务down了，重启服务后可正常使用。\n\n除此之外还有各种容器需要重启，有的是学长搭建的，如果不及时记录的话，还真不一定记得住他们的作用。\n\n本来下午约了去飞无人机，果断推到明天了，不过无人机的代码倒是早就写好了。本以为明天没课的，约时间调试无人机的时候才想起来明天还有个实验课。又是不想上课的一天。\n\n不管怎么说，今天下午还是多多少少学到了点nouns，也深刻意识到一个了解服务的运维的重要性，此前的服务都是后端同学手动搭的，幸好他们还记得相关信息，不然我现在的能力可做不到完美恢复。除此之外，我对网络、数据库的了解还是差的太多。\n\n对于未来的话，希望能早点上云吧，服务也希望能够系统化一点，文档可以多写一点。\n\n以上。\n\n","slug":"Daily-10-27","published":1,"category":"Daily","updated":"2022-02-11T05:17:56.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irwy000f8wul9m00dr3u","content":"<h1 id=\"Daily-10-27\"><a href=\"#Daily-10-27\" class=\"headerlink\" title=\"Daily-10-27\"></a>Daily-10-27</h1><p>谁都想不到第一次挑战会来的这么快，前两天还在悠哉游哉的看镜像站，今天就遇到了空前绝后大危机。学校的服务器似乎遇上了arp广播风暴，信息办和青柚几乎所有的服务都down了。两位后端学长带着我去了信息办，用了一下午来试着恢复所有service，顺便还参观了一下信息办的机房。</p>\n<p>今天早上才写了<a href=\"/Daily/2bbc7ca0/\" title=\"Qingyou_1\">Qingyou_1</a>这篇文章，说到同时加班我摸鱼。这个摸鱼确实没得办法，毕竟是业务处理方面的事情，但今天这个服务器down了，可就是彻彻底底要运维干活了（然后我还是在摸鱼）。早上本来在开开心心的在github上搭自己的blog，本来很开心的发现hexo的源代码和deploy用的现成文件可以直接用<code>git branch</code>分开来。结果到了中午，突然说学校的内部网络出了超级大问题，连食堂都刷不上卡。中午两位后端学长都到了，然后带着我去了信息办，坐在某个开会的桌子边重启服务。主要是两位学长在做，我最多起一个记录的作用。下面是一些印象深刻的记录。</p>\n<ol>\n<li>最主要的两台服务器，理论是完全一样的，但一台可以正常运行，另一台卡死，reboot都卡死。并且tomcat父进程为1，无法kill，同时其log文件夹无法打开，无法ls、du，free显示内存占满，swap分区16g全满。最后只能物理重启，重启后可以正常使用了，从另一台服务器上copy过来了配置。</li>\n<li>搭载某部门服务的服务器，80+443端口都无法使用，但ssh连接正常，redis没有设置登录密码，但是手动登录时要求密码了，reboot之后可以正常使用了，但是证书似乎还有问题，两个学长也没解决。</li>\n<li>搭载另一部门服务的服务器，服务down了，重启服务后可正常使用。</li>\n</ol>\n<p>除此之外还有各种容器需要重启，有的是学长搭建的，如果不及时记录的话，还真不一定记得住他们的作用。</p>\n<p>本来下午约了去飞无人机，果断推到明天了，不过无人机的代码倒是早就写好了。本以为明天没课的，约时间调试无人机的时候才想起来明天还有个实验课。又是不想上课的一天。</p>\n<p>不管怎么说，今天下午还是多多少少学到了点nouns，也深刻意识到一个了解服务的运维的重要性，此前的服务都是后端同学手动搭的，幸好他们还记得相关信息，不然我现在的能力可做不到完美恢复。除此之外，我对网络、数据库的了解还是差的太多。</p>\n<p>对于未来的话，希望能早点上云吧，服务也希望能够系统化一点，文档可以多写一点。</p>\n<p>以上。</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/luren2.jpg","excerpt":"","more":"<h1 id=\"Daily-10-27\"><a href=\"#Daily-10-27\" class=\"headerlink\" title=\"Daily-10-27\"></a>Daily-10-27</h1><p>谁都想不到第一次挑战会来的这么快，前两天还在悠哉游哉的看镜像站，今天就遇到了空前绝后大危机。学校的服务器似乎遇上了arp广播风暴，信息办和青柚几乎所有的服务都down了。两位后端学长带着我去了信息办，用了一下午来试着恢复所有service，顺便还参观了一下信息办的机房。</p>\n<p>今天早上才写了<a href=\"/Daily/2bbc7ca0/\" title=\"Qingyou_1\">Qingyou_1</a>这篇文章，说到同时加班我摸鱼。这个摸鱼确实没得办法，毕竟是业务处理方面的事情，但今天这个服务器down了，可就是彻彻底底要运维干活了（然后我还是在摸鱼）。早上本来在开开心心的在github上搭自己的blog，本来很开心的发现hexo的源代码和deploy用的现成文件可以直接用<code>git branch</code>分开来。结果到了中午，突然说学校的内部网络出了超级大问题，连食堂都刷不上卡。中午两位后端学长都到了，然后带着我去了信息办，坐在某个开会的桌子边重启服务。主要是两位学长在做，我最多起一个记录的作用。下面是一些印象深刻的记录。</p>\n<ol>\n<li>最主要的两台服务器，理论是完全一样的，但一台可以正常运行，另一台卡死，reboot都卡死。并且tomcat父进程为1，无法kill，同时其log文件夹无法打开，无法ls、du，free显示内存占满，swap分区16g全满。最后只能物理重启，重启后可以正常使用了，从另一台服务器上copy过来了配置。</li>\n<li>搭载某部门服务的服务器，80+443端口都无法使用，但ssh连接正常，redis没有设置登录密码，但是手动登录时要求密码了，reboot之后可以正常使用了，但是证书似乎还有问题，两个学长也没解决。</li>\n<li>搭载另一部门服务的服务器，服务down了，重启服务后可正常使用。</li>\n</ol>\n<p>除此之外还有各种容器需要重启，有的是学长搭建的，如果不及时记录的话，还真不一定记得住他们的作用。</p>\n<p>本来下午约了去飞无人机，果断推到明天了，不过无人机的代码倒是早就写好了。本以为明天没课的，约时间调试无人机的时候才想起来明天还有个实验课。又是不想上课的一天。</p>\n<p>不管怎么说，今天下午还是多多少少学到了点nouns，也深刻意识到一个了解服务的运维的重要性，此前的服务都是后端同学手动搭的，幸好他们还记得相关信息，不然我现在的能力可做不到完美恢复。除此之外，我对网络、数据库的了解还是差的太多。</p>\n<p>对于未来的话，希望能早点上云吧，服务也希望能够系统化一点，文档可以多写一点。</p>\n<p>以上。</p>\n"},{"title":"修改2d球队的阵型","abbrlink":"8afd9326","date":"2021-12-13T08:26:21.000Z","_content":"其实是很久之前写的了，现在拿过来发布一下\n\n# Formation after score.\n\n## Principle\n\nFormation files are saved in a separate folder with surfix .conf.\nIts form is like below:\n```\nFormation Static\n# move positions when playmode is BeforeKickOff or AfterGoal.\n1 Goalie     -49.0   0.0\n2 CenterBack -25.0  -7.0\n3 CenterBack -25.0   7.0\n4 SideBack   -25.0 -15.0\n5 SideBack   -25.0  15.0\n6 DefensiveHalf -20.0   0.0\n7 OffensiveHalf -10.0 -7.0\n8 OffensiveHalf -10.0  7.0\n9  SideForward  -5.0 -10.0\n10 SideForward -5.0  10.0\n11 CenterForward -2.0   0.0\n```\nThis is a static one,a dynamic one is like this:\n```\nFormation DelaunayTriangulation 2\nBegin Roles\n1 Goalie 0\n2 CenterBack -1\n3 CenterBack 2\n4 SideBack -1\n5 SideBack 4\n6 DefensiveHalf 0\n7 OffensiveHalf -1\n8 OffensiveHalf 7\n9 SideForward -1\n10 SideForward 9\n11 CenterForward 0\nEnd Roles\nBegin Samples 2 45\n----- 0 -----\nBall 0 0\n1 -50 0\n2 -13.63 -5.6\n3 -13.9 5.6\n4 -13.09 -16.13\n5 -13.01 14.51\n6 -11.18 -0.36\n7 -6.58 -8.2\n8 -7.57 8.29\n9 -1.26 -11.99\n10 -1.8 12.17\n11 11.72 0\n----- 1 -----\nBall -54.44 -20.73\n1 -50 0\n2 -47.41 -10.72\n3 -45.24 -5.14\n4 -50.02 -17.21\n5 -45.6 3.88\n6 -39.73 -9.8\n7 -40.83 -15.77\n8 -31.82 3.85\n9 -40.78 -29.47\n10 -27.69 21.98\n11 -14.9 -5.27\n```\nYou can figure out exact coordinate through a location picture in the user-manual.\n\nIn the `strategy.cpp` ,formation files was first read like this:\n```cpp\nconst std::string Strategy::BEFORE_KICK_OFF_CONF = \"before-kick-off.conf\";\nconst std::string Strategy::NORMAL_FORMATION_CONF = \"normal-formation.conf\";\n```\n\nThen,a function named `read()` will check whether formation files is available:\n```cpp\nbool\nStrategy::read( const std::string & formation_dir )\n{\n    static bool s_initialized = false;\n\n    if ( s_initialized )\n    {\n        std::cerr << __FILE__ << ' ' << __LINE__ << \": already initialized.\"\n                  << std::endl;\n        return false;\n    }\n    std::string configpath = formation_dir;\n    if ( ! configpath.empty()\n         && configpath[ configpath.length() - 1 ] != '/' )\n    {\n        configpath += '/';\n    }\n\n    // before kick off\n    M_before_kick_off_formation = readFormation( configpath + BEFORE_KICK_OFF_CONF );\n    if ( ! M_before_kick_off_formation )\n    {\n        std::cerr << \"Failed to read before_kick_off formation\" << std::endl;\n        return false;\n    }\n\n    //...\n\n    s_initialized = true;\n    return true;\n```\n\nAfter that,`getFormation()` will determine which formation to apply according to the worldmode.Mainly the `wm.gameMode().type()` and `wm.gameMode().side()`\n```cpp\n    //\n    // opponent indirect free kick\n    //\n    if ( ( wm.gameMode().type() == GameMode::BackPass_\n           && wm.gameMode().side() == wm.ourSide() )\n         || ( wm.gameMode().type() == GameMode::IndFreeKick_\n              && wm.gameMode().side() == wm.theirSide() ) )\n    {\n        return M_indirect_freekick_opp_formation;\n    }\n```\n\n## Operation\n\n1. add formation file `celebrate-1-L.conf` and `celebrate-1-R.conf`\n```\nFormation Static\n# ---------------------------------------------------------\n# move positions when playmode is AfterGoal.\n1 Goalie     -50.0   0.0\n2 CenterBack -45.0  0.0\n3 CenterBack -40.0   0.0\n4 SideBack   -35.0  0.0\n5 SideBack   -30.0  0.0\n6 DefensiveHalf -25.0   0.0\n7 OffensiveHalf -20.0  0.0\n8 OffensiveHalf -15.0  0.0\n9  SideForward  -10.0  0.0\n10 SideForward -5.0  0.0\n11 CenterForward -1.0   0.0\n# ---------------------------------------------------------\n```\n\n2. add formation object in `strategy.cpp` and `strategy.h`\n```cpp\n    //celebrate formation\n    static const std::string CELEBRATE_1_L_FORMATION_CONF;\n\n    //celebrate formation\n    rcsc::Formation::Ptr M_Celebrate_1_L_formation;\n```\n\n3. add logistic judge in functions\n```cpp\n//in read()\n    M_Celebrate_1_L_formation = readFormation( configpath + CELEBRATE_1_L_FORMATION_CONF);\n    if ( ! M_indirect_freekick_our_formation )\n    {\n        std::cerr << \"Failed to read celebrate-1-L-formation\" << std::endl;\n        return false;\n    }\n//in getFormation()\n    if (wm.gameMode().type() == GameMode::AfterGoal_ && wm.gameMode().side() == wm.ourSide())\n    {\n        if (wm.time().stopped() <= 20)\n        {\n            if (wm.ourSide() == LEFT)\n                return M_Celebrate_1_L_formation;\n            else\n                return M_Celebrate_1_R_formation;\n        }\n        if (wm.time().stopped() <= 40)\n        {\n        }\n    }\n```\nYou can change your formation at most twice according to rules.So a empty if is left.\nNotice: use wm.time().stopped() to make sure formation get normally in time\n\n\n\n\n\n\n","source":"_posts/Auto/修改2d球队的阵型.md","raw":"---\ntitle: 修改2d球队的阵型\ncategories:\n  - Auto\ntags: apollo\nabbrlink: 8afd9326\ndate: 2021-12-13 16:26:21\n---\n其实是很久之前写的了，现在拿过来发布一下\n\n# Formation after score.\n\n## Principle\n\nFormation files are saved in a separate folder with surfix .conf.\nIts form is like below:\n```\nFormation Static\n# move positions when playmode is BeforeKickOff or AfterGoal.\n1 Goalie     -49.0   0.0\n2 CenterBack -25.0  -7.0\n3 CenterBack -25.0   7.0\n4 SideBack   -25.0 -15.0\n5 SideBack   -25.0  15.0\n6 DefensiveHalf -20.0   0.0\n7 OffensiveHalf -10.0 -7.0\n8 OffensiveHalf -10.0  7.0\n9  SideForward  -5.0 -10.0\n10 SideForward -5.0  10.0\n11 CenterForward -2.0   0.0\n```\nThis is a static one,a dynamic one is like this:\n```\nFormation DelaunayTriangulation 2\nBegin Roles\n1 Goalie 0\n2 CenterBack -1\n3 CenterBack 2\n4 SideBack -1\n5 SideBack 4\n6 DefensiveHalf 0\n7 OffensiveHalf -1\n8 OffensiveHalf 7\n9 SideForward -1\n10 SideForward 9\n11 CenterForward 0\nEnd Roles\nBegin Samples 2 45\n----- 0 -----\nBall 0 0\n1 -50 0\n2 -13.63 -5.6\n3 -13.9 5.6\n4 -13.09 -16.13\n5 -13.01 14.51\n6 -11.18 -0.36\n7 -6.58 -8.2\n8 -7.57 8.29\n9 -1.26 -11.99\n10 -1.8 12.17\n11 11.72 0\n----- 1 -----\nBall -54.44 -20.73\n1 -50 0\n2 -47.41 -10.72\n3 -45.24 -5.14\n4 -50.02 -17.21\n5 -45.6 3.88\n6 -39.73 -9.8\n7 -40.83 -15.77\n8 -31.82 3.85\n9 -40.78 -29.47\n10 -27.69 21.98\n11 -14.9 -5.27\n```\nYou can figure out exact coordinate through a location picture in the user-manual.\n\nIn the `strategy.cpp` ,formation files was first read like this:\n```cpp\nconst std::string Strategy::BEFORE_KICK_OFF_CONF = \"before-kick-off.conf\";\nconst std::string Strategy::NORMAL_FORMATION_CONF = \"normal-formation.conf\";\n```\n\nThen,a function named `read()` will check whether formation files is available:\n```cpp\nbool\nStrategy::read( const std::string & formation_dir )\n{\n    static bool s_initialized = false;\n\n    if ( s_initialized )\n    {\n        std::cerr << __FILE__ << ' ' << __LINE__ << \": already initialized.\"\n                  << std::endl;\n        return false;\n    }\n    std::string configpath = formation_dir;\n    if ( ! configpath.empty()\n         && configpath[ configpath.length() - 1 ] != '/' )\n    {\n        configpath += '/';\n    }\n\n    // before kick off\n    M_before_kick_off_formation = readFormation( configpath + BEFORE_KICK_OFF_CONF );\n    if ( ! M_before_kick_off_formation )\n    {\n        std::cerr << \"Failed to read before_kick_off formation\" << std::endl;\n        return false;\n    }\n\n    //...\n\n    s_initialized = true;\n    return true;\n```\n\nAfter that,`getFormation()` will determine which formation to apply according to the worldmode.Mainly the `wm.gameMode().type()` and `wm.gameMode().side()`\n```cpp\n    //\n    // opponent indirect free kick\n    //\n    if ( ( wm.gameMode().type() == GameMode::BackPass_\n           && wm.gameMode().side() == wm.ourSide() )\n         || ( wm.gameMode().type() == GameMode::IndFreeKick_\n              && wm.gameMode().side() == wm.theirSide() ) )\n    {\n        return M_indirect_freekick_opp_formation;\n    }\n```\n\n## Operation\n\n1. add formation file `celebrate-1-L.conf` and `celebrate-1-R.conf`\n```\nFormation Static\n# ---------------------------------------------------------\n# move positions when playmode is AfterGoal.\n1 Goalie     -50.0   0.0\n2 CenterBack -45.0  0.0\n3 CenterBack -40.0   0.0\n4 SideBack   -35.0  0.0\n5 SideBack   -30.0  0.0\n6 DefensiveHalf -25.0   0.0\n7 OffensiveHalf -20.0  0.0\n8 OffensiveHalf -15.0  0.0\n9  SideForward  -10.0  0.0\n10 SideForward -5.0  0.0\n11 CenterForward -1.0   0.0\n# ---------------------------------------------------------\n```\n\n2. add formation object in `strategy.cpp` and `strategy.h`\n```cpp\n    //celebrate formation\n    static const std::string CELEBRATE_1_L_FORMATION_CONF;\n\n    //celebrate formation\n    rcsc::Formation::Ptr M_Celebrate_1_L_formation;\n```\n\n3. add logistic judge in functions\n```cpp\n//in read()\n    M_Celebrate_1_L_formation = readFormation( configpath + CELEBRATE_1_L_FORMATION_CONF);\n    if ( ! M_indirect_freekick_our_formation )\n    {\n        std::cerr << \"Failed to read celebrate-1-L-formation\" << std::endl;\n        return false;\n    }\n//in getFormation()\n    if (wm.gameMode().type() == GameMode::AfterGoal_ && wm.gameMode().side() == wm.ourSide())\n    {\n        if (wm.time().stopped() <= 20)\n        {\n            if (wm.ourSide() == LEFT)\n                return M_Celebrate_1_L_formation;\n            else\n                return M_Celebrate_1_R_formation;\n        }\n        if (wm.time().stopped() <= 40)\n        {\n        }\n    }\n```\nYou can change your formation at most twice according to rules.So a empty if is left.\nNotice: use wm.time().stopped() to make sure formation get normally in time\n\n\n\n\n\n\n","slug":"修改2d球队的阵型","published":1,"category":"Auto","updated":"2022-02-11T05:17:56.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irx0000j8wul2unihe31","content":"<p>其实是很久之前写的了，现在拿过来发布一下</p>\n<h1 id=\"Formation-after-score\"><a href=\"#Formation-after-score\" class=\"headerlink\" title=\"Formation after score.\"></a>Formation after score.</h1><h2 id=\"Principle\"><a href=\"#Principle\" class=\"headerlink\" title=\"Principle\"></a>Principle</h2><p>Formation files are saved in a separate folder with surfix .conf.<br>Its form is like below:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Formation Static\n# move positions when playmode is BeforeKickOff or AfterGoal.\n1 Goalie     -49.0   0.0\n2 CenterBack -25.0  -7.0\n3 CenterBack -25.0   7.0\n4 SideBack   -25.0 -15.0\n5 SideBack   -25.0  15.0\n6 DefensiveHalf -20.0   0.0\n7 OffensiveHalf -10.0 -7.0\n8 OffensiveHalf -10.0  7.0\n9  SideForward  -5.0 -10.0\n10 SideForward -5.0  10.0\n11 CenterForward -2.0   0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>This is a static one,a dynamic one is like this:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Formation DelaunayTriangulation 2\nBegin Roles\n1 Goalie 0\n2 CenterBack -1\n3 CenterBack 2\n4 SideBack -1\n5 SideBack 4\n6 DefensiveHalf 0\n7 OffensiveHalf -1\n8 OffensiveHalf 7\n9 SideForward -1\n10 SideForward 9\n11 CenterForward 0\nEnd Roles\nBegin Samples 2 45\n----- 0 -----\nBall 0 0\n1 -50 0\n2 -13.63 -5.6\n3 -13.9 5.6\n4 -13.09 -16.13\n5 -13.01 14.51\n6 -11.18 -0.36\n7 -6.58 -8.2\n8 -7.57 8.29\n9 -1.26 -11.99\n10 -1.8 12.17\n11 11.72 0\n----- 1 -----\nBall -54.44 -20.73\n1 -50 0\n2 -47.41 -10.72\n3 -45.24 -5.14\n4 -50.02 -17.21\n5 -45.6 3.88\n6 -39.73 -9.8\n7 -40.83 -15.77\n8 -31.82 3.85\n9 -40.78 -29.47\n10 -27.69 21.98\n11 -14.9 -5.27<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>You can figure out exact coordinate through a location picture in the user-manual.</p>\n<p>In the <code>strategy.cpp</code> ,formation files was first read like this:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string Strategy<span class=\"token double-colon punctuation\">::</span>BEFORE_KICK_OFF_CONF <span class=\"token operator\">=</span> <span class=\"token string\">\"before-kick-off.conf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string Strategy<span class=\"token double-colon punctuation\">::</span>NORMAL_FORMATION_CONF <span class=\"token operator\">=</span> <span class=\"token string\">\"normal-formation.conf\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>Then,a function named <code>read()</code> will check whether formation files is available:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span>\n<span class=\"token class-name\">Strategy</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span> formation_dir <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> s_initialized <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> s_initialized <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">__FILE__</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">__LINE__</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": already initialized.\"</span>\n                  <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    std<span class=\"token double-colon punctuation\">::</span>string configpath <span class=\"token operator\">=</span> formation_dir<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span> configpath<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">&amp;&amp;</span> configpath<span class=\"token punctuation\">[</span> configpath<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">'/'</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        configpath <span class=\"token operator\">+=</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// before kick off</span>\n    M_before_kick_off_formation <span class=\"token operator\">=</span> <span class=\"token function\">readFormation</span><span class=\"token punctuation\">(</span> configpath <span class=\"token operator\">+</span> BEFORE_KICK_OFF_CONF <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span> M_before_kick_off_formation <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Failed to read before_kick_off formation\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//...</span>\n\n    s_initialized <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>After that,<code>getFormation()</code> will determine which formation to apply according to the worldmode.Mainly the <code>wm.gameMode().type()</code> and <code>wm.gameMode().side()</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// opponent indirect free kick</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GameMode<span class=\"token double-colon punctuation\">::</span>BackPass_\n       <span class=\"token operator\">&amp;&amp;</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">side</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">ourSide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n     <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GameMode<span class=\"token double-colon punctuation\">::</span>IndFreeKick_\n          <span class=\"token operator\">&amp;&amp;</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">side</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">theirSide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> M_indirect_freekick_opp_formation<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Operation\"><a href=\"#Operation\" class=\"headerlink\" title=\"Operation\"></a>Operation</h2><ol>\n<li><p>add formation file <code>celebrate-1-L.conf</code> and <code>celebrate-1-R.conf</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Formation Static\n# ---------------------------------------------------------\n# move positions when playmode is AfterGoal.\n1 Goalie     -50.0   0.0\n2 CenterBack -45.0  0.0\n3 CenterBack -40.0   0.0\n4 SideBack   -35.0  0.0\n5 SideBack   -30.0  0.0\n6 DefensiveHalf -25.0   0.0\n7 OffensiveHalf -20.0  0.0\n8 OffensiveHalf -15.0  0.0\n9  SideForward  -10.0  0.0\n10 SideForward -5.0  0.0\n11 CenterForward -1.0   0.0\n# ---------------------------------------------------------<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>add formation object in <code>strategy.cpp</code> and <code>strategy.h</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//celebrate formation</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string CELEBRATE_1_L_FORMATION_CONF<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//celebrate formation</span>\nrcsc<span class=\"token double-colon punctuation\">::</span>Formation<span class=\"token double-colon punctuation\">::</span>Ptr M_Celebrate_1_L_formation<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>add logistic judge in functions</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//in read()</span>\n    M_Celebrate_1_L_formation <span class=\"token operator\">=</span> <span class=\"token function\">readFormation</span><span class=\"token punctuation\">(</span> configpath <span class=\"token operator\">+</span> CELEBRATE_1_L_FORMATION_CONF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span> M_indirect_freekick_our_formation <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Failed to read celebrate-1-L-formation\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//in getFormation()</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GameMode<span class=\"token double-colon punctuation\">::</span>AfterGoal_ <span class=\"token operator\">&amp;&amp;</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">side</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">ourSide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wm<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stopped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wm<span class=\"token punctuation\">.</span><span class=\"token function\">ourSide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> LEFT<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> M_Celebrate_1_L_formation<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                <span class=\"token keyword\">return</span> M_Celebrate_1_R_formation<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wm<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stopped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>You can change your formation at most twice according to rules.So a empty if is left.<br>Notice: use wm.time().stopped() to make sure formation get normally in time</p>\n</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/kon1.jpg","excerpt":"","more":"<p>其实是很久之前写的了，现在拿过来发布一下</p>\n<h1 id=\"Formation-after-score\"><a href=\"#Formation-after-score\" class=\"headerlink\" title=\"Formation after score.\"></a>Formation after score.</h1><h2 id=\"Principle\"><a href=\"#Principle\" class=\"headerlink\" title=\"Principle\"></a>Principle</h2><p>Formation files are saved in a separate folder with surfix .conf.<br>Its form is like below:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Formation Static\n# move positions when playmode is BeforeKickOff or AfterGoal.\n1 Goalie     -49.0   0.0\n2 CenterBack -25.0  -7.0\n3 CenterBack -25.0   7.0\n4 SideBack   -25.0 -15.0\n5 SideBack   -25.0  15.0\n6 DefensiveHalf -20.0   0.0\n7 OffensiveHalf -10.0 -7.0\n8 OffensiveHalf -10.0  7.0\n9  SideForward  -5.0 -10.0\n10 SideForward -5.0  10.0\n11 CenterForward -2.0   0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>This is a static one,a dynamic one is like this:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Formation DelaunayTriangulation 2\nBegin Roles\n1 Goalie 0\n2 CenterBack -1\n3 CenterBack 2\n4 SideBack -1\n5 SideBack 4\n6 DefensiveHalf 0\n7 OffensiveHalf -1\n8 OffensiveHalf 7\n9 SideForward -1\n10 SideForward 9\n11 CenterForward 0\nEnd Roles\nBegin Samples 2 45\n----- 0 -----\nBall 0 0\n1 -50 0\n2 -13.63 -5.6\n3 -13.9 5.6\n4 -13.09 -16.13\n5 -13.01 14.51\n6 -11.18 -0.36\n7 -6.58 -8.2\n8 -7.57 8.29\n9 -1.26 -11.99\n10 -1.8 12.17\n11 11.72 0\n----- 1 -----\nBall -54.44 -20.73\n1 -50 0\n2 -47.41 -10.72\n3 -45.24 -5.14\n4 -50.02 -17.21\n5 -45.6 3.88\n6 -39.73 -9.8\n7 -40.83 -15.77\n8 -31.82 3.85\n9 -40.78 -29.47\n10 -27.69 21.98\n11 -14.9 -5.27<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>You can figure out exact coordinate through a location picture in the user-manual.</p>\n<p>In the <code>strategy.cpp</code> ,formation files was first read like this:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string Strategy<span class=\"token double-colon punctuation\">::</span>BEFORE_KICK_OFF_CONF <span class=\"token operator\">=</span> <span class=\"token string\">\"before-kick-off.conf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string Strategy<span class=\"token double-colon punctuation\">::</span>NORMAL_FORMATION_CONF <span class=\"token operator\">=</span> <span class=\"token string\">\"normal-formation.conf\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>Then,a function named <code>read()</code> will check whether formation files is available:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span>\n<span class=\"token class-name\">Strategy</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span> formation_dir <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> s_initialized <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> s_initialized <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">__FILE__</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">__LINE__</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": already initialized.\"</span>\n                  <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    std<span class=\"token double-colon punctuation\">::</span>string configpath <span class=\"token operator\">=</span> formation_dir<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span> configpath<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">&amp;&amp;</span> configpath<span class=\"token punctuation\">[</span> configpath<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">'/'</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        configpath <span class=\"token operator\">+=</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// before kick off</span>\n    M_before_kick_off_formation <span class=\"token operator\">=</span> <span class=\"token function\">readFormation</span><span class=\"token punctuation\">(</span> configpath <span class=\"token operator\">+</span> BEFORE_KICK_OFF_CONF <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span> M_before_kick_off_formation <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Failed to read before_kick_off formation\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//...</span>\n\n    s_initialized <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>After that,<code>getFormation()</code> will determine which formation to apply according to the worldmode.Mainly the <code>wm.gameMode().type()</code> and <code>wm.gameMode().side()</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// opponent indirect free kick</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GameMode<span class=\"token double-colon punctuation\">::</span>BackPass_\n       <span class=\"token operator\">&amp;&amp;</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">side</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">ourSide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n     <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GameMode<span class=\"token double-colon punctuation\">::</span>IndFreeKick_\n          <span class=\"token operator\">&amp;&amp;</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">side</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">theirSide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> M_indirect_freekick_opp_formation<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Operation\"><a href=\"#Operation\" class=\"headerlink\" title=\"Operation\"></a>Operation</h2><ol>\n<li><p>add formation file <code>celebrate-1-L.conf</code> and <code>celebrate-1-R.conf</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Formation Static\n# ---------------------------------------------------------\n# move positions when playmode is AfterGoal.\n1 Goalie     -50.0   0.0\n2 CenterBack -45.0  0.0\n3 CenterBack -40.0   0.0\n4 SideBack   -35.0  0.0\n5 SideBack   -30.0  0.0\n6 DefensiveHalf -25.0   0.0\n7 OffensiveHalf -20.0  0.0\n8 OffensiveHalf -15.0  0.0\n9  SideForward  -10.0  0.0\n10 SideForward -5.0  0.0\n11 CenterForward -1.0   0.0\n# ---------------------------------------------------------<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>add formation object in <code>strategy.cpp</code> and <code>strategy.h</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//celebrate formation</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string CELEBRATE_1_L_FORMATION_CONF<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//celebrate formation</span>\nrcsc<span class=\"token double-colon punctuation\">::</span>Formation<span class=\"token double-colon punctuation\">::</span>Ptr M_Celebrate_1_L_formation<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>add logistic judge in functions</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//in read()</span>\n    M_Celebrate_1_L_formation <span class=\"token operator\">=</span> <span class=\"token function\">readFormation</span><span class=\"token punctuation\">(</span> configpath <span class=\"token operator\">+</span> CELEBRATE_1_L_FORMATION_CONF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span> M_indirect_freekick_our_formation <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Failed to read celebrate-1-L-formation\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//in getFormation()</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GameMode<span class=\"token double-colon punctuation\">::</span>AfterGoal_ <span class=\"token operator\">&amp;&amp;</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">side</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">ourSide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wm<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stopped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wm<span class=\"token punctuation\">.</span><span class=\"token function\">ourSide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> LEFT<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> M_Celebrate_1_L_formation<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                <span class=\"token keyword\">return</span> M_Celebrate_1_R_formation<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wm<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stopped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>You can change your formation at most twice according to rules.So a empty if is left.<br>Notice: use wm.time().stopped() to make sure formation get normally in time</p>\n</li>\n</ol>\n"},{"title":"New-Start","abbrlink":"6235173f","date":"2021-10-25T09:45:59.000Z","_content":"\n# New Start\n\nToday I start a new blog with domain: [kawhicurry.shuihua.top](kawhicurry.shuihua.top).\n\nI hope I can keep the anything I meet after now.\n\nRecord the things that refresh, happy, knowledgeable or miserable, sad, terrible.","source":"_posts/Daily/New-Start.md","raw":"---\ntitle: New-Start\ncategories: Daily\ntags:\n  - daily\nabbrlink: 6235173f\ndate: 2021-10-25 17:45:59\n---\n\n# New Start\n\nToday I start a new blog with domain: [kawhicurry.shuihua.top](kawhicurry.shuihua.top).\n\nI hope I can keep the anything I meet after now.\n\nRecord the things that refresh, happy, knowledgeable or miserable, sad, terrible.","slug":"New-Start","published":1,"category":"Daily","updated":"2022-02-11T05:17:56.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irx1000m8wul3as7fngj","content":"<h1 id=\"New-Start\"><a href=\"#New-Start\" class=\"headerlink\" title=\"New Start\"></a>New Start</h1><p>Today I start a new blog with domain: <a href=\"kawhicurry.shuihua.top\">kawhicurry.shuihua.top</a>.</p>\n<p>I hope I can keep the anything I meet after now.</p>\n<p>Record the things that refresh, happy, knowledgeable or miserable, sad, terrible.</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/re01.jpg","excerpt":"","more":"<h1 id=\"New-Start\"><a href=\"#New-Start\" class=\"headerlink\" title=\"New Start\"></a>New Start</h1><p>Today I start a new blog with domain: <a href=\"kawhicurry.shuihua.top\">kawhicurry.shuihua.top</a>.</p>\n<p>I hope I can keep the anything I meet after now.</p>\n<p>Record the things that refresh, happy, knowledgeable or miserable, sad, terrible.</p>\n"},{"title":"从2021到2022","description":"回首2021，展望2022","abbrlink":"b792517a","date":"2022-01-15T05:59:32.000Z","_content":"\n哇，写了东西的，没保存，不想写了，算了，装作这里有东西吧。","source":"_posts/Daily/从2021到2022.md","raw":"---\ntitle: 从2021到2022\ntags:\n  - daily\n  - summary\ndescription: 回首2021，展望2022\ncategories:\n  - Daily\nabbrlink: b792517a\ndate: 2022-01-15 13:59:32\n---\n\n哇，写了东西的，没保存，不想写了，算了，装作这里有东西吧。","slug":"从2021到2022","published":1,"category":"Daily","updated":"2022-02-11T05:17:56.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irx3000r8wul766nbmyg","content":"<p>哇，写了东西的，没保存，不想写了，算了，装作这里有东西吧。</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/chaopao3.jpg","excerpt":"","more":"<p>哇，写了东西的，没保存，不想写了，算了，装作这里有东西吧。</p>\n"},{"title":"Qingyou_1","abbrlink":"2bbc7ca0","date":"2021-10-27T01:01:06.000Z","_content":"# 青柚的这点事（1）\n\n大一开学的时候被学校拉去听优秀学生讲座。然后青柚的指导老师上去宣传了一波，我就记得两件事：\n\n1. 学校的小程序是青柚管的\n2. 不招零基础\n\n说是不招，还是抱着试一试的心态，去投了个ui岗，毕竟当时恰好在学原型。结果石沉大海，冒得回应。\n\n大一上死命学会c之后，大一下堕落了起来，直到有天看到阿里云服务器打折，心血来潮，和好基友Roc买了一台49一年的小服务器，搭博客玩。\n\n没服务器的时候就在折腾jekyll和各种pages了，有了服务器之后终于上了心心念的wordpress，然后就是折腾wp各种奇奇怪怪的东西，然后发现有个好东西叫docker，于是又拿docker部署各种各样的服务。我记得最多的时候，部署了博客，gitee，一个ftp服务器，还连了163邮箱发报警。对于一个1核心2m带宽的服务器来说，压力还是很大了哈哈哈。对了，一开始是用宝塔面板，开始还觉得挺方便的，后来lnmp的p就开始出各种各样的问题。这时候就发现了自动部署忽视细节是个多么难搞的问题。从此决定手动搭各种环境。然后又经历了几次服务器重置之后，我和Roc决定还是把网页部署到gitlab page上，毕竟写好md文档然后直接push，确实比wp舒服多了。\n\n接下来在大一结束的那个暑假，我又一次想起了青柚的招新，这次我决定报个运维岗位试试。本想着会遇到各种可能的高难度问题，还提心吊胆地做了各种准备，结果似乎没有遇到太大困难就进来了。进来之后才发现青柚已经很久没有运维了。上一届的运维是一位后端，再往前是一位运营。也确实，运维这份活在小公司本就是可有可无的，更何况这么个工作室呢？不过我还是很喜欢这份活的，毕竟能看着各种软件稳稳的运行，不用想破脑袋实现各种奇奇怪怪的需求，其实也不错（手动狗头）。\n\n就在今天，学校的出入校小程序上线了。这个项目一个月前就开始了，当时我也被拉进了这个项目的群里，然后被告知学校找了外面的运维，用了大公司的serverless。这一个月以来都是平稳推进，直到前天，突然改了需求，又要求昨天就要上线，整个工作室的人都被拉了进来，并且核心人员从前天晚上七点一直加班到昨天中午十一二点。当所有人都在加班的时候，一个运维坐在工作室的正中间，写着自己满是bug的minishell（狗头）。\n\n好吧，其实几天前我几天前刚接到了要管理学校镜像站的任务，一个python+nginx的小组合，拉取镜像用了python写的mirrord工具，好像是北京外国语还是北京交大的（我估计再往上查一下会发现是清华的，此时，清华用的go），然后再在nginx里面配置下转发就行。但是仔细考虑下自己吧，好像python不咋熟练（那必然），go吧肯定不会，最要命的是线程相关的问题，基本是只知道概念（甚至不清楚），略知一二那种。所以想写出点什么，一时半会恐怕没办法，所以现在抓紧学操作系统，把线程方面搞清楚了，再找个趁手的工具，把镜像站的任务系统化一点，争取做成一个平台。\n\n我又想起前天晚上加班的场景，虽然我啥都没干，但我还是挺喜欢这种氛围的。希望能在这里写点什么，写点什么，最后再写点什么。（老谜语人了）\n\n","source":"_posts/Daily/Qingyou-1.md","raw":"---\ntitle: Qingyou_1\ncategories: Daily\ntags:\n  - qingyou\nabbrlink: 2bbc7ca0\ndate: 2021-10-27 09:01:06\n---\n# 青柚的这点事（1）\n\n大一开学的时候被学校拉去听优秀学生讲座。然后青柚的指导老师上去宣传了一波，我就记得两件事：\n\n1. 学校的小程序是青柚管的\n2. 不招零基础\n\n说是不招，还是抱着试一试的心态，去投了个ui岗，毕竟当时恰好在学原型。结果石沉大海，冒得回应。\n\n大一上死命学会c之后，大一下堕落了起来，直到有天看到阿里云服务器打折，心血来潮，和好基友Roc买了一台49一年的小服务器，搭博客玩。\n\n没服务器的时候就在折腾jekyll和各种pages了，有了服务器之后终于上了心心念的wordpress，然后就是折腾wp各种奇奇怪怪的东西，然后发现有个好东西叫docker，于是又拿docker部署各种各样的服务。我记得最多的时候，部署了博客，gitee，一个ftp服务器，还连了163邮箱发报警。对于一个1核心2m带宽的服务器来说，压力还是很大了哈哈哈。对了，一开始是用宝塔面板，开始还觉得挺方便的，后来lnmp的p就开始出各种各样的问题。这时候就发现了自动部署忽视细节是个多么难搞的问题。从此决定手动搭各种环境。然后又经历了几次服务器重置之后，我和Roc决定还是把网页部署到gitlab page上，毕竟写好md文档然后直接push，确实比wp舒服多了。\n\n接下来在大一结束的那个暑假，我又一次想起了青柚的招新，这次我决定报个运维岗位试试。本想着会遇到各种可能的高难度问题，还提心吊胆地做了各种准备，结果似乎没有遇到太大困难就进来了。进来之后才发现青柚已经很久没有运维了。上一届的运维是一位后端，再往前是一位运营。也确实，运维这份活在小公司本就是可有可无的，更何况这么个工作室呢？不过我还是很喜欢这份活的，毕竟能看着各种软件稳稳的运行，不用想破脑袋实现各种奇奇怪怪的需求，其实也不错（手动狗头）。\n\n就在今天，学校的出入校小程序上线了。这个项目一个月前就开始了，当时我也被拉进了这个项目的群里，然后被告知学校找了外面的运维，用了大公司的serverless。这一个月以来都是平稳推进，直到前天，突然改了需求，又要求昨天就要上线，整个工作室的人都被拉了进来，并且核心人员从前天晚上七点一直加班到昨天中午十一二点。当所有人都在加班的时候，一个运维坐在工作室的正中间，写着自己满是bug的minishell（狗头）。\n\n好吧，其实几天前我几天前刚接到了要管理学校镜像站的任务，一个python+nginx的小组合，拉取镜像用了python写的mirrord工具，好像是北京外国语还是北京交大的（我估计再往上查一下会发现是清华的，此时，清华用的go），然后再在nginx里面配置下转发就行。但是仔细考虑下自己吧，好像python不咋熟练（那必然），go吧肯定不会，最要命的是线程相关的问题，基本是只知道概念（甚至不清楚），略知一二那种。所以想写出点什么，一时半会恐怕没办法，所以现在抓紧学操作系统，把线程方面搞清楚了，再找个趁手的工具，把镜像站的任务系统化一点，争取做成一个平台。\n\n我又想起前天晚上加班的场景，虽然我啥都没干，但我还是挺喜欢这种氛围的。希望能在这里写点什么，写点什么，最后再写点什么。（老谜语人了）\n\n","slug":"Qingyou-1","published":1,"category":"Daily","updated":"2022-02-11T05:17:56.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irx4000u8wul2krw0g4e","content":"<h1 id=\"青柚的这点事（1）\"><a href=\"#青柚的这点事（1）\" class=\"headerlink\" title=\"青柚的这点事（1）\"></a>青柚的这点事（1）</h1><p>大一开学的时候被学校拉去听优秀学生讲座。然后青柚的指导老师上去宣传了一波，我就记得两件事：</p>\n<ol>\n<li>学校的小程序是青柚管的</li>\n<li>不招零基础</li>\n</ol>\n<p>说是不招，还是抱着试一试的心态，去投了个ui岗，毕竟当时恰好在学原型。结果石沉大海，冒得回应。</p>\n<p>大一上死命学会c之后，大一下堕落了起来，直到有天看到阿里云服务器打折，心血来潮，和好基友Roc买了一台49一年的小服务器，搭博客玩。</p>\n<p>没服务器的时候就在折腾jekyll和各种pages了，有了服务器之后终于上了心心念的wordpress，然后就是折腾wp各种奇奇怪怪的东西，然后发现有个好东西叫docker，于是又拿docker部署各种各样的服务。我记得最多的时候，部署了博客，gitee，一个ftp服务器，还连了163邮箱发报警。对于一个1核心2m带宽的服务器来说，压力还是很大了哈哈哈。对了，一开始是用宝塔面板，开始还觉得挺方便的，后来lnmp的p就开始出各种各样的问题。这时候就发现了自动部署忽视细节是个多么难搞的问题。从此决定手动搭各种环境。然后又经历了几次服务器重置之后，我和Roc决定还是把网页部署到gitlab page上，毕竟写好md文档然后直接push，确实比wp舒服多了。</p>\n<p>接下来在大一结束的那个暑假，我又一次想起了青柚的招新，这次我决定报个运维岗位试试。本想着会遇到各种可能的高难度问题，还提心吊胆地做了各种准备，结果似乎没有遇到太大困难就进来了。进来之后才发现青柚已经很久没有运维了。上一届的运维是一位后端，再往前是一位运营。也确实，运维这份活在小公司本就是可有可无的，更何况这么个工作室呢？不过我还是很喜欢这份活的，毕竟能看着各种软件稳稳的运行，不用想破脑袋实现各种奇奇怪怪的需求，其实也不错（手动狗头）。</p>\n<p>就在今天，学校的出入校小程序上线了。这个项目一个月前就开始了，当时我也被拉进了这个项目的群里，然后被告知学校找了外面的运维，用了大公司的serverless。这一个月以来都是平稳推进，直到前天，突然改了需求，又要求昨天就要上线，整个工作室的人都被拉了进来，并且核心人员从前天晚上七点一直加班到昨天中午十一二点。当所有人都在加班的时候，一个运维坐在工作室的正中间，写着自己满是bug的minishell（狗头）。</p>\n<p>好吧，其实几天前我几天前刚接到了要管理学校镜像站的任务，一个python+nginx的小组合，拉取镜像用了python写的mirrord工具，好像是北京外国语还是北京交大的（我估计再往上查一下会发现是清华的，此时，清华用的go），然后再在nginx里面配置下转发就行。但是仔细考虑下自己吧，好像python不咋熟练（那必然），go吧肯定不会，最要命的是线程相关的问题，基本是只知道概念（甚至不清楚），略知一二那种。所以想写出点什么，一时半会恐怕没办法，所以现在抓紧学操作系统，把线程方面搞清楚了，再找个趁手的工具，把镜像站的任务系统化一点，争取做成一个平台。</p>\n<p>我又想起前天晚上加班的场景，虽然我啥都没干，但我还是挺喜欢这种氛围的。希望能在这里写点什么，写点什么，最后再写点什么。（老谜语人了）</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/re00.jpg","excerpt":"","more":"<h1 id=\"青柚的这点事（1）\"><a href=\"#青柚的这点事（1）\" class=\"headerlink\" title=\"青柚的这点事（1）\"></a>青柚的这点事（1）</h1><p>大一开学的时候被学校拉去听优秀学生讲座。然后青柚的指导老师上去宣传了一波，我就记得两件事：</p>\n<ol>\n<li>学校的小程序是青柚管的</li>\n<li>不招零基础</li>\n</ol>\n<p>说是不招，还是抱着试一试的心态，去投了个ui岗，毕竟当时恰好在学原型。结果石沉大海，冒得回应。</p>\n<p>大一上死命学会c之后，大一下堕落了起来，直到有天看到阿里云服务器打折，心血来潮，和好基友Roc买了一台49一年的小服务器，搭博客玩。</p>\n<p>没服务器的时候就在折腾jekyll和各种pages了，有了服务器之后终于上了心心念的wordpress，然后就是折腾wp各种奇奇怪怪的东西，然后发现有个好东西叫docker，于是又拿docker部署各种各样的服务。我记得最多的时候，部署了博客，gitee，一个ftp服务器，还连了163邮箱发报警。对于一个1核心2m带宽的服务器来说，压力还是很大了哈哈哈。对了，一开始是用宝塔面板，开始还觉得挺方便的，后来lnmp的p就开始出各种各样的问题。这时候就发现了自动部署忽视细节是个多么难搞的问题。从此决定手动搭各种环境。然后又经历了几次服务器重置之后，我和Roc决定还是把网页部署到gitlab page上，毕竟写好md文档然后直接push，确实比wp舒服多了。</p>\n<p>接下来在大一结束的那个暑假，我又一次想起了青柚的招新，这次我决定报个运维岗位试试。本想着会遇到各种可能的高难度问题，还提心吊胆地做了各种准备，结果似乎没有遇到太大困难就进来了。进来之后才发现青柚已经很久没有运维了。上一届的运维是一位后端，再往前是一位运营。也确实，运维这份活在小公司本就是可有可无的，更何况这么个工作室呢？不过我还是很喜欢这份活的，毕竟能看着各种软件稳稳的运行，不用想破脑袋实现各种奇奇怪怪的需求，其实也不错（手动狗头）。</p>\n<p>就在今天，学校的出入校小程序上线了。这个项目一个月前就开始了，当时我也被拉进了这个项目的群里，然后被告知学校找了外面的运维，用了大公司的serverless。这一个月以来都是平稳推进，直到前天，突然改了需求，又要求昨天就要上线，整个工作室的人都被拉了进来，并且核心人员从前天晚上七点一直加班到昨天中午十一二点。当所有人都在加班的时候，一个运维坐在工作室的正中间，写着自己满是bug的minishell（狗头）。</p>\n<p>好吧，其实几天前我几天前刚接到了要管理学校镜像站的任务，一个python+nginx的小组合，拉取镜像用了python写的mirrord工具，好像是北京外国语还是北京交大的（我估计再往上查一下会发现是清华的，此时，清华用的go），然后再在nginx里面配置下转发就行。但是仔细考虑下自己吧，好像python不咋熟练（那必然），go吧肯定不会，最要命的是线程相关的问题，基本是只知道概念（甚至不清楚），略知一二那种。所以想写出点什么，一时半会恐怕没办法，所以现在抓紧学操作系统，把线程方面搞清楚了，再找个趁手的工具，把镜像站的任务系统化一点，争取做成一个平台。</p>\n<p>我又想起前天晚上加班的场景，虽然我啥都没干，但我还是挺喜欢这种氛围的。希望能在这里写点什么，写点什么，最后再写点什么。（老谜语人了）</p>\n"},{"title":"记录一次hexo生成的错误","description":"记录一次hexo生成的错误","abbrlink":"41f9c73c","date":"2022-01-29T07:17:20.000Z","_content":"\n# 记录一次hexo生成的错误\n\n之前hexo生成时显示\n\n```bash\n err: Template render error: (unknown path)\n```\n\n查了一下发现是之前的文档演示了gitbook中jinja模板的内容，需要演示`{% if apollo %}`。\n\n而hexo也识别该语法，所以在演示时需要加上\\`符号或其他方式来使其不被渲染。\n","source":"_posts/Front-end/记录一次hexo生成的错误.md","raw":"---\ntitle: 记录一次hexo生成的错误\ntags:\n  - hexo\ndescription: 记录一次hexo生成的错误\ncategories:\n  - Front-end\nabbrlink: 41f9c73c\ndate: 2022-01-29 15:17:20\n---\n\n# 记录一次hexo生成的错误\n\n之前hexo生成时显示\n\n```bash\n err: Template render error: (unknown path)\n```\n\n查了一下发现是之前的文档演示了gitbook中jinja模板的内容，需要演示`{% if apollo %}`。\n\n而hexo也识别该语法，所以在演示时需要加上\\`符号或其他方式来使其不被渲染。\n","slug":"记录一次hexo生成的错误","published":1,"category":"Front-end","updated":"2022-02-11T05:17:56.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irx6000y8wul1nrc0m3l","content":"<h1 id=\"记录一次hexo生成的错误\"><a href=\"#记录一次hexo生成的错误\" class=\"headerlink\" title=\"记录一次hexo生成的错误\"></a>记录一次hexo生成的错误</h1><p>之前hexo生成时显示</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">err: Template render error: <span class=\"token punctuation\">(</span>unknown path<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查了一下发现是之前的文档演示了gitbook中jinja模板的内容，需要演示<code>&#123;% if apollo %&#125;</code>。</p>\n<p>而hexo也识别该语法，所以在演示时需要加上`符号或其他方式来使其不被渲染。</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/luren0.jpg","excerpt":"","more":"<h1 id=\"记录一次hexo生成的错误\"><a href=\"#记录一次hexo生成的错误\" class=\"headerlink\" title=\"记录一次hexo生成的错误\"></a>记录一次hexo生成的错误</h1><p>之前hexo生成时显示</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">err: Template render error: <span class=\"token punctuation\">(</span>unknown path<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查了一下发现是之前的文档演示了gitbook中jinja模板的内容，需要演示<code>&#123;% if apollo %&#125;</code>。</p>\n<p>而hexo也识别该语法，所以在演示时需要加上`符号或其他方式来使其不被渲染。</p>\n"},{"title":"起一个mongodb","abbrlink":"e9565578","date":"2021-12-23T04:58:30.000Z","_content":"\n第一件事：`mongodb` , 不是\n\n- mongdb\n- mogodb\n- ......\n\n为了给RssSubcriber起一个数据库，在阿里云上搭了一个，本来想着直接用阿里云的市场镜像的，拿下来之后发现根本不知道咋用。。。还不如自己起一个。\n\n官方文档中给了使用包管理工具按照的方法：<https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/>\n\n大概步骤就是添加仓库然后直接安装完事。\n\n然后是要改一下配置文件，mongodb的配置文件位于`/etc/mongo.conf`，主要是将其中的\n\n```\nnet:\n   bindIp: 127.0.0.1\n   port: 27017\n```\n\n这里的`bindIp`表示监听的地址，这里只监听了本地，我将其该外`0.0.0.0`即可保证外网随时访问。\n\n然后下面的`port`也要记得加入阿里云的安全组。\n","source":"_posts/Back-end/起一个mongodb.md","raw":"---\ntitle: 起一个mongodb\ncategories:\n  - Back-end\ntags: mongodb\nabbrlink: e9565578\ndate: 2021-12-23 12:58:30\n---\n\n第一件事：`mongodb` , 不是\n\n- mongdb\n- mogodb\n- ......\n\n为了给RssSubcriber起一个数据库，在阿里云上搭了一个，本来想着直接用阿里云的市场镜像的，拿下来之后发现根本不知道咋用。。。还不如自己起一个。\n\n官方文档中给了使用包管理工具按照的方法：<https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/>\n\n大概步骤就是添加仓库然后直接安装完事。\n\n然后是要改一下配置文件，mongodb的配置文件位于`/etc/mongo.conf`，主要是将其中的\n\n```\nnet:\n   bindIp: 127.0.0.1\n   port: 27017\n```\n\n这里的`bindIp`表示监听的地址，这里只监听了本地，我将其该外`0.0.0.0`即可保证外网随时访问。\n\n然后下面的`port`也要记得加入阿里云的安全组。\n","slug":"起一个mongodb","published":1,"category":"Back-end","updated":"2022-02-11T05:17:56.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irx700118wulggz6aijo","content":"<p>第一件事：<code>mongodb</code> , 不是</p>\n<ul>\n<li>mongdb</li>\n<li>mogodb</li>\n<li>……</li>\n</ul>\n<p>为了给RssSubcriber起一个数据库，在阿里云上搭了一个，本来想着直接用阿里云的市场镜像的，拿下来之后发现根本不知道咋用。。。还不如自己起一个。</p>\n<p>官方文档中给了使用包管理工具按照的方法：<a href=\"https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/\">https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/</a></p>\n<p>大概步骤就是添加仓库然后直接安装完事。</p>\n<p>然后是要改一下配置文件，mongodb的配置文件位于<code>/etc/mongo.conf</code>，主要是将其中的</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">net:\n   bindIp: 127.0.0.1\n   port: 27017<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这里的<code>bindIp</code>表示监听的地址，这里只监听了本地，我将其该外<code>0.0.0.0</code>即可保证外网随时访问。</p>\n<p>然后下面的<code>port</code>也要记得加入阿里云的安全组。</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/chaopao1.jpg","excerpt":"","more":"<p>第一件事：<code>mongodb</code> , 不是</p>\n<ul>\n<li>mongdb</li>\n<li>mogodb</li>\n<li>……</li>\n</ul>\n<p>为了给RssSubcriber起一个数据库，在阿里云上搭了一个，本来想着直接用阿里云的市场镜像的，拿下来之后发现根本不知道咋用。。。还不如自己起一个。</p>\n<p>官方文档中给了使用包管理工具按照的方法：<a href=\"https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/\">https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/</a></p>\n<p>大概步骤就是添加仓库然后直接安装完事。</p>\n<p>然后是要改一下配置文件，mongodb的配置文件位于<code>/etc/mongo.conf</code>，主要是将其中的</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">net:\n   bindIp: 127.0.0.1\n   port: 27017<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这里的<code>bindIp</code>表示监听的地址，这里只监听了本地，我将其该外<code>0.0.0.0</code>即可保证外网随时访问。</p>\n<p>然后下面的<code>port</code>也要记得加入阿里云的安全组。</p>\n"},{"title":"k8s权威指南学习笔记（0）","cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo@2022/2/5/tech/k8s0.png","abbrlink":"dec441a9","date":"2022-01-18T06:21:00.000Z","_content":"\n# k8s入门\n\n## 了解k8s\n\n来自google的borg\n\nk8s中，**service**是分布式集群架构的核心。\n\n```mermaid\ngraph LR;\ncontainer-->pod-->node-->cluster;\n```\n\n其中：\n\n- pod是k8s调度的最小单位\n- pod是service的载体\n\n## 术语\n\n略\n\n## 网络问题\n\n三个IP\n\n- node ip\n- pod ip\n- service ip\n\n### 三种服务类型\n\n- 无状态（大多数）\n- 有状态（需配合operator使用）\n- 批处理（job）\n\n\n\n第一章可以说是TLDR，下章见吧。\n","source":"_posts/Operation/k8s权威指南学习笔记（0）.md","raw":"---\ntitle: k8s权威指南学习笔记（0）\ntags:\n  - 专栏：k8s权威指南学习笔记\n  - k8s\ncategories:\n  - Operation\ncover: 'https://cdn.jsdelivr.net/gh/kawhicurry/picgo@2022/2/5/tech/k8s0.png'\nabbrlink: dec441a9\ndate: 2022-01-18 14:21:00\n---\n\n# k8s入门\n\n## 了解k8s\n\n来自google的borg\n\nk8s中，**service**是分布式集群架构的核心。\n\n```mermaid\ngraph LR;\ncontainer-->pod-->node-->cluster;\n```\n\n其中：\n\n- pod是k8s调度的最小单位\n- pod是service的载体\n\n## 术语\n\n略\n\n## 网络问题\n\n三个IP\n\n- node ip\n- pod ip\n- service ip\n\n### 三种服务类型\n\n- 无状态（大多数）\n- 有状态（需配合operator使用）\n- 批处理（job）\n\n\n\n第一章可以说是TLDR，下章见吧。\n","slug":"k8s权威指南学习笔记（0）","published":1,"category":"Operation","updated":"2022-02-11T05:17:56.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irx800158wulamxv2sd2","content":"<h1 id=\"k8s入门\"><a href=\"#k8s入门\" class=\"headerlink\" title=\"k8s入门\"></a>k8s入门</h1><h2 id=\"了解k8s\"><a href=\"#了解k8s\" class=\"headerlink\" title=\"了解k8s\"></a>了解k8s</h2><p>来自google的borg</p>\n<p>k8s中，<strong>service</strong>是分布式集群架构的核心。</p>\n<pre class=\"mermaid\">graph LR;\ncontainer-->pod-->node-->cluster;</pre>\n\n<p>其中：</p>\n<ul>\n<li>pod是k8s调度的最小单位</li>\n<li>pod是service的载体</li>\n</ul>\n<h2 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h2><p>略</p>\n<h2 id=\"网络问题\"><a href=\"#网络问题\" class=\"headerlink\" title=\"网络问题\"></a>网络问题</h2><p>三个IP</p>\n<ul>\n<li>node ip</li>\n<li>pod ip</li>\n<li>service ip</li>\n</ul>\n<h3 id=\"三种服务类型\"><a href=\"#三种服务类型\" class=\"headerlink\" title=\"三种服务类型\"></a>三种服务类型</h3><ul>\n<li>无状态（大多数）</li>\n<li>有状态（需配合operator使用）</li>\n<li>批处理（job）</li>\n</ul>\n<p>第一章可以说是TLDR，下章见吧。</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"excerpt":"","more":"<h1 id=\"k8s入门\"><a href=\"#k8s入门\" class=\"headerlink\" title=\"k8s入门\"></a>k8s入门</h1><h2 id=\"了解k8s\"><a href=\"#了解k8s\" class=\"headerlink\" title=\"了解k8s\"></a>了解k8s</h2><p>来自google的borg</p>\n<p>k8s中，<strong>service</strong>是分布式集群架构的核心。</p>\n<pre class=\"mermaid\">graph LR;\ncontainer-->pod-->node-->cluster;</pre>\n\n<p>其中：</p>\n<ul>\n<li>pod是k8s调度的最小单位</li>\n<li>pod是service的载体</li>\n</ul>\n<h2 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h2><p>略</p>\n<h2 id=\"网络问题\"><a href=\"#网络问题\" class=\"headerlink\" title=\"网络问题\"></a>网络问题</h2><p>三个IP</p>\n<ul>\n<li>node ip</li>\n<li>pod ip</li>\n<li>service ip</li>\n</ul>\n<h3 id=\"三种服务类型\"><a href=\"#三种服务类型\" class=\"headerlink\" title=\"三种服务类型\"></a>三种服务类型</h3><ul>\n<li>无状态（大多数）</li>\n<li>有状态（需配合operator使用）</li>\n<li>批处理（job）</li>\n</ul>\n<p>第一章可以说是TLDR，下章见吧。</p>\n"},{"title":"k8s权威指南学习笔记（1）","cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo@2022/2/5/tech/k8s0.png","abbrlink":"667826cc","date":"2022-01-18T07:00:53.000Z","_content":"\n# k8s安装配置指南\n\n## kubeadm安装\n\n### 安装kubeadm\n\nkubeadm是为了简化集群安装过程引入的工具\n\n大致步骤为换源，然后包管理工具安装以下套件\n\n```bash\nyum install -y kubelet kubeadm kubectl\n```\n\n### 修改kubeadm的默认配置\n\n```bash\nkubeadm config print init-defaults # 输出kubeadm init默认参数\nkubeadm config print join-defaults # 输出kubeadm join的默认参数\n```\n\n使用以下命令将默认配置保存备用\n\n```bash\nkubeadm config print init-defaults > init.default.yaml\n```\n\n### 下载kubenetes相关镜像\n\n为了加快k8s创建集群过程，可预先下载images\n\n```bash\nkubeadm config images list # 查看镜像列表\nkubeadm config images pull --config=init-config.yaml# 预下载镜像\nkubeadm config images pull --image-repository=http://registry.cn-hangzhou.aliyuncs.com/google_containers  # 或者这样\n```\n\n**注**：如果访问不了[k8s.gcr.io](k8s.gcr.io)，则需修改`/etc/docker/daemon.json`中的`registry-mirrors`项，改为国内地址。\n\n换源是个很麻烦的问题，以下是另一种方案\n\n```bash\nkubeadm config images list # 查看所需镜像列表\nimages=(  # 下面的镜像应该去除\"k8s.gcr.io/\"的前缀，版本换成上面获取到的版本\n    kube-apiserver:v1.12.1\n    kube-controller-manager:v1.12.1\n    kube-scheduler:v1.12.1\n    kube-proxy:v1.12.1\n    pause:3.1\n    etcd:3.2.24\n    coredns:1.2.2\n)\n\nfor imageName in ${images[@]} ; do\n    docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName\n    docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName\n    docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName\ndone\n# 使用脚本拉取\n```\n\n该方案来源：<https://zhuanlan.zhihu.com/p/46341911>\n\n### 使用kube init 安装master节点\n\n```bash\nkubeadm init # 初始化\nkubeadm init phase preflight # 只做预检查\nkubeadm init --ignore-preflight-errors # 跳过预检查进行初始化\n```\n\n**注意**：如果是在启动了kubelet之后再拉取的镜像，请重启kubelet。不然kubeadm会识别不到刚刚拉取的镜像\n\n*ps：最后还是挂梯子init完了，有个镜像的名字和要求的不一样，懒得改tag了*\n\n对于root用户，直接键入`export KUBECONFIG=/etc/kubernetes/admin.conf`后即可使用kubectl查看control plane的信息，对于其他用户，需要使用另外的步骤，这些步骤都会在安装完成后显示出来，我贴在下面\n\n```bash\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nAlternatively, if you are the root user, you can run:\n\n  export KUBECONFIG=/etc/kubernetes/admin.conf\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 10.0.2.15:6443 --token sddm7y.7eebnrzpl2koekx1 \\\n        --discovery-token-ca-cert-hash sha256:77ed4804b2c367c1f3eb0b3e7114fdbed2bc94748d26d04d14d22af67fbb7e7e\n```\n\n如果不执行这些步骤，会出现以下报错\n\n```bash\nThe connection to the server localhost:8080 was refused - did you specify the right host or port?\n```\n\n还要注意的一点是，kubeadm默认的安装过程不包含网络插件（CNI）的初始化，这些需要另外的步骤了。\n\n### 加入节点\n\n在节点配置好环境后，将上面的`kubeadm join`输入到另一节点即可。\n\n### 安装CNI网络插件\n\n略\n\n## 二进制形式部署安全高可用k8s集群\n\n### master高可用架构\n\n- master中的kube-apiserver、kube-controller-manager、kube-scheduler至少以三个节点的多实例方式部署\n- master启用基于CA认证的HTTPS安全机制\n- etcd以至少三个节点的集群模式部署\n- etcd启用CA认证的HTTPS安全机制\n- master启用RBAC授权模式\n\n在三个（或多个）master节点前，通过一个负载均衡器提供对客户端唯一访问入口地址。\n\n### CA根证书\n\n```bash\nopenssl genrsa -out ca.key 2048\nopenssl req -x509 -new -nodes -key ca.key -subj \"/CN=网址\" -days 36500 -out ca.crt\n```\n\n- -subj: \"/CN\"的值为master主机名或IP地址\n- -days：设置证书的有效期\n- 将生成的`ca.key`和`ca.crt`保存至`/etc/kubernetes/pki`目录下\n\n看到这里发现后面的看不太懂了，先跳一跳 \n","source":"_posts/Operation/k8s权威指南学习笔记（1）.md","raw":"---\ntitle: k8s权威指南学习笔记（1）\ntags:\n  - k8s权威指南学习笔记\n  - k8s\ncategories:\n  - Operation\ncover: 'https://cdn.jsdelivr.net/gh/kawhicurry/picgo@2022/2/5/tech/k8s0.png'\nabbrlink: 667826cc\ndate: 2022-01-18 15:00:53\n---\n\n# k8s安装配置指南\n\n## kubeadm安装\n\n### 安装kubeadm\n\nkubeadm是为了简化集群安装过程引入的工具\n\n大致步骤为换源，然后包管理工具安装以下套件\n\n```bash\nyum install -y kubelet kubeadm kubectl\n```\n\n### 修改kubeadm的默认配置\n\n```bash\nkubeadm config print init-defaults # 输出kubeadm init默认参数\nkubeadm config print join-defaults # 输出kubeadm join的默认参数\n```\n\n使用以下命令将默认配置保存备用\n\n```bash\nkubeadm config print init-defaults > init.default.yaml\n```\n\n### 下载kubenetes相关镜像\n\n为了加快k8s创建集群过程，可预先下载images\n\n```bash\nkubeadm config images list # 查看镜像列表\nkubeadm config images pull --config=init-config.yaml# 预下载镜像\nkubeadm config images pull --image-repository=http://registry.cn-hangzhou.aliyuncs.com/google_containers  # 或者这样\n```\n\n**注**：如果访问不了[k8s.gcr.io](k8s.gcr.io)，则需修改`/etc/docker/daemon.json`中的`registry-mirrors`项，改为国内地址。\n\n换源是个很麻烦的问题，以下是另一种方案\n\n```bash\nkubeadm config images list # 查看所需镜像列表\nimages=(  # 下面的镜像应该去除\"k8s.gcr.io/\"的前缀，版本换成上面获取到的版本\n    kube-apiserver:v1.12.1\n    kube-controller-manager:v1.12.1\n    kube-scheduler:v1.12.1\n    kube-proxy:v1.12.1\n    pause:3.1\n    etcd:3.2.24\n    coredns:1.2.2\n)\n\nfor imageName in ${images[@]} ; do\n    docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName\n    docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName\n    docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName\ndone\n# 使用脚本拉取\n```\n\n该方案来源：<https://zhuanlan.zhihu.com/p/46341911>\n\n### 使用kube init 安装master节点\n\n```bash\nkubeadm init # 初始化\nkubeadm init phase preflight # 只做预检查\nkubeadm init --ignore-preflight-errors # 跳过预检查进行初始化\n```\n\n**注意**：如果是在启动了kubelet之后再拉取的镜像，请重启kubelet。不然kubeadm会识别不到刚刚拉取的镜像\n\n*ps：最后还是挂梯子init完了，有个镜像的名字和要求的不一样，懒得改tag了*\n\n对于root用户，直接键入`export KUBECONFIG=/etc/kubernetes/admin.conf`后即可使用kubectl查看control plane的信息，对于其他用户，需要使用另外的步骤，这些步骤都会在安装完成后显示出来，我贴在下面\n\n```bash\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nAlternatively, if you are the root user, you can run:\n\n  export KUBECONFIG=/etc/kubernetes/admin.conf\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 10.0.2.15:6443 --token sddm7y.7eebnrzpl2koekx1 \\\n        --discovery-token-ca-cert-hash sha256:77ed4804b2c367c1f3eb0b3e7114fdbed2bc94748d26d04d14d22af67fbb7e7e\n```\n\n如果不执行这些步骤，会出现以下报错\n\n```bash\nThe connection to the server localhost:8080 was refused - did you specify the right host or port?\n```\n\n还要注意的一点是，kubeadm默认的安装过程不包含网络插件（CNI）的初始化，这些需要另外的步骤了。\n\n### 加入节点\n\n在节点配置好环境后，将上面的`kubeadm join`输入到另一节点即可。\n\n### 安装CNI网络插件\n\n略\n\n## 二进制形式部署安全高可用k8s集群\n\n### master高可用架构\n\n- master中的kube-apiserver、kube-controller-manager、kube-scheduler至少以三个节点的多实例方式部署\n- master启用基于CA认证的HTTPS安全机制\n- etcd以至少三个节点的集群模式部署\n- etcd启用CA认证的HTTPS安全机制\n- master启用RBAC授权模式\n\n在三个（或多个）master节点前，通过一个负载均衡器提供对客户端唯一访问入口地址。\n\n### CA根证书\n\n```bash\nopenssl genrsa -out ca.key 2048\nopenssl req -x509 -new -nodes -key ca.key -subj \"/CN=网址\" -days 36500 -out ca.crt\n```\n\n- -subj: \"/CN\"的值为master主机名或IP地址\n- -days：设置证书的有效期\n- 将生成的`ca.key`和`ca.crt`保存至`/etc/kubernetes/pki`目录下\n\n看到这里发现后面的看不太懂了，先跳一跳 \n","slug":"k8s权威指南学习笔记（1）","published":1,"category":"Operation","updated":"2022-02-11T05:17:56.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irx900188wulehkrfop8","content":"<h1 id=\"k8s安装配置指南\"><a href=\"#k8s安装配置指南\" class=\"headerlink\" title=\"k8s安装配置指南\"></a>k8s安装配置指南</h1><h2 id=\"kubeadm安装\"><a href=\"#kubeadm安装\" class=\"headerlink\" title=\"kubeadm安装\"></a>kubeadm安装</h2><h3 id=\"安装kubeadm\"><a href=\"#安装kubeadm\" class=\"headerlink\" title=\"安装kubeadm\"></a>安装kubeadm</h3><p>kubeadm是为了简化集群安装过程引入的工具</p>\n<p>大致步骤为换源，然后包管理工具安装以下套件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> -y kubelet kubeadm kubectl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"修改kubeadm的默认配置\"><a href=\"#修改kubeadm的默认配置\" class=\"headerlink\" title=\"修改kubeadm的默认配置\"></a>修改kubeadm的默认配置</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm config print init-defaults <span class=\"token comment\"># 输出kubeadm init默认参数</span>\nkubeadm config print join-defaults <span class=\"token comment\"># 输出kubeadm join的默认参数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>使用以下命令将默认配置保存备用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm config print init-defaults <span class=\"token operator\">></span> init.default.yaml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"下载kubenetes相关镜像\"><a href=\"#下载kubenetes相关镜像\" class=\"headerlink\" title=\"下载kubenetes相关镜像\"></a>下载kubenetes相关镜像</h3><p>为了加快k8s创建集群过程，可预先下载images</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm config images list <span class=\"token comment\"># 查看镜像列表</span>\nkubeadm config images pull --config<span class=\"token operator\">=</span>init-config.yaml<span class=\"token comment\"># 预下载镜像</span>\nkubeadm config images pull --image-repository<span class=\"token operator\">=</span>http://registry.cn-hangzhou.aliyuncs.com/google_containers  <span class=\"token comment\"># 或者这样</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注</strong>：如果访问不了<a href=\"k8s.gcr.io\">k8s.gcr.io</a>，则需修改<code>/etc/docker/daemon.json</code>中的<code>registry-mirrors</code>项，改为国内地址。</p>\n<p>换源是个很麻烦的问题，以下是另一种方案</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm config images list <span class=\"token comment\"># 查看所需镜像列表</span>\n<span class=\"token assign-left variable\">images</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>  <span class=\"token comment\"># 下面的镜像应该去除\"k8s.gcr.io/\"的前缀，版本换成上面获取到的版本</span>\n    kube-apiserver:v1.12.1\n    kube-controller-manager:v1.12.1\n    kube-scheduler:v1.12.1\n    kube-proxy:v1.12.1\n    pause:3.1\n    etcd:3.2.24\n    coredns:1.2.2\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">imageName</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">$&#123;images<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    <span class=\"token function\">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/<span class=\"token variable\">$imageName</span>\n    <span class=\"token function\">docker</span> tag registry.cn-hangzhou.aliyuncs.com/google_containers/<span class=\"token variable\">$imageName</span> k8s.gcr.io/<span class=\"token variable\">$imageName</span>\n    <span class=\"token function\">docker</span> rmi registry.cn-hangzhou.aliyuncs.com/google_containers/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n<span class=\"token comment\"># 使用脚本拉取</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>该方案来源：<a href=\"https://zhuanlan.zhihu.com/p/46341911\">https://zhuanlan.zhihu.com/p/46341911</a></p>\n<h3 id=\"使用kube-init-安装master节点\"><a href=\"#使用kube-init-安装master节点\" class=\"headerlink\" title=\"使用kube init 安装master节点\"></a>使用kube init 安装master节点</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm init <span class=\"token comment\"># 初始化</span>\nkubeadm init phase preflight <span class=\"token comment\"># 只做预检查</span>\nkubeadm init --ignore-preflight-errors <span class=\"token comment\"># 跳过预检查进行初始化</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注意</strong>：如果是在启动了kubelet之后再拉取的镜像，请重启kubelet。不然kubeadm会识别不到刚刚拉取的镜像</p>\n<p><em>ps：最后还是挂梯子init完了，有个镜像的名字和要求的不一样，懒得改tag了</em></p>\n<p>对于root用户，直接键入<code>export KUBECONFIG=/etc/kubernetes/admin.conf</code>后即可使用kubectl查看control plane的信息，对于其他用户，需要使用另外的步骤，这些步骤都会在安装完成后显示出来，我贴在下面</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Your Kubernetes control-plane has initialized successfully<span class=\"token operator\">!</span>\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  <span class=\"token function\">mkdir</span> -p <span class=\"token environment constant\">$HOME</span>/.kube\n  <span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"token environment constant\">$HOME</span>/.kube/config\n  <span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -u<span class=\"token variable\">)</span></span><span class=\"token builtin class-name\">:</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -g<span class=\"token variable\">)</span></span> <span class=\"token environment constant\">$HOME</span>/.kube/config\n\nAlternatively, <span class=\"token keyword\">if</span> you are the root user, you can run:\n\n  <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">KUBECONFIG</span><span class=\"token operator\">=</span>/etc/kubernetes/admin.conf\n\nYou should now deploy a pod network to the cluster.\nRun <span class=\"token string\">\"kubectl apply -f [podnetwork].yaml\"</span> with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nThen you can <span class=\"token function\">join</span> any number of worker nodes by running the following on each as root:\n\nkubeadm <span class=\"token function\">join</span> <span class=\"token number\">10.0</span>.2.15:6443 --token sddm7y.7eebnrzpl2koekx1 <span class=\"token punctuation\">\\</span>\n        --discovery-token-ca-cert-hash sha256:77ed4804b2c367c1f3eb0b3e7114fdbed2bc94748d26d04d14d22af67fbb7e7e<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果不执行这些步骤，会出现以下报错</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">The connection to the server localhost:8080 was refused - did you specify the right <span class=\"token function\">host</span> or port?<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>还要注意的一点是，kubeadm默认的安装过程不包含网络插件（CNI）的初始化，这些需要另外的步骤了。</p>\n<h3 id=\"加入节点\"><a href=\"#加入节点\" class=\"headerlink\" title=\"加入节点\"></a>加入节点</h3><p>在节点配置好环境后，将上面的<code>kubeadm join</code>输入到另一节点即可。</p>\n<h3 id=\"安装CNI网络插件\"><a href=\"#安装CNI网络插件\" class=\"headerlink\" title=\"安装CNI网络插件\"></a>安装CNI网络插件</h3><p>略</p>\n<h2 id=\"二进制形式部署安全高可用k8s集群\"><a href=\"#二进制形式部署安全高可用k8s集群\" class=\"headerlink\" title=\"二进制形式部署安全高可用k8s集群\"></a>二进制形式部署安全高可用k8s集群</h2><h3 id=\"master高可用架构\"><a href=\"#master高可用架构\" class=\"headerlink\" title=\"master高可用架构\"></a>master高可用架构</h3><ul>\n<li>master中的kube-apiserver、kube-controller-manager、kube-scheduler至少以三个节点的多实例方式部署</li>\n<li>master启用基于CA认证的HTTPS安全机制</li>\n<li>etcd以至少三个节点的集群模式部署</li>\n<li>etcd启用CA认证的HTTPS安全机制</li>\n<li>master启用RBAC授权模式</li>\n</ul>\n<p>在三个（或多个）master节点前，通过一个负载均衡器提供对客户端唯一访问入口地址。</p>\n<h3 id=\"CA根证书\"><a href=\"#CA根证书\" class=\"headerlink\" title=\"CA根证书\"></a>CA根证书</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">openssl genrsa -out ca.key <span class=\"token number\">2048</span>\nopenssl req -x509 -new -nodes -key ca.key -subj <span class=\"token string\">\"/CN=网址\"</span> -days <span class=\"token number\">36500</span> -out ca.crt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>-subj: “&#x2F;CN”的值为master主机名或IP地址</li>\n<li>-days：设置证书的有效期</li>\n<li>将生成的<code>ca.key</code>和<code>ca.crt</code>保存至<code>/etc/kubernetes/pki</code>目录下</li>\n</ul>\n<p>看到这里发现后面的看不太懂了，先跳一跳 </p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"excerpt":"","more":"<h1 id=\"k8s安装配置指南\"><a href=\"#k8s安装配置指南\" class=\"headerlink\" title=\"k8s安装配置指南\"></a>k8s安装配置指南</h1><h2 id=\"kubeadm安装\"><a href=\"#kubeadm安装\" class=\"headerlink\" title=\"kubeadm安装\"></a>kubeadm安装</h2><h3 id=\"安装kubeadm\"><a href=\"#安装kubeadm\" class=\"headerlink\" title=\"安装kubeadm\"></a>安装kubeadm</h3><p>kubeadm是为了简化集群安装过程引入的工具</p>\n<p>大致步骤为换源，然后包管理工具安装以下套件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> -y kubelet kubeadm kubectl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"修改kubeadm的默认配置\"><a href=\"#修改kubeadm的默认配置\" class=\"headerlink\" title=\"修改kubeadm的默认配置\"></a>修改kubeadm的默认配置</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm config print init-defaults <span class=\"token comment\"># 输出kubeadm init默认参数</span>\nkubeadm config print join-defaults <span class=\"token comment\"># 输出kubeadm join的默认参数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>使用以下命令将默认配置保存备用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm config print init-defaults <span class=\"token operator\">></span> init.default.yaml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"下载kubenetes相关镜像\"><a href=\"#下载kubenetes相关镜像\" class=\"headerlink\" title=\"下载kubenetes相关镜像\"></a>下载kubenetes相关镜像</h3><p>为了加快k8s创建集群过程，可预先下载images</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm config images list <span class=\"token comment\"># 查看镜像列表</span>\nkubeadm config images pull --config<span class=\"token operator\">=</span>init-config.yaml<span class=\"token comment\"># 预下载镜像</span>\nkubeadm config images pull --image-repository<span class=\"token operator\">=</span>http://registry.cn-hangzhou.aliyuncs.com/google_containers  <span class=\"token comment\"># 或者这样</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注</strong>：如果访问不了<a href=\"k8s.gcr.io\">k8s.gcr.io</a>，则需修改<code>/etc/docker/daemon.json</code>中的<code>registry-mirrors</code>项，改为国内地址。</p>\n<p>换源是个很麻烦的问题，以下是另一种方案</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm config images list <span class=\"token comment\"># 查看所需镜像列表</span>\n<span class=\"token assign-left variable\">images</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>  <span class=\"token comment\"># 下面的镜像应该去除\"k8s.gcr.io/\"的前缀，版本换成上面获取到的版本</span>\n    kube-apiserver:v1.12.1\n    kube-controller-manager:v1.12.1\n    kube-scheduler:v1.12.1\n    kube-proxy:v1.12.1\n    pause:3.1\n    etcd:3.2.24\n    coredns:1.2.2\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">imageName</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">$&#123;images<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    <span class=\"token function\">docker</span> pull registry.cn-hangzhou.aliyuncs.com/google_containers/<span class=\"token variable\">$imageName</span>\n    <span class=\"token function\">docker</span> tag registry.cn-hangzhou.aliyuncs.com/google_containers/<span class=\"token variable\">$imageName</span> k8s.gcr.io/<span class=\"token variable\">$imageName</span>\n    <span class=\"token function\">docker</span> rmi registry.cn-hangzhou.aliyuncs.com/google_containers/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n<span class=\"token comment\"># 使用脚本拉取</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>该方案来源：<a href=\"https://zhuanlan.zhihu.com/p/46341911\">https://zhuanlan.zhihu.com/p/46341911</a></p>\n<h3 id=\"使用kube-init-安装master节点\"><a href=\"#使用kube-init-安装master节点\" class=\"headerlink\" title=\"使用kube init 安装master节点\"></a>使用kube init 安装master节点</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm init <span class=\"token comment\"># 初始化</span>\nkubeadm init phase preflight <span class=\"token comment\"># 只做预检查</span>\nkubeadm init --ignore-preflight-errors <span class=\"token comment\"># 跳过预检查进行初始化</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注意</strong>：如果是在启动了kubelet之后再拉取的镜像，请重启kubelet。不然kubeadm会识别不到刚刚拉取的镜像</p>\n<p><em>ps：最后还是挂梯子init完了，有个镜像的名字和要求的不一样，懒得改tag了</em></p>\n<p>对于root用户，直接键入<code>export KUBECONFIG=/etc/kubernetes/admin.conf</code>后即可使用kubectl查看control plane的信息，对于其他用户，需要使用另外的步骤，这些步骤都会在安装完成后显示出来，我贴在下面</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Your Kubernetes control-plane has initialized successfully<span class=\"token operator\">!</span>\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  <span class=\"token function\">mkdir</span> -p <span class=\"token environment constant\">$HOME</span>/.kube\n  <span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"token environment constant\">$HOME</span>/.kube/config\n  <span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -u<span class=\"token variable\">)</span></span><span class=\"token builtin class-name\">:</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -g<span class=\"token variable\">)</span></span> <span class=\"token environment constant\">$HOME</span>/.kube/config\n\nAlternatively, <span class=\"token keyword\">if</span> you are the root user, you can run:\n\n  <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">KUBECONFIG</span><span class=\"token operator\">=</span>/etc/kubernetes/admin.conf\n\nYou should now deploy a pod network to the cluster.\nRun <span class=\"token string\">\"kubectl apply -f [podnetwork].yaml\"</span> with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nThen you can <span class=\"token function\">join</span> any number of worker nodes by running the following on each as root:\n\nkubeadm <span class=\"token function\">join</span> <span class=\"token number\">10.0</span>.2.15:6443 --token sddm7y.7eebnrzpl2koekx1 <span class=\"token punctuation\">\\</span>\n        --discovery-token-ca-cert-hash sha256:77ed4804b2c367c1f3eb0b3e7114fdbed2bc94748d26d04d14d22af67fbb7e7e<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果不执行这些步骤，会出现以下报错</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">The connection to the server localhost:8080 was refused - did you specify the right <span class=\"token function\">host</span> or port?<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>还要注意的一点是，kubeadm默认的安装过程不包含网络插件（CNI）的初始化，这些需要另外的步骤了。</p>\n<h3 id=\"加入节点\"><a href=\"#加入节点\" class=\"headerlink\" title=\"加入节点\"></a>加入节点</h3><p>在节点配置好环境后，将上面的<code>kubeadm join</code>输入到另一节点即可。</p>\n<h3 id=\"安装CNI网络插件\"><a href=\"#安装CNI网络插件\" class=\"headerlink\" title=\"安装CNI网络插件\"></a>安装CNI网络插件</h3><p>略</p>\n<h2 id=\"二进制形式部署安全高可用k8s集群\"><a href=\"#二进制形式部署安全高可用k8s集群\" class=\"headerlink\" title=\"二进制形式部署安全高可用k8s集群\"></a>二进制形式部署安全高可用k8s集群</h2><h3 id=\"master高可用架构\"><a href=\"#master高可用架构\" class=\"headerlink\" title=\"master高可用架构\"></a>master高可用架构</h3><ul>\n<li>master中的kube-apiserver、kube-controller-manager、kube-scheduler至少以三个节点的多实例方式部署</li>\n<li>master启用基于CA认证的HTTPS安全机制</li>\n<li>etcd以至少三个节点的集群模式部署</li>\n<li>etcd启用CA认证的HTTPS安全机制</li>\n<li>master启用RBAC授权模式</li>\n</ul>\n<p>在三个（或多个）master节点前，通过一个负载均衡器提供对客户端唯一访问入口地址。</p>\n<h3 id=\"CA根证书\"><a href=\"#CA根证书\" class=\"headerlink\" title=\"CA根证书\"></a>CA根证书</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">openssl genrsa -out ca.key <span class=\"token number\">2048</span>\nopenssl req -x509 -new -nodes -key ca.key -subj <span class=\"token string\">\"/CN=网址\"</span> -days <span class=\"token number\">36500</span> -out ca.crt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>-subj: “&#x2F;CN”的值为master主机名或IP地址</li>\n<li>-days：设置证书的有效期</li>\n<li>将生成的<code>ca.key</code>和<code>ca.crt</code>保存至<code>/etc/kubernetes/pki</code>目录下</li>\n</ul>\n<p>看到这里发现后面的看不太懂了，先跳一跳 </p>\n"},{"title":"log-a-rsync-mistake","abbrlink":"2571fbb2","date":"2021-12-03T08:16:26.000Z","_content":"\n# log a rsync mistake\n\nI want to sync some files from 2 directories `mirror1` and`mirror2`.So I run:\n\n```bash\nnohup rsync <src>/mirror1 ./tmp -a --delete &\nnohup rsync <src>/mirror2 ./tmp -a --delete &\n```\n\nthe argument `--delete` would delete all the file not exist in source directories. So only second command make effect.\n\nAvoid abusing of `--delete` when using `rsync`. \n","source":"_posts/Operation/log-a-rsync-mistake.md","raw":"---\ntitle: log-a-rsync-mistake\ncategories:\n  - Operation\ntags:\n  - rsync\nabbrlink: 2571fbb2\ndate: 2021-12-03 16:16:26\n---\n\n# log a rsync mistake\n\nI want to sync some files from 2 directories `mirror1` and`mirror2`.So I run:\n\n```bash\nnohup rsync <src>/mirror1 ./tmp -a --delete &\nnohup rsync <src>/mirror2 ./tmp -a --delete &\n```\n\nthe argument `--delete` would delete all the file not exist in source directories. So only second command make effect.\n\nAvoid abusing of `--delete` when using `rsync`. \n","slug":"log-a-rsync-mistake","published":1,"category":"Operation","updated":"2022-02-11T05:17:56.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irx9001a8wulg44tfl3k","content":"<h1 id=\"log-a-rsync-mistake\"><a href=\"#log-a-rsync-mistake\" class=\"headerlink\" title=\"log a rsync mistake\"></a>log a rsync mistake</h1><p>I want to sync some files from 2 directories <code>mirror1</code> and<code>mirror2</code>.So I run:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nohup</span> <span class=\"token function\">rsync</span> <span class=\"token operator\">&lt;</span>src<span class=\"token operator\">></span>/mirror1 ./tmp -a --delete <span class=\"token operator\">&amp;</span>\n<span class=\"token function\">nohup</span> <span class=\"token function\">rsync</span> <span class=\"token operator\">&lt;</span>src<span class=\"token operator\">></span>/mirror2 ./tmp -a --delete <span class=\"token operator\">&amp;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>the argument <code>--delete</code> would delete all the file not exist in source directories. So only second command make effect.</p>\n<p>Avoid abusing of <code>--delete</code> when using <code>rsync</code>. </p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/chaopao2.jpg","excerpt":"","more":"<h1 id=\"log-a-rsync-mistake\"><a href=\"#log-a-rsync-mistake\" class=\"headerlink\" title=\"log a rsync mistake\"></a>log a rsync mistake</h1><p>I want to sync some files from 2 directories <code>mirror1</code> and<code>mirror2</code>.So I run:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nohup</span> <span class=\"token function\">rsync</span> <span class=\"token operator\">&lt;</span>src<span class=\"token operator\">></span>/mirror1 ./tmp -a --delete <span class=\"token operator\">&amp;</span>\n<span class=\"token function\">nohup</span> <span class=\"token function\">rsync</span> <span class=\"token operator\">&lt;</span>src<span class=\"token operator\">></span>/mirror2 ./tmp -a --delete <span class=\"token operator\">&amp;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>the argument <code>--delete</code> would delete all the file not exist in source directories. So only second command make effect.</p>\n<p>Avoid abusing of <code>--delete</code> when using <code>rsync</code>. </p>\n"},{"title":"log-a-git-error","abbrlink":"1bfaedf6","date":"2021-11-10T12:01:01.000Z","_content":"\nWhen I tried to clone a repo from self-built gitlab. I met a error like this：\n\n```bash\n$> git clone https://git.qingyou.ren/KawhiCurry/ansible.git  Cloning into 'ansible'...\nfatal: unable to access 'https://git.qingyou.ren/KawhiCurry/ansible.git/': Failed to connect to 127.0.0.1 port 7890: Connection refused\n```\n\nAnyway, 7890 refuse me. Finally, I got this: [cnblogs](https://www.cnblogs.com/lfri/p/15377383.html)\n\nSeems my proxy(or vpn?)ruin it. It leads my git somewhere strange.\n\nrecord the operation here.\n\n```bash\ngit config --global -l\ngit config --global -e\n//delete or comment on the lines about port\n```\n\n","source":"_posts/Operation/log-a-git-error.md","raw":"---\ntitle: log-a-git-error\ncategories:\n  - Operation\ntags:\n  - git\nabbrlink: 1bfaedf6\ndate: 2021-11-10 20:01:01\n---\n\nWhen I tried to clone a repo from self-built gitlab. I met a error like this：\n\n```bash\n$> git clone https://git.qingyou.ren/KawhiCurry/ansible.git  Cloning into 'ansible'...\nfatal: unable to access 'https://git.qingyou.ren/KawhiCurry/ansible.git/': Failed to connect to 127.0.0.1 port 7890: Connection refused\n```\n\nAnyway, 7890 refuse me. Finally, I got this: [cnblogs](https://www.cnblogs.com/lfri/p/15377383.html)\n\nSeems my proxy(or vpn?)ruin it. It leads my git somewhere strange.\n\nrecord the operation here.\n\n```bash\ngit config --global -l\ngit config --global -e\n//delete or comment on the lines about port\n```\n\n","slug":"log-a-git-error","published":1,"category":"Operation","updated":"2022-02-11T05:17:56.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxa001e8wul0a63cibb","content":"<p>When I tried to clone a repo from self-built gitlab. I met a error like this：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$<span class=\"token operator\">></span> <span class=\"token function\">git</span> clone https://git.qingyou.ren/KawhiCurry/ansible.git  Cloning into <span class=\"token string\">'ansible'</span><span class=\"token punctuation\">..</span>.\nfatal: unable to access <span class=\"token string\">'https://git.qingyou.ren/KawhiCurry/ansible.git/'</span><span class=\"token builtin class-name\">:</span> Failed to connect to <span class=\"token number\">127.0</span>.0.1 port <span class=\"token number\">7890</span>: Connection refused<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>Anyway, 7890 refuse me. Finally, I got this: <a href=\"https://www.cnblogs.com/lfri/p/15377383.html\">cnblogs</a></p>\n<p>Seems my proxy(or vpn?)ruin it. It leads my git somewhere strange.</p>\n<p>record the operation here.</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global -l\n<span class=\"token function\">git</span> config --global -e\n//delete or comment on the lines about port<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/kon0.jpg","excerpt":"","more":"<p>When I tried to clone a repo from self-built gitlab. I met a error like this：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$<span class=\"token operator\">></span> <span class=\"token function\">git</span> clone https://git.qingyou.ren/KawhiCurry/ansible.git  Cloning into <span class=\"token string\">'ansible'</span><span class=\"token punctuation\">..</span>.\nfatal: unable to access <span class=\"token string\">'https://git.qingyou.ren/KawhiCurry/ansible.git/'</span><span class=\"token builtin class-name\">:</span> Failed to connect to <span class=\"token number\">127.0</span>.0.1 port <span class=\"token number\">7890</span>: Connection refused<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>Anyway, 7890 refuse me. Finally, I got this: <a href=\"https://www.cnblogs.com/lfri/p/15377383.html\">cnblogs</a></p>\n<p>Seems my proxy(or vpn?)ruin it. It leads my git somewhere strange.</p>\n<p>record the operation here.</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global -l\n<span class=\"token function\">git</span> config --global -e\n//delete or comment on the lines about port<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"Situation of operation technology","abbrlink":"a09255e2","date":"2021-11-13T12:01:01.000Z","_content":"# 一个软件的诞生\n\n## 开发过程\n\n准备：市场调查、需求分析……\n\n确定方案：技术，平台\n\n开发：\n\n- 设计&前端：界面\n- 后端：业务逻辑\n\n上线：\n\n- 运营：宣传\n- 运维：服务器维护\n\n# 传统的运维方式\n\n把写好的软件部署到服务器上，跑就完事了。\n\n## 如果业务量大了呢？\n\n用一样的方式部署到很多服务器上，跑就完事了。\n\n## 有什么问题？\n\n- **必须时刻以最大业务量安排服务器数量**，成本高。\n- 每个公司都要有专职运维人员，招人难\n- 运维人员无论水平高低，所能管理的服务器数量有上限\n- 遇到突发状况，所需运维人员数量陡增，而保持一个大量运维团队需要高成本\n\n# 一种趋势\n\n所需管理的服务器数量庞大，但大部分工作都是重复的。所以……\n\n## CI/CD\n\n持续集成，持续交付，持续部署。让后端开发人员（数量庞大，不乏牛人）来完成运维工作\n\n## Devops\n\n运维开发，专门开发运维工具的人。试图将运维工作尽可能的自动化。\n\n# 另一种趋势\n\n## 虚拟化技术的进步\n\n最初的虚拟化：让windows的应用在mac上跑起来（纯举例），虚拟化的环境具有完整的系统，可以在另一个操作系统上跑起来。在性能上具有极大的开销（就是会很慢）\n\n容器化：让一个应用在一个容器中运行，该容器具有该应用所需的全部环境。一个容器就是一个进程，开销较小，与操作系统兼容良好（主要指linux）\n\n## 容器时代\n\n不再关注各式各样的环境问题，所需要的环境都可以打包成容器，并且可以使用别人打包好的容器。\n\n**docker**:第一个开源容器技术的公司，现在仍然是王者。\n\ndocker的开源使得任何人都可以轻松部署各式各样的服务，因为环境的配置已经不是难题。但是对于企业来说，问题仍然存在：每个服务器上都可以跑好几个容器，就像以前一个服务器上可以跑好几个应用一样。如果有几千台呢？几万台呢？\n\n## 容器编排\n\n能不能让不同的服务器上的容器连成一个整体？或者自动编排容器，让它们在合适的时间或者位置提供服务？\n\n**kubernetes**:来自google，简称k8s，容器编排唯一的标准，生态的中心。\n\n允许将多个提供同一服务的容器打包成一个pod（豆荚），将多个服务器设置为一个cluster（集群），由k8s来决定pod在哪台服务器上运行。并且k8s可以在不同服务器上启动相同的pod，当一台服务器出现故障时，k8s迅速在其他服务器上添加故障服务器上运行的pod，从而保证了服务的稳定性。\n\n即成事实：**k8s是生态的中心**\n\n围绕k8s的生态：监控，流水线部署，自动预警，网格化网关，容器化数据库以及**serverless**\n\n*k8s标志着云时代的正式开始*\n\n## 再进一步\n\n如果容器可以方便的创建和销毁，能不能更进一步？\n\n当有请求时才创建容器进行服务（而不是一直等着），请求结束就销毁容器，这便是**Serverless**，来自Amazon（亚马逊）\n\n**Serverless**，无服务器技术，只有有需求的时候才服务。\n\n试想一个秒杀系统，在短暂的几秒内，服务器收到了数以亿记的请求，服务器立刻反应，创建大量容器进行服务，每服务完就立即销毁，把资源留给下一个创建的容器。而在几秒前或几秒后，服务器也许还处于一个“清闲”的状态。当前的serverless按照请求数计费，小公司无需按最大并发量购置服务器，只需直接购买serverless服务。\n\n# 云服务现状\n\n自k8s被推出以后，大公司们成立了CNCF（云原生计算基金会）。示例成员：google、AWS（亚马逊，世界最大的云服务供应商，serverless的领头羊）、RedHat（红帽，世界上最大的服务器软件公司，负责的centos操作系统跑在世界上百分之五十以上，中国百分之八十以上的服务器上）、docker、apache基金会（最成熟的服务器软件apache拥有者）、github、gitlab（二者分别为最大的代码托管网站和最大的开源私有git服务提供商）、华为（独立的鲲鹏架构）。\n\n## 国内环境\n\n- 阿里云：全国最大的云服务供应商，对内为淘宝等提供服务，对外为各类企业提供云服务。\n- 腾讯云：对内有qq、微信、微信小程序等业务。拥有独立的小程序平台。\n- 华为云：有自产鲲鹏服务器，使用与绝大多数服务器不一样的arm架构（大部分服务器包括个人电脑都是amd64，也叫x86-64，但苹果的自研芯片M1是arm）。\n- 七牛云：阿里云出走大佬创办，有一定实力。\n- 青云：一个k8s开源集群管理系统的国内主导者。\n\n现状分析：\n\n> 一方面，围绕容器和容器编排的标准已经制定完成，但基于标准的各项指标仍有提升空间，各大公司仍然在试图在这些标准下做出更好的工具，比如容器和容器的构建工具。另一方面，围绕生态的工具也有许多不完善之处，比如一个让不懂运维的人也能轻松部署的自动部署平台，或是一个完善的部署到监控的工具链。这些被统称为“云基础设施”，云基础设施仍然有许多待完善之处。对于互联网行业来说，传统的运维会越来越少（但绝对不会消失），更多企业倾向于请云服务供应商来构建自己的服务，甚至直接将自身服务交给云供应商。反过来，云供应商也要开发更好的云平台给企业使用。\n\n# 一些其他的机会\n\n## 云与AI\n\n当服务器闲下来可以做什么？挖矿（划掉）。服务器被设计成可以不间断的运行，但很显然它并不会真的时刻运行，当它闲下来时，其算力就有大用途，比如用于机器学习。当然，对于专业的ai公司，他们也有自己的服务器集群，如何利用互联网的云服务来管理自己的集群，也成了一个不错的方向。\n\n## 云与物联网\n\n专业的物联网后端早就有了，尤其是近年来通信行业的进步，更加促进了“计算不一定非要在本地完成”这种概念的推广。对于传统控制行业来说，大多数计算会在嵌入式设备（看作是一个低性能的计算机）上完成，底层工程师们不得不想尽办法优化性能，确保其服务能稳定的运行在嵌入式设备中。而现在，这些计算有望在很远的云服务器上完成。（当然，嵌入式设备工程师并不会消失）\n\n这就是我对这个行业的一些了解。","source":"_posts/Operation/net-server-0.md","raw":"---\ntitle: Situation of operation technology\ncategories:\n  - Operation\ntags:\n  - cloud\nabbrlink: a09255e2\ndate: 2021-11-13 20:01:01\n---\n# 一个软件的诞生\n\n## 开发过程\n\n准备：市场调查、需求分析……\n\n确定方案：技术，平台\n\n开发：\n\n- 设计&前端：界面\n- 后端：业务逻辑\n\n上线：\n\n- 运营：宣传\n- 运维：服务器维护\n\n# 传统的运维方式\n\n把写好的软件部署到服务器上，跑就完事了。\n\n## 如果业务量大了呢？\n\n用一样的方式部署到很多服务器上，跑就完事了。\n\n## 有什么问题？\n\n- **必须时刻以最大业务量安排服务器数量**，成本高。\n- 每个公司都要有专职运维人员，招人难\n- 运维人员无论水平高低，所能管理的服务器数量有上限\n- 遇到突发状况，所需运维人员数量陡增，而保持一个大量运维团队需要高成本\n\n# 一种趋势\n\n所需管理的服务器数量庞大，但大部分工作都是重复的。所以……\n\n## CI/CD\n\n持续集成，持续交付，持续部署。让后端开发人员（数量庞大，不乏牛人）来完成运维工作\n\n## Devops\n\n运维开发，专门开发运维工具的人。试图将运维工作尽可能的自动化。\n\n# 另一种趋势\n\n## 虚拟化技术的进步\n\n最初的虚拟化：让windows的应用在mac上跑起来（纯举例），虚拟化的环境具有完整的系统，可以在另一个操作系统上跑起来。在性能上具有极大的开销（就是会很慢）\n\n容器化：让一个应用在一个容器中运行，该容器具有该应用所需的全部环境。一个容器就是一个进程，开销较小，与操作系统兼容良好（主要指linux）\n\n## 容器时代\n\n不再关注各式各样的环境问题，所需要的环境都可以打包成容器，并且可以使用别人打包好的容器。\n\n**docker**:第一个开源容器技术的公司，现在仍然是王者。\n\ndocker的开源使得任何人都可以轻松部署各式各样的服务，因为环境的配置已经不是难题。但是对于企业来说，问题仍然存在：每个服务器上都可以跑好几个容器，就像以前一个服务器上可以跑好几个应用一样。如果有几千台呢？几万台呢？\n\n## 容器编排\n\n能不能让不同的服务器上的容器连成一个整体？或者自动编排容器，让它们在合适的时间或者位置提供服务？\n\n**kubernetes**:来自google，简称k8s，容器编排唯一的标准，生态的中心。\n\n允许将多个提供同一服务的容器打包成一个pod（豆荚），将多个服务器设置为一个cluster（集群），由k8s来决定pod在哪台服务器上运行。并且k8s可以在不同服务器上启动相同的pod，当一台服务器出现故障时，k8s迅速在其他服务器上添加故障服务器上运行的pod，从而保证了服务的稳定性。\n\n即成事实：**k8s是生态的中心**\n\n围绕k8s的生态：监控，流水线部署，自动预警，网格化网关，容器化数据库以及**serverless**\n\n*k8s标志着云时代的正式开始*\n\n## 再进一步\n\n如果容器可以方便的创建和销毁，能不能更进一步？\n\n当有请求时才创建容器进行服务（而不是一直等着），请求结束就销毁容器，这便是**Serverless**，来自Amazon（亚马逊）\n\n**Serverless**，无服务器技术，只有有需求的时候才服务。\n\n试想一个秒杀系统，在短暂的几秒内，服务器收到了数以亿记的请求，服务器立刻反应，创建大量容器进行服务，每服务完就立即销毁，把资源留给下一个创建的容器。而在几秒前或几秒后，服务器也许还处于一个“清闲”的状态。当前的serverless按照请求数计费，小公司无需按最大并发量购置服务器，只需直接购买serverless服务。\n\n# 云服务现状\n\n自k8s被推出以后，大公司们成立了CNCF（云原生计算基金会）。示例成员：google、AWS（亚马逊，世界最大的云服务供应商，serverless的领头羊）、RedHat（红帽，世界上最大的服务器软件公司，负责的centos操作系统跑在世界上百分之五十以上，中国百分之八十以上的服务器上）、docker、apache基金会（最成熟的服务器软件apache拥有者）、github、gitlab（二者分别为最大的代码托管网站和最大的开源私有git服务提供商）、华为（独立的鲲鹏架构）。\n\n## 国内环境\n\n- 阿里云：全国最大的云服务供应商，对内为淘宝等提供服务，对外为各类企业提供云服务。\n- 腾讯云：对内有qq、微信、微信小程序等业务。拥有独立的小程序平台。\n- 华为云：有自产鲲鹏服务器，使用与绝大多数服务器不一样的arm架构（大部分服务器包括个人电脑都是amd64，也叫x86-64，但苹果的自研芯片M1是arm）。\n- 七牛云：阿里云出走大佬创办，有一定实力。\n- 青云：一个k8s开源集群管理系统的国内主导者。\n\n现状分析：\n\n> 一方面，围绕容器和容器编排的标准已经制定完成，但基于标准的各项指标仍有提升空间，各大公司仍然在试图在这些标准下做出更好的工具，比如容器和容器的构建工具。另一方面，围绕生态的工具也有许多不完善之处，比如一个让不懂运维的人也能轻松部署的自动部署平台，或是一个完善的部署到监控的工具链。这些被统称为“云基础设施”，云基础设施仍然有许多待完善之处。对于互联网行业来说，传统的运维会越来越少（但绝对不会消失），更多企业倾向于请云服务供应商来构建自己的服务，甚至直接将自身服务交给云供应商。反过来，云供应商也要开发更好的云平台给企业使用。\n\n# 一些其他的机会\n\n## 云与AI\n\n当服务器闲下来可以做什么？挖矿（划掉）。服务器被设计成可以不间断的运行，但很显然它并不会真的时刻运行，当它闲下来时，其算力就有大用途，比如用于机器学习。当然，对于专业的ai公司，他们也有自己的服务器集群，如何利用互联网的云服务来管理自己的集群，也成了一个不错的方向。\n\n## 云与物联网\n\n专业的物联网后端早就有了，尤其是近年来通信行业的进步，更加促进了“计算不一定非要在本地完成”这种概念的推广。对于传统控制行业来说，大多数计算会在嵌入式设备（看作是一个低性能的计算机）上完成，底层工程师们不得不想尽办法优化性能，确保其服务能稳定的运行在嵌入式设备中。而现在，这些计算有望在很远的云服务器上完成。（当然，嵌入式设备工程师并不会消失）\n\n这就是我对这个行业的一些了解。","slug":"net-server-0","published":1,"category":"Operation","updated":"2022-02-11T05:17:56.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxb001g8wul5u7v99op","content":"<h1 id=\"一个软件的诞生\"><a href=\"#一个软件的诞生\" class=\"headerlink\" title=\"一个软件的诞生\"></a>一个软件的诞生</h1><h2 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h2><p>准备：市场调查、需求分析……</p>\n<p>确定方案：技术，平台</p>\n<p>开发：</p>\n<ul>\n<li>设计&amp;前端：界面</li>\n<li>后端：业务逻辑</li>\n</ul>\n<p>上线：</p>\n<ul>\n<li>运营：宣传</li>\n<li>运维：服务器维护</li>\n</ul>\n<h1 id=\"传统的运维方式\"><a href=\"#传统的运维方式\" class=\"headerlink\" title=\"传统的运维方式\"></a>传统的运维方式</h1><p>把写好的软件部署到服务器上，跑就完事了。</p>\n<h2 id=\"如果业务量大了呢？\"><a href=\"#如果业务量大了呢？\" class=\"headerlink\" title=\"如果业务量大了呢？\"></a>如果业务量大了呢？</h2><p>用一样的方式部署到很多服务器上，跑就完事了。</p>\n<h2 id=\"有什么问题？\"><a href=\"#有什么问题？\" class=\"headerlink\" title=\"有什么问题？\"></a>有什么问题？</h2><ul>\n<li><strong>必须时刻以最大业务量安排服务器数量</strong>，成本高。</li>\n<li>每个公司都要有专职运维人员，招人难</li>\n<li>运维人员无论水平高低，所能管理的服务器数量有上限</li>\n<li>遇到突发状况，所需运维人员数量陡增，而保持一个大量运维团队需要高成本</li>\n</ul>\n<h1 id=\"一种趋势\"><a href=\"#一种趋势\" class=\"headerlink\" title=\"一种趋势\"></a>一种趋势</h1><p>所需管理的服务器数量庞大，但大部分工作都是重复的。所以……</p>\n<h2 id=\"CI-x2F-CD\"><a href=\"#CI-x2F-CD\" class=\"headerlink\" title=\"CI&#x2F;CD\"></a>CI&#x2F;CD</h2><p>持续集成，持续交付，持续部署。让后端开发人员（数量庞大，不乏牛人）来完成运维工作</p>\n<h2 id=\"Devops\"><a href=\"#Devops\" class=\"headerlink\" title=\"Devops\"></a>Devops</h2><p>运维开发，专门开发运维工具的人。试图将运维工作尽可能的自动化。</p>\n<h1 id=\"另一种趋势\"><a href=\"#另一种趋势\" class=\"headerlink\" title=\"另一种趋势\"></a>另一种趋势</h1><h2 id=\"虚拟化技术的进步\"><a href=\"#虚拟化技术的进步\" class=\"headerlink\" title=\"虚拟化技术的进步\"></a>虚拟化技术的进步</h2><p>最初的虚拟化：让windows的应用在mac上跑起来（纯举例），虚拟化的环境具有完整的系统，可以在另一个操作系统上跑起来。在性能上具有极大的开销（就是会很慢）</p>\n<p>容器化：让一个应用在一个容器中运行，该容器具有该应用所需的全部环境。一个容器就是一个进程，开销较小，与操作系统兼容良好（主要指linux）</p>\n<h2 id=\"容器时代\"><a href=\"#容器时代\" class=\"headerlink\" title=\"容器时代\"></a>容器时代</h2><p>不再关注各式各样的环境问题，所需要的环境都可以打包成容器，并且可以使用别人打包好的容器。</p>\n<p><strong>docker</strong>:第一个开源容器技术的公司，现在仍然是王者。</p>\n<p>docker的开源使得任何人都可以轻松部署各式各样的服务，因为环境的配置已经不是难题。但是对于企业来说，问题仍然存在：每个服务器上都可以跑好几个容器，就像以前一个服务器上可以跑好几个应用一样。如果有几千台呢？几万台呢？</p>\n<h2 id=\"容器编排\"><a href=\"#容器编排\" class=\"headerlink\" title=\"容器编排\"></a>容器编排</h2><p>能不能让不同的服务器上的容器连成一个整体？或者自动编排容器，让它们在合适的时间或者位置提供服务？</p>\n<p><strong>kubernetes</strong>:来自google，简称k8s，容器编排唯一的标准，生态的中心。</p>\n<p>允许将多个提供同一服务的容器打包成一个pod（豆荚），将多个服务器设置为一个cluster（集群），由k8s来决定pod在哪台服务器上运行。并且k8s可以在不同服务器上启动相同的pod，当一台服务器出现故障时，k8s迅速在其他服务器上添加故障服务器上运行的pod，从而保证了服务的稳定性。</p>\n<p>即成事实：<strong>k8s是生态的中心</strong></p>\n<p>围绕k8s的生态：监控，流水线部署，自动预警，网格化网关，容器化数据库以及<strong>serverless</strong></p>\n<p><em>k8s标志着云时代的正式开始</em></p>\n<h2 id=\"再进一步\"><a href=\"#再进一步\" class=\"headerlink\" title=\"再进一步\"></a>再进一步</h2><p>如果容器可以方便的创建和销毁，能不能更进一步？</p>\n<p>当有请求时才创建容器进行服务（而不是一直等着），请求结束就销毁容器，这便是<strong>Serverless</strong>，来自Amazon（亚马逊）</p>\n<p><strong>Serverless</strong>，无服务器技术，只有有需求的时候才服务。</p>\n<p>试想一个秒杀系统，在短暂的几秒内，服务器收到了数以亿记的请求，服务器立刻反应，创建大量容器进行服务，每服务完就立即销毁，把资源留给下一个创建的容器。而在几秒前或几秒后，服务器也许还处于一个“清闲”的状态。当前的serverless按照请求数计费，小公司无需按最大并发量购置服务器，只需直接购买serverless服务。</p>\n<h1 id=\"云服务现状\"><a href=\"#云服务现状\" class=\"headerlink\" title=\"云服务现状\"></a>云服务现状</h1><p>自k8s被推出以后，大公司们成立了CNCF（云原生计算基金会）。示例成员：google、AWS（亚马逊，世界最大的云服务供应商，serverless的领头羊）、RedHat（红帽，世界上最大的服务器软件公司，负责的centos操作系统跑在世界上百分之五十以上，中国百分之八十以上的服务器上）、docker、apache基金会（最成熟的服务器软件apache拥有者）、github、gitlab（二者分别为最大的代码托管网站和最大的开源私有git服务提供商）、华为（独立的鲲鹏架构）。</p>\n<h2 id=\"国内环境\"><a href=\"#国内环境\" class=\"headerlink\" title=\"国内环境\"></a>国内环境</h2><ul>\n<li>阿里云：全国最大的云服务供应商，对内为淘宝等提供服务，对外为各类企业提供云服务。</li>\n<li>腾讯云：对内有qq、微信、微信小程序等业务。拥有独立的小程序平台。</li>\n<li>华为云：有自产鲲鹏服务器，使用与绝大多数服务器不一样的arm架构（大部分服务器包括个人电脑都是amd64，也叫x86-64，但苹果的自研芯片M1是arm）。</li>\n<li>七牛云：阿里云出走大佬创办，有一定实力。</li>\n<li>青云：一个k8s开源集群管理系统的国内主导者。</li>\n</ul>\n<p>现状分析：</p>\n<blockquote>\n<p>一方面，围绕容器和容器编排的标准已经制定完成，但基于标准的各项指标仍有提升空间，各大公司仍然在试图在这些标准下做出更好的工具，比如容器和容器的构建工具。另一方面，围绕生态的工具也有许多不完善之处，比如一个让不懂运维的人也能轻松部署的自动部署平台，或是一个完善的部署到监控的工具链。这些被统称为“云基础设施”，云基础设施仍然有许多待完善之处。对于互联网行业来说，传统的运维会越来越少（但绝对不会消失），更多企业倾向于请云服务供应商来构建自己的服务，甚至直接将自身服务交给云供应商。反过来，云供应商也要开发更好的云平台给企业使用。</p>\n</blockquote>\n<h1 id=\"一些其他的机会\"><a href=\"#一些其他的机会\" class=\"headerlink\" title=\"一些其他的机会\"></a>一些其他的机会</h1><h2 id=\"云与AI\"><a href=\"#云与AI\" class=\"headerlink\" title=\"云与AI\"></a>云与AI</h2><p>当服务器闲下来可以做什么？挖矿（划掉）。服务器被设计成可以不间断的运行，但很显然它并不会真的时刻运行，当它闲下来时，其算力就有大用途，比如用于机器学习。当然，对于专业的ai公司，他们也有自己的服务器集群，如何利用互联网的云服务来管理自己的集群，也成了一个不错的方向。</p>\n<h2 id=\"云与物联网\"><a href=\"#云与物联网\" class=\"headerlink\" title=\"云与物联网\"></a>云与物联网</h2><p>专业的物联网后端早就有了，尤其是近年来通信行业的进步，更加促进了“计算不一定非要在本地完成”这种概念的推广。对于传统控制行业来说，大多数计算会在嵌入式设备（看作是一个低性能的计算机）上完成，底层工程师们不得不想尽办法优化性能，确保其服务能稳定的运行在嵌入式设备中。而现在，这些计算有望在很远的云服务器上完成。（当然，嵌入式设备工程师并不会消失）</p>\n<p>这就是我对这个行业的一些了解。</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/re00.jpg","excerpt":"","more":"<h1 id=\"一个软件的诞生\"><a href=\"#一个软件的诞生\" class=\"headerlink\" title=\"一个软件的诞生\"></a>一个软件的诞生</h1><h2 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h2><p>准备：市场调查、需求分析……</p>\n<p>确定方案：技术，平台</p>\n<p>开发：</p>\n<ul>\n<li>设计&amp;前端：界面</li>\n<li>后端：业务逻辑</li>\n</ul>\n<p>上线：</p>\n<ul>\n<li>运营：宣传</li>\n<li>运维：服务器维护</li>\n</ul>\n<h1 id=\"传统的运维方式\"><a href=\"#传统的运维方式\" class=\"headerlink\" title=\"传统的运维方式\"></a>传统的运维方式</h1><p>把写好的软件部署到服务器上，跑就完事了。</p>\n<h2 id=\"如果业务量大了呢？\"><a href=\"#如果业务量大了呢？\" class=\"headerlink\" title=\"如果业务量大了呢？\"></a>如果业务量大了呢？</h2><p>用一样的方式部署到很多服务器上，跑就完事了。</p>\n<h2 id=\"有什么问题？\"><a href=\"#有什么问题？\" class=\"headerlink\" title=\"有什么问题？\"></a>有什么问题？</h2><ul>\n<li><strong>必须时刻以最大业务量安排服务器数量</strong>，成本高。</li>\n<li>每个公司都要有专职运维人员，招人难</li>\n<li>运维人员无论水平高低，所能管理的服务器数量有上限</li>\n<li>遇到突发状况，所需运维人员数量陡增，而保持一个大量运维团队需要高成本</li>\n</ul>\n<h1 id=\"一种趋势\"><a href=\"#一种趋势\" class=\"headerlink\" title=\"一种趋势\"></a>一种趋势</h1><p>所需管理的服务器数量庞大，但大部分工作都是重复的。所以……</p>\n<h2 id=\"CI-x2F-CD\"><a href=\"#CI-x2F-CD\" class=\"headerlink\" title=\"CI&#x2F;CD\"></a>CI&#x2F;CD</h2><p>持续集成，持续交付，持续部署。让后端开发人员（数量庞大，不乏牛人）来完成运维工作</p>\n<h2 id=\"Devops\"><a href=\"#Devops\" class=\"headerlink\" title=\"Devops\"></a>Devops</h2><p>运维开发，专门开发运维工具的人。试图将运维工作尽可能的自动化。</p>\n<h1 id=\"另一种趋势\"><a href=\"#另一种趋势\" class=\"headerlink\" title=\"另一种趋势\"></a>另一种趋势</h1><h2 id=\"虚拟化技术的进步\"><a href=\"#虚拟化技术的进步\" class=\"headerlink\" title=\"虚拟化技术的进步\"></a>虚拟化技术的进步</h2><p>最初的虚拟化：让windows的应用在mac上跑起来（纯举例），虚拟化的环境具有完整的系统，可以在另一个操作系统上跑起来。在性能上具有极大的开销（就是会很慢）</p>\n<p>容器化：让一个应用在一个容器中运行，该容器具有该应用所需的全部环境。一个容器就是一个进程，开销较小，与操作系统兼容良好（主要指linux）</p>\n<h2 id=\"容器时代\"><a href=\"#容器时代\" class=\"headerlink\" title=\"容器时代\"></a>容器时代</h2><p>不再关注各式各样的环境问题，所需要的环境都可以打包成容器，并且可以使用别人打包好的容器。</p>\n<p><strong>docker</strong>:第一个开源容器技术的公司，现在仍然是王者。</p>\n<p>docker的开源使得任何人都可以轻松部署各式各样的服务，因为环境的配置已经不是难题。但是对于企业来说，问题仍然存在：每个服务器上都可以跑好几个容器，就像以前一个服务器上可以跑好几个应用一样。如果有几千台呢？几万台呢？</p>\n<h2 id=\"容器编排\"><a href=\"#容器编排\" class=\"headerlink\" title=\"容器编排\"></a>容器编排</h2><p>能不能让不同的服务器上的容器连成一个整体？或者自动编排容器，让它们在合适的时间或者位置提供服务？</p>\n<p><strong>kubernetes</strong>:来自google，简称k8s，容器编排唯一的标准，生态的中心。</p>\n<p>允许将多个提供同一服务的容器打包成一个pod（豆荚），将多个服务器设置为一个cluster（集群），由k8s来决定pod在哪台服务器上运行。并且k8s可以在不同服务器上启动相同的pod，当一台服务器出现故障时，k8s迅速在其他服务器上添加故障服务器上运行的pod，从而保证了服务的稳定性。</p>\n<p>即成事实：<strong>k8s是生态的中心</strong></p>\n<p>围绕k8s的生态：监控，流水线部署，自动预警，网格化网关，容器化数据库以及<strong>serverless</strong></p>\n<p><em>k8s标志着云时代的正式开始</em></p>\n<h2 id=\"再进一步\"><a href=\"#再进一步\" class=\"headerlink\" title=\"再进一步\"></a>再进一步</h2><p>如果容器可以方便的创建和销毁，能不能更进一步？</p>\n<p>当有请求时才创建容器进行服务（而不是一直等着），请求结束就销毁容器，这便是<strong>Serverless</strong>，来自Amazon（亚马逊）</p>\n<p><strong>Serverless</strong>，无服务器技术，只有有需求的时候才服务。</p>\n<p>试想一个秒杀系统，在短暂的几秒内，服务器收到了数以亿记的请求，服务器立刻反应，创建大量容器进行服务，每服务完就立即销毁，把资源留给下一个创建的容器。而在几秒前或几秒后，服务器也许还处于一个“清闲”的状态。当前的serverless按照请求数计费，小公司无需按最大并发量购置服务器，只需直接购买serverless服务。</p>\n<h1 id=\"云服务现状\"><a href=\"#云服务现状\" class=\"headerlink\" title=\"云服务现状\"></a>云服务现状</h1><p>自k8s被推出以后，大公司们成立了CNCF（云原生计算基金会）。示例成员：google、AWS（亚马逊，世界最大的云服务供应商，serverless的领头羊）、RedHat（红帽，世界上最大的服务器软件公司，负责的centos操作系统跑在世界上百分之五十以上，中国百分之八十以上的服务器上）、docker、apache基金会（最成熟的服务器软件apache拥有者）、github、gitlab（二者分别为最大的代码托管网站和最大的开源私有git服务提供商）、华为（独立的鲲鹏架构）。</p>\n<h2 id=\"国内环境\"><a href=\"#国内环境\" class=\"headerlink\" title=\"国内环境\"></a>国内环境</h2><ul>\n<li>阿里云：全国最大的云服务供应商，对内为淘宝等提供服务，对外为各类企业提供云服务。</li>\n<li>腾讯云：对内有qq、微信、微信小程序等业务。拥有独立的小程序平台。</li>\n<li>华为云：有自产鲲鹏服务器，使用与绝大多数服务器不一样的arm架构（大部分服务器包括个人电脑都是amd64，也叫x86-64，但苹果的自研芯片M1是arm）。</li>\n<li>七牛云：阿里云出走大佬创办，有一定实力。</li>\n<li>青云：一个k8s开源集群管理系统的国内主导者。</li>\n</ul>\n<p>现状分析：</p>\n<blockquote>\n<p>一方面，围绕容器和容器编排的标准已经制定完成，但基于标准的各项指标仍有提升空间，各大公司仍然在试图在这些标准下做出更好的工具，比如容器和容器的构建工具。另一方面，围绕生态的工具也有许多不完善之处，比如一个让不懂运维的人也能轻松部署的自动部署平台，或是一个完善的部署到监控的工具链。这些被统称为“云基础设施”，云基础设施仍然有许多待完善之处。对于互联网行业来说，传统的运维会越来越少（但绝对不会消失），更多企业倾向于请云服务供应商来构建自己的服务，甚至直接将自身服务交给云供应商。反过来，云供应商也要开发更好的云平台给企业使用。</p>\n</blockquote>\n<h1 id=\"一些其他的机会\"><a href=\"#一些其他的机会\" class=\"headerlink\" title=\"一些其他的机会\"></a>一些其他的机会</h1><h2 id=\"云与AI\"><a href=\"#云与AI\" class=\"headerlink\" title=\"云与AI\"></a>云与AI</h2><p>当服务器闲下来可以做什么？挖矿（划掉）。服务器被设计成可以不间断的运行，但很显然它并不会真的时刻运行，当它闲下来时，其算力就有大用途，比如用于机器学习。当然，对于专业的ai公司，他们也有自己的服务器集群，如何利用互联网的云服务来管理自己的集群，也成了一个不错的方向。</p>\n<h2 id=\"云与物联网\"><a href=\"#云与物联网\" class=\"headerlink\" title=\"云与物联网\"></a>云与物联网</h2><p>专业的物联网后端早就有了，尤其是近年来通信行业的进步，更加促进了“计算不一定非要在本地完成”这种概念的推广。对于传统控制行业来说，大多数计算会在嵌入式设备（看作是一个低性能的计算机）上完成，底层工程师们不得不想尽办法优化性能，确保其服务能稳定的运行在嵌入式设备中。而现在，这些计算有望在很远的云服务器上完成。（当然，嵌入式设备工程师并不会消失）</p>\n<p>这就是我对这个行业的一些了解。</p>\n"},{"title":"基于虚拟机的开发机搭建","abbrlink":"f7220f82","date":"2021-12-28T11:21:00.000Z","_content":"\n## 前言\n\n最近想装上boost库，写写cpp。捣鼓了半天之后boost才勉强能用。期间不仅要解决安装方式问题，还由vscode的提示、配置等等一大堆问题。这时我又又又又又产生了把win换成linux的冲动。\n\n但毕竟不是第一次上linux了，win和linux的好坏我多多少少还是清楚的。\n\nwindows的优点\n\n- 键鼠协同操作舒服，支持轻微的自定义\n- 便于查资料，敲代码，有大量现成的工具。\n- 稳定且高效，笔记本对win还是做了优化的。\n\n但也有一些我不太能忍受的缺点\n\n- 装环境麻烦，安装位置灵活多变，且安装后不便于删除\n- 自定义程度差，win不支持过于深入的自定义，比如我想搞个全局快捷键都不行，除非我想使用第三方工具，比如`quicker`，而这又回归了第一点。\n- 路径中反人类的反斜杠\n\n反过来，我想用linux正是因为win的这些缺点\n\n- 装环境往往只要一行\n- 高度自定义\n- 更加熟悉的文件系统和配套的脚本\n\n而阻止我用linux的也正好是win的优点\n\n- linux的gui大多都不太好使，甚至gui的自定义程度不如win\n- 中文输入法缺少较好的支持\n- 由上面这两点，linux查资料也不方便\n- 笔记本没有专门的优化，稳定性欠佳\n- ide不稳定，缺少一些通用工具\n\n而在win上的wsl现在还远远不够健全，更何况我想偶尔开个linux的gui踢踢robocup。\n\n这时我想到了远程开发机。先是考虑了云服务器，云服务器没有gui。又想到了台式机，台式机不能保证24小时开机，而且做内网穿透之后速度会跟不上。这时我又想到，为啥不直接开虚拟机。于是乎我又又又开了台虚拟机，并搭建起了开发环境。\n\n## 初步设置\n\n~~因为`virtualbox`始终是免费的，所以我还是坚持用它而不是`vmware`。~~\n\n当我更新这篇文章时，我还是用上了`vmware`，这玩意在性能和稳定性上都比`virtualbox`好使。\n\n~~//todo:（因为时间问题，这个坑后面再填）~~\n\n总之先选好虚拟机安装\n\n在操作系统上，我还是选择了`ubuntu`，因为`apt`确实也用起来舒服，很多需要的环境用apt要好搞定很多。\n\n## 连接虚拟机\n\n连上虚拟机需要注意三件事\n\n- 虚拟机网络要设置好，保证有一个可用的ipv4地址\n- 虚拟机上要装好ssh服务器（openssh-server）\n- 连接时输入的用户名和ip地址要输对\n\n### 虚拟机网络\n\n在vmware的NAT","source":"_posts/Operation/基于虚拟机的开发机搭建.md","raw":"---\ntitle: 基于虚拟机的开发机搭建\ncategories: Operation\ntags:\n  - linux\nabbrlink: f7220f82\ndate: 2021-12-28 19:21:00\n---\n\n## 前言\n\n最近想装上boost库，写写cpp。捣鼓了半天之后boost才勉强能用。期间不仅要解决安装方式问题，还由vscode的提示、配置等等一大堆问题。这时我又又又又又产生了把win换成linux的冲动。\n\n但毕竟不是第一次上linux了，win和linux的好坏我多多少少还是清楚的。\n\nwindows的优点\n\n- 键鼠协同操作舒服，支持轻微的自定义\n- 便于查资料，敲代码，有大量现成的工具。\n- 稳定且高效，笔记本对win还是做了优化的。\n\n但也有一些我不太能忍受的缺点\n\n- 装环境麻烦，安装位置灵活多变，且安装后不便于删除\n- 自定义程度差，win不支持过于深入的自定义，比如我想搞个全局快捷键都不行，除非我想使用第三方工具，比如`quicker`，而这又回归了第一点。\n- 路径中反人类的反斜杠\n\n反过来，我想用linux正是因为win的这些缺点\n\n- 装环境往往只要一行\n- 高度自定义\n- 更加熟悉的文件系统和配套的脚本\n\n而阻止我用linux的也正好是win的优点\n\n- linux的gui大多都不太好使，甚至gui的自定义程度不如win\n- 中文输入法缺少较好的支持\n- 由上面这两点，linux查资料也不方便\n- 笔记本没有专门的优化，稳定性欠佳\n- ide不稳定，缺少一些通用工具\n\n而在win上的wsl现在还远远不够健全，更何况我想偶尔开个linux的gui踢踢robocup。\n\n这时我想到了远程开发机。先是考虑了云服务器，云服务器没有gui。又想到了台式机，台式机不能保证24小时开机，而且做内网穿透之后速度会跟不上。这时我又想到，为啥不直接开虚拟机。于是乎我又又又开了台虚拟机，并搭建起了开发环境。\n\n## 初步设置\n\n~~因为`virtualbox`始终是免费的，所以我还是坚持用它而不是`vmware`。~~\n\n当我更新这篇文章时，我还是用上了`vmware`，这玩意在性能和稳定性上都比`virtualbox`好使。\n\n~~//todo:（因为时间问题，这个坑后面再填）~~\n\n总之先选好虚拟机安装\n\n在操作系统上，我还是选择了`ubuntu`，因为`apt`确实也用起来舒服，很多需要的环境用apt要好搞定很多。\n\n## 连接虚拟机\n\n连上虚拟机需要注意三件事\n\n- 虚拟机网络要设置好，保证有一个可用的ipv4地址\n- 虚拟机上要装好ssh服务器（openssh-server）\n- 连接时输入的用户名和ip地址要输对\n\n### 虚拟机网络\n\n在vmware的NAT","slug":"基于虚拟机的开发机搭建","published":1,"category":"Operation","updated":"2022-02-11T05:17:56.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxc001k8wul0kpqfe7s","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近想装上boost库，写写cpp。捣鼓了半天之后boost才勉强能用。期间不仅要解决安装方式问题，还由vscode的提示、配置等等一大堆问题。这时我又又又又又产生了把win换成linux的冲动。</p>\n<p>但毕竟不是第一次上linux了，win和linux的好坏我多多少少还是清楚的。</p>\n<p>windows的优点</p>\n<ul>\n<li>键鼠协同操作舒服，支持轻微的自定义</li>\n<li>便于查资料，敲代码，有大量现成的工具。</li>\n<li>稳定且高效，笔记本对win还是做了优化的。</li>\n</ul>\n<p>但也有一些我不太能忍受的缺点</p>\n<ul>\n<li>装环境麻烦，安装位置灵活多变，且安装后不便于删除</li>\n<li>自定义程度差，win不支持过于深入的自定义，比如我想搞个全局快捷键都不行，除非我想使用第三方工具，比如<code>quicker</code>，而这又回归了第一点。</li>\n<li>路径中反人类的反斜杠</li>\n</ul>\n<p>反过来，我想用linux正是因为win的这些缺点</p>\n<ul>\n<li>装环境往往只要一行</li>\n<li>高度自定义</li>\n<li>更加熟悉的文件系统和配套的脚本</li>\n</ul>\n<p>而阻止我用linux的也正好是win的优点</p>\n<ul>\n<li>linux的gui大多都不太好使，甚至gui的自定义程度不如win</li>\n<li>中文输入法缺少较好的支持</li>\n<li>由上面这两点，linux查资料也不方便</li>\n<li>笔记本没有专门的优化，稳定性欠佳</li>\n<li>ide不稳定，缺少一些通用工具</li>\n</ul>\n<p>而在win上的wsl现在还远远不够健全，更何况我想偶尔开个linux的gui踢踢robocup。</p>\n<p>这时我想到了远程开发机。先是考虑了云服务器，云服务器没有gui。又想到了台式机，台式机不能保证24小时开机，而且做内网穿透之后速度会跟不上。这时我又想到，为啥不直接开虚拟机。于是乎我又又又开了台虚拟机，并搭建起了开发环境。</p>\n<h2 id=\"初步设置\"><a href=\"#初步设置\" class=\"headerlink\" title=\"初步设置\"></a>初步设置</h2><p><del>因为<code>virtualbox</code>始终是免费的，所以我还是坚持用它而不是<code>vmware</code>。</del></p>\n<p>当我更新这篇文章时，我还是用上了<code>vmware</code>，这玩意在性能和稳定性上都比<code>virtualbox</code>好使。</p>\n<p><del>&#x2F;&#x2F;todo:（因为时间问题，这个坑后面再填）</del></p>\n<p>总之先选好虚拟机安装</p>\n<p>在操作系统上，我还是选择了<code>ubuntu</code>，因为<code>apt</code>确实也用起来舒服，很多需要的环境用apt要好搞定很多。</p>\n<h2 id=\"连接虚拟机\"><a href=\"#连接虚拟机\" class=\"headerlink\" title=\"连接虚拟机\"></a>连接虚拟机</h2><p>连上虚拟机需要注意三件事</p>\n<ul>\n<li>虚拟机网络要设置好，保证有一个可用的ipv4地址</li>\n<li>虚拟机上要装好ssh服务器（openssh-server）</li>\n<li>连接时输入的用户名和ip地址要输对</li>\n</ul>\n<h3 id=\"虚拟机网络\"><a href=\"#虚拟机网络\" class=\"headerlink\" title=\"虚拟机网络\"></a>虚拟机网络</h3><p>在vmware的NAT</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/chaopao1.jpg","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近想装上boost库，写写cpp。捣鼓了半天之后boost才勉强能用。期间不仅要解决安装方式问题，还由vscode的提示、配置等等一大堆问题。这时我又又又又又产生了把win换成linux的冲动。</p>\n<p>但毕竟不是第一次上linux了，win和linux的好坏我多多少少还是清楚的。</p>\n<p>windows的优点</p>\n<ul>\n<li>键鼠协同操作舒服，支持轻微的自定义</li>\n<li>便于查资料，敲代码，有大量现成的工具。</li>\n<li>稳定且高效，笔记本对win还是做了优化的。</li>\n</ul>\n<p>但也有一些我不太能忍受的缺点</p>\n<ul>\n<li>装环境麻烦，安装位置灵活多变，且安装后不便于删除</li>\n<li>自定义程度差，win不支持过于深入的自定义，比如我想搞个全局快捷键都不行，除非我想使用第三方工具，比如<code>quicker</code>，而这又回归了第一点。</li>\n<li>路径中反人类的反斜杠</li>\n</ul>\n<p>反过来，我想用linux正是因为win的这些缺点</p>\n<ul>\n<li>装环境往往只要一行</li>\n<li>高度自定义</li>\n<li>更加熟悉的文件系统和配套的脚本</li>\n</ul>\n<p>而阻止我用linux的也正好是win的优点</p>\n<ul>\n<li>linux的gui大多都不太好使，甚至gui的自定义程度不如win</li>\n<li>中文输入法缺少较好的支持</li>\n<li>由上面这两点，linux查资料也不方便</li>\n<li>笔记本没有专门的优化，稳定性欠佳</li>\n<li>ide不稳定，缺少一些通用工具</li>\n</ul>\n<p>而在win上的wsl现在还远远不够健全，更何况我想偶尔开个linux的gui踢踢robocup。</p>\n<p>这时我想到了远程开发机。先是考虑了云服务器，云服务器没有gui。又想到了台式机，台式机不能保证24小时开机，而且做内网穿透之后速度会跟不上。这时我又想到，为啥不直接开虚拟机。于是乎我又又又开了台虚拟机，并搭建起了开发环境。</p>\n<h2 id=\"初步设置\"><a href=\"#初步设置\" class=\"headerlink\" title=\"初步设置\"></a>初步设置</h2><p><del>因为<code>virtualbox</code>始终是免费的，所以我还是坚持用它而不是<code>vmware</code>。</del></p>\n<p>当我更新这篇文章时，我还是用上了<code>vmware</code>，这玩意在性能和稳定性上都比<code>virtualbox</code>好使。</p>\n<p><del>&#x2F;&#x2F;todo:（因为时间问题，这个坑后面再填）</del></p>\n<p>总之先选好虚拟机安装</p>\n<p>在操作系统上，我还是选择了<code>ubuntu</code>，因为<code>apt</code>确实也用起来舒服，很多需要的环境用apt要好搞定很多。</p>\n<h2 id=\"连接虚拟机\"><a href=\"#连接虚拟机\" class=\"headerlink\" title=\"连接虚拟机\"></a>连接虚拟机</h2><p>连上虚拟机需要注意三件事</p>\n<ul>\n<li>虚拟机网络要设置好，保证有一个可用的ipv4地址</li>\n<li>虚拟机上要装好ssh服务器（openssh-server）</li>\n<li>连接时输入的用户名和ip地址要输对</li>\n</ul>\n<h3 id=\"虚拟机网络\"><a href=\"#虚拟机网络\" class=\"headerlink\" title=\"虚拟机网络\"></a>虚拟机网络</h3><p>在vmware的NAT</p>\n"},{"title":"记录一次docker迁移","description":"记录一次docker迁移","cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/tech/docker0.jpeg","abbrlink":"1ee5701f","date":"2022-01-13T05:55:28.000Z","_content":"\n最近碰上一次小小的迁移任务，需要在新机器上起docker，并让原来的docker容器在新机器上跑起来。\n\n这里就涉及到，要查看已经跑起来的容器在启动时输入了哪些参数。实际操作起来有以下几个方法：\n\n## docker ps -a --no-trunc\n\n一个简单的方法，但只能看到部分信息\n\n## docker inspect \"container\"\n\n可以看到许多详细的信息，但过于详细了，不容易提取出关键信息\n\n## runlike\n\n```bash\npip install runlike\n```\n一个小工具，只需`runlike \"container id\"`即可获取其启动时的参数\n\n唯一需要注意的是，runlike不会复原是否会以交互或后台方式启动的参数，所以应该按需要加入`-itd`选项","source":"_posts/Operation/记录一次docker迁移.md","raw":"---\ntitle: 记录一次docker迁移\ntags:\n  - docker\n  - mirror\ndescription: 记录一次docker迁移\ncategories:\n  - Operation\ncover: 'https://cdn.jsdelivr.net/gh/kawhicurry/picgo/tech/docker0.jpeg'\nabbrlink: 1ee5701f\ndate: 2022-01-13 13:55:28\n---\n\n最近碰上一次小小的迁移任务，需要在新机器上起docker，并让原来的docker容器在新机器上跑起来。\n\n这里就涉及到，要查看已经跑起来的容器在启动时输入了哪些参数。实际操作起来有以下几个方法：\n\n## docker ps -a --no-trunc\n\n一个简单的方法，但只能看到部分信息\n\n## docker inspect \"container\"\n\n可以看到许多详细的信息，但过于详细了，不容易提取出关键信息\n\n## runlike\n\n```bash\npip install runlike\n```\n一个小工具，只需`runlike \"container id\"`即可获取其启动时的参数\n\n唯一需要注意的是，runlike不会复原是否会以交互或后台方式启动的参数，所以应该按需要加入`-itd`选项","slug":"记录一次docker迁移","published":1,"category":"Operation","updated":"2022-02-11T05:17:56.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxd001m8wuleh7580mw","content":"<p>最近碰上一次小小的迁移任务，需要在新机器上起docker，并让原来的docker容器在新机器上跑起来。</p>\n<p>这里就涉及到，要查看已经跑起来的容器在启动时输入了哪些参数。实际操作起来有以下几个方法：</p>\n<h2 id=\"docker-ps-a-–no-trunc\"><a href=\"#docker-ps-a-–no-trunc\" class=\"headerlink\" title=\"docker ps -a –no-trunc\"></a>docker ps -a –no-trunc</h2><p>一个简单的方法，但只能看到部分信息</p>\n<h2 id=\"docker-inspect-“container”\"><a href=\"#docker-inspect-“container”\" class=\"headerlink\" title=\"docker inspect “container”\"></a>docker inspect “container”</h2><p>可以看到许多详细的信息，但过于详细了，不容易提取出关键信息</p>\n<h2 id=\"runlike\"><a href=\"#runlike\" class=\"headerlink\" title=\"runlike\"></a>runlike</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> runlike<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>一个小工具，只需<code>runlike &quot;container id&quot;</code>即可获取其启动时的参数</p>\n<p>唯一需要注意的是，runlike不会复原是否会以交互或后台方式启动的参数，所以应该按需要加入<code>-itd</code>选项</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"excerpt":"","more":"<p>最近碰上一次小小的迁移任务，需要在新机器上起docker，并让原来的docker容器在新机器上跑起来。</p>\n<p>这里就涉及到，要查看已经跑起来的容器在启动时输入了哪些参数。实际操作起来有以下几个方法：</p>\n<h2 id=\"docker-ps-a-–no-trunc\"><a href=\"#docker-ps-a-–no-trunc\" class=\"headerlink\" title=\"docker ps -a –no-trunc\"></a>docker ps -a –no-trunc</h2><p>一个简单的方法，但只能看到部分信息</p>\n<h2 id=\"docker-inspect-“container”\"><a href=\"#docker-inspect-“container”\" class=\"headerlink\" title=\"docker inspect “container”\"></a>docker inspect “container”</h2><p>可以看到许多详细的信息，但过于详细了，不容易提取出关键信息</p>\n<h2 id=\"runlike\"><a href=\"#runlike\" class=\"headerlink\" title=\"runlike\"></a>runlike</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> runlike<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>一个小工具，只需<code>runlike &quot;container id&quot;</code>即可获取其启动时的参数</p>\n<p>唯一需要注意的是，runlike不会复原是否会以交互或后台方式启动的参数，所以应该按需要加入<code>-itd</code>选项</p>\n"},{"title":"记录一次ssh登录的问题","description":"记录一次ssh登录的问题","abbrlink":"1b1593da","date":"2022-01-12T05:22:03.000Z","_content":"\n## 问题描述\n\n本想使用rsa公钥的ssh免密登录，发现无论如何都要我输密码。\n\n## 问题排查\n\n首先是常规思路查看文件权限\n\n```bash\n# ~/.ssh/authorized_keys\n-rw-------. 1 root root 1307 Jan 12 12:59 authorized_keys # 600\n# ~/.ssh\n-rw-------. 1 root root 1307 Jan 12 12:59 authorized_keys # 600\n# ~\ndrwx------.   6 root   root    147 Jan 12 13:29 root # 700\n\n```\n\n接下来查看ssh-server的配置文件`/etc/ssh/sshd_config`，主要查看以下几项\n```bash\nRSAAuthentication yes\nPubkeyAuthentication yes\n\nPermitRootLogin yes\n```\n\n接下来查看登录日志`/var/log/secure`，注意该文件后面会跟上日期，找最近的即可。\n\n再然后使用本地ssh加上参数vvv尝试登录，查看输出的debug信息，找到如下信息\n```bash\ndebug3: send packet: type 50\ndebug2: we sent a publickey packet, wait for reply\ndebug3: receive packet: type 51\n```\n该信息说明密钥发送成功，但不匹配。重新复制密钥后仍然无法免密。\n\n这时候顾神上线了发现，我的`/root`目录权限是这样的：\n```bash\ndrwx------.   6 root   1006    147 Jan 12 13:29 root\n```\n\n不知道为什么root的权限变成了1006。把1006改回root后可正常使用。\n\n## 结论和启示\n无法免密登录是由于目录权限不够导致的，但这次权限问题出在`group of the owner`上面。因此，以后看权限不能只盯着777看，也要注意`owner`和`group`。\n","source":"_posts/Operation/记录一次ssh登录的问题.md","raw":"---\ntitle: 记录一次ssh登录的问题\ntags:\n  - ssh\ndescription: 记录一次ssh登录的问题\ncategories:\n  - Operation\nabbrlink: 1b1593da\ndate: 2022-01-12 13:22:03\n---\n\n## 问题描述\n\n本想使用rsa公钥的ssh免密登录，发现无论如何都要我输密码。\n\n## 问题排查\n\n首先是常规思路查看文件权限\n\n```bash\n# ~/.ssh/authorized_keys\n-rw-------. 1 root root 1307 Jan 12 12:59 authorized_keys # 600\n# ~/.ssh\n-rw-------. 1 root root 1307 Jan 12 12:59 authorized_keys # 600\n# ~\ndrwx------.   6 root   root    147 Jan 12 13:29 root # 700\n\n```\n\n接下来查看ssh-server的配置文件`/etc/ssh/sshd_config`，主要查看以下几项\n```bash\nRSAAuthentication yes\nPubkeyAuthentication yes\n\nPermitRootLogin yes\n```\n\n接下来查看登录日志`/var/log/secure`，注意该文件后面会跟上日期，找最近的即可。\n\n再然后使用本地ssh加上参数vvv尝试登录，查看输出的debug信息，找到如下信息\n```bash\ndebug3: send packet: type 50\ndebug2: we sent a publickey packet, wait for reply\ndebug3: receive packet: type 51\n```\n该信息说明密钥发送成功，但不匹配。重新复制密钥后仍然无法免密。\n\n这时候顾神上线了发现，我的`/root`目录权限是这样的：\n```bash\ndrwx------.   6 root   1006    147 Jan 12 13:29 root\n```\n\n不知道为什么root的权限变成了1006。把1006改回root后可正常使用。\n\n## 结论和启示\n无法免密登录是由于目录权限不够导致的，但这次权限问题出在`group of the owner`上面。因此，以后看权限不能只盯着777看，也要注意`owner`和`group`。\n","slug":"记录一次ssh登录的问题","published":1,"category":"Operation","updated":"2022-02-11T05:17:56.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxe001r8wulhrrxbbvi","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>本想使用rsa公钥的ssh免密登录，发现无论如何都要我输密码。</p>\n<h2 id=\"问题排查\"><a href=\"#问题排查\" class=\"headerlink\" title=\"问题排查\"></a>问题排查</h2><p>首先是常规思路查看文件权限</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># ~/.ssh/authorized_keys</span>\n-rw-------. <span class=\"token number\">1</span> root root <span class=\"token number\">1307</span> Jan <span class=\"token number\">12</span> <span class=\"token number\">12</span>:59 authorized_keys <span class=\"token comment\"># 600</span>\n<span class=\"token comment\"># ~/.ssh</span>\n-rw-------. <span class=\"token number\">1</span> root root <span class=\"token number\">1307</span> Jan <span class=\"token number\">12</span> <span class=\"token number\">12</span>:59 authorized_keys <span class=\"token comment\"># 600</span>\n<span class=\"token comment\"># ~</span>\ndrwx------.   <span class=\"token number\">6</span> root   root    <span class=\"token number\">147</span> Jan <span class=\"token number\">12</span> <span class=\"token number\">13</span>:29 root <span class=\"token comment\"># 700</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来查看ssh-server的配置文件<code>/etc/ssh/sshd_config</code>，主要查看以下几项</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">RSAAuthentication <span class=\"token function\">yes</span>\nPubkeyAuthentication <span class=\"token function\">yes</span>\n\nPermitRootLogin <span class=\"token function\">yes</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来查看登录日志<code>/var/log/secure</code>，注意该文件后面会跟上日期，找最近的即可。</p>\n<p>再然后使用本地ssh加上参数vvv尝试登录，查看输出的debug信息，找到如下信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">debug3: send packet: <span class=\"token builtin class-name\">type</span> <span class=\"token number\">50</span>\ndebug2: we sent a publickey packet, <span class=\"token function\">wait</span> <span class=\"token keyword\">for</span> reply\ndebug3: receive packet: <span class=\"token builtin class-name\">type</span> <span class=\"token number\">51</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>该信息说明密钥发送成功，但不匹配。重新复制密钥后仍然无法免密。</p>\n<p>这时候顾神上线了发现，我的<code>/root</code>目录权限是这样的：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">drwx------.   <span class=\"token number\">6</span> root   <span class=\"token number\">1006</span>    <span class=\"token number\">147</span> Jan <span class=\"token number\">12</span> <span class=\"token number\">13</span>:29 root<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>不知道为什么root的权限变成了1006。把1006改回root后可正常使用。</p>\n<h2 id=\"结论和启示\"><a href=\"#结论和启示\" class=\"headerlink\" title=\"结论和启示\"></a>结论和启示</h2><p>无法免密登录是由于目录权限不够导致的，但这次权限问题出在<code>group of the owner</code>上面。因此，以后看权限不能只盯着777看，也要注意<code>owner</code>和<code>group</code>。</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/kon2.jpg","excerpt":"","more":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>本想使用rsa公钥的ssh免密登录，发现无论如何都要我输密码。</p>\n<h2 id=\"问题排查\"><a href=\"#问题排查\" class=\"headerlink\" title=\"问题排查\"></a>问题排查</h2><p>首先是常规思路查看文件权限</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># ~/.ssh/authorized_keys</span>\n-rw-------. <span class=\"token number\">1</span> root root <span class=\"token number\">1307</span> Jan <span class=\"token number\">12</span> <span class=\"token number\">12</span>:59 authorized_keys <span class=\"token comment\"># 600</span>\n<span class=\"token comment\"># ~/.ssh</span>\n-rw-------. <span class=\"token number\">1</span> root root <span class=\"token number\">1307</span> Jan <span class=\"token number\">12</span> <span class=\"token number\">12</span>:59 authorized_keys <span class=\"token comment\"># 600</span>\n<span class=\"token comment\"># ~</span>\ndrwx------.   <span class=\"token number\">6</span> root   root    <span class=\"token number\">147</span> Jan <span class=\"token number\">12</span> <span class=\"token number\">13</span>:29 root <span class=\"token comment\"># 700</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来查看ssh-server的配置文件<code>/etc/ssh/sshd_config</code>，主要查看以下几项</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">RSAAuthentication <span class=\"token function\">yes</span>\nPubkeyAuthentication <span class=\"token function\">yes</span>\n\nPermitRootLogin <span class=\"token function\">yes</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来查看登录日志<code>/var/log/secure</code>，注意该文件后面会跟上日期，找最近的即可。</p>\n<p>再然后使用本地ssh加上参数vvv尝试登录，查看输出的debug信息，找到如下信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">debug3: send packet: <span class=\"token builtin class-name\">type</span> <span class=\"token number\">50</span>\ndebug2: we sent a publickey packet, <span class=\"token function\">wait</span> <span class=\"token keyword\">for</span> reply\ndebug3: receive packet: <span class=\"token builtin class-name\">type</span> <span class=\"token number\">51</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>该信息说明密钥发送成功，但不匹配。重新复制密钥后仍然无法免密。</p>\n<p>这时候顾神上线了发现，我的<code>/root</code>目录权限是这样的：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">drwx------.   <span class=\"token number\">6</span> root   <span class=\"token number\">1006</span>    <span class=\"token number\">147</span> Jan <span class=\"token number\">12</span> <span class=\"token number\">13</span>:29 root<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>不知道为什么root的权限变成了1006。把1006改回root后可正常使用。</p>\n<h2 id=\"结论和启示\"><a href=\"#结论和启示\" class=\"headerlink\" title=\"结论和启示\"></a>结论和启示</h2><p>无法免密登录是由于目录权限不够导致的，但这次权限问题出在<code>group of the owner</code>上面。因此，以后看权限不能只盯着777看，也要注意<code>owner</code>和<code>group</code>。</p>\n"},{"title":"重学linux（1）","abbrlink":"4f162170","date":"2022-01-18T02:58:15.000Z","_content":"\n# 文件权限与目录配置\n\n## 文件权限\n\n| 权限        | 链接数 | 拥有者 | 用户组 | 大小 | 修改日期     | 文件名 |\n| ----------- | ------ | ------ | ------ | ---- | ------------ | ------ |\n| dr-xrw-r--- | 5      | root   | root   | 1864 | May 19 12:01 | 1.cfg  |\n\n### 权限的第一个字符\n\n| 字符 | 类型                           |\n| ---- | ------------------------------ |\n| d    | 目录                           |\n| -    | 文件                           |\n| l    | 链接                           |\n| b    | 块设备（可随机读写的存储设备） |\n| c    | 串口设备（一次性读取的设备）   |\n| p    | 管道（pipe）                   |\n| s    | socket                         |\n\n### 三组权限\n\n- 拥有者\n- 用户组\n- 其他人\n\n### 时间\n\n太久远会被折叠，使用`ls -l --full-time`查看具体时间\n\n### 其他\n\n文件名长度：255个字符，128个汉字\n\n文件名限制：少用特殊符号，如果有特殊符号，使用单引号\n\n## 修改权限\n\n### chgrp\n\n```bash\nchgrp [-R] dirname/filename ...\n```\n\n### chown\n\n```bash\nchown [-R] username:groupname dirname/filename ...\n```\n\n### chmod\n\n```bash\n# x,y,z = 4/2/1\nchmod [-R] xyz dirname/filename ...\n# id = u g o a; ac = r w x\nchmod [-R] u+r dirname/filename ...\n```\n\n## 目录配置\n\n标准：FHS\n\n### FHS要求存在的目录\n\n| 目录   | 内容                                                 |\n| ------ | ---------------------------------------------------- |\n| /bin   | 单人维护下仍然可以正常使用的可执行文件               |\n| /boot  | 启动所需，包括内核文件，启动选项，grub2              |\n| /dev   | 块设备，包括硬盘、外设，以及特有的/dev/null /dev/tty |\n| /etc   | 系统的主要配置文件，**建议不要放可执行文件进来**     |\n| /lib   | 函数库，/lib/modules中有主要的内核中驱动程序         |\n| /media | 可删除的设备，软盘光盘                               |\n| /mnt   | 用于临时挂载                                         |\n| /opt   | 第三方独立软件，如kde                                |\n| /run   | 系统启动后所生成的各项信息，该目录又内存来模拟       |\n| /sbin  | 启动过程中，启动、修复、还原系统的命令               |\n| /srv   | 网络服务的数据目录                                   |\n| /tmp   | 正在执行的程序暂时存放文件的位置，建议定期清理       |\n| /usr   | 稍后介绍                                             |\n| /var   | 稍后介绍                                             |\n\n### FHS建议存在的目录\n\n| 目录       | 内容                                         |\n| ---------- | -------------------------------------------- |\n| /home      | 家目录，使用~来表示自己，~123表示123的家目录 |\n| /lib<qual> | 存放与/lib不同格式的函数库                   |\n| /root      | root的家目录                                 |\n\n### FHS未要求但也很重要的目录\n\n| 目录        | 内容                                                         |\n| ----------- | ------------------------------------------------------------ |\n| /lost+found | 文件系统发生错误时，用于找回的目录                           |\n| /proc       | 虚拟的文件系统，存放在内存中，包括系统内核，进程信息，外设和网络的状态 |\n| /sys        | 虚拟文件系统，记录内核和系统硬件的信息，包括已加载的内核模块和检测到的硬件的信息 |\n\n### /usr目录\n\nusr的全称不是user，而是`UNIX Software Resource`\n\n#### FHS要求必须存在的目录\n\n| 目录       | 内容                                                         |\n| ---------- | ------------------------------------------------------------ |\n| /usr/bin   | 一般用户能使用的命令，/bin目录也被链接至此，FHS建议此目录下不要有子目录（为了加快查找速度？） |\n| /usr/lib   | 同上，/lib也被链接至此                                       |\n| /usr/local | 自己下载的软件安装至此                                       |\n| /usr/sbin  | 非系统正常运行所需的系统命令，常见的是网络服务器中的daemo，/sbin被链接至此 |\n| /usr/share | 存放只读的数据文件，尤其是共享文件，如man，doc，zoneinfo（时区文件） |\n\n#### FHS建议存在的目录\n\n| 目录           | 内容                                                     |\n| -------------- | -------------------------------------------------------- |\n| /usr/games     | 游戏（woc？？？                                          |\n| /usr/include   | c和c++的头文件与包含文件，用于tarball                    |\n| /usr/libexec   | 某些不被一般用户常用的执行文件或脚本，如x window下的指令 |\n| /usr/lib<qual> | 同前                                                     |\n| /usr/src       | 存放源码，比如内核源码                                   |\n\n### /var目录\n\n /var存放流动的文件，如缓存、日志、以及某些软件运行产生的文件\n\n#### FHS要求必须存在的目录\n\n| 目录       | 内容                                  |\n| ---------- | ------------------------------------- |\n| /var/cache | 程序运行过程中的缓存                  |\n| /var/lib   | 程序运行中，用到的链接库              |\n| /var/lock  | 锁的存放位置                          |\n| /var/log   | 日志                                  |\n| /var/mail  | 邮件目录，也会存放到/var/spool/mail中 |\n| /var/run   | 程序启动后PID的存放位置               |\n| /var/spool | 队列数据                              |\n\n这里鸟哥推荐再去看看FHS的官方文档，有空去研读一下。\n\n## 相对路径与绝对路径\n\n略\n\n## linux的标准\n\nFHS之外，还有LSB（Linux Standard Base）。\n\n需要使用包管理工具安装lsb后，使用`lsb_release -a`来查看系统信息\n","source":"_posts/Operation/重学linux（1）.md","raw":"---\ntitle: 重学linux（1）\ntags:\n  - 专栏：重学linux\n  - linux\ncategories:\n  - Operation\nabbrlink: 4f162170\ndate: 2022-01-18 10:58:15\n---\n\n# 文件权限与目录配置\n\n## 文件权限\n\n| 权限        | 链接数 | 拥有者 | 用户组 | 大小 | 修改日期     | 文件名 |\n| ----------- | ------ | ------ | ------ | ---- | ------------ | ------ |\n| dr-xrw-r--- | 5      | root   | root   | 1864 | May 19 12:01 | 1.cfg  |\n\n### 权限的第一个字符\n\n| 字符 | 类型                           |\n| ---- | ------------------------------ |\n| d    | 目录                           |\n| -    | 文件                           |\n| l    | 链接                           |\n| b    | 块设备（可随机读写的存储设备） |\n| c    | 串口设备（一次性读取的设备）   |\n| p    | 管道（pipe）                   |\n| s    | socket                         |\n\n### 三组权限\n\n- 拥有者\n- 用户组\n- 其他人\n\n### 时间\n\n太久远会被折叠，使用`ls -l --full-time`查看具体时间\n\n### 其他\n\n文件名长度：255个字符，128个汉字\n\n文件名限制：少用特殊符号，如果有特殊符号，使用单引号\n\n## 修改权限\n\n### chgrp\n\n```bash\nchgrp [-R] dirname/filename ...\n```\n\n### chown\n\n```bash\nchown [-R] username:groupname dirname/filename ...\n```\n\n### chmod\n\n```bash\n# x,y,z = 4/2/1\nchmod [-R] xyz dirname/filename ...\n# id = u g o a; ac = r w x\nchmod [-R] u+r dirname/filename ...\n```\n\n## 目录配置\n\n标准：FHS\n\n### FHS要求存在的目录\n\n| 目录   | 内容                                                 |\n| ------ | ---------------------------------------------------- |\n| /bin   | 单人维护下仍然可以正常使用的可执行文件               |\n| /boot  | 启动所需，包括内核文件，启动选项，grub2              |\n| /dev   | 块设备，包括硬盘、外设，以及特有的/dev/null /dev/tty |\n| /etc   | 系统的主要配置文件，**建议不要放可执行文件进来**     |\n| /lib   | 函数库，/lib/modules中有主要的内核中驱动程序         |\n| /media | 可删除的设备，软盘光盘                               |\n| /mnt   | 用于临时挂载                                         |\n| /opt   | 第三方独立软件，如kde                                |\n| /run   | 系统启动后所生成的各项信息，该目录又内存来模拟       |\n| /sbin  | 启动过程中，启动、修复、还原系统的命令               |\n| /srv   | 网络服务的数据目录                                   |\n| /tmp   | 正在执行的程序暂时存放文件的位置，建议定期清理       |\n| /usr   | 稍后介绍                                             |\n| /var   | 稍后介绍                                             |\n\n### FHS建议存在的目录\n\n| 目录       | 内容                                         |\n| ---------- | -------------------------------------------- |\n| /home      | 家目录，使用~来表示自己，~123表示123的家目录 |\n| /lib<qual> | 存放与/lib不同格式的函数库                   |\n| /root      | root的家目录                                 |\n\n### FHS未要求但也很重要的目录\n\n| 目录        | 内容                                                         |\n| ----------- | ------------------------------------------------------------ |\n| /lost+found | 文件系统发生错误时，用于找回的目录                           |\n| /proc       | 虚拟的文件系统，存放在内存中，包括系统内核，进程信息，外设和网络的状态 |\n| /sys        | 虚拟文件系统，记录内核和系统硬件的信息，包括已加载的内核模块和检测到的硬件的信息 |\n\n### /usr目录\n\nusr的全称不是user，而是`UNIX Software Resource`\n\n#### FHS要求必须存在的目录\n\n| 目录       | 内容                                                         |\n| ---------- | ------------------------------------------------------------ |\n| /usr/bin   | 一般用户能使用的命令，/bin目录也被链接至此，FHS建议此目录下不要有子目录（为了加快查找速度？） |\n| /usr/lib   | 同上，/lib也被链接至此                                       |\n| /usr/local | 自己下载的软件安装至此                                       |\n| /usr/sbin  | 非系统正常运行所需的系统命令，常见的是网络服务器中的daemo，/sbin被链接至此 |\n| /usr/share | 存放只读的数据文件，尤其是共享文件，如man，doc，zoneinfo（时区文件） |\n\n#### FHS建议存在的目录\n\n| 目录           | 内容                                                     |\n| -------------- | -------------------------------------------------------- |\n| /usr/games     | 游戏（woc？？？                                          |\n| /usr/include   | c和c++的头文件与包含文件，用于tarball                    |\n| /usr/libexec   | 某些不被一般用户常用的执行文件或脚本，如x window下的指令 |\n| /usr/lib<qual> | 同前                                                     |\n| /usr/src       | 存放源码，比如内核源码                                   |\n\n### /var目录\n\n /var存放流动的文件，如缓存、日志、以及某些软件运行产生的文件\n\n#### FHS要求必须存在的目录\n\n| 目录       | 内容                                  |\n| ---------- | ------------------------------------- |\n| /var/cache | 程序运行过程中的缓存                  |\n| /var/lib   | 程序运行中，用到的链接库              |\n| /var/lock  | 锁的存放位置                          |\n| /var/log   | 日志                                  |\n| /var/mail  | 邮件目录，也会存放到/var/spool/mail中 |\n| /var/run   | 程序启动后PID的存放位置               |\n| /var/spool | 队列数据                              |\n\n这里鸟哥推荐再去看看FHS的官方文档，有空去研读一下。\n\n## 相对路径与绝对路径\n\n略\n\n## linux的标准\n\nFHS之外，还有LSB（Linux Standard Base）。\n\n需要使用包管理工具安装lsb后，使用`lsb_release -a`来查看系统信息\n","slug":"重学linux（1）","published":1,"category":"Operation","updated":"2022-02-11T05:17:56.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxf001t8wulgfqr12fh","content":"<h1 id=\"文件权限与目录配置\"><a href=\"#文件权限与目录配置\" class=\"headerlink\" title=\"文件权限与目录配置\"></a>文件权限与目录配置</h1><h2 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h2><table>\n<thead>\n<tr>\n<th>权限</th>\n<th>链接数</th>\n<th>拥有者</th>\n<th>用户组</th>\n<th>大小</th>\n<th>修改日期</th>\n<th>文件名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dr-xrw-r—</td>\n<td>5</td>\n<td>root</td>\n<td>root</td>\n<td>1864</td>\n<td>May 19 12:01</td>\n<td>1.cfg</td>\n</tr>\n</tbody></table>\n<h3 id=\"权限的第一个字符\"><a href=\"#权限的第一个字符\" class=\"headerlink\" title=\"权限的第一个字符\"></a>权限的第一个字符</h3><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>d</td>\n<td>目录</td>\n</tr>\n<tr>\n<td>-</td>\n<td>文件</td>\n</tr>\n<tr>\n<td>l</td>\n<td>链接</td>\n</tr>\n<tr>\n<td>b</td>\n<td>块设备（可随机读写的存储设备）</td>\n</tr>\n<tr>\n<td>c</td>\n<td>串口设备（一次性读取的设备）</td>\n</tr>\n<tr>\n<td>p</td>\n<td>管道（pipe）</td>\n</tr>\n<tr>\n<td>s</td>\n<td>socket</td>\n</tr>\n</tbody></table>\n<h3 id=\"三组权限\"><a href=\"#三组权限\" class=\"headerlink\" title=\"三组权限\"></a>三组权限</h3><ul>\n<li>拥有者</li>\n<li>用户组</li>\n<li>其他人</li>\n</ul>\n<h3 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h3><p>太久远会被折叠，使用<code>ls -l --full-time</code>查看具体时间</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>文件名长度：255个字符，128个汉字</p>\n<p>文件名限制：少用特殊符号，如果有特殊符号，使用单引号</p>\n<h2 id=\"修改权限\"><a href=\"#修改权限\" class=\"headerlink\" title=\"修改权限\"></a>修改权限</h2><h3 id=\"chgrp\"><a href=\"#chgrp\" class=\"headerlink\" title=\"chgrp\"></a>chgrp</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chgrp</span> <span class=\"token punctuation\">[</span>-R<span class=\"token punctuation\">]</span> dirname/filename <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chown</span> <span class=\"token punctuation\">[</span>-R<span class=\"token punctuation\">]</span> username:groupname dirname/filename <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"chmod\"><a href=\"#chmod\" class=\"headerlink\" title=\"chmod\"></a>chmod</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># x,y,z = 4/2/1</span>\n<span class=\"token function\">chmod</span> <span class=\"token punctuation\">[</span>-R<span class=\"token punctuation\">]</span> xyz dirname/filename <span class=\"token punctuation\">..</span>.\n<span class=\"token comment\"># id = u g o a; ac = r w x</span>\n<span class=\"token function\">chmod</span> <span class=\"token punctuation\">[</span>-R<span class=\"token punctuation\">]</span> u+r dirname/filename <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"目录配置\"><a href=\"#目录配置\" class=\"headerlink\" title=\"目录配置\"></a>目录配置</h2><p>标准：FHS</p>\n<h3 id=\"FHS要求存在的目录\"><a href=\"#FHS要求存在的目录\" class=\"headerlink\" title=\"FHS要求存在的目录\"></a>FHS要求存在的目录</h3><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;bin</td>\n<td>单人维护下仍然可以正常使用的可执行文件</td>\n</tr>\n<tr>\n<td>&#x2F;boot</td>\n<td>启动所需，包括内核文件，启动选项，grub2</td>\n</tr>\n<tr>\n<td>&#x2F;dev</td>\n<td>块设备，包括硬盘、外设，以及特有的&#x2F;dev&#x2F;null &#x2F;dev&#x2F;tty</td>\n</tr>\n<tr>\n<td>&#x2F;etc</td>\n<td>系统的主要配置文件，<strong>建议不要放可执行文件进来</strong></td>\n</tr>\n<tr>\n<td>&#x2F;lib</td>\n<td>函数库，&#x2F;lib&#x2F;modules中有主要的内核中驱动程序</td>\n</tr>\n<tr>\n<td>&#x2F;media</td>\n<td>可删除的设备，软盘光盘</td>\n</tr>\n<tr>\n<td>&#x2F;mnt</td>\n<td>用于临时挂载</td>\n</tr>\n<tr>\n<td>&#x2F;opt</td>\n<td>第三方独立软件，如kde</td>\n</tr>\n<tr>\n<td>&#x2F;run</td>\n<td>系统启动后所生成的各项信息，该目录又内存来模拟</td>\n</tr>\n<tr>\n<td>&#x2F;sbin</td>\n<td>启动过程中，启动、修复、还原系统的命令</td>\n</tr>\n<tr>\n<td>&#x2F;srv</td>\n<td>网络服务的数据目录</td>\n</tr>\n<tr>\n<td>&#x2F;tmp</td>\n<td>正在执行的程序暂时存放文件的位置，建议定期清理</td>\n</tr>\n<tr>\n<td>&#x2F;usr</td>\n<td>稍后介绍</td>\n</tr>\n<tr>\n<td>&#x2F;var</td>\n<td>稍后介绍</td>\n</tr>\n</tbody></table>\n<h3 id=\"FHS建议存在的目录\"><a href=\"#FHS建议存在的目录\" class=\"headerlink\" title=\"FHS建议存在的目录\"></a>FHS建议存在的目录</h3><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;home</td>\n<td>家目录，使用<del>来表示自己，</del>123表示123的家目录</td>\n</tr>\n<tr>\n<td>&#x2F;lib<qual></td>\n<td>存放与&#x2F;lib不同格式的函数库</td>\n</tr>\n<tr>\n<td>&#x2F;root</td>\n<td>root的家目录</td>\n</tr>\n</tbody></table>\n<h3 id=\"FHS未要求但也很重要的目录\"><a href=\"#FHS未要求但也很重要的目录\" class=\"headerlink\" title=\"FHS未要求但也很重要的目录\"></a>FHS未要求但也很重要的目录</h3><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;lost+found</td>\n<td>文件系统发生错误时，用于找回的目录</td>\n</tr>\n<tr>\n<td>&#x2F;proc</td>\n<td>虚拟的文件系统，存放在内存中，包括系统内核，进程信息，外设和网络的状态</td>\n</tr>\n<tr>\n<td>&#x2F;sys</td>\n<td>虚拟文件系统，记录内核和系统硬件的信息，包括已加载的内核模块和检测到的硬件的信息</td>\n</tr>\n</tbody></table>\n<h3 id=\"x2F-usr目录\"><a href=\"#x2F-usr目录\" class=\"headerlink\" title=\"&#x2F;usr目录\"></a>&#x2F;usr目录</h3><p>usr的全称不是user，而是<code>UNIX Software Resource</code></p>\n<h4 id=\"FHS要求必须存在的目录\"><a href=\"#FHS要求必须存在的目录\" class=\"headerlink\" title=\"FHS要求必须存在的目录\"></a>FHS要求必须存在的目录</h4><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;usr&#x2F;bin</td>\n<td>一般用户能使用的命令，&#x2F;bin目录也被链接至此，FHS建议此目录下不要有子目录（为了加快查找速度？）</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;lib</td>\n<td>同上，&#x2F;lib也被链接至此</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;local</td>\n<td>自己下载的软件安装至此</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;sbin</td>\n<td>非系统正常运行所需的系统命令，常见的是网络服务器中的daemo，&#x2F;sbin被链接至此</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;share</td>\n<td>存放只读的数据文件，尤其是共享文件，如man，doc，zoneinfo（时区文件）</td>\n</tr>\n</tbody></table>\n<h4 id=\"FHS建议存在的目录-1\"><a href=\"#FHS建议存在的目录-1\" class=\"headerlink\" title=\"FHS建议存在的目录\"></a>FHS建议存在的目录</h4><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;usr&#x2F;games</td>\n<td>游戏（woc？？？</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;include</td>\n<td>c和c++的头文件与包含文件，用于tarball</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;libexec</td>\n<td>某些不被一般用户常用的执行文件或脚本，如x window下的指令</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;lib<qual></td>\n<td>同前</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;src</td>\n<td>存放源码，比如内核源码</td>\n</tr>\n</tbody></table>\n<h3 id=\"x2F-var目录\"><a href=\"#x2F-var目录\" class=\"headerlink\" title=\"&#x2F;var目录\"></a>&#x2F;var目录</h3><p> &#x2F;var存放流动的文件，如缓存、日志、以及某些软件运行产生的文件</p>\n<h4 id=\"FHS要求必须存在的目录-1\"><a href=\"#FHS要求必须存在的目录-1\" class=\"headerlink\" title=\"FHS要求必须存在的目录\"></a>FHS要求必须存在的目录</h4><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;var&#x2F;cache</td>\n<td>程序运行过程中的缓存</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;lib</td>\n<td>程序运行中，用到的链接库</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;lock</td>\n<td>锁的存放位置</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;log</td>\n<td>日志</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;mail</td>\n<td>邮件目录，也会存放到&#x2F;var&#x2F;spool&#x2F;mail中</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;run</td>\n<td>程序启动后PID的存放位置</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;spool</td>\n<td>队列数据</td>\n</tr>\n</tbody></table>\n<p>这里鸟哥推荐再去看看FHS的官方文档，有空去研读一下。</p>\n<h2 id=\"相对路径与绝对路径\"><a href=\"#相对路径与绝对路径\" class=\"headerlink\" title=\"相对路径与绝对路径\"></a>相对路径与绝对路径</h2><p>略</p>\n<h2 id=\"linux的标准\"><a href=\"#linux的标准\" class=\"headerlink\" title=\"linux的标准\"></a>linux的标准</h2><p>FHS之外，还有LSB（Linux Standard Base）。</p>\n<p>需要使用包管理工具安装lsb后，使用<code>lsb_release -a</code>来查看系统信息</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/luren2.jpg","excerpt":"","more":"<h1 id=\"文件权限与目录配置\"><a href=\"#文件权限与目录配置\" class=\"headerlink\" title=\"文件权限与目录配置\"></a>文件权限与目录配置</h1><h2 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h2><table>\n<thead>\n<tr>\n<th>权限</th>\n<th>链接数</th>\n<th>拥有者</th>\n<th>用户组</th>\n<th>大小</th>\n<th>修改日期</th>\n<th>文件名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dr-xrw-r—</td>\n<td>5</td>\n<td>root</td>\n<td>root</td>\n<td>1864</td>\n<td>May 19 12:01</td>\n<td>1.cfg</td>\n</tr>\n</tbody></table>\n<h3 id=\"权限的第一个字符\"><a href=\"#权限的第一个字符\" class=\"headerlink\" title=\"权限的第一个字符\"></a>权限的第一个字符</h3><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>d</td>\n<td>目录</td>\n</tr>\n<tr>\n<td>-</td>\n<td>文件</td>\n</tr>\n<tr>\n<td>l</td>\n<td>链接</td>\n</tr>\n<tr>\n<td>b</td>\n<td>块设备（可随机读写的存储设备）</td>\n</tr>\n<tr>\n<td>c</td>\n<td>串口设备（一次性读取的设备）</td>\n</tr>\n<tr>\n<td>p</td>\n<td>管道（pipe）</td>\n</tr>\n<tr>\n<td>s</td>\n<td>socket</td>\n</tr>\n</tbody></table>\n<h3 id=\"三组权限\"><a href=\"#三组权限\" class=\"headerlink\" title=\"三组权限\"></a>三组权限</h3><ul>\n<li>拥有者</li>\n<li>用户组</li>\n<li>其他人</li>\n</ul>\n<h3 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h3><p>太久远会被折叠，使用<code>ls -l --full-time</code>查看具体时间</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>文件名长度：255个字符，128个汉字</p>\n<p>文件名限制：少用特殊符号，如果有特殊符号，使用单引号</p>\n<h2 id=\"修改权限\"><a href=\"#修改权限\" class=\"headerlink\" title=\"修改权限\"></a>修改权限</h2><h3 id=\"chgrp\"><a href=\"#chgrp\" class=\"headerlink\" title=\"chgrp\"></a>chgrp</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chgrp</span> <span class=\"token punctuation\">[</span>-R<span class=\"token punctuation\">]</span> dirname/filename <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chown</span> <span class=\"token punctuation\">[</span>-R<span class=\"token punctuation\">]</span> username:groupname dirname/filename <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"chmod\"><a href=\"#chmod\" class=\"headerlink\" title=\"chmod\"></a>chmod</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># x,y,z = 4/2/1</span>\n<span class=\"token function\">chmod</span> <span class=\"token punctuation\">[</span>-R<span class=\"token punctuation\">]</span> xyz dirname/filename <span class=\"token punctuation\">..</span>.\n<span class=\"token comment\"># id = u g o a; ac = r w x</span>\n<span class=\"token function\">chmod</span> <span class=\"token punctuation\">[</span>-R<span class=\"token punctuation\">]</span> u+r dirname/filename <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"目录配置\"><a href=\"#目录配置\" class=\"headerlink\" title=\"目录配置\"></a>目录配置</h2><p>标准：FHS</p>\n<h3 id=\"FHS要求存在的目录\"><a href=\"#FHS要求存在的目录\" class=\"headerlink\" title=\"FHS要求存在的目录\"></a>FHS要求存在的目录</h3><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;bin</td>\n<td>单人维护下仍然可以正常使用的可执行文件</td>\n</tr>\n<tr>\n<td>&#x2F;boot</td>\n<td>启动所需，包括内核文件，启动选项，grub2</td>\n</tr>\n<tr>\n<td>&#x2F;dev</td>\n<td>块设备，包括硬盘、外设，以及特有的&#x2F;dev&#x2F;null &#x2F;dev&#x2F;tty</td>\n</tr>\n<tr>\n<td>&#x2F;etc</td>\n<td>系统的主要配置文件，<strong>建议不要放可执行文件进来</strong></td>\n</tr>\n<tr>\n<td>&#x2F;lib</td>\n<td>函数库，&#x2F;lib&#x2F;modules中有主要的内核中驱动程序</td>\n</tr>\n<tr>\n<td>&#x2F;media</td>\n<td>可删除的设备，软盘光盘</td>\n</tr>\n<tr>\n<td>&#x2F;mnt</td>\n<td>用于临时挂载</td>\n</tr>\n<tr>\n<td>&#x2F;opt</td>\n<td>第三方独立软件，如kde</td>\n</tr>\n<tr>\n<td>&#x2F;run</td>\n<td>系统启动后所生成的各项信息，该目录又内存来模拟</td>\n</tr>\n<tr>\n<td>&#x2F;sbin</td>\n<td>启动过程中，启动、修复、还原系统的命令</td>\n</tr>\n<tr>\n<td>&#x2F;srv</td>\n<td>网络服务的数据目录</td>\n</tr>\n<tr>\n<td>&#x2F;tmp</td>\n<td>正在执行的程序暂时存放文件的位置，建议定期清理</td>\n</tr>\n<tr>\n<td>&#x2F;usr</td>\n<td>稍后介绍</td>\n</tr>\n<tr>\n<td>&#x2F;var</td>\n<td>稍后介绍</td>\n</tr>\n</tbody></table>\n<h3 id=\"FHS建议存在的目录\"><a href=\"#FHS建议存在的目录\" class=\"headerlink\" title=\"FHS建议存在的目录\"></a>FHS建议存在的目录</h3><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;home</td>\n<td>家目录，使用<del>来表示自己，</del>123表示123的家目录</td>\n</tr>\n<tr>\n<td>&#x2F;lib<qual></td>\n<td>存放与&#x2F;lib不同格式的函数库</td>\n</tr>\n<tr>\n<td>&#x2F;root</td>\n<td>root的家目录</td>\n</tr>\n</tbody></table>\n<h3 id=\"FHS未要求但也很重要的目录\"><a href=\"#FHS未要求但也很重要的目录\" class=\"headerlink\" title=\"FHS未要求但也很重要的目录\"></a>FHS未要求但也很重要的目录</h3><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;lost+found</td>\n<td>文件系统发生错误时，用于找回的目录</td>\n</tr>\n<tr>\n<td>&#x2F;proc</td>\n<td>虚拟的文件系统，存放在内存中，包括系统内核，进程信息，外设和网络的状态</td>\n</tr>\n<tr>\n<td>&#x2F;sys</td>\n<td>虚拟文件系统，记录内核和系统硬件的信息，包括已加载的内核模块和检测到的硬件的信息</td>\n</tr>\n</tbody></table>\n<h3 id=\"x2F-usr目录\"><a href=\"#x2F-usr目录\" class=\"headerlink\" title=\"&#x2F;usr目录\"></a>&#x2F;usr目录</h3><p>usr的全称不是user，而是<code>UNIX Software Resource</code></p>\n<h4 id=\"FHS要求必须存在的目录\"><a href=\"#FHS要求必须存在的目录\" class=\"headerlink\" title=\"FHS要求必须存在的目录\"></a>FHS要求必须存在的目录</h4><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;usr&#x2F;bin</td>\n<td>一般用户能使用的命令，&#x2F;bin目录也被链接至此，FHS建议此目录下不要有子目录（为了加快查找速度？）</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;lib</td>\n<td>同上，&#x2F;lib也被链接至此</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;local</td>\n<td>自己下载的软件安装至此</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;sbin</td>\n<td>非系统正常运行所需的系统命令，常见的是网络服务器中的daemo，&#x2F;sbin被链接至此</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;share</td>\n<td>存放只读的数据文件，尤其是共享文件，如man，doc，zoneinfo（时区文件）</td>\n</tr>\n</tbody></table>\n<h4 id=\"FHS建议存在的目录-1\"><a href=\"#FHS建议存在的目录-1\" class=\"headerlink\" title=\"FHS建议存在的目录\"></a>FHS建议存在的目录</h4><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;usr&#x2F;games</td>\n<td>游戏（woc？？？</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;include</td>\n<td>c和c++的头文件与包含文件，用于tarball</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;libexec</td>\n<td>某些不被一般用户常用的执行文件或脚本，如x window下的指令</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;lib<qual></td>\n<td>同前</td>\n</tr>\n<tr>\n<td>&#x2F;usr&#x2F;src</td>\n<td>存放源码，比如内核源码</td>\n</tr>\n</tbody></table>\n<h3 id=\"x2F-var目录\"><a href=\"#x2F-var目录\" class=\"headerlink\" title=\"&#x2F;var目录\"></a>&#x2F;var目录</h3><p> &#x2F;var存放流动的文件，如缓存、日志、以及某些软件运行产生的文件</p>\n<h4 id=\"FHS要求必须存在的目录-1\"><a href=\"#FHS要求必须存在的目录-1\" class=\"headerlink\" title=\"FHS要求必须存在的目录\"></a>FHS要求必须存在的目录</h4><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;var&#x2F;cache</td>\n<td>程序运行过程中的缓存</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;lib</td>\n<td>程序运行中，用到的链接库</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;lock</td>\n<td>锁的存放位置</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;log</td>\n<td>日志</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;mail</td>\n<td>邮件目录，也会存放到&#x2F;var&#x2F;spool&#x2F;mail中</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;run</td>\n<td>程序启动后PID的存放位置</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;spool</td>\n<td>队列数据</td>\n</tr>\n</tbody></table>\n<p>这里鸟哥推荐再去看看FHS的官方文档，有空去研读一下。</p>\n<h2 id=\"相对路径与绝对路径\"><a href=\"#相对路径与绝对路径\" class=\"headerlink\" title=\"相对路径与绝对路径\"></a>相对路径与绝对路径</h2><p>略</p>\n<h2 id=\"linux的标准\"><a href=\"#linux的标准\" class=\"headerlink\" title=\"linux的标准\"></a>linux的标准</h2><p>FHS之外，还有LSB（Linux Standard Base）。</p>\n<p>需要使用包管理工具安装lsb后，使用<code>lsb_release -a</code>来查看系统信息</p>\n"},{"title":"重学linux（0）","abbrlink":"f7aa4615","date":"2022-01-18T02:12:01.000Z","_content":"\n# 把linux的操作再学一遍！\n\n感受到了之前运维工作中的力不从心，于是乎决定再学一遍\n\n路线是从鸟哥私房菜的第四章开始，跳过基础知识和安装的章节。\n\n# 首次登录与在线求助\n\n## 图形界面\n\n这个略了，不是很想用。\n\n只要记得有个`startx`用来启动`X Window`就行了。\n\n## 初识命令行\n\n### 登录提示\n\n文件位于`/etc/issue`。使用`man issue`查看帮助，可知文件中反斜杠（escape）内容来自`agetty`，使用`man agetty`查询语义后可自定义该文件，示例：\n\n```bash\nUbuntu 18.04.6 LTS \\n \\l\n\n```\n\n### prompt\n\n小知识：\n\nroot的提示符为`#`\n\n普通用户为`$`\n\n### 查看语言支持\n\n```bash\necho $LANG # 现在在用的语言\nlocale # 语言相关的设定\n```\n\n### 几个小工具，复习一下：\n\n1. date：看时间\n2. cal：看日历\n3. bc：计算器\n\n### 几个快捷键\n\n1. tab：补全\n2. ctrl+c：中断\n3. ctrl+d：EOF（也相当于exit）\n4. shift+page up/down：命令行中翻页\n\n## 查看帮助\n\n1. --help\n2. man page（使用vim的操作模式）\n3. info page（linux独有，使用节点的操作模式）\n4. 查看`/usr/share/doc`\n\n### 关于info page\n\n1. 使用tab和上下移动\n2. enter进入菜单，u键返回\n3. n和p在子菜单之间移动\n4. b和e跳到子菜单的第一个node和最后的node\n\n## 最简单的文本编辑器\n\nnano，反正我是不会用的\n\n## 关机\n\n### sync\n\n手动同步到硬盘\n\n### shutdown\n\n冷知识：`/sbin/shutdown`\n\n常用参数：\n\n```bash\n-k # 不是真关机，只是通知其他用户\n-r # 重启\n-h # 立即关机\n-c # 取消关机\n[time] # 设定时间，默认一分钟，举例：+10或10（10分钟），20:25（定时），now（现在）\n```\n\n### reboot/halt/poweroff\n\n都是关机或重启\n\n冷知识：`init 0`关机，`init 6`重启\n\n区别\n\n```bash\nreboot # 重启\nhalt # 系统停止，但屏幕上会有系统停止的输出\npoweroff # 系统关机，没电自然屏幕为空\n```\n\n\n\n\n\n","source":"_posts/Operation/重学linux（0）.md","raw":"---\ntitle: 重学linux（0）\ntags:\n  - 专栏：重学linux\n  - linux\ncategories:\n  - Operation\nabbrlink: f7aa4615\ndate: 2022-01-18 10:12:01\n---\n\n# 把linux的操作再学一遍！\n\n感受到了之前运维工作中的力不从心，于是乎决定再学一遍\n\n路线是从鸟哥私房菜的第四章开始，跳过基础知识和安装的章节。\n\n# 首次登录与在线求助\n\n## 图形界面\n\n这个略了，不是很想用。\n\n只要记得有个`startx`用来启动`X Window`就行了。\n\n## 初识命令行\n\n### 登录提示\n\n文件位于`/etc/issue`。使用`man issue`查看帮助，可知文件中反斜杠（escape）内容来自`agetty`，使用`man agetty`查询语义后可自定义该文件，示例：\n\n```bash\nUbuntu 18.04.6 LTS \\n \\l\n\n```\n\n### prompt\n\n小知识：\n\nroot的提示符为`#`\n\n普通用户为`$`\n\n### 查看语言支持\n\n```bash\necho $LANG # 现在在用的语言\nlocale # 语言相关的设定\n```\n\n### 几个小工具，复习一下：\n\n1. date：看时间\n2. cal：看日历\n3. bc：计算器\n\n### 几个快捷键\n\n1. tab：补全\n2. ctrl+c：中断\n3. ctrl+d：EOF（也相当于exit）\n4. shift+page up/down：命令行中翻页\n\n## 查看帮助\n\n1. --help\n2. man page（使用vim的操作模式）\n3. info page（linux独有，使用节点的操作模式）\n4. 查看`/usr/share/doc`\n\n### 关于info page\n\n1. 使用tab和上下移动\n2. enter进入菜单，u键返回\n3. n和p在子菜单之间移动\n4. b和e跳到子菜单的第一个node和最后的node\n\n## 最简单的文本编辑器\n\nnano，反正我是不会用的\n\n## 关机\n\n### sync\n\n手动同步到硬盘\n\n### shutdown\n\n冷知识：`/sbin/shutdown`\n\n常用参数：\n\n```bash\n-k # 不是真关机，只是通知其他用户\n-r # 重启\n-h # 立即关机\n-c # 取消关机\n[time] # 设定时间，默认一分钟，举例：+10或10（10分钟），20:25（定时），now（现在）\n```\n\n### reboot/halt/poweroff\n\n都是关机或重启\n\n冷知识：`init 0`关机，`init 6`重启\n\n区别\n\n```bash\nreboot # 重启\nhalt # 系统停止，但屏幕上会有系统停止的输出\npoweroff # 系统关机，没电自然屏幕为空\n```\n\n\n\n\n\n","slug":"重学linux（0）","published":1,"category":"Operation","updated":"2022-02-11T05:17:56.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxh001y8wul36v24x0z","content":"<h1 id=\"把linux的操作再学一遍！\"><a href=\"#把linux的操作再学一遍！\" class=\"headerlink\" title=\"把linux的操作再学一遍！\"></a>把linux的操作再学一遍！</h1><p>感受到了之前运维工作中的力不从心，于是乎决定再学一遍</p>\n<p>路线是从鸟哥私房菜的第四章开始，跳过基础知识和安装的章节。</p>\n<h1 id=\"首次登录与在线求助\"><a href=\"#首次登录与在线求助\" class=\"headerlink\" title=\"首次登录与在线求助\"></a>首次登录与在线求助</h1><h2 id=\"图形界面\"><a href=\"#图形界面\" class=\"headerlink\" title=\"图形界面\"></a>图形界面</h2><p>这个略了，不是很想用。</p>\n<p>只要记得有个<code>startx</code>用来启动<code>X Window</code>就行了。</p>\n<h2 id=\"初识命令行\"><a href=\"#初识命令行\" class=\"headerlink\" title=\"初识命令行\"></a>初识命令行</h2><h3 id=\"登录提示\"><a href=\"#登录提示\" class=\"headerlink\" title=\"登录提示\"></a>登录提示</h3><p>文件位于<code>/etc/issue</code>。使用<code>man issue</code>查看帮助，可知文件中反斜杠（escape）内容来自<code>agetty</code>，使用<code>man agetty</code>查询语义后可自定义该文件，示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Ubuntu <span class=\"token number\">18.04</span>.6 LTS <span class=\"token punctuation\">\\</span>n <span class=\"token punctuation\">\\</span>l\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"prompt\"><a href=\"#prompt\" class=\"headerlink\" title=\"prompt\"></a>prompt</h3><p>小知识：</p>\n<p>root的提示符为<code>#</code></p>\n<p>普通用户为<code>$</code></p>\n<h3 id=\"查看语言支持\"><a href=\"#查看语言支持\" class=\"headerlink\" title=\"查看语言支持\"></a>查看语言支持</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$LANG</span> <span class=\"token comment\"># 现在在用的语言</span>\nlocale <span class=\"token comment\"># 语言相关的设定</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"几个小工具，复习一下：\"><a href=\"#几个小工具，复习一下：\" class=\"headerlink\" title=\"几个小工具，复习一下：\"></a>几个小工具，复习一下：</h3><ol>\n<li>date：看时间</li>\n<li>cal：看日历</li>\n<li>bc：计算器</li>\n</ol>\n<h3 id=\"几个快捷键\"><a href=\"#几个快捷键\" class=\"headerlink\" title=\"几个快捷键\"></a>几个快捷键</h3><ol>\n<li>tab：补全</li>\n<li>ctrl+c：中断</li>\n<li>ctrl+d：EOF（也相当于exit）</li>\n<li>shift+page up&#x2F;down：命令行中翻页</li>\n</ol>\n<h2 id=\"查看帮助\"><a href=\"#查看帮助\" class=\"headerlink\" title=\"查看帮助\"></a>查看帮助</h2><ol>\n<li>–help</li>\n<li>man page（使用vim的操作模式）</li>\n<li>info page（linux独有，使用节点的操作模式）</li>\n<li>查看<code>/usr/share/doc</code></li>\n</ol>\n<h3 id=\"关于info-page\"><a href=\"#关于info-page\" class=\"headerlink\" title=\"关于info page\"></a>关于info page</h3><ol>\n<li>使用tab和上下移动</li>\n<li>enter进入菜单，u键返回</li>\n<li>n和p在子菜单之间移动</li>\n<li>b和e跳到子菜单的第一个node和最后的node</li>\n</ol>\n<h2 id=\"最简单的文本编辑器\"><a href=\"#最简单的文本编辑器\" class=\"headerlink\" title=\"最简单的文本编辑器\"></a>最简单的文本编辑器</h2><p>nano，反正我是不会用的</p>\n<h2 id=\"关机\"><a href=\"#关机\" class=\"headerlink\" title=\"关机\"></a>关机</h2><h3 id=\"sync\"><a href=\"#sync\" class=\"headerlink\" title=\"sync\"></a>sync</h3><p>手动同步到硬盘</p>\n<h3 id=\"shutdown\"><a href=\"#shutdown\" class=\"headerlink\" title=\"shutdown\"></a>shutdown</h3><p>冷知识：<code>/sbin/shutdown</code></p>\n<p>常用参数：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">-k <span class=\"token comment\"># 不是真关机，只是通知其他用户</span>\n-r <span class=\"token comment\"># 重启</span>\n-h <span class=\"token comment\"># 立即关机</span>\n-c <span class=\"token comment\"># 取消关机</span>\n<span class=\"token punctuation\">[</span>time<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 设定时间，默认一分钟，举例：+10或10（10分钟），20:25（定时），now（现在）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"reboot-x2F-halt-x2F-poweroff\"><a href=\"#reboot-x2F-halt-x2F-poweroff\" class=\"headerlink\" title=\"reboot&#x2F;halt&#x2F;poweroff\"></a>reboot&#x2F;halt&#x2F;poweroff</h3><p>都是关机或重启</p>\n<p>冷知识：<code>init 0</code>关机，<code>init 6</code>重启</p>\n<p>区别</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">reboot</span> <span class=\"token comment\"># 重启</span>\n<span class=\"token function\">halt</span> <span class=\"token comment\"># 系统停止，但屏幕上会有系统停止的输出</span>\npoweroff <span class=\"token comment\"># 系统关机，没电自然屏幕为空</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/luren1.jpg","excerpt":"","more":"<h1 id=\"把linux的操作再学一遍！\"><a href=\"#把linux的操作再学一遍！\" class=\"headerlink\" title=\"把linux的操作再学一遍！\"></a>把linux的操作再学一遍！</h1><p>感受到了之前运维工作中的力不从心，于是乎决定再学一遍</p>\n<p>路线是从鸟哥私房菜的第四章开始，跳过基础知识和安装的章节。</p>\n<h1 id=\"首次登录与在线求助\"><a href=\"#首次登录与在线求助\" class=\"headerlink\" title=\"首次登录与在线求助\"></a>首次登录与在线求助</h1><h2 id=\"图形界面\"><a href=\"#图形界面\" class=\"headerlink\" title=\"图形界面\"></a>图形界面</h2><p>这个略了，不是很想用。</p>\n<p>只要记得有个<code>startx</code>用来启动<code>X Window</code>就行了。</p>\n<h2 id=\"初识命令行\"><a href=\"#初识命令行\" class=\"headerlink\" title=\"初识命令行\"></a>初识命令行</h2><h3 id=\"登录提示\"><a href=\"#登录提示\" class=\"headerlink\" title=\"登录提示\"></a>登录提示</h3><p>文件位于<code>/etc/issue</code>。使用<code>man issue</code>查看帮助，可知文件中反斜杠（escape）内容来自<code>agetty</code>，使用<code>man agetty</code>查询语义后可自定义该文件，示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Ubuntu <span class=\"token number\">18.04</span>.6 LTS <span class=\"token punctuation\">\\</span>n <span class=\"token punctuation\">\\</span>l\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"prompt\"><a href=\"#prompt\" class=\"headerlink\" title=\"prompt\"></a>prompt</h3><p>小知识：</p>\n<p>root的提示符为<code>#</code></p>\n<p>普通用户为<code>$</code></p>\n<h3 id=\"查看语言支持\"><a href=\"#查看语言支持\" class=\"headerlink\" title=\"查看语言支持\"></a>查看语言支持</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$LANG</span> <span class=\"token comment\"># 现在在用的语言</span>\nlocale <span class=\"token comment\"># 语言相关的设定</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"几个小工具，复习一下：\"><a href=\"#几个小工具，复习一下：\" class=\"headerlink\" title=\"几个小工具，复习一下：\"></a>几个小工具，复习一下：</h3><ol>\n<li>date：看时间</li>\n<li>cal：看日历</li>\n<li>bc：计算器</li>\n</ol>\n<h3 id=\"几个快捷键\"><a href=\"#几个快捷键\" class=\"headerlink\" title=\"几个快捷键\"></a>几个快捷键</h3><ol>\n<li>tab：补全</li>\n<li>ctrl+c：中断</li>\n<li>ctrl+d：EOF（也相当于exit）</li>\n<li>shift+page up&#x2F;down：命令行中翻页</li>\n</ol>\n<h2 id=\"查看帮助\"><a href=\"#查看帮助\" class=\"headerlink\" title=\"查看帮助\"></a>查看帮助</h2><ol>\n<li>–help</li>\n<li>man page（使用vim的操作模式）</li>\n<li>info page（linux独有，使用节点的操作模式）</li>\n<li>查看<code>/usr/share/doc</code></li>\n</ol>\n<h3 id=\"关于info-page\"><a href=\"#关于info-page\" class=\"headerlink\" title=\"关于info page\"></a>关于info page</h3><ol>\n<li>使用tab和上下移动</li>\n<li>enter进入菜单，u键返回</li>\n<li>n和p在子菜单之间移动</li>\n<li>b和e跳到子菜单的第一个node和最后的node</li>\n</ol>\n<h2 id=\"最简单的文本编辑器\"><a href=\"#最简单的文本编辑器\" class=\"headerlink\" title=\"最简单的文本编辑器\"></a>最简单的文本编辑器</h2><p>nano，反正我是不会用的</p>\n<h2 id=\"关机\"><a href=\"#关机\" class=\"headerlink\" title=\"关机\"></a>关机</h2><h3 id=\"sync\"><a href=\"#sync\" class=\"headerlink\" title=\"sync\"></a>sync</h3><p>手动同步到硬盘</p>\n<h3 id=\"shutdown\"><a href=\"#shutdown\" class=\"headerlink\" title=\"shutdown\"></a>shutdown</h3><p>冷知识：<code>/sbin/shutdown</code></p>\n<p>常用参数：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">-k <span class=\"token comment\"># 不是真关机，只是通知其他用户</span>\n-r <span class=\"token comment\"># 重启</span>\n-h <span class=\"token comment\"># 立即关机</span>\n-c <span class=\"token comment\"># 取消关机</span>\n<span class=\"token punctuation\">[</span>time<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 设定时间，默认一分钟，举例：+10或10（10分钟），20:25（定时），now（现在）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"reboot-x2F-halt-x2F-poweroff\"><a href=\"#reboot-x2F-halt-x2F-poweroff\" class=\"headerlink\" title=\"reboot&#x2F;halt&#x2F;poweroff\"></a>reboot&#x2F;halt&#x2F;poweroff</h3><p>都是关机或重启</p>\n<p>冷知识：<code>init 0</code>关机，<code>init 6</code>重启</p>\n<p>区别</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">reboot</span> <span class=\"token comment\"># 重启</span>\n<span class=\"token function\">halt</span> <span class=\"token comment\"># 系统停止，但屏幕上会有系统停止的输出</span>\npoweroff <span class=\"token comment\"># 系统关机，没电自然屏幕为空</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n"},{"title":"重学linux（2）","abbrlink":"5da38e9e","date":"2022-01-20T05:34:46.000Z","_content":"\n# Linux目录与文件管理\n\n## 路径\n\n### 相对路径与绝对路径\n\n略\n\n快捷关键字：\n\n> .\t表示此层目录、\n>\n> ..\t上层\n>\n> \\-\t前一个工作目录\n>\n> ~[user]\t某个用户的家目录\n>\n> ​\t空白也可表示自己的家目录 \n\n## $PATH\n\n添加方式：\n\n```bash\nPATH=\"${PATH}:/directory\"\n```\n\n## 目录相关操作\n\n- cd\n- pwd -P：表示真实地址，而非链接地址\n- mkdir\n  - -m 设置文件权限\n  - -p 递归创建\n- rmdir\n  - -p 连同上层空目录一起删除\n\n## 文件相关操作\n\n### ls\n\n略\n\n### cp rm mv\n\n#### cp\n\n| 参数                  | 选项                                      |\n| --------------------- | ----------------------------------------- |\n| -a -dr --preserve-all | 复制所有属性                              |\n| -i                    | 若存在，询问是否覆盖                      |\n| -l                    | 硬链接，相应的s为symbolic link            |\n| -p                    | 带权限赋值                                |\n| -r                    | 递归赋值，用于文件夹赋值                  |\n| -u                    | 更新式复制，当destination比source旧才复制 |\n\n还有一点，如果cp的source有两个以上，destination一定要是目录。\n\n#### rm\n\n| 参数 | 选项    |\n| ---- | ------- |\n| -f   | force   |\n| -i   | 询问    |\n| -r   | 递归    |\n| -v   | verbose |\n\n来自rm的man page：\n\n```bash\n   To remove a file whose name starts with a '-', for example '-foo', use one of these commands:\n\n          rm -- -foo\n\n          rm ./-foo\n```\n\n其中--可以告诉parser，后面的东西不是option，而是arguments\n\n#### mv\n\n同cp\n\n**注**：rename可用于给多个文件重命名，以下为`man page`，大概是做匹配然后替换，但是rename有两个版本，C语言版使用通配符匹配，perl版本使用正则表达式匹配。可以使用`rename --verson`查看具体版本。\n\n```bash\nSYNOPSIS\n       rename [options] expression replacement file...\n\nDESCRIPTION\n       rename  will  rename  the  specified  files  by  replacing the first occurrence of expression in their name by\n       replacement.\n\nOPTIONS\n       -s, --symlink\n              Do not rename a symlink but its target.\n\n       -v, --verbose\n              Show which files where renamed, if any.\n\n       -n, --no-act\n              Do not make any changes.\n\n       -o, --no-overwrite\n              Do not overwrite existing files.\n\n       -V, --version\n              Display version information and exit.\n\n       -h, --help\n              Display help text and exit\n```\n\n```bash\n区分方法: rename --version\n\n如果返回结果中包含 util-linux , 说明是 C 语言版本, 反之是 Perl 版本\n```\n\n### 获取文件名和目录名\n\n```bash\n$ basename /etc/sysconfig/network\nnetwork\n$ dirname /etc/sysconfig/network\n/etc/sysconfig\n```\n\n## 查看文件内容\n\n### 直接查看\n\n#### cat\n\nconcatenate（串联）：正向全部显示\n\n| 参数 | 选项                   |\n| ---- | ---------------------- |\n| -n   | 打印行号               |\n| -T   | 显示tab键              |\n| -v   | 显示看不出来的特殊字符 |\n| -A   | 相当于-vET             |\n| -E   | 显示换行符             |\n\n#### tac\n\ncat的反向\n\n#### nl\n\n添加行号打印\n\n### 可翻页查看\n\n#### more\n\nvim操作模式，只能向后翻页\n\n#### less\n\nvim操作模式，更灵活\n\n### 数据截取\n\n#### head\n\n```bash\nhead -n [行数] 文件\n```\n\n#### tail\n\n```bash\ntail -n [行数] 文件 [-f] # f表示持续刷新\n```\n\n### 非纯文本文件\n\n#### od\n\n略了吧，没人会看二进制的\n\n### 修改文件时间or建立新文件\n\ntouch\n\n略了吧，一年到头改不了几次\n\n## 权限\n\n### 默认权限\n\n```bash\numask [-S] # 查看默认权限\numask 002 # 修改默认权限,这里的数字表示被拿走的权限\n#而默认情况下，文件不会有x权限，文件夹一定有x权限\n#即文件为-rw-rw-rw，目录为drwxrwxrwx\n```\n\n### 隐藏属性\n\n```bash\nlsattr # 显示文件隐藏属性\nchattr # 修改文件隐藏属性\n```\n\n一些隐藏属性\n\n| 属性 | 内容                                         |\n| ---- | -------------------------------------------- |\n| a    | 该文件只能增加，不能删除或修改数据           |\n| i    | 该文件不能被删除，改名，设置链接或写入数据   |\n| s与u | s是该文件被删除后将彻底删除，无法找回，u相反 |\n\n### 特殊权限\n\n#### SUID--Set UID\n\n- 只能用于binary\n- 执行者要拥有该文件的x权限\n- 执行者执行该文件时会获得该文件的owner的权限\n- 举例：/usr/bin/passwd（权限为`-rwsr-xr-x`）\n\n#### SGID--Set GID\n\n同上，不过\n\n- 获得的是该文件group的权限\n- 可用于目录和binary\n- 举例：/usr/bin/locate（权限为`-rwx--s--x`）\n\n#### SBIT--Sticky Bit\n\n- 只对目录有效\n- 当用户对该目录有r和x权限，就自动拥有该目录内的w权限\n- 当用户在该目录下建立文件或目录的时候，只有自己和root有权限删除该文件\n- 举例：/tmp（权限为`drwxrwxrwt`）\n\n#### 特殊权限的设置\n\n以上三者也遵循421，举例：`chmod 4755 filename`\n\n#### 查看文件类型\n\n```bash\nfile filename\n```\n\n## 命令与文件的查找\n\n### 命令的查找\n\n```bash\nwhich [-a] command # -a 表示列出所有PATH中的该命令\nwhich history # 找不到history，因为这是bash的内置命令，只能用type来\ntype command # 后面会说\n```\n\n### 文件的查找\n\n#### whereis\n\n速查重要目录，可用`whereis -l`查看去找的主要目录\n\n#### locate / updatedb\n\n`locate`通过数据库速查，`updatedb`手动更新数据库\n\n#### find\n\n查硬盘万能大法。\n\n时间参数的说明\n\n- `atime`，last access time\n- `ctime`，last change time\n- `mtime`，last modify time\n\n时间参数后的数字的说明\n\n- n，表示n天前的*一天之内*\n- +n，n天之前（不包括第n天）\n- -n，n天之内（包括第n天）\n\n用户参数\n\n- -uid n\n- -gid n\n- -user name\n- -group name\n- **-nouser**\n- **-nogroup**\n\n权限参数\n\n- -name filename\n- -size [+-]SIZE\n- -type TYPE\n- -perm mode 权限的精确匹配\n- -perm -mode 必须包含某个权限\n- -perm /mode 包含任意某个权限\n\n其他操作\n\n- -exec command 查找完之后跟的额外操作\n- -print 默认操作，输出至屏幕\n\nexec举例\n\n```bash\nfind /usr/bin /usr/sbin -perm /7000 -exec ls -l {} \\;\n# exec后不可使用别名\n# {}表示find找到的内容\n# \\;表示结束，exec会从`-exec`后面执行到`\\;`结束\n```\n\n","source":"_posts/Operation/重学linux（2）.md","raw":"---\ntitle: 重学linux（2）\ntags:\n  - 专栏：重学linux\n  - linux\ncategories:\n  - Operation\nabbrlink: 5da38e9e\ndate: 2022-01-20 13:34:46\n---\n\n# Linux目录与文件管理\n\n## 路径\n\n### 相对路径与绝对路径\n\n略\n\n快捷关键字：\n\n> .\t表示此层目录、\n>\n> ..\t上层\n>\n> \\-\t前一个工作目录\n>\n> ~[user]\t某个用户的家目录\n>\n> ​\t空白也可表示自己的家目录 \n\n## $PATH\n\n添加方式：\n\n```bash\nPATH=\"${PATH}:/directory\"\n```\n\n## 目录相关操作\n\n- cd\n- pwd -P：表示真实地址，而非链接地址\n- mkdir\n  - -m 设置文件权限\n  - -p 递归创建\n- rmdir\n  - -p 连同上层空目录一起删除\n\n## 文件相关操作\n\n### ls\n\n略\n\n### cp rm mv\n\n#### cp\n\n| 参数                  | 选项                                      |\n| --------------------- | ----------------------------------------- |\n| -a -dr --preserve-all | 复制所有属性                              |\n| -i                    | 若存在，询问是否覆盖                      |\n| -l                    | 硬链接，相应的s为symbolic link            |\n| -p                    | 带权限赋值                                |\n| -r                    | 递归赋值，用于文件夹赋值                  |\n| -u                    | 更新式复制，当destination比source旧才复制 |\n\n还有一点，如果cp的source有两个以上，destination一定要是目录。\n\n#### rm\n\n| 参数 | 选项    |\n| ---- | ------- |\n| -f   | force   |\n| -i   | 询问    |\n| -r   | 递归    |\n| -v   | verbose |\n\n来自rm的man page：\n\n```bash\n   To remove a file whose name starts with a '-', for example '-foo', use one of these commands:\n\n          rm -- -foo\n\n          rm ./-foo\n```\n\n其中--可以告诉parser，后面的东西不是option，而是arguments\n\n#### mv\n\n同cp\n\n**注**：rename可用于给多个文件重命名，以下为`man page`，大概是做匹配然后替换，但是rename有两个版本，C语言版使用通配符匹配，perl版本使用正则表达式匹配。可以使用`rename --verson`查看具体版本。\n\n```bash\nSYNOPSIS\n       rename [options] expression replacement file...\n\nDESCRIPTION\n       rename  will  rename  the  specified  files  by  replacing the first occurrence of expression in their name by\n       replacement.\n\nOPTIONS\n       -s, --symlink\n              Do not rename a symlink but its target.\n\n       -v, --verbose\n              Show which files where renamed, if any.\n\n       -n, --no-act\n              Do not make any changes.\n\n       -o, --no-overwrite\n              Do not overwrite existing files.\n\n       -V, --version\n              Display version information and exit.\n\n       -h, --help\n              Display help text and exit\n```\n\n```bash\n区分方法: rename --version\n\n如果返回结果中包含 util-linux , 说明是 C 语言版本, 反之是 Perl 版本\n```\n\n### 获取文件名和目录名\n\n```bash\n$ basename /etc/sysconfig/network\nnetwork\n$ dirname /etc/sysconfig/network\n/etc/sysconfig\n```\n\n## 查看文件内容\n\n### 直接查看\n\n#### cat\n\nconcatenate（串联）：正向全部显示\n\n| 参数 | 选项                   |\n| ---- | ---------------------- |\n| -n   | 打印行号               |\n| -T   | 显示tab键              |\n| -v   | 显示看不出来的特殊字符 |\n| -A   | 相当于-vET             |\n| -E   | 显示换行符             |\n\n#### tac\n\ncat的反向\n\n#### nl\n\n添加行号打印\n\n### 可翻页查看\n\n#### more\n\nvim操作模式，只能向后翻页\n\n#### less\n\nvim操作模式，更灵活\n\n### 数据截取\n\n#### head\n\n```bash\nhead -n [行数] 文件\n```\n\n#### tail\n\n```bash\ntail -n [行数] 文件 [-f] # f表示持续刷新\n```\n\n### 非纯文本文件\n\n#### od\n\n略了吧，没人会看二进制的\n\n### 修改文件时间or建立新文件\n\ntouch\n\n略了吧，一年到头改不了几次\n\n## 权限\n\n### 默认权限\n\n```bash\numask [-S] # 查看默认权限\numask 002 # 修改默认权限,这里的数字表示被拿走的权限\n#而默认情况下，文件不会有x权限，文件夹一定有x权限\n#即文件为-rw-rw-rw，目录为drwxrwxrwx\n```\n\n### 隐藏属性\n\n```bash\nlsattr # 显示文件隐藏属性\nchattr # 修改文件隐藏属性\n```\n\n一些隐藏属性\n\n| 属性 | 内容                                         |\n| ---- | -------------------------------------------- |\n| a    | 该文件只能增加，不能删除或修改数据           |\n| i    | 该文件不能被删除，改名，设置链接或写入数据   |\n| s与u | s是该文件被删除后将彻底删除，无法找回，u相反 |\n\n### 特殊权限\n\n#### SUID--Set UID\n\n- 只能用于binary\n- 执行者要拥有该文件的x权限\n- 执行者执行该文件时会获得该文件的owner的权限\n- 举例：/usr/bin/passwd（权限为`-rwsr-xr-x`）\n\n#### SGID--Set GID\n\n同上，不过\n\n- 获得的是该文件group的权限\n- 可用于目录和binary\n- 举例：/usr/bin/locate（权限为`-rwx--s--x`）\n\n#### SBIT--Sticky Bit\n\n- 只对目录有效\n- 当用户对该目录有r和x权限，就自动拥有该目录内的w权限\n- 当用户在该目录下建立文件或目录的时候，只有自己和root有权限删除该文件\n- 举例：/tmp（权限为`drwxrwxrwt`）\n\n#### 特殊权限的设置\n\n以上三者也遵循421，举例：`chmod 4755 filename`\n\n#### 查看文件类型\n\n```bash\nfile filename\n```\n\n## 命令与文件的查找\n\n### 命令的查找\n\n```bash\nwhich [-a] command # -a 表示列出所有PATH中的该命令\nwhich history # 找不到history，因为这是bash的内置命令，只能用type来\ntype command # 后面会说\n```\n\n### 文件的查找\n\n#### whereis\n\n速查重要目录，可用`whereis -l`查看去找的主要目录\n\n#### locate / updatedb\n\n`locate`通过数据库速查，`updatedb`手动更新数据库\n\n#### find\n\n查硬盘万能大法。\n\n时间参数的说明\n\n- `atime`，last access time\n- `ctime`，last change time\n- `mtime`，last modify time\n\n时间参数后的数字的说明\n\n- n，表示n天前的*一天之内*\n- +n，n天之前（不包括第n天）\n- -n，n天之内（包括第n天）\n\n用户参数\n\n- -uid n\n- -gid n\n- -user name\n- -group name\n- **-nouser**\n- **-nogroup**\n\n权限参数\n\n- -name filename\n- -size [+-]SIZE\n- -type TYPE\n- -perm mode 权限的精确匹配\n- -perm -mode 必须包含某个权限\n- -perm /mode 包含任意某个权限\n\n其他操作\n\n- -exec command 查找完之后跟的额外操作\n- -print 默认操作，输出至屏幕\n\nexec举例\n\n```bash\nfind /usr/bin /usr/sbin -perm /7000 -exec ls -l {} \\;\n# exec后不可使用别名\n# {}表示find找到的内容\n# \\;表示结束，exec会从`-exec`后面执行到`\\;`结束\n```\n\n","slug":"重学linux（2）","published":1,"category":"Operation","updated":"2022-03-03T06:55:58.775Z","_id":"ckzs3irxh00208wul1y4fggws","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Linux目录与文件管理\"><a href=\"#Linux目录与文件管理\" class=\"headerlink\" title=\"Linux目录与文件管理\"></a>Linux目录与文件管理</h1><h2 id=\"路径\"><a href=\"#路径\" class=\"headerlink\" title=\"路径\"></a>路径</h2><h3 id=\"相对路径与绝对路径\"><a href=\"#相对路径与绝对路径\" class=\"headerlink\" title=\"相对路径与绝对路径\"></a>相对路径与绝对路径</h3><p>略</p>\n<p>快捷关键字：</p>\n<blockquote>\n<p>.    表示此层目录、</p>\n<p>..    上层</p>\n<p>-    前一个工作目录</p>\n<p>~[user]    某个用户的家目录</p>\n<p>​    空白也可表示自己的家目录 </p>\n</blockquote>\n<h2 id=\"PATH\"><a href=\"#PATH\" class=\"headerlink\" title=\"$PATH\"></a>$PATH</h2><p>添加方式：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$&#123;<span class=\"token environment constant\">PATH</span>&#125;</span>:/directory\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"目录相关操作\"><a href=\"#目录相关操作\" class=\"headerlink\" title=\"目录相关操作\"></a>目录相关操作</h2><ul>\n<li>cd</li>\n<li>pwd -P：表示真实地址，而非链接地址</li>\n<li>mkdir<ul>\n<li>-m 设置文件权限</li>\n<li>-p 递归创建</li>\n</ul>\n</li>\n<li>rmdir<ul>\n<li>-p 连同上层空目录一起删除</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"文件相关操作\"><a href=\"#文件相关操作\" class=\"headerlink\" title=\"文件相关操作\"></a>文件相关操作</h2><h3 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h3><p>略</p>\n<h3 id=\"cp-rm-mv\"><a href=\"#cp-rm-mv\" class=\"headerlink\" title=\"cp rm mv\"></a>cp rm mv</h3><h4 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>选项</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a -dr –preserve-all</td>\n<td>复制所有属性</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>若存在，询问是否覆盖</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>硬链接，相应的s为symbolic link</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>带权限赋值</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>递归赋值，用于文件夹赋值</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>更新式复制，当destination比source旧才复制</td>\n</tr>\n</tbody></table>\n<p>还有一点，如果cp的source有两个以上，destination一定要是目录。</p>\n<h4 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>选项</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-f</td>\n<td>force</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>询问</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>递归</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>verbose</td>\n</tr>\n</tbody></table>\n<p>来自rm的man page：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">To remove a <span class=\"token function\">file</span> whose name starts with a <span class=\"token string\">'-'</span>, <span class=\"token keyword\">for</span> example <span class=\"token string\">'-foo'</span>, use one of these commands:\n\n       <span class=\"token function\">rm</span> -- -foo\n\n       <span class=\"token function\">rm</span> ./-foo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中–可以告诉parser，后面的东西不是option，而是arguments</p>\n<h4 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h4><p>同cp</p>\n<p><strong>注</strong>：rename可用于给多个文件重命名，以下为<code>man page</code>，大概是做匹配然后替换，但是rename有两个版本，C语言版使用通配符匹配，perl版本使用正则表达式匹配。可以使用<code>rename --verson</code>查看具体版本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">SYNOPSIS\n       <span class=\"token function\">rename</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> expression replacement file<span class=\"token punctuation\">..</span>.\n\nDESCRIPTION\n       <span class=\"token function\">rename</span>  will  <span class=\"token function\">rename</span>  the  specified  files  by  replacing the first occurrence of expression <span class=\"token keyword\">in</span> their name by\n       replacement.\n\nOPTIONS\n       -s, --symlink\n              Do not <span class=\"token function\">rename</span> a symlink but its target.\n\n       -v, --verbose\n              Show <span class=\"token function\">which</span> files where renamed, <span class=\"token keyword\">if</span> any.\n\n       -n, --no-act\n              Do not <span class=\"token function\">make</span> any changes.\n\n       -o, --no-overwrite\n              Do not overwrite existing files.\n\n       -V, --version\n              Display version information and exit.\n\n       -h, --help\n              Display <span class=\"token builtin class-name\">help</span> text and <span class=\"token builtin class-name\">exit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">区分方法: <span class=\"token function\">rename</span> --version\n\n如果返回结果中包含 util-linux , 说明是 C 语言版本, 反之是 Perl 版本<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"获取文件名和目录名\"><a href=\"#获取文件名和目录名\" class=\"headerlink\" title=\"获取文件名和目录名\"></a>获取文件名和目录名</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">basename</span> /etc/sysconfig/network\nnetwork\n$ <span class=\"token function\">dirname</span> /etc/sysconfig/network\n/etc/sysconfig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"查看文件内容\"><a href=\"#查看文件内容\" class=\"headerlink\" title=\"查看文件内容\"></a>查看文件内容</h2><h3 id=\"直接查看\"><a href=\"#直接查看\" class=\"headerlink\" title=\"直接查看\"></a>直接查看</h3><h4 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h4><p>concatenate（串联）：正向全部显示</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>选项</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-n</td>\n<td>打印行号</td>\n</tr>\n<tr>\n<td>-T</td>\n<td>显示tab键</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示看不出来的特殊字符</td>\n</tr>\n<tr>\n<td>-A</td>\n<td>相当于-vET</td>\n</tr>\n<tr>\n<td>-E</td>\n<td>显示换行符</td>\n</tr>\n</tbody></table>\n<h4 id=\"tac\"><a href=\"#tac\" class=\"headerlink\" title=\"tac\"></a>tac</h4><p>cat的反向</p>\n<h4 id=\"nl\"><a href=\"#nl\" class=\"headerlink\" title=\"nl\"></a>nl</h4><p>添加行号打印</p>\n<h3 id=\"可翻页查看\"><a href=\"#可翻页查看\" class=\"headerlink\" title=\"可翻页查看\"></a>可翻页查看</h3><h4 id=\"more\"><a href=\"#more\" class=\"headerlink\" title=\"more\"></a>more</h4><p>vim操作模式，只能向后翻页</p>\n<h4 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a>less</h4><p>vim操作模式，更灵活</p>\n<h3 id=\"数据截取\"><a href=\"#数据截取\" class=\"headerlink\" title=\"数据截取\"></a>数据截取</h3><h4 id=\"head\"><a href=\"#head\" class=\"headerlink\" title=\"head\"></a>head</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">head</span> -n <span class=\"token punctuation\">[</span>行数<span class=\"token punctuation\">]</span> 文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"tail\"></a>tail</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tail</span> -n <span class=\"token punctuation\">[</span>行数<span class=\"token punctuation\">]</span> 文件 <span class=\"token punctuation\">[</span>-f<span class=\"token punctuation\">]</span> <span class=\"token comment\"># f表示持续刷新</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"非纯文本文件\"><a href=\"#非纯文本文件\" class=\"headerlink\" title=\"非纯文本文件\"></a>非纯文本文件</h3><h4 id=\"od\"><a href=\"#od\" class=\"headerlink\" title=\"od\"></a>od</h4><p>略了吧，没人会看二进制的</p>\n<h3 id=\"修改文件时间or建立新文件\"><a href=\"#修改文件时间or建立新文件\" class=\"headerlink\" title=\"修改文件时间or建立新文件\"></a>修改文件时间or建立新文件</h3><p>touch</p>\n<p>略了吧，一年到头改不了几次</p>\n<h2 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h2><h3 id=\"默认权限\"><a href=\"#默认权限\" class=\"headerlink\" title=\"默认权限\"></a>默认权限</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">umask</span> <span class=\"token punctuation\">[</span>-S<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 查看默认权限</span>\n<span class=\"token builtin class-name\">umask</span> 002 <span class=\"token comment\"># 修改默认权限,这里的数字表示被拿走的权限</span>\n<span class=\"token comment\">#而默认情况下，文件不会有x权限，文件夹一定有x权限</span>\n<span class=\"token comment\">#即文件为-rw-rw-rw，目录为drwxrwxrwx</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"隐藏属性\"><a href=\"#隐藏属性\" class=\"headerlink\" title=\"隐藏属性\"></a>隐藏属性</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lsattr <span class=\"token comment\"># 显示文件隐藏属性</span>\nchattr <span class=\"token comment\"># 修改文件隐藏属性</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>一些隐藏属性</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>该文件只能增加，不能删除或修改数据</td>\n</tr>\n<tr>\n<td>i</td>\n<td>该文件不能被删除，改名，设置链接或写入数据</td>\n</tr>\n<tr>\n<td>s与u</td>\n<td>s是该文件被删除后将彻底删除，无法找回，u相反</td>\n</tr>\n</tbody></table>\n<h3 id=\"特殊权限\"><a href=\"#特殊权限\" class=\"headerlink\" title=\"特殊权限\"></a>特殊权限</h3><h4 id=\"SUID–Set-UID\"><a href=\"#SUID–Set-UID\" class=\"headerlink\" title=\"SUID–Set UID\"></a>SUID–Set UID</h4><ul>\n<li>只能用于binary</li>\n<li>执行者要拥有该文件的x权限</li>\n<li>执行者执行该文件时会获得该文件的owner的权限</li>\n<li>举例：&#x2F;usr&#x2F;bin&#x2F;passwd（权限为<code>-rwsr-xr-x</code>）</li>\n</ul>\n<h4 id=\"SGID–Set-GID\"><a href=\"#SGID–Set-GID\" class=\"headerlink\" title=\"SGID–Set GID\"></a>SGID–Set GID</h4><p>同上，不过</p>\n<ul>\n<li>获得的是该文件group的权限</li>\n<li>可用于目录和binary</li>\n<li>举例：&#x2F;usr&#x2F;bin&#x2F;locate（权限为<code>-rwx--s--x</code>）</li>\n</ul>\n<h4 id=\"SBIT–Sticky-Bit\"><a href=\"#SBIT–Sticky-Bit\" class=\"headerlink\" title=\"SBIT–Sticky Bit\"></a>SBIT–Sticky Bit</h4><ul>\n<li>只对目录有效</li>\n<li>当用户对该目录有r和x权限，就自动拥有该目录内的w权限</li>\n<li>当用户在该目录下建立文件或目录的时候，只有自己和root有权限删除该文件</li>\n<li>举例：&#x2F;tmp（权限为<code>drwxrwxrwt</code>）</li>\n</ul>\n<h4 id=\"特殊权限的设置\"><a href=\"#特殊权限的设置\" class=\"headerlink\" title=\"特殊权限的设置\"></a>特殊权限的设置</h4><p>以上三者也遵循421，举例：<code>chmod 4755 filename</code></p>\n<h4 id=\"查看文件类型\"><a href=\"#查看文件类型\" class=\"headerlink\" title=\"查看文件类型\"></a>查看文件类型</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">file</span> filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"命令与文件的查找\"><a href=\"#命令与文件的查找\" class=\"headerlink\" title=\"命令与文件的查找\"></a>命令与文件的查找</h2><h3 id=\"命令的查找\"><a href=\"#命令的查找\" class=\"headerlink\" title=\"命令的查找\"></a>命令的查找</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">which</span> <span class=\"token punctuation\">[</span>-a<span class=\"token punctuation\">]</span> <span class=\"token builtin class-name\">command</span> <span class=\"token comment\"># -a 表示列出所有PATH中的该命令</span>\n<span class=\"token function\">which</span> <span class=\"token function\">history</span> <span class=\"token comment\"># 找不到history，因为这是bash的内置命令，只能用type来</span>\n<span class=\"token builtin class-name\">type</span> <span class=\"token builtin class-name\">command</span> <span class=\"token comment\"># 后面会说</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"文件的查找\"><a href=\"#文件的查找\" class=\"headerlink\" title=\"文件的查找\"></a>文件的查找</h3><h4 id=\"whereis\"><a href=\"#whereis\" class=\"headerlink\" title=\"whereis\"></a>whereis</h4><p>速查重要目录，可用<code>whereis -l</code>查看去找的主要目录</p>\n<h4 id=\"locate-x2F-updatedb\"><a href=\"#locate-x2F-updatedb\" class=\"headerlink\" title=\"locate &#x2F; updatedb\"></a>locate &#x2F; updatedb</h4><p><code>locate</code>通过数据库速查，<code>updatedb</code>手动更新数据库</p>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h4><p>查硬盘万能大法。</p>\n<p>时间参数的说明</p>\n<ul>\n<li><code>atime</code>，last access time</li>\n<li><code>ctime</code>，last change time</li>\n<li><code>mtime</code>，last modify time</li>\n</ul>\n<p>时间参数后的数字的说明</p>\n<ul>\n<li>n，表示n天前的<em>一天之内</em></li>\n<li>+n，n天之前（不包括第n天）</li>\n<li>-n，n天之内（包括第n天）</li>\n</ul>\n<p>用户参数</p>\n<ul>\n<li>-uid n</li>\n<li>-gid n</li>\n<li>-user name</li>\n<li>-group name</li>\n<li><strong>-nouser</strong></li>\n<li><strong>-nogroup</strong></li>\n</ul>\n<p>权限参数</p>\n<ul>\n<li>-name filename</li>\n<li>-size [+-]SIZE</li>\n<li>-type TYPE</li>\n<li>-perm mode 权限的精确匹配</li>\n<li>-perm -mode 必须包含某个权限</li>\n<li>-perm &#x2F;mode 包含任意某个权限</li>\n</ul>\n<p>其他操作</p>\n<ul>\n<li>-exec command 查找完之后跟的额外操作</li>\n<li>-print 默认操作，输出至屏幕</li>\n</ul>\n<p>exec举例</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> /usr/bin /usr/sbin -perm /7000 -exec <span class=\"token function\">ls</span> -l <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># exec后不可使用别名</span>\n<span class=\"token comment\"># &#123;&#125;表示find找到的内容</span>\n<span class=\"token comment\"># \\;表示结束，exec会从`-exec`后面执行到`\\;`结束</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/kon1.jpg","excerpt":"","more":"<h1 id=\"Linux目录与文件管理\"><a href=\"#Linux目录与文件管理\" class=\"headerlink\" title=\"Linux目录与文件管理\"></a>Linux目录与文件管理</h1><h2 id=\"路径\"><a href=\"#路径\" class=\"headerlink\" title=\"路径\"></a>路径</h2><h3 id=\"相对路径与绝对路径\"><a href=\"#相对路径与绝对路径\" class=\"headerlink\" title=\"相对路径与绝对路径\"></a>相对路径与绝对路径</h3><p>略</p>\n<p>快捷关键字：</p>\n<blockquote>\n<p>.    表示此层目录、</p>\n<p>..    上层</p>\n<p>-    前一个工作目录</p>\n<p>~[user]    某个用户的家目录</p>\n<p>​    空白也可表示自己的家目录 </p>\n</blockquote>\n<h2 id=\"PATH\"><a href=\"#PATH\" class=\"headerlink\" title=\"$PATH\"></a>$PATH</h2><p>添加方式：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$&#123;<span class=\"token environment constant\">PATH</span>&#125;</span>:/directory\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"目录相关操作\"><a href=\"#目录相关操作\" class=\"headerlink\" title=\"目录相关操作\"></a>目录相关操作</h2><ul>\n<li>cd</li>\n<li>pwd -P：表示真实地址，而非链接地址</li>\n<li>mkdir<ul>\n<li>-m 设置文件权限</li>\n<li>-p 递归创建</li>\n</ul>\n</li>\n<li>rmdir<ul>\n<li>-p 连同上层空目录一起删除</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"文件相关操作\"><a href=\"#文件相关操作\" class=\"headerlink\" title=\"文件相关操作\"></a>文件相关操作</h2><h3 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h3><p>略</p>\n<h3 id=\"cp-rm-mv\"><a href=\"#cp-rm-mv\" class=\"headerlink\" title=\"cp rm mv\"></a>cp rm mv</h3><h4 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>选项</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a -dr –preserve-all</td>\n<td>复制所有属性</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>若存在，询问是否覆盖</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>硬链接，相应的s为symbolic link</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>带权限赋值</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>递归赋值，用于文件夹赋值</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>更新式复制，当destination比source旧才复制</td>\n</tr>\n</tbody></table>\n<p>还有一点，如果cp的source有两个以上，destination一定要是目录。</p>\n<h4 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>选项</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-f</td>\n<td>force</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>询问</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>递归</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>verbose</td>\n</tr>\n</tbody></table>\n<p>来自rm的man page：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">To remove a <span class=\"token function\">file</span> whose name starts with a <span class=\"token string\">'-'</span>, <span class=\"token keyword\">for</span> example <span class=\"token string\">'-foo'</span>, use one of these commands:\n\n       <span class=\"token function\">rm</span> -- -foo\n\n       <span class=\"token function\">rm</span> ./-foo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中–可以告诉parser，后面的东西不是option，而是arguments</p>\n<h4 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h4><p>同cp</p>\n<p><strong>注</strong>：rename可用于给多个文件重命名，以下为<code>man page</code>，大概是做匹配然后替换，但是rename有两个版本，C语言版使用通配符匹配，perl版本使用正则表达式匹配。可以使用<code>rename --verson</code>查看具体版本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">SYNOPSIS\n       <span class=\"token function\">rename</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> expression replacement file<span class=\"token punctuation\">..</span>.\n\nDESCRIPTION\n       <span class=\"token function\">rename</span>  will  <span class=\"token function\">rename</span>  the  specified  files  by  replacing the first occurrence of expression <span class=\"token keyword\">in</span> their name by\n       replacement.\n\nOPTIONS\n       -s, --symlink\n              Do not <span class=\"token function\">rename</span> a symlink but its target.\n\n       -v, --verbose\n              Show <span class=\"token function\">which</span> files where renamed, <span class=\"token keyword\">if</span> any.\n\n       -n, --no-act\n              Do not <span class=\"token function\">make</span> any changes.\n\n       -o, --no-overwrite\n              Do not overwrite existing files.\n\n       -V, --version\n              Display version information and exit.\n\n       -h, --help\n              Display <span class=\"token builtin class-name\">help</span> text and <span class=\"token builtin class-name\">exit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">区分方法: <span class=\"token function\">rename</span> --version\n\n如果返回结果中包含 util-linux , 说明是 C 语言版本, 反之是 Perl 版本<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"获取文件名和目录名\"><a href=\"#获取文件名和目录名\" class=\"headerlink\" title=\"获取文件名和目录名\"></a>获取文件名和目录名</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">basename</span> /etc/sysconfig/network\nnetwork\n$ <span class=\"token function\">dirname</span> /etc/sysconfig/network\n/etc/sysconfig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"查看文件内容\"><a href=\"#查看文件内容\" class=\"headerlink\" title=\"查看文件内容\"></a>查看文件内容</h2><h3 id=\"直接查看\"><a href=\"#直接查看\" class=\"headerlink\" title=\"直接查看\"></a>直接查看</h3><h4 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h4><p>concatenate（串联）：正向全部显示</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>选项</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-n</td>\n<td>打印行号</td>\n</tr>\n<tr>\n<td>-T</td>\n<td>显示tab键</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示看不出来的特殊字符</td>\n</tr>\n<tr>\n<td>-A</td>\n<td>相当于-vET</td>\n</tr>\n<tr>\n<td>-E</td>\n<td>显示换行符</td>\n</tr>\n</tbody></table>\n<h4 id=\"tac\"><a href=\"#tac\" class=\"headerlink\" title=\"tac\"></a>tac</h4><p>cat的反向</p>\n<h4 id=\"nl\"><a href=\"#nl\" class=\"headerlink\" title=\"nl\"></a>nl</h4><p>添加行号打印</p>\n<h3 id=\"可翻页查看\"><a href=\"#可翻页查看\" class=\"headerlink\" title=\"可翻页查看\"></a>可翻页查看</h3><h4 id=\"more\"><a href=\"#more\" class=\"headerlink\" title=\"more\"></a>more</h4><p>vim操作模式，只能向后翻页</p>\n<h4 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a>less</h4><p>vim操作模式，更灵活</p>\n<h3 id=\"数据截取\"><a href=\"#数据截取\" class=\"headerlink\" title=\"数据截取\"></a>数据截取</h3><h4 id=\"head\"><a href=\"#head\" class=\"headerlink\" title=\"head\"></a>head</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">head</span> -n <span class=\"token punctuation\">[</span>行数<span class=\"token punctuation\">]</span> 文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"tail\"></a>tail</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tail</span> -n <span class=\"token punctuation\">[</span>行数<span class=\"token punctuation\">]</span> 文件 <span class=\"token punctuation\">[</span>-f<span class=\"token punctuation\">]</span> <span class=\"token comment\"># f表示持续刷新</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"非纯文本文件\"><a href=\"#非纯文本文件\" class=\"headerlink\" title=\"非纯文本文件\"></a>非纯文本文件</h3><h4 id=\"od\"><a href=\"#od\" class=\"headerlink\" title=\"od\"></a>od</h4><p>略了吧，没人会看二进制的</p>\n<h3 id=\"修改文件时间or建立新文件\"><a href=\"#修改文件时间or建立新文件\" class=\"headerlink\" title=\"修改文件时间or建立新文件\"></a>修改文件时间or建立新文件</h3><p>touch</p>\n<p>略了吧，一年到头改不了几次</p>\n<h2 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h2><h3 id=\"默认权限\"><a href=\"#默认权限\" class=\"headerlink\" title=\"默认权限\"></a>默认权限</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">umask</span> <span class=\"token punctuation\">[</span>-S<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 查看默认权限</span>\n<span class=\"token builtin class-name\">umask</span> 002 <span class=\"token comment\"># 修改默认权限,这里的数字表示被拿走的权限</span>\n<span class=\"token comment\">#而默认情况下，文件不会有x权限，文件夹一定有x权限</span>\n<span class=\"token comment\">#即文件为-rw-rw-rw，目录为drwxrwxrwx</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"隐藏属性\"><a href=\"#隐藏属性\" class=\"headerlink\" title=\"隐藏属性\"></a>隐藏属性</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lsattr <span class=\"token comment\"># 显示文件隐藏属性</span>\nchattr <span class=\"token comment\"># 修改文件隐藏属性</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>一些隐藏属性</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>该文件只能增加，不能删除或修改数据</td>\n</tr>\n<tr>\n<td>i</td>\n<td>该文件不能被删除，改名，设置链接或写入数据</td>\n</tr>\n<tr>\n<td>s与u</td>\n<td>s是该文件被删除后将彻底删除，无法找回，u相反</td>\n</tr>\n</tbody></table>\n<h3 id=\"特殊权限\"><a href=\"#特殊权限\" class=\"headerlink\" title=\"特殊权限\"></a>特殊权限</h3><h4 id=\"SUID–Set-UID\"><a href=\"#SUID–Set-UID\" class=\"headerlink\" title=\"SUID–Set UID\"></a>SUID–Set UID</h4><ul>\n<li>只能用于binary</li>\n<li>执行者要拥有该文件的x权限</li>\n<li>执行者执行该文件时会获得该文件的owner的权限</li>\n<li>举例：&#x2F;usr&#x2F;bin&#x2F;passwd（权限为<code>-rwsr-xr-x</code>）</li>\n</ul>\n<h4 id=\"SGID–Set-GID\"><a href=\"#SGID–Set-GID\" class=\"headerlink\" title=\"SGID–Set GID\"></a>SGID–Set GID</h4><p>同上，不过</p>\n<ul>\n<li>获得的是该文件group的权限</li>\n<li>可用于目录和binary</li>\n<li>举例：&#x2F;usr&#x2F;bin&#x2F;locate（权限为<code>-rwx--s--x</code>）</li>\n</ul>\n<h4 id=\"SBIT–Sticky-Bit\"><a href=\"#SBIT–Sticky-Bit\" class=\"headerlink\" title=\"SBIT–Sticky Bit\"></a>SBIT–Sticky Bit</h4><ul>\n<li>只对目录有效</li>\n<li>当用户对该目录有r和x权限，就自动拥有该目录内的w权限</li>\n<li>当用户在该目录下建立文件或目录的时候，只有自己和root有权限删除该文件</li>\n<li>举例：&#x2F;tmp（权限为<code>drwxrwxrwt</code>）</li>\n</ul>\n<h4 id=\"特殊权限的设置\"><a href=\"#特殊权限的设置\" class=\"headerlink\" title=\"特殊权限的设置\"></a>特殊权限的设置</h4><p>以上三者也遵循421，举例：<code>chmod 4755 filename</code></p>\n<h4 id=\"查看文件类型\"><a href=\"#查看文件类型\" class=\"headerlink\" title=\"查看文件类型\"></a>查看文件类型</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">file</span> filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"命令与文件的查找\"><a href=\"#命令与文件的查找\" class=\"headerlink\" title=\"命令与文件的查找\"></a>命令与文件的查找</h2><h3 id=\"命令的查找\"><a href=\"#命令的查找\" class=\"headerlink\" title=\"命令的查找\"></a>命令的查找</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">which</span> <span class=\"token punctuation\">[</span>-a<span class=\"token punctuation\">]</span> <span class=\"token builtin class-name\">command</span> <span class=\"token comment\"># -a 表示列出所有PATH中的该命令</span>\n<span class=\"token function\">which</span> <span class=\"token function\">history</span> <span class=\"token comment\"># 找不到history，因为这是bash的内置命令，只能用type来</span>\n<span class=\"token builtin class-name\">type</span> <span class=\"token builtin class-name\">command</span> <span class=\"token comment\"># 后面会说</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"文件的查找\"><a href=\"#文件的查找\" class=\"headerlink\" title=\"文件的查找\"></a>文件的查找</h3><h4 id=\"whereis\"><a href=\"#whereis\" class=\"headerlink\" title=\"whereis\"></a>whereis</h4><p>速查重要目录，可用<code>whereis -l</code>查看去找的主要目录</p>\n<h4 id=\"locate-x2F-updatedb\"><a href=\"#locate-x2F-updatedb\" class=\"headerlink\" title=\"locate &#x2F; updatedb\"></a>locate &#x2F; updatedb</h4><p><code>locate</code>通过数据库速查，<code>updatedb</code>手动更新数据库</p>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h4><p>查硬盘万能大法。</p>\n<p>时间参数的说明</p>\n<ul>\n<li><code>atime</code>，last access time</li>\n<li><code>ctime</code>，last change time</li>\n<li><code>mtime</code>，last modify time</li>\n</ul>\n<p>时间参数后的数字的说明</p>\n<ul>\n<li>n，表示n天前的<em>一天之内</em></li>\n<li>+n，n天之前（不包括第n天）</li>\n<li>-n，n天之内（包括第n天）</li>\n</ul>\n<p>用户参数</p>\n<ul>\n<li>-uid n</li>\n<li>-gid n</li>\n<li>-user name</li>\n<li>-group name</li>\n<li><strong>-nouser</strong></li>\n<li><strong>-nogroup</strong></li>\n</ul>\n<p>权限参数</p>\n<ul>\n<li>-name filename</li>\n<li>-size [+-]SIZE</li>\n<li>-type TYPE</li>\n<li>-perm mode 权限的精确匹配</li>\n<li>-perm -mode 必须包含某个权限</li>\n<li>-perm &#x2F;mode 包含任意某个权限</li>\n</ul>\n<p>其他操作</p>\n<ul>\n<li>-exec command 查找完之后跟的额外操作</li>\n<li>-print 默认操作，输出至屏幕</li>\n</ul>\n<p>exec举例</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> /usr/bin /usr/sbin -perm /7000 -exec <span class=\"token function\">ls</span> -l <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># exec后不可使用别名</span>\n<span class=\"token comment\"># &#123;&#125;表示find找到的内容</span>\n<span class=\"token comment\"># \\;表示结束，exec会从`-exec`后面执行到`\\;`结束</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"重学linux（4）","abbrlink":"78c8d142","date":"2022-01-23T05:30:52.000Z","_content":"\n# 文件与文件系统的压缩\n\n## 命名规范\n\n| 后缀     | 含义                          |\n| -------- | ----------------------------- |\n| .Z       | compress压缩程序压缩的文件    |\n| .zip     | zip                           |\n| .gz      | gzip                          |\n| .bz2     | bzip2                         |\n| .xz      | xz                            |\n| .tar     | tar程序打包的文件，没有压缩过 |\n| .tar.gz  | tar打包，gzip压缩             |\n| .tar.bz2 | tar打包，bzip2压缩            |\n| .tar.xz  | tar打包，xz压缩               |\n\n## 压缩与解压缩\n\n### gzip\n\n向下兼容compress软件\n\n```bash\n# gzip [-cdtv#] filename\ngzip -v -9 filename # 以最高压缩比压缩并显示信息，压缩比1~9，直接压缩会替换掉源文件\ngzip -d *.gz # 解压缩，直接解压缩会替换掉原压缩文件\n\n# zcat/zmore/zless *.gz\nzcat *.gz # 都可以尝试读取\n\n# 其他的一些指令\nzcmp # 解压文件并且 byte by byte 比较两个文件\nzdiff # 解压文件并且 line by line 比较两个文件\nzgrep # 解压文件并且根据正则搜索文件内容\nztest # Tests integrity of compressed files.\nzupdate # Recompresses files to lzip format.\n```\n\n### bzip2\n\n比gzip压缩比更好，用法和gzip完全一致，除了文件名末尾变为bz2。\n\n### xz\n\n比bzip2压缩比更好，用法和gzip完全一致，除了文件名末尾变为bz2。\n\n## 打包\n\n### tar\n\n| 参数 | 含义                          |\n| ---- | ----------------------------- |\n| -c   | 打包文件                      |\n| -t   | 查看打包文件的文件名          |\n| -x   | 解压缩                        |\n| -z   | 通过gzip解压，适用于*.tar.gz  |\n| -j   | 通过bzip解压，适用于*.tar.bz2 |\n| -J   | 通过xz解压，适用于*.tar.xz    |\n| -f   | 指定文件名                    |\n| -p   | 保留权限与属性等信息          |\n| -P   | 保留绝对路径                  |\n\n**注**：-c，-t，-x不可同时出现\n\n```bash\n# 常用\ntar -jcv -f filename.tar.bz2 # 压缩\ntar -jtv -f filename.tar.bz2 # 查看\ntar -jxvf filename.tar.bz2 # 解压缩\n\n# 关于-p -P选项\ntar -jpcvf /root/etc.tar.bz2 /etc # 先打包整个/etc目录\ntar -jtf /root/etc.tar.bz2\n-rw-r--r-- root/root 131 2022-01-24 10:30 etc/locale.conf # 里面的文件都被移除了根目录，这样解压时就不会被放回原来的目录，如果将p选项改为P，则会保留根目录\n\n## 只解压解压包中某个文件的做法\ntar -jtvf *.tar.bz2 filename\n```\n\n## xfs文件系统备份\n\n- 完整备份\n- 增量备份\n\n### xfsdump\n\n一些限制条件\n\n- xfsdump不支持没有挂载的文件系统备份\n- 需要root权限\n- 只能备份完整的xfs\n- 备份后的数据只能让`xfsrestore`\n- 文件UUID不能相同\n\n```bash\n# xfsdump [-L S_label] [-M M_label] [-l #] [-f 备份文件] data\nxfsdump -I # 查看已有的备份信息\nxfsdump -l 1 ... # 使用level来完成增量备份\n```\n\n### xfsrestore\n\n```bash\n# xfsrestore [-L S_label] [-f 备份文件] directory\nxfsrestore -I\n```\n\n## 光盘写入工具\n\n### mkisofs\n\n```bash\n# mkisofs [-o isoname] filename/directory_name\n```\n\n| 选项         | 含义                            |\n| ------------ | ------------------------------- |\n| -o           | 镜像名                          |\n| -r           | 记录更多信息，包括UID/GID和权限 |\n| -V           | 建立卷标                        |\n| -J           | 产生兼容windows的文件名结构     |\n| -graft-point | 好东西，分类镜像必备            |\n\n怀疑书上的刻录过程可能过于古老了，遇到这样的任务再说。\n\n## 其他常见的压缩备份工具\n\n### dd\n\n（几乎）直接读取磁盘扇区，并备份。\n\n### cpio\n\n可以备份任何东西，但必须配合find来备份\n","source":"_posts/Operation/重学linux（4）.md","raw":"---\ntitle: 重学linux（4）\ntags:\n  - 专栏：重学linux\n  - linux\ncategories:\n  - Operation\nabbrlink: 78c8d142\ndate: 2022-01-23 13:30:52\n---\n\n# 文件与文件系统的压缩\n\n## 命名规范\n\n| 后缀     | 含义                          |\n| -------- | ----------------------------- |\n| .Z       | compress压缩程序压缩的文件    |\n| .zip     | zip                           |\n| .gz      | gzip                          |\n| .bz2     | bzip2                         |\n| .xz      | xz                            |\n| .tar     | tar程序打包的文件，没有压缩过 |\n| .tar.gz  | tar打包，gzip压缩             |\n| .tar.bz2 | tar打包，bzip2压缩            |\n| .tar.xz  | tar打包，xz压缩               |\n\n## 压缩与解压缩\n\n### gzip\n\n向下兼容compress软件\n\n```bash\n# gzip [-cdtv#] filename\ngzip -v -9 filename # 以最高压缩比压缩并显示信息，压缩比1~9，直接压缩会替换掉源文件\ngzip -d *.gz # 解压缩，直接解压缩会替换掉原压缩文件\n\n# zcat/zmore/zless *.gz\nzcat *.gz # 都可以尝试读取\n\n# 其他的一些指令\nzcmp # 解压文件并且 byte by byte 比较两个文件\nzdiff # 解压文件并且 line by line 比较两个文件\nzgrep # 解压文件并且根据正则搜索文件内容\nztest # Tests integrity of compressed files.\nzupdate # Recompresses files to lzip format.\n```\n\n### bzip2\n\n比gzip压缩比更好，用法和gzip完全一致，除了文件名末尾变为bz2。\n\n### xz\n\n比bzip2压缩比更好，用法和gzip完全一致，除了文件名末尾变为bz2。\n\n## 打包\n\n### tar\n\n| 参数 | 含义                          |\n| ---- | ----------------------------- |\n| -c   | 打包文件                      |\n| -t   | 查看打包文件的文件名          |\n| -x   | 解压缩                        |\n| -z   | 通过gzip解压，适用于*.tar.gz  |\n| -j   | 通过bzip解压，适用于*.tar.bz2 |\n| -J   | 通过xz解压，适用于*.tar.xz    |\n| -f   | 指定文件名                    |\n| -p   | 保留权限与属性等信息          |\n| -P   | 保留绝对路径                  |\n\n**注**：-c，-t，-x不可同时出现\n\n```bash\n# 常用\ntar -jcv -f filename.tar.bz2 # 压缩\ntar -jtv -f filename.tar.bz2 # 查看\ntar -jxvf filename.tar.bz2 # 解压缩\n\n# 关于-p -P选项\ntar -jpcvf /root/etc.tar.bz2 /etc # 先打包整个/etc目录\ntar -jtf /root/etc.tar.bz2\n-rw-r--r-- root/root 131 2022-01-24 10:30 etc/locale.conf # 里面的文件都被移除了根目录，这样解压时就不会被放回原来的目录，如果将p选项改为P，则会保留根目录\n\n## 只解压解压包中某个文件的做法\ntar -jtvf *.tar.bz2 filename\n```\n\n## xfs文件系统备份\n\n- 完整备份\n- 增量备份\n\n### xfsdump\n\n一些限制条件\n\n- xfsdump不支持没有挂载的文件系统备份\n- 需要root权限\n- 只能备份完整的xfs\n- 备份后的数据只能让`xfsrestore`\n- 文件UUID不能相同\n\n```bash\n# xfsdump [-L S_label] [-M M_label] [-l #] [-f 备份文件] data\nxfsdump -I # 查看已有的备份信息\nxfsdump -l 1 ... # 使用level来完成增量备份\n```\n\n### xfsrestore\n\n```bash\n# xfsrestore [-L S_label] [-f 备份文件] directory\nxfsrestore -I\n```\n\n## 光盘写入工具\n\n### mkisofs\n\n```bash\n# mkisofs [-o isoname] filename/directory_name\n```\n\n| 选项         | 含义                            |\n| ------------ | ------------------------------- |\n| -o           | 镜像名                          |\n| -r           | 记录更多信息，包括UID/GID和权限 |\n| -V           | 建立卷标                        |\n| -J           | 产生兼容windows的文件名结构     |\n| -graft-point | 好东西，分类镜像必备            |\n\n怀疑书上的刻录过程可能过于古老了，遇到这样的任务再说。\n\n## 其他常见的压缩备份工具\n\n### dd\n\n（几乎）直接读取磁盘扇区，并备份。\n\n### cpio\n\n可以备份任何东西，但必须配合find来备份\n","slug":"重学linux（4）","published":1,"category":"Operation","updated":"2022-02-11T05:17:56.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxj00248wulavp91zsb","content":"<h1 id=\"文件与文件系统的压缩\"><a href=\"#文件与文件系统的压缩\" class=\"headerlink\" title=\"文件与文件系统的压缩\"></a>文件与文件系统的压缩</h1><h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><table>\n<thead>\n<tr>\n<th>后缀</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.Z</td>\n<td>compress压缩程序压缩的文件</td>\n</tr>\n<tr>\n<td>.zip</td>\n<td>zip</td>\n</tr>\n<tr>\n<td>.gz</td>\n<td>gzip</td>\n</tr>\n<tr>\n<td>.bz2</td>\n<td>bzip2</td>\n</tr>\n<tr>\n<td>.xz</td>\n<td>xz</td>\n</tr>\n<tr>\n<td>.tar</td>\n<td>tar程序打包的文件，没有压缩过</td>\n</tr>\n<tr>\n<td>.tar.gz</td>\n<td>tar打包，gzip压缩</td>\n</tr>\n<tr>\n<td>.tar.bz2</td>\n<td>tar打包，bzip2压缩</td>\n</tr>\n<tr>\n<td>.tar.xz</td>\n<td>tar打包，xz压缩</td>\n</tr>\n</tbody></table>\n<h2 id=\"压缩与解压缩\"><a href=\"#压缩与解压缩\" class=\"headerlink\" title=\"压缩与解压缩\"></a>压缩与解压缩</h2><h3 id=\"gzip\"><a href=\"#gzip\" class=\"headerlink\" title=\"gzip\"></a>gzip</h3><p>向下兼容compress软件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># gzip [-cdtv#] filename</span>\n<span class=\"token function\">gzip</span> -v -9 filename <span class=\"token comment\"># 以最高压缩比压缩并显示信息，压缩比1~9，直接压缩会替换掉源文件</span>\n<span class=\"token function\">gzip</span> -d *.gz <span class=\"token comment\"># 解压缩，直接解压缩会替换掉原压缩文件</span>\n\n<span class=\"token comment\"># zcat/zmore/zless *.gz</span>\nzcat *.gz <span class=\"token comment\"># 都可以尝试读取</span>\n\n<span class=\"token comment\"># 其他的一些指令</span>\nzcmp <span class=\"token comment\"># 解压文件并且 byte by byte 比较两个文件</span>\nzdiff <span class=\"token comment\"># 解压文件并且 line by line 比较两个文件</span>\nzgrep <span class=\"token comment\"># 解压文件并且根据正则搜索文件内容</span>\nztest <span class=\"token comment\"># Tests integrity of compressed files.</span>\nzupdate <span class=\"token comment\"># Recompresses files to lzip format.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"bzip2\"><a href=\"#bzip2\" class=\"headerlink\" title=\"bzip2\"></a>bzip2</h3><p>比gzip压缩比更好，用法和gzip完全一致，除了文件名末尾变为bz2。</p>\n<h3 id=\"xz\"><a href=\"#xz\" class=\"headerlink\" title=\"xz\"></a>xz</h3><p>比bzip2压缩比更好，用法和gzip完全一致，除了文件名末尾变为bz2。</p>\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><h3 id=\"tar\"><a href=\"#tar\" class=\"headerlink\" title=\"tar\"></a>tar</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-c</td>\n<td>打包文件</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>查看打包文件的文件名</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>解压缩</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>通过gzip解压，适用于*.tar.gz</td>\n</tr>\n<tr>\n<td>-j</td>\n<td>通过bzip解压，适用于*.tar.bz2</td>\n</tr>\n<tr>\n<td>-J</td>\n<td>通过xz解压，适用于*.tar.xz</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>指定文件名</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>保留权限与属性等信息</td>\n</tr>\n<tr>\n<td>-P</td>\n<td>保留绝对路径</td>\n</tr>\n</tbody></table>\n<p><strong>注</strong>：-c，-t，-x不可同时出现</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 常用</span>\n<span class=\"token function\">tar</span> -jcv -f filename.tar.bz2 <span class=\"token comment\"># 压缩</span>\n<span class=\"token function\">tar</span> -jtv -f filename.tar.bz2 <span class=\"token comment\"># 查看</span>\n<span class=\"token function\">tar</span> -jxvf filename.tar.bz2 <span class=\"token comment\"># 解压缩</span>\n\n<span class=\"token comment\"># 关于-p -P选项</span>\n<span class=\"token function\">tar</span> -jpcvf /root/etc.tar.bz2 /etc <span class=\"token comment\"># 先打包整个/etc目录</span>\n<span class=\"token function\">tar</span> -jtf /root/etc.tar.bz2\n-rw-r--r-- root/root <span class=\"token number\">131</span> <span class=\"token number\">2022</span>-01-24 <span class=\"token number\">10</span>:30 etc/locale.conf <span class=\"token comment\"># 里面的文件都被移除了根目录，这样解压时就不会被放回原来的目录，如果将p选项改为P，则会保留根目录</span>\n\n<span class=\"token comment\">## 只解压解压包中某个文件的做法</span>\n<span class=\"token function\">tar</span> -jtvf *.tar.bz2 filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"xfs文件系统备份\"><a href=\"#xfs文件系统备份\" class=\"headerlink\" title=\"xfs文件系统备份\"></a>xfs文件系统备份</h2><ul>\n<li>完整备份</li>\n<li>增量备份</li>\n</ul>\n<h3 id=\"xfsdump\"><a href=\"#xfsdump\" class=\"headerlink\" title=\"xfsdump\"></a>xfsdump</h3><p>一些限制条件</p>\n<ul>\n<li>xfsdump不支持没有挂载的文件系统备份</li>\n<li>需要root权限</li>\n<li>只能备份完整的xfs</li>\n<li>备份后的数据只能让<code>xfsrestore</code></li>\n<li>文件UUID不能相同</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># xfsdump [-L S_label] [-M M_label] [-l #] [-f 备份文件] data</span>\nxfsdump -I <span class=\"token comment\"># 查看已有的备份信息</span>\nxfsdump -l <span class=\"token number\">1</span> <span class=\"token punctuation\">..</span>. <span class=\"token comment\"># 使用level来完成增量备份</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"xfsrestore\"><a href=\"#xfsrestore\" class=\"headerlink\" title=\"xfsrestore\"></a>xfsrestore</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># xfsrestore [-L S_label] [-f 备份文件] directory</span>\nxfsrestore -I<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"光盘写入工具\"><a href=\"#光盘写入工具\" class=\"headerlink\" title=\"光盘写入工具\"></a>光盘写入工具</h2><h3 id=\"mkisofs\"><a href=\"#mkisofs\" class=\"headerlink\" title=\"mkisofs\"></a>mkisofs</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># mkisofs [-o isoname] filename/directory_name</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-o</td>\n<td>镜像名</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>记录更多信息，包括UID&#x2F;GID和权限</td>\n</tr>\n<tr>\n<td>-V</td>\n<td>建立卷标</td>\n</tr>\n<tr>\n<td>-J</td>\n<td>产生兼容windows的文件名结构</td>\n</tr>\n<tr>\n<td>-graft-point</td>\n<td>好东西，分类镜像必备</td>\n</tr>\n</tbody></table>\n<p>怀疑书上的刻录过程可能过于古老了，遇到这样的任务再说。</p>\n<h2 id=\"其他常见的压缩备份工具\"><a href=\"#其他常见的压缩备份工具\" class=\"headerlink\" title=\"其他常见的压缩备份工具\"></a>其他常见的压缩备份工具</h2><h3 id=\"dd\"><a href=\"#dd\" class=\"headerlink\" title=\"dd\"></a>dd</h3><p>（几乎）直接读取磁盘扇区，并备份。</p>\n<h3 id=\"cpio\"><a href=\"#cpio\" class=\"headerlink\" title=\"cpio\"></a>cpio</h3><p>可以备份任何东西，但必须配合find来备份</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/chaopao3.jpg","excerpt":"","more":"<h1 id=\"文件与文件系统的压缩\"><a href=\"#文件与文件系统的压缩\" class=\"headerlink\" title=\"文件与文件系统的压缩\"></a>文件与文件系统的压缩</h1><h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><table>\n<thead>\n<tr>\n<th>后缀</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.Z</td>\n<td>compress压缩程序压缩的文件</td>\n</tr>\n<tr>\n<td>.zip</td>\n<td>zip</td>\n</tr>\n<tr>\n<td>.gz</td>\n<td>gzip</td>\n</tr>\n<tr>\n<td>.bz2</td>\n<td>bzip2</td>\n</tr>\n<tr>\n<td>.xz</td>\n<td>xz</td>\n</tr>\n<tr>\n<td>.tar</td>\n<td>tar程序打包的文件，没有压缩过</td>\n</tr>\n<tr>\n<td>.tar.gz</td>\n<td>tar打包，gzip压缩</td>\n</tr>\n<tr>\n<td>.tar.bz2</td>\n<td>tar打包，bzip2压缩</td>\n</tr>\n<tr>\n<td>.tar.xz</td>\n<td>tar打包，xz压缩</td>\n</tr>\n</tbody></table>\n<h2 id=\"压缩与解压缩\"><a href=\"#压缩与解压缩\" class=\"headerlink\" title=\"压缩与解压缩\"></a>压缩与解压缩</h2><h3 id=\"gzip\"><a href=\"#gzip\" class=\"headerlink\" title=\"gzip\"></a>gzip</h3><p>向下兼容compress软件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># gzip [-cdtv#] filename</span>\n<span class=\"token function\">gzip</span> -v -9 filename <span class=\"token comment\"># 以最高压缩比压缩并显示信息，压缩比1~9，直接压缩会替换掉源文件</span>\n<span class=\"token function\">gzip</span> -d *.gz <span class=\"token comment\"># 解压缩，直接解压缩会替换掉原压缩文件</span>\n\n<span class=\"token comment\"># zcat/zmore/zless *.gz</span>\nzcat *.gz <span class=\"token comment\"># 都可以尝试读取</span>\n\n<span class=\"token comment\"># 其他的一些指令</span>\nzcmp <span class=\"token comment\"># 解压文件并且 byte by byte 比较两个文件</span>\nzdiff <span class=\"token comment\"># 解压文件并且 line by line 比较两个文件</span>\nzgrep <span class=\"token comment\"># 解压文件并且根据正则搜索文件内容</span>\nztest <span class=\"token comment\"># Tests integrity of compressed files.</span>\nzupdate <span class=\"token comment\"># Recompresses files to lzip format.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"bzip2\"><a href=\"#bzip2\" class=\"headerlink\" title=\"bzip2\"></a>bzip2</h3><p>比gzip压缩比更好，用法和gzip完全一致，除了文件名末尾变为bz2。</p>\n<h3 id=\"xz\"><a href=\"#xz\" class=\"headerlink\" title=\"xz\"></a>xz</h3><p>比bzip2压缩比更好，用法和gzip完全一致，除了文件名末尾变为bz2。</p>\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><h3 id=\"tar\"><a href=\"#tar\" class=\"headerlink\" title=\"tar\"></a>tar</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-c</td>\n<td>打包文件</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>查看打包文件的文件名</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>解压缩</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>通过gzip解压，适用于*.tar.gz</td>\n</tr>\n<tr>\n<td>-j</td>\n<td>通过bzip解压，适用于*.tar.bz2</td>\n</tr>\n<tr>\n<td>-J</td>\n<td>通过xz解压，适用于*.tar.xz</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>指定文件名</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>保留权限与属性等信息</td>\n</tr>\n<tr>\n<td>-P</td>\n<td>保留绝对路径</td>\n</tr>\n</tbody></table>\n<p><strong>注</strong>：-c，-t，-x不可同时出现</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 常用</span>\n<span class=\"token function\">tar</span> -jcv -f filename.tar.bz2 <span class=\"token comment\"># 压缩</span>\n<span class=\"token function\">tar</span> -jtv -f filename.tar.bz2 <span class=\"token comment\"># 查看</span>\n<span class=\"token function\">tar</span> -jxvf filename.tar.bz2 <span class=\"token comment\"># 解压缩</span>\n\n<span class=\"token comment\"># 关于-p -P选项</span>\n<span class=\"token function\">tar</span> -jpcvf /root/etc.tar.bz2 /etc <span class=\"token comment\"># 先打包整个/etc目录</span>\n<span class=\"token function\">tar</span> -jtf /root/etc.tar.bz2\n-rw-r--r-- root/root <span class=\"token number\">131</span> <span class=\"token number\">2022</span>-01-24 <span class=\"token number\">10</span>:30 etc/locale.conf <span class=\"token comment\"># 里面的文件都被移除了根目录，这样解压时就不会被放回原来的目录，如果将p选项改为P，则会保留根目录</span>\n\n<span class=\"token comment\">## 只解压解压包中某个文件的做法</span>\n<span class=\"token function\">tar</span> -jtvf *.tar.bz2 filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"xfs文件系统备份\"><a href=\"#xfs文件系统备份\" class=\"headerlink\" title=\"xfs文件系统备份\"></a>xfs文件系统备份</h2><ul>\n<li>完整备份</li>\n<li>增量备份</li>\n</ul>\n<h3 id=\"xfsdump\"><a href=\"#xfsdump\" class=\"headerlink\" title=\"xfsdump\"></a>xfsdump</h3><p>一些限制条件</p>\n<ul>\n<li>xfsdump不支持没有挂载的文件系统备份</li>\n<li>需要root权限</li>\n<li>只能备份完整的xfs</li>\n<li>备份后的数据只能让<code>xfsrestore</code></li>\n<li>文件UUID不能相同</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># xfsdump [-L S_label] [-M M_label] [-l #] [-f 备份文件] data</span>\nxfsdump -I <span class=\"token comment\"># 查看已有的备份信息</span>\nxfsdump -l <span class=\"token number\">1</span> <span class=\"token punctuation\">..</span>. <span class=\"token comment\"># 使用level来完成增量备份</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"xfsrestore\"><a href=\"#xfsrestore\" class=\"headerlink\" title=\"xfsrestore\"></a>xfsrestore</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># xfsrestore [-L S_label] [-f 备份文件] directory</span>\nxfsrestore -I<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"光盘写入工具\"><a href=\"#光盘写入工具\" class=\"headerlink\" title=\"光盘写入工具\"></a>光盘写入工具</h2><h3 id=\"mkisofs\"><a href=\"#mkisofs\" class=\"headerlink\" title=\"mkisofs\"></a>mkisofs</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># mkisofs [-o isoname] filename/directory_name</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-o</td>\n<td>镜像名</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>记录更多信息，包括UID&#x2F;GID和权限</td>\n</tr>\n<tr>\n<td>-V</td>\n<td>建立卷标</td>\n</tr>\n<tr>\n<td>-J</td>\n<td>产生兼容windows的文件名结构</td>\n</tr>\n<tr>\n<td>-graft-point</td>\n<td>好东西，分类镜像必备</td>\n</tr>\n</tbody></table>\n<p>怀疑书上的刻录过程可能过于古老了，遇到这样的任务再说。</p>\n<h2 id=\"其他常见的压缩备份工具\"><a href=\"#其他常见的压缩备份工具\" class=\"headerlink\" title=\"其他常见的压缩备份工具\"></a>其他常见的压缩备份工具</h2><h3 id=\"dd\"><a href=\"#dd\" class=\"headerlink\" title=\"dd\"></a>dd</h3><p>（几乎）直接读取磁盘扇区，并备份。</p>\n<h3 id=\"cpio\"><a href=\"#cpio\" class=\"headerlink\" title=\"cpio\"></a>cpio</h3><p>可以备份任何东西，但必须配合find来备份</p>\n"},{"title":"重学linux（3）.md","abbrlink":"ec3bdbd7","date":"2022-01-21T01:48:31.000Z","_content":"\n# Linux磁盘与文件系统管理\n\n## 磁盘与分区\n\n命名：\n\n- /dev/sa\\[a-p\\]\\[1-128\\]：物理磁盘的文件名\n- /dev/sa\\[a-d]\\[1-128\\]：虚拟磁盘的文件名\n\n## 文件系统特性\n\n### 索引式文件系统：FAT、ext2\n\n- superblock：记录文件系统的整体信息\n- inode：记录文件的属性\n- data block：实际记录文件的内容\n\next系列可以使用`dumpe2fs [dev]`来观测`superblock`。\n\nxfs系统可以使用`xfs_info`\n\n### 日志式文件系统\n\n解决故障时存放数据与记录数据不一致的问题\n\n查看linux支持的文件系统`cat /proc/filesystems`\n\n## 文件系统的简单操作\n\n### df du\n\n### ln\n\n硬链接不能对文件夹使用\n\n## 磁盘的分区、格式化、检验与挂载\n\n### 分区\n\n#### 查看分区信息\n\n查看所有的磁盘`lsblk`\n\n查看UUID（universally unique identifier）`blkid`\n\n查看磁盘的分区信息`parted device_name print`\n\n**注**：MBR使用fdisk分区，GPT使用gdisk分区\n\n#### 添加分区\n\n```bash\ngdisk the_device\np # 查看磁盘目前的状态\nn # 开始新增分区\n4 # partion number（第n个分区）\n65026048 # first sector，某个inode的值\n+1G # last sector，可以和上面一样输入某个inode，但更好的方式是输入+xG让软件自行计算，默认为用完所有容量\nL # 或l，查看分区使用的文件系统\n8300 # 默认的Linux 文件系统，其他值在上面可以看到\nw # 确定分区\npartprobe -s # 更新linux内核的分区表信息\n```\n\n#### 删除分区\n\n```bash\nfdisk the_device\nd\n```\n\n#### fdisk与gdisk的区别\n\n- fdisk通过m查看帮助，gdisk通过？\n- fdisk面向小磁盘，处理MBR分区表，gdisk面向更大的磁盘，处理GPT分区表\n\n其他注意：不要删除正在使用的分区，要先unmount\n\n### 格式化\n\n```bash\n# mkfs\nmkfs.xfs device #格式化为xfs文件系统\nmkfs.ext4 device # 格式化为ext4\n```\n\n| 参数 | 内容                                    |\n| ---- | --------------------------------------- |\n| -b   | 区块容量，512到64k，最大限制为linux的4k |\n| -L   | 文件系统标头的名称，Label name          |\n| -f   | 强制格式化                              |\n\next4的默认配置位于`/etc/mke2fs.conf`中 \n\n#### 格式化中的调优\n\n- agcount：按照cpu的线程数来确定，`grep processor | /proc/cpuinfo`\n- stripe：阵列里有特殊优化\n- sw：整列中盘数-1\n- extsize：数据宽度（swidth）stripe\\*sw\n\n### 校验\n\n- xfs：`xfs_repair`\n- ext4：`fsck.ext4`\n\n### 挂载\n\n ```bash\n # mount\n mount [-t filesystem] LABEL='' mount_point\n mount UUID='' mount_point\n mount device_name mount_point\n \n mount -o remount,rm,auto / # 重新挂载根目录\n ```\n\n```bash\n# umount\numount device_name\numount mount_point\n```\n\n#### 修改硬件类型\n\nlinux中一切皆文件，而设备使用两个数字来表示其类型\n\n- major：主要设备代码\n- minor：次要设备代码\n\n使用`mknod`修改设备类型\n\n```bash\nmknod device [bcp] [Major] [Minor]\n```\n\n#### 添加文件系统的UUID和Label\n\n- xfs：使用`xfs_admin`\n- ext4：使用`tune2fs`\n\n**注**：为什么要使用UUID来进行挂载而不是简单的使用设备文件名?因为你无法保证该设备在所有linux系统中都有相同的文件名。\n\n## 设置启动挂载\n\n 修改以下文件，参数在文件中会有注释说明的\n\n- `/etc/fstab`：普通硬盘挂载等\n- `/etc/mtab`：让镜像文件在不刻录的情况下读取，使用loop挂载\n\n## swap分区\n\n#### 使用物理分区\n\n1. 先分一块区出来\n2. `mkswap device`\n3. `free`看一眼成了 没\n\n#### 使用文件\n\n1. `dd`建立一个空的大文件\n2. `mkswap filename`\n3. 同上\n\n*注*：dd在后面讲\n\n## parted分区\n\n```bash\n# parted [device] [command[arguments]]\n# command\n# \tmkpart [primary|logical|Extended] [ext4|vfat|xfs] start end\n#\tprint\n#\trm [partition]\n# notice: start end use capacity(default MB) as unit\nparted /dev/vda mkpart primary fat32 36.0GB 36.5GB\n```\n\n","source":"_posts/Operation/重学linux（3）.md","raw":"---\ntitle: 重学linux（3）.md\ntags:\n  - 专栏：重学linux\n  - linux\ncategories:\n  - Operation\nabbrlink: ec3bdbd7\ndate: 2022-01-21 09:48:31\n---\n\n# Linux磁盘与文件系统管理\n\n## 磁盘与分区\n\n命名：\n\n- /dev/sa\\[a-p\\]\\[1-128\\]：物理磁盘的文件名\n- /dev/sa\\[a-d]\\[1-128\\]：虚拟磁盘的文件名\n\n## 文件系统特性\n\n### 索引式文件系统：FAT、ext2\n\n- superblock：记录文件系统的整体信息\n- inode：记录文件的属性\n- data block：实际记录文件的内容\n\next系列可以使用`dumpe2fs [dev]`来观测`superblock`。\n\nxfs系统可以使用`xfs_info`\n\n### 日志式文件系统\n\n解决故障时存放数据与记录数据不一致的问题\n\n查看linux支持的文件系统`cat /proc/filesystems`\n\n## 文件系统的简单操作\n\n### df du\n\n### ln\n\n硬链接不能对文件夹使用\n\n## 磁盘的分区、格式化、检验与挂载\n\n### 分区\n\n#### 查看分区信息\n\n查看所有的磁盘`lsblk`\n\n查看UUID（universally unique identifier）`blkid`\n\n查看磁盘的分区信息`parted device_name print`\n\n**注**：MBR使用fdisk分区，GPT使用gdisk分区\n\n#### 添加分区\n\n```bash\ngdisk the_device\np # 查看磁盘目前的状态\nn # 开始新增分区\n4 # partion number（第n个分区）\n65026048 # first sector，某个inode的值\n+1G # last sector，可以和上面一样输入某个inode，但更好的方式是输入+xG让软件自行计算，默认为用完所有容量\nL # 或l，查看分区使用的文件系统\n8300 # 默认的Linux 文件系统，其他值在上面可以看到\nw # 确定分区\npartprobe -s # 更新linux内核的分区表信息\n```\n\n#### 删除分区\n\n```bash\nfdisk the_device\nd\n```\n\n#### fdisk与gdisk的区别\n\n- fdisk通过m查看帮助，gdisk通过？\n- fdisk面向小磁盘，处理MBR分区表，gdisk面向更大的磁盘，处理GPT分区表\n\n其他注意：不要删除正在使用的分区，要先unmount\n\n### 格式化\n\n```bash\n# mkfs\nmkfs.xfs device #格式化为xfs文件系统\nmkfs.ext4 device # 格式化为ext4\n```\n\n| 参数 | 内容                                    |\n| ---- | --------------------------------------- |\n| -b   | 区块容量，512到64k，最大限制为linux的4k |\n| -L   | 文件系统标头的名称，Label name          |\n| -f   | 强制格式化                              |\n\next4的默认配置位于`/etc/mke2fs.conf`中 \n\n#### 格式化中的调优\n\n- agcount：按照cpu的线程数来确定，`grep processor | /proc/cpuinfo`\n- stripe：阵列里有特殊优化\n- sw：整列中盘数-1\n- extsize：数据宽度（swidth）stripe\\*sw\n\n### 校验\n\n- xfs：`xfs_repair`\n- ext4：`fsck.ext4`\n\n### 挂载\n\n ```bash\n # mount\n mount [-t filesystem] LABEL='' mount_point\n mount UUID='' mount_point\n mount device_name mount_point\n \n mount -o remount,rm,auto / # 重新挂载根目录\n ```\n\n```bash\n# umount\numount device_name\numount mount_point\n```\n\n#### 修改硬件类型\n\nlinux中一切皆文件，而设备使用两个数字来表示其类型\n\n- major：主要设备代码\n- minor：次要设备代码\n\n使用`mknod`修改设备类型\n\n```bash\nmknod device [bcp] [Major] [Minor]\n```\n\n#### 添加文件系统的UUID和Label\n\n- xfs：使用`xfs_admin`\n- ext4：使用`tune2fs`\n\n**注**：为什么要使用UUID来进行挂载而不是简单的使用设备文件名?因为你无法保证该设备在所有linux系统中都有相同的文件名。\n\n## 设置启动挂载\n\n 修改以下文件，参数在文件中会有注释说明的\n\n- `/etc/fstab`：普通硬盘挂载等\n- `/etc/mtab`：让镜像文件在不刻录的情况下读取，使用loop挂载\n\n## swap分区\n\n#### 使用物理分区\n\n1. 先分一块区出来\n2. `mkswap device`\n3. `free`看一眼成了 没\n\n#### 使用文件\n\n1. `dd`建立一个空的大文件\n2. `mkswap filename`\n3. 同上\n\n*注*：dd在后面讲\n\n## parted分区\n\n```bash\n# parted [device] [command[arguments]]\n# command\n# \tmkpart [primary|logical|Extended] [ext4|vfat|xfs] start end\n#\tprint\n#\trm [partition]\n# notice: start end use capacity(default MB) as unit\nparted /dev/vda mkpart primary fat32 36.0GB 36.5GB\n```\n\n","slug":"重学linux（3）","published":1,"category":"Operation","updated":"2022-02-11T05:17:56.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxl00278wulaz1rbkoe","content":"<h1 id=\"Linux磁盘与文件系统管理\"><a href=\"#Linux磁盘与文件系统管理\" class=\"headerlink\" title=\"Linux磁盘与文件系统管理\"></a>Linux磁盘与文件系统管理</h1><h2 id=\"磁盘与分区\"><a href=\"#磁盘与分区\" class=\"headerlink\" title=\"磁盘与分区\"></a>磁盘与分区</h2><p>命名：</p>\n<ul>\n<li>&#x2F;dev&#x2F;sa[a-p][1-128]：物理磁盘的文件名</li>\n<li>&#x2F;dev&#x2F;sa[a-d][1-128]：虚拟磁盘的文件名</li>\n</ul>\n<h2 id=\"文件系统特性\"><a href=\"#文件系统特性\" class=\"headerlink\" title=\"文件系统特性\"></a>文件系统特性</h2><h3 id=\"索引式文件系统：FAT、ext2\"><a href=\"#索引式文件系统：FAT、ext2\" class=\"headerlink\" title=\"索引式文件系统：FAT、ext2\"></a>索引式文件系统：FAT、ext2</h3><ul>\n<li>superblock：记录文件系统的整体信息</li>\n<li>inode：记录文件的属性</li>\n<li>data block：实际记录文件的内容</li>\n</ul>\n<p>ext系列可以使用<code>dumpe2fs [dev]</code>来观测<code>superblock</code>。</p>\n<p>xfs系统可以使用<code>xfs_info</code></p>\n<h3 id=\"日志式文件系统\"><a href=\"#日志式文件系统\" class=\"headerlink\" title=\"日志式文件系统\"></a>日志式文件系统</h3><p>解决故障时存放数据与记录数据不一致的问题</p>\n<p>查看linux支持的文件系统<code>cat /proc/filesystems</code></p>\n<h2 id=\"文件系统的简单操作\"><a href=\"#文件系统的简单操作\" class=\"headerlink\" title=\"文件系统的简单操作\"></a>文件系统的简单操作</h2><h3 id=\"df-du\"><a href=\"#df-du\" class=\"headerlink\" title=\"df du\"></a>df du</h3><h3 id=\"ln\"><a href=\"#ln\" class=\"headerlink\" title=\"ln\"></a>ln</h3><p>硬链接不能对文件夹使用</p>\n<h2 id=\"磁盘的分区、格式化、检验与挂载\"><a href=\"#磁盘的分区、格式化、检验与挂载\" class=\"headerlink\" title=\"磁盘的分区、格式化、检验与挂载\"></a>磁盘的分区、格式化、检验与挂载</h2><h3 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h3><h4 id=\"查看分区信息\"><a href=\"#查看分区信息\" class=\"headerlink\" title=\"查看分区信息\"></a>查看分区信息</h4><p>查看所有的磁盘<code>lsblk</code></p>\n<p>查看UUID（universally unique identifier）<code>blkid</code></p>\n<p>查看磁盘的分区信息<code>parted device_name print</code></p>\n<p><strong>注</strong>：MBR使用fdisk分区，GPT使用gdisk分区</p>\n<h4 id=\"添加分区\"><a href=\"#添加分区\" class=\"headerlink\" title=\"添加分区\"></a>添加分区</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gdisk the_device\np <span class=\"token comment\"># 查看磁盘目前的状态</span>\nn <span class=\"token comment\"># 开始新增分区</span>\n<span class=\"token number\">4</span> <span class=\"token comment\"># partion number（第n个分区）</span>\n<span class=\"token number\">65026048</span> <span class=\"token comment\"># first sector，某个inode的值</span>\n+1G <span class=\"token comment\"># last sector，可以和上面一样输入某个inode，但更好的方式是输入+xG让软件自行计算，默认为用完所有容量</span>\nL <span class=\"token comment\"># 或l，查看分区使用的文件系统</span>\n<span class=\"token number\">8300</span> <span class=\"token comment\"># 默认的Linux 文件系统，其他值在上面可以看到</span>\nw <span class=\"token comment\"># 确定分区</span>\npartprobe -s <span class=\"token comment\"># 更新linux内核的分区表信息</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"删除分区\"><a href=\"#删除分区\" class=\"headerlink\" title=\"删除分区\"></a>删除分区</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">fdisk</span> the_device\nd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"fdisk与gdisk的区别\"><a href=\"#fdisk与gdisk的区别\" class=\"headerlink\" title=\"fdisk与gdisk的区别\"></a>fdisk与gdisk的区别</h4><ul>\n<li>fdisk通过m查看帮助，gdisk通过？</li>\n<li>fdisk面向小磁盘，处理MBR分区表，gdisk面向更大的磁盘，处理GPT分区表</li>\n</ul>\n<p>其他注意：不要删除正在使用的分区，要先unmount</p>\n<h3 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># mkfs</span>\nmkfs.xfs device <span class=\"token comment\">#格式化为xfs文件系统</span>\nmkfs.ext4 device <span class=\"token comment\"># 格式化为ext4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-b</td>\n<td>区块容量，512到64k，最大限制为linux的4k</td>\n</tr>\n<tr>\n<td>-L</td>\n<td>文件系统标头的名称，Label name</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>强制格式化</td>\n</tr>\n</tbody></table>\n<p>ext4的默认配置位于<code>/etc/mke2fs.conf</code>中 </p>\n<h4 id=\"格式化中的调优\"><a href=\"#格式化中的调优\" class=\"headerlink\" title=\"格式化中的调优\"></a>格式化中的调优</h4><ul>\n<li>agcount：按照cpu的线程数来确定，<code>grep processor | /proc/cpuinfo</code></li>\n<li>stripe：阵列里有特殊优化</li>\n<li>sw：整列中盘数-1</li>\n<li>extsize：数据宽度（swidth）stripe*sw</li>\n</ul>\n<h3 id=\"校验\"><a href=\"#校验\" class=\"headerlink\" title=\"校验\"></a>校验</h3><ul>\n<li>xfs：<code>xfs_repair</code></li>\n<li>ext4：<code>fsck.ext4</code></li>\n</ul>\n<h3 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h3> <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># mount</span>\n<span class=\"token function\">mount</span> <span class=\"token punctuation\">[</span>-t filesystem<span class=\"token punctuation\">]</span> <span class=\"token assign-left variable\">LABEL</span><span class=\"token operator\">=</span><span class=\"token string\">''</span> mount_point\n<span class=\"token function\">mount</span> <span class=\"token assign-left variable\">UUID</span><span class=\"token operator\">=</span><span class=\"token string\">''</span> mount_point\n<span class=\"token function\">mount</span> device_name mount_point\n\n<span class=\"token function\">mount</span> -o remount,rm,auto / <span class=\"token comment\"># 重新挂载根目录</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># umount</span>\n<span class=\"token function\">umount</span> device_name\n<span class=\"token function\">umount</span> mount_point<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"修改硬件类型\"><a href=\"#修改硬件类型\" class=\"headerlink\" title=\"修改硬件类型\"></a>修改硬件类型</h4><p>linux中一切皆文件，而设备使用两个数字来表示其类型</p>\n<ul>\n<li>major：主要设备代码</li>\n<li>minor：次要设备代码</li>\n</ul>\n<p>使用<code>mknod</code>修改设备类型</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mknod</span> device <span class=\"token punctuation\">[</span>bcp<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Major<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Minor<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"添加文件系统的UUID和Label\"><a href=\"#添加文件系统的UUID和Label\" class=\"headerlink\" title=\"添加文件系统的UUID和Label\"></a>添加文件系统的UUID和Label</h4><ul>\n<li>xfs：使用<code>xfs_admin</code></li>\n<li>ext4：使用<code>tune2fs</code></li>\n</ul>\n<p><strong>注</strong>：为什么要使用UUID来进行挂载而不是简单的使用设备文件名?因为你无法保证该设备在所有linux系统中都有相同的文件名。</p>\n<h2 id=\"设置启动挂载\"><a href=\"#设置启动挂载\" class=\"headerlink\" title=\"设置启动挂载\"></a>设置启动挂载</h2><p> 修改以下文件，参数在文件中会有注释说明的</p>\n<ul>\n<li><code>/etc/fstab</code>：普通硬盘挂载等</li>\n<li><code>/etc/mtab</code>：让镜像文件在不刻录的情况下读取，使用loop挂载</li>\n</ul>\n<h2 id=\"swap分区\"><a href=\"#swap分区\" class=\"headerlink\" title=\"swap分区\"></a>swap分区</h2><h4 id=\"使用物理分区\"><a href=\"#使用物理分区\" class=\"headerlink\" title=\"使用物理分区\"></a>使用物理分区</h4><ol>\n<li>先分一块区出来</li>\n<li><code>mkswap device</code></li>\n<li><code>free</code>看一眼成了 没</li>\n</ol>\n<h4 id=\"使用文件\"><a href=\"#使用文件\" class=\"headerlink\" title=\"使用文件\"></a>使用文件</h4><ol>\n<li><code>dd</code>建立一个空的大文件</li>\n<li><code>mkswap filename</code></li>\n<li>同上</li>\n</ol>\n<p><em>注</em>：dd在后面讲</p>\n<h2 id=\"parted分区\"><a href=\"#parted分区\" class=\"headerlink\" title=\"parted分区\"></a>parted分区</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># parted [device] [command[arguments]]</span>\n<span class=\"token comment\"># command</span>\n<span class=\"token comment\"># \tmkpart [primary|logical|Extended] [ext4|vfat|xfs] start end</span>\n<span class=\"token comment\">#\tprint</span>\n<span class=\"token comment\">#\trm [partition]</span>\n<span class=\"token comment\"># notice: start end use capacity(default MB) as unit</span>\n<span class=\"token function\">parted</span> /dev/vda mkpart primary fat32 <span class=\"token number\">36</span>.0GB <span class=\"token number\">36</span>.5GB<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/chaopao1.jpg","excerpt":"","more":"<h1 id=\"Linux磁盘与文件系统管理\"><a href=\"#Linux磁盘与文件系统管理\" class=\"headerlink\" title=\"Linux磁盘与文件系统管理\"></a>Linux磁盘与文件系统管理</h1><h2 id=\"磁盘与分区\"><a href=\"#磁盘与分区\" class=\"headerlink\" title=\"磁盘与分区\"></a>磁盘与分区</h2><p>命名：</p>\n<ul>\n<li>&#x2F;dev&#x2F;sa[a-p][1-128]：物理磁盘的文件名</li>\n<li>&#x2F;dev&#x2F;sa[a-d][1-128]：虚拟磁盘的文件名</li>\n</ul>\n<h2 id=\"文件系统特性\"><a href=\"#文件系统特性\" class=\"headerlink\" title=\"文件系统特性\"></a>文件系统特性</h2><h3 id=\"索引式文件系统：FAT、ext2\"><a href=\"#索引式文件系统：FAT、ext2\" class=\"headerlink\" title=\"索引式文件系统：FAT、ext2\"></a>索引式文件系统：FAT、ext2</h3><ul>\n<li>superblock：记录文件系统的整体信息</li>\n<li>inode：记录文件的属性</li>\n<li>data block：实际记录文件的内容</li>\n</ul>\n<p>ext系列可以使用<code>dumpe2fs [dev]</code>来观测<code>superblock</code>。</p>\n<p>xfs系统可以使用<code>xfs_info</code></p>\n<h3 id=\"日志式文件系统\"><a href=\"#日志式文件系统\" class=\"headerlink\" title=\"日志式文件系统\"></a>日志式文件系统</h3><p>解决故障时存放数据与记录数据不一致的问题</p>\n<p>查看linux支持的文件系统<code>cat /proc/filesystems</code></p>\n<h2 id=\"文件系统的简单操作\"><a href=\"#文件系统的简单操作\" class=\"headerlink\" title=\"文件系统的简单操作\"></a>文件系统的简单操作</h2><h3 id=\"df-du\"><a href=\"#df-du\" class=\"headerlink\" title=\"df du\"></a>df du</h3><h3 id=\"ln\"><a href=\"#ln\" class=\"headerlink\" title=\"ln\"></a>ln</h3><p>硬链接不能对文件夹使用</p>\n<h2 id=\"磁盘的分区、格式化、检验与挂载\"><a href=\"#磁盘的分区、格式化、检验与挂载\" class=\"headerlink\" title=\"磁盘的分区、格式化、检验与挂载\"></a>磁盘的分区、格式化、检验与挂载</h2><h3 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h3><h4 id=\"查看分区信息\"><a href=\"#查看分区信息\" class=\"headerlink\" title=\"查看分区信息\"></a>查看分区信息</h4><p>查看所有的磁盘<code>lsblk</code></p>\n<p>查看UUID（universally unique identifier）<code>blkid</code></p>\n<p>查看磁盘的分区信息<code>parted device_name print</code></p>\n<p><strong>注</strong>：MBR使用fdisk分区，GPT使用gdisk分区</p>\n<h4 id=\"添加分区\"><a href=\"#添加分区\" class=\"headerlink\" title=\"添加分区\"></a>添加分区</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gdisk the_device\np <span class=\"token comment\"># 查看磁盘目前的状态</span>\nn <span class=\"token comment\"># 开始新增分区</span>\n<span class=\"token number\">4</span> <span class=\"token comment\"># partion number（第n个分区）</span>\n<span class=\"token number\">65026048</span> <span class=\"token comment\"># first sector，某个inode的值</span>\n+1G <span class=\"token comment\"># last sector，可以和上面一样输入某个inode，但更好的方式是输入+xG让软件自行计算，默认为用完所有容量</span>\nL <span class=\"token comment\"># 或l，查看分区使用的文件系统</span>\n<span class=\"token number\">8300</span> <span class=\"token comment\"># 默认的Linux 文件系统，其他值在上面可以看到</span>\nw <span class=\"token comment\"># 确定分区</span>\npartprobe -s <span class=\"token comment\"># 更新linux内核的分区表信息</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"删除分区\"><a href=\"#删除分区\" class=\"headerlink\" title=\"删除分区\"></a>删除分区</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">fdisk</span> the_device\nd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"fdisk与gdisk的区别\"><a href=\"#fdisk与gdisk的区别\" class=\"headerlink\" title=\"fdisk与gdisk的区别\"></a>fdisk与gdisk的区别</h4><ul>\n<li>fdisk通过m查看帮助，gdisk通过？</li>\n<li>fdisk面向小磁盘，处理MBR分区表，gdisk面向更大的磁盘，处理GPT分区表</li>\n</ul>\n<p>其他注意：不要删除正在使用的分区，要先unmount</p>\n<h3 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># mkfs</span>\nmkfs.xfs device <span class=\"token comment\">#格式化为xfs文件系统</span>\nmkfs.ext4 device <span class=\"token comment\"># 格式化为ext4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-b</td>\n<td>区块容量，512到64k，最大限制为linux的4k</td>\n</tr>\n<tr>\n<td>-L</td>\n<td>文件系统标头的名称，Label name</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>强制格式化</td>\n</tr>\n</tbody></table>\n<p>ext4的默认配置位于<code>/etc/mke2fs.conf</code>中 </p>\n<h4 id=\"格式化中的调优\"><a href=\"#格式化中的调优\" class=\"headerlink\" title=\"格式化中的调优\"></a>格式化中的调优</h4><ul>\n<li>agcount：按照cpu的线程数来确定，<code>grep processor | /proc/cpuinfo</code></li>\n<li>stripe：阵列里有特殊优化</li>\n<li>sw：整列中盘数-1</li>\n<li>extsize：数据宽度（swidth）stripe*sw</li>\n</ul>\n<h3 id=\"校验\"><a href=\"#校验\" class=\"headerlink\" title=\"校验\"></a>校验</h3><ul>\n<li>xfs：<code>xfs_repair</code></li>\n<li>ext4：<code>fsck.ext4</code></li>\n</ul>\n<h3 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h3> <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># mount</span>\n<span class=\"token function\">mount</span> <span class=\"token punctuation\">[</span>-t filesystem<span class=\"token punctuation\">]</span> <span class=\"token assign-left variable\">LABEL</span><span class=\"token operator\">=</span><span class=\"token string\">''</span> mount_point\n<span class=\"token function\">mount</span> <span class=\"token assign-left variable\">UUID</span><span class=\"token operator\">=</span><span class=\"token string\">''</span> mount_point\n<span class=\"token function\">mount</span> device_name mount_point\n\n<span class=\"token function\">mount</span> -o remount,rm,auto / <span class=\"token comment\"># 重新挂载根目录</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># umount</span>\n<span class=\"token function\">umount</span> device_name\n<span class=\"token function\">umount</span> mount_point<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"修改硬件类型\"><a href=\"#修改硬件类型\" class=\"headerlink\" title=\"修改硬件类型\"></a>修改硬件类型</h4><p>linux中一切皆文件，而设备使用两个数字来表示其类型</p>\n<ul>\n<li>major：主要设备代码</li>\n<li>minor：次要设备代码</li>\n</ul>\n<p>使用<code>mknod</code>修改设备类型</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mknod</span> device <span class=\"token punctuation\">[</span>bcp<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Major<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Minor<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"添加文件系统的UUID和Label\"><a href=\"#添加文件系统的UUID和Label\" class=\"headerlink\" title=\"添加文件系统的UUID和Label\"></a>添加文件系统的UUID和Label</h4><ul>\n<li>xfs：使用<code>xfs_admin</code></li>\n<li>ext4：使用<code>tune2fs</code></li>\n</ul>\n<p><strong>注</strong>：为什么要使用UUID来进行挂载而不是简单的使用设备文件名?因为你无法保证该设备在所有linux系统中都有相同的文件名。</p>\n<h2 id=\"设置启动挂载\"><a href=\"#设置启动挂载\" class=\"headerlink\" title=\"设置启动挂载\"></a>设置启动挂载</h2><p> 修改以下文件，参数在文件中会有注释说明的</p>\n<ul>\n<li><code>/etc/fstab</code>：普通硬盘挂载等</li>\n<li><code>/etc/mtab</code>：让镜像文件在不刻录的情况下读取，使用loop挂载</li>\n</ul>\n<h2 id=\"swap分区\"><a href=\"#swap分区\" class=\"headerlink\" title=\"swap分区\"></a>swap分区</h2><h4 id=\"使用物理分区\"><a href=\"#使用物理分区\" class=\"headerlink\" title=\"使用物理分区\"></a>使用物理分区</h4><ol>\n<li>先分一块区出来</li>\n<li><code>mkswap device</code></li>\n<li><code>free</code>看一眼成了 没</li>\n</ol>\n<h4 id=\"使用文件\"><a href=\"#使用文件\" class=\"headerlink\" title=\"使用文件\"></a>使用文件</h4><ol>\n<li><code>dd</code>建立一个空的大文件</li>\n<li><code>mkswap filename</code></li>\n<li>同上</li>\n</ol>\n<p><em>注</em>：dd在后面讲</p>\n<h2 id=\"parted分区\"><a href=\"#parted分区\" class=\"headerlink\" title=\"parted分区\"></a>parted分区</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># parted [device] [command[arguments]]</span>\n<span class=\"token comment\"># command</span>\n<span class=\"token comment\"># \tmkpart [primary|logical|Extended] [ext4|vfat|xfs] start end</span>\n<span class=\"token comment\">#\tprint</span>\n<span class=\"token comment\">#\trm [partition]</span>\n<span class=\"token comment\"># notice: start end use capacity(default MB) as unit</span>\n<span class=\"token function\">parted</span> /dev/vda mkpart primary fat32 <span class=\"token number\">36</span>.0GB <span class=\"token number\">36</span>.5GB<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"重学linux（5）","abbrlink":"c074b627","date":"2022-01-25T07:40:15.000Z","_content":"\n# 这章用来记录一些linux里需要单独去学习的东西\n\n- vim，看看practical vim，一天一个vim小技巧\n- 正则，需要好好理解下哪个神仙想出来的操作逻辑\n- shell脚本，这玩意纯艺术\n- SELinux，高级话题了属于是\n","source":"_posts/Operation/重学linux（5）.md","raw":"---\ntitle: 重学linux（5）\ntags:\n  - 专栏：重学linux\n  - linux\ncategories:\n  - Operation\nabbrlink: c074b627\ndate: 2022-01-25 15:40:15\n---\n\n# 这章用来记录一些linux里需要单独去学习的东西\n\n- vim，看看practical vim，一天一个vim小技巧\n- 正则，需要好好理解下哪个神仙想出来的操作逻辑\n- shell脚本，这玩意纯艺术\n- SELinux，高级话题了属于是\n","slug":"重学linux（5）","published":1,"category":"Operation","updated":"2022-03-03T07:24:32.290Z","_id":"ckzs3irxo002c8wul2syy1vdb","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"这章用来记录一些linux里需要单独去学习的东西\"><a href=\"#这章用来记录一些linux里需要单独去学习的东西\" class=\"headerlink\" title=\"这章用来记录一些linux里需要单独去学习的东西\"></a>这章用来记录一些linux里需要单独去学习的东西</h1><ul>\n<li>vim，看看practical vim，一天一个vim小技巧</li>\n<li>正则，需要好好理解下哪个神仙想出来的操作逻辑</li>\n<li>shell脚本，这玩意纯艺术</li>\n<li>SELinux，高级话题了属于是</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/luren1.jpg","excerpt":"","more":"<h1 id=\"这章用来记录一些linux里需要单独去学习的东西\"><a href=\"#这章用来记录一些linux里需要单独去学习的东西\" class=\"headerlink\" title=\"这章用来记录一些linux里需要单独去学习的东西\"></a>这章用来记录一些linux里需要单独去学习的东西</h1><ul>\n<li>vim，看看practical vim，一天一个vim小技巧</li>\n<li>正则，需要好好理解下哪个神仙想出来的操作逻辑</li>\n<li>shell脚本，这玩意纯艺术</li>\n<li>SELinux，高级话题了属于是</li>\n</ul>\n"},{"title":"重学linux（6）","abbrlink":"d2c119c9","date":"2022-01-26T02:42:04.000Z","_content":"\n# Shell变量\n\n## 查看shells\n\n`/etc/shells`\n\n## 查看命令是否为bash内置\n\n### type\n\n```bash\ntype [option] name\n```\n\n| 参数 | 选项                             |\n| ---- | -------------------------------- |\n| -t   | 显示其类型                       |\n| -p   | 当name为外部命令时显示完整文件名 |\n| -a   | 显示PATH中全部name               |\n\n## 命令的执行小技巧\n\n| 组合键        | 功能                                 |\n| ------------- | ------------------------------------ |\n| ctrl+u/ctrl+k | 从光标处向前或向后删除命令串         |\n| ctrl+a/ctrl+e | 让光标移动到整个命令行最前面或最后面 |\n\n## 变量\n\n```bash\n# 查看变量\necho $var\necho ${var}\n# 设置变量\nname=kawhicurry # 变量只能以字母开头，只能包含数字和字母\n# 不能随意空格，加空格方式如下\nname=\"kawhi curry\"\nname=kawhi\\ curry\n# 单引号和双引号的区别\nname=‘$USER’ # 单引号内仅为普通字符\nname=\"$USER\" # 双引号内变量保持原本含义\n# 取得其他指令所提供的信息\nversion=$(uname -r)\nversion=`uname -r`\n# 扩增变量内容\nPATH=\"$PATH\":/home/bin\nPATH=${PATH}:/home/bin\n# 变量需要在其他子程序执行\nexport PATH # 注意不需要加$\n# 取消变量\nunset version # 也不需要加$\n```\n\n## 环境变量\n\n### env\n\n查看环境变量\n\n```bash\n$ env\nXDG_SESSION_ID=5747\nHOSTNAME=Shuihua\nTERM=xterm # 终端环境\nSHELL=/bin/bash # shell环境\nHISTSIZE=1000 # history记录的条数\nSSH_TTY=/dev/pts/1\nUSER=root # 当前用户名称\nMAIL=/var/spool/mail/root # 邮箱\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\nPWD=/root\nLANG=en_US.UTF-8 # 语系\nHISTCONTROL=ignoredups\nSHLVL=1\nHOME=/root\nLOGNAME=root #登陆人\nSSH_CONNECTION=175.5.235.93 43351 172.29.89.99 22\nLESSOPEN=||/usr/bin/lesspipe.sh %s\nXDG_RUNTIME_DIR=/run/user/0\n_=/usr/bin/env # 上一次使用的命令的最后一个参数（或是命令本身）\n\n# 其他\nRANDOM # 位于/dev/random的随机数生成器，生成0~32768的随机数\n```\n\n### set\n\n查看所有变量\n\n```bash\n$ set # 节选\nHOSTNAME=Shuihua\nHOSTTYPE=x86_64 # cpu架构\nID=0\nMACHTYPE=x86_64-redhat-linux-gnu # 机器硬件等级\nMAIL=/var/spool/mail/root\nMAILCHECK=60\nOPTERR=1\nOPTIND=1\nOSTYPE=linux-gnu # 操作系统等级\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\nPIPESTATUS=([0]=\"0\")\nPPID=26032\nPROMPT_COMMAND='printf \"\\033]0;%s@%s:%s\\007\" \"${USER}\" \"${HOSTNAME%%.*}\" \"${PWD/#$HOME/~}\"'\nPS1='[\\u@\\h \\W]\\$ ' # cmd-line 的 prompt\nPS2='> '\nPS4='+ '\nPWD=/root\nSHELL=/bin/bash\nSHELLOPTS=braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor\nSHLVL=1\nSSH_TTY=/dev/pts/1\nTERM=xterm\nUID=0\nUSER=root\nXDG_RUNTIME_DIR=/run/user/0\nXDG_SESSION_ID=5747\n_=set\ncolors=/root/.dircolors\n```\n\n## 语系变量\n\n### locale\n\n```bash\nlocale -a # 查看所有支持的语系\nlocale # 查看当前使用的语系\nLANG=en_US.UTF-8\nLC_CTYPE=\"en_US.UTF-8\"\nLC_NUMERIC=\"en_US.UTF-8\"\nLC_TIME=\"en_US.UTF-8\"\nLC_COLLATE=\"en_US.UTF-8\"\nLC_MONETARY=\"en_US.UTF-8\"\nLC_MESSAGES=\"en_US.UTF-8\"\nLC_PAPER=\"en_US.UTF-8\"\nLC_NAME=\"en_US.UTF-8\"\nLC_ADDRESS=\"en_US.UTF-8\"\nLC_TELEPHONE=\"en_US.UTF-8\"\nLC_MEASUREMENT=\"en_US.UTF-8\"\nLC_IDENTIFICATION=\"en_US.UTF-8\"\nLC_ALL=\n# 系统的整体语系\ncat /etc/locale.conf\n# 修改语系\nexport locale_var=language \n```\n\n## 变量的赋值，声明\n\n### read\n\n```bash\n# read [-pt] var\n# -p 后面跟提示信息\n# -t 实践限制，单位秒\n```\n\n### declare,typeset\n\n| 参数 | 含义                   |\n| ---- | ---------------------- |\n| -a   | 将后面的变量设置为数组 |\n| -i   | 将后面的变量设置为整数 |\n| -x   | export                 |\n| -r   | readonly               |\n| -p   | 查看变量类型           |\n\n```bash\n# declare [-aixr] var\ndeclare -x sum # sum 变为环境变量\ndeclare +x sum # 取消sum的环境变量属性\n```\n\n## 文件系统和程序的限制\n\n### ulimit\n\n```bash\n# ulimit [-option] [配额]\nulimit -a # 查看当前所有的限制额度\n# 具体选项通过上面这条看看就知道了\n```\n\n## 变量中的内容的删除、取代和替换\n\n### 删除\n\n使用`#`和`%`\n\n- `#`删除**从前往后**符合替换条件的**最短**的那个\n- `##`删除**从前往后**符合替换条件的**最长**的那个\n- `%`删除**从后往前**符合替换条件的**最短**的那个\n- `%`删除**从后往前**符合替换条件的**最长**的那个\n- 使用通配符`*`\n\n### 替换\n\n使用`/`和`//`\n\n- `/`会将**第一个**符合条件的内容替换\n- `//`会将**所有**符合条件的内容替换\n\n```bash\necho path=${PATH}\necho ${path#/*local/bin:} # 删除path变量中从前往后最短的符合该条件的内容\necho ${path/sbin/SBIN} # 将path变量中第一个符合sbin的字符串替换为后面的SBIN\n```\n\n### 默认变量和变量检测\n\n使用`-`，`+`，`?`和`:`\n\n**这个功能超好，但是没法写笔记**\n","source":"_posts/Operation/重学linux（6）.md","raw":"---\ntitle: 重学linux（6）\ntags:\n  - 专栏：重学linux\n  - linux\ncategories:\n  - Operation\nabbrlink: d2c119c9\ndate: 2022-01-26 10:42:04\n---\n\n# Shell变量\n\n## 查看shells\n\n`/etc/shells`\n\n## 查看命令是否为bash内置\n\n### type\n\n```bash\ntype [option] name\n```\n\n| 参数 | 选项                             |\n| ---- | -------------------------------- |\n| -t   | 显示其类型                       |\n| -p   | 当name为外部命令时显示完整文件名 |\n| -a   | 显示PATH中全部name               |\n\n## 命令的执行小技巧\n\n| 组合键        | 功能                                 |\n| ------------- | ------------------------------------ |\n| ctrl+u/ctrl+k | 从光标处向前或向后删除命令串         |\n| ctrl+a/ctrl+e | 让光标移动到整个命令行最前面或最后面 |\n\n## 变量\n\n```bash\n# 查看变量\necho $var\necho ${var}\n# 设置变量\nname=kawhicurry # 变量只能以字母开头，只能包含数字和字母\n# 不能随意空格，加空格方式如下\nname=\"kawhi curry\"\nname=kawhi\\ curry\n# 单引号和双引号的区别\nname=‘$USER’ # 单引号内仅为普通字符\nname=\"$USER\" # 双引号内变量保持原本含义\n# 取得其他指令所提供的信息\nversion=$(uname -r)\nversion=`uname -r`\n# 扩增变量内容\nPATH=\"$PATH\":/home/bin\nPATH=${PATH}:/home/bin\n# 变量需要在其他子程序执行\nexport PATH # 注意不需要加$\n# 取消变量\nunset version # 也不需要加$\n```\n\n## 环境变量\n\n### env\n\n查看环境变量\n\n```bash\n$ env\nXDG_SESSION_ID=5747\nHOSTNAME=Shuihua\nTERM=xterm # 终端环境\nSHELL=/bin/bash # shell环境\nHISTSIZE=1000 # history记录的条数\nSSH_TTY=/dev/pts/1\nUSER=root # 当前用户名称\nMAIL=/var/spool/mail/root # 邮箱\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\nPWD=/root\nLANG=en_US.UTF-8 # 语系\nHISTCONTROL=ignoredups\nSHLVL=1\nHOME=/root\nLOGNAME=root #登陆人\nSSH_CONNECTION=175.5.235.93 43351 172.29.89.99 22\nLESSOPEN=||/usr/bin/lesspipe.sh %s\nXDG_RUNTIME_DIR=/run/user/0\n_=/usr/bin/env # 上一次使用的命令的最后一个参数（或是命令本身）\n\n# 其他\nRANDOM # 位于/dev/random的随机数生成器，生成0~32768的随机数\n```\n\n### set\n\n查看所有变量\n\n```bash\n$ set # 节选\nHOSTNAME=Shuihua\nHOSTTYPE=x86_64 # cpu架构\nID=0\nMACHTYPE=x86_64-redhat-linux-gnu # 机器硬件等级\nMAIL=/var/spool/mail/root\nMAILCHECK=60\nOPTERR=1\nOPTIND=1\nOSTYPE=linux-gnu # 操作系统等级\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\nPIPESTATUS=([0]=\"0\")\nPPID=26032\nPROMPT_COMMAND='printf \"\\033]0;%s@%s:%s\\007\" \"${USER}\" \"${HOSTNAME%%.*}\" \"${PWD/#$HOME/~}\"'\nPS1='[\\u@\\h \\W]\\$ ' # cmd-line 的 prompt\nPS2='> '\nPS4='+ '\nPWD=/root\nSHELL=/bin/bash\nSHELLOPTS=braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor\nSHLVL=1\nSSH_TTY=/dev/pts/1\nTERM=xterm\nUID=0\nUSER=root\nXDG_RUNTIME_DIR=/run/user/0\nXDG_SESSION_ID=5747\n_=set\ncolors=/root/.dircolors\n```\n\n## 语系变量\n\n### locale\n\n```bash\nlocale -a # 查看所有支持的语系\nlocale # 查看当前使用的语系\nLANG=en_US.UTF-8\nLC_CTYPE=\"en_US.UTF-8\"\nLC_NUMERIC=\"en_US.UTF-8\"\nLC_TIME=\"en_US.UTF-8\"\nLC_COLLATE=\"en_US.UTF-8\"\nLC_MONETARY=\"en_US.UTF-8\"\nLC_MESSAGES=\"en_US.UTF-8\"\nLC_PAPER=\"en_US.UTF-8\"\nLC_NAME=\"en_US.UTF-8\"\nLC_ADDRESS=\"en_US.UTF-8\"\nLC_TELEPHONE=\"en_US.UTF-8\"\nLC_MEASUREMENT=\"en_US.UTF-8\"\nLC_IDENTIFICATION=\"en_US.UTF-8\"\nLC_ALL=\n# 系统的整体语系\ncat /etc/locale.conf\n# 修改语系\nexport locale_var=language \n```\n\n## 变量的赋值，声明\n\n### read\n\n```bash\n# read [-pt] var\n# -p 后面跟提示信息\n# -t 实践限制，单位秒\n```\n\n### declare,typeset\n\n| 参数 | 含义                   |\n| ---- | ---------------------- |\n| -a   | 将后面的变量设置为数组 |\n| -i   | 将后面的变量设置为整数 |\n| -x   | export                 |\n| -r   | readonly               |\n| -p   | 查看变量类型           |\n\n```bash\n# declare [-aixr] var\ndeclare -x sum # sum 变为环境变量\ndeclare +x sum # 取消sum的环境变量属性\n```\n\n## 文件系统和程序的限制\n\n### ulimit\n\n```bash\n# ulimit [-option] [配额]\nulimit -a # 查看当前所有的限制额度\n# 具体选项通过上面这条看看就知道了\n```\n\n## 变量中的内容的删除、取代和替换\n\n### 删除\n\n使用`#`和`%`\n\n- `#`删除**从前往后**符合替换条件的**最短**的那个\n- `##`删除**从前往后**符合替换条件的**最长**的那个\n- `%`删除**从后往前**符合替换条件的**最短**的那个\n- `%`删除**从后往前**符合替换条件的**最长**的那个\n- 使用通配符`*`\n\n### 替换\n\n使用`/`和`//`\n\n- `/`会将**第一个**符合条件的内容替换\n- `//`会将**所有**符合条件的内容替换\n\n```bash\necho path=${PATH}\necho ${path#/*local/bin:} # 删除path变量中从前往后最短的符合该条件的内容\necho ${path/sbin/SBIN} # 将path变量中第一个符合sbin的字符串替换为后面的SBIN\n```\n\n### 默认变量和变量检测\n\n使用`-`，`+`，`?`和`:`\n\n**这个功能超好，但是没法写笔记**\n","slug":"重学linux（6）","published":1,"category":"Operation","updated":"2022-02-11T05:16:28.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxp002f8wulcwpp3cz8","content":"<h1 id=\"Shell变量\"><a href=\"#Shell变量\" class=\"headerlink\" title=\"Shell变量\"></a>Shell变量</h1><h2 id=\"查看shells\"><a href=\"#查看shells\" class=\"headerlink\" title=\"查看shells\"></a>查看shells</h2><p><code>/etc/shells</code></p>\n<h2 id=\"查看命令是否为bash内置\"><a href=\"#查看命令是否为bash内置\" class=\"headerlink\" title=\"查看命令是否为bash内置\"></a>查看命令是否为bash内置</h2><h3 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">type</span> <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>选项</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-t</td>\n<td>显示其类型</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>当name为外部命令时显示完整文件名</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>显示PATH中全部name</td>\n</tr>\n</tbody></table>\n<h2 id=\"命令的执行小技巧\"><a href=\"#命令的执行小技巧\" class=\"headerlink\" title=\"命令的执行小技巧\"></a>命令的执行小技巧</h2><table>\n<thead>\n<tr>\n<th>组合键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ctrl+u&#x2F;ctrl+k</td>\n<td>从光标处向前或向后删除命令串</td>\n</tr>\n<tr>\n<td>ctrl+a&#x2F;ctrl+e</td>\n<td>让光标移动到整个命令行最前面或最后面</td>\n</tr>\n</tbody></table>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看变量</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$var</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;var&#125;</span>\n<span class=\"token comment\"># 设置变量</span>\n<span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>kawhicurry <span class=\"token comment\"># 变量只能以字母开头，只能包含数字和字母</span>\n<span class=\"token comment\"># 不能随意空格，加空格方式如下</span>\n<span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"kawhi curry\"</span>\n<span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>kawhi<span class=\"token punctuation\">\\</span> curry\n<span class=\"token comment\"># 单引号和双引号的区别</span>\n<span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>‘<span class=\"token environment constant\">$USER</span>’ <span class=\"token comment\"># 单引号内仅为普通字符</span>\n<span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token environment constant\">$USER</span>\"</span> <span class=\"token comment\"># 双引号内变量保持原本含义</span>\n<span class=\"token comment\"># 取得其他指令所提供的信息</span>\n<span class=\"token assign-left variable\">version</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">uname</span> -r<span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">version</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">uname</span> -r<span class=\"token variable\">`</span></span>\n<span class=\"token comment\"># 扩增变量内容</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token environment constant\">$PATH</span>\"</span>:/home/bin\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;<span class=\"token environment constant\">PATH</span>&#125;</span>:/home/bin\n<span class=\"token comment\"># 变量需要在其他子程序执行</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token environment constant\">PATH</span> <span class=\"token comment\"># 注意不需要加$</span>\n<span class=\"token comment\"># 取消变量</span>\n<span class=\"token builtin class-name\">unset</span> version <span class=\"token comment\"># 也不需要加$</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><h3 id=\"env\"><a href=\"#env\" class=\"headerlink\" title=\"env\"></a>env</h3><p>查看环境变量</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">env</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">XDG_SESSION_ID</span></span><span class=\"token operator\">=</span><span class=\"token number\">5747</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HOSTNAME</span></span><span class=\"token operator\">=</span>Shuihua\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">TERM</span></span><span class=\"token operator\">=</span>xterm <span class=\"token comment\"># 终端环境</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">SHELL</span></span><span class=\"token operator\">=</span>/bin/bash <span class=\"token comment\"># shell环境</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HISTSIZE</span></span><span class=\"token operator\">=</span><span class=\"token number\">1000</span> <span class=\"token comment\"># history记录的条数</span>\n<span class=\"token assign-left variable\">SSH_TTY</span><span class=\"token operator\">=</span>/dev/pts/1\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">USER</span></span><span class=\"token operator\">=</span>root <span class=\"token comment\"># 当前用户名称</span>\n<span class=\"token assign-left variable\">MAIL</span><span class=\"token operator\">=</span>/var/spool/mail/root <span class=\"token comment\"># 邮箱</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PWD</span></span><span class=\"token operator\">=</span>/root\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LANG</span></span><span class=\"token operator\">=</span>en_US.UTF-8 <span class=\"token comment\"># 语系</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HISTCONTROL</span></span><span class=\"token operator\">=</span>ignoredups\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">SHLVL</span></span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HOME</span></span><span class=\"token operator\">=</span>/root\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LOGNAME</span></span><span class=\"token operator\">=</span>root <span class=\"token comment\">#登陆人</span>\n<span class=\"token assign-left variable\">SSH_CONNECTION</span><span class=\"token operator\">=</span><span class=\"token number\">175.5</span>.235.93 <span class=\"token number\">43351</span> <span class=\"token number\">172.29</span>.89.99 <span class=\"token number\">22</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LESSOPEN</span></span><span class=\"token operator\">=</span><span class=\"token operator\">||</span>/usr/bin/lesspipe.sh %s\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">XDG_RUNTIME_DIR</span></span><span class=\"token operator\">=</span>/run/user/0\n<span class=\"token assign-left variable\">_</span><span class=\"token operator\">=</span>/usr/bin/env <span class=\"token comment\"># 上一次使用的命令的最后一个参数（或是命令本身）</span>\n\n<span class=\"token comment\"># 其他</span>\n<span class=\"token environment constant\">RANDOM</span> <span class=\"token comment\"># 位于/dev/random的随机数生成器，生成0~32768的随机数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h3><p>查看所有变量</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">set</span> <span class=\"token comment\"># 节选</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HOSTNAME</span></span><span class=\"token operator\">=</span>Shuihua\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HOSTTYPE</span></span><span class=\"token operator\">=</span>x86_64 <span class=\"token comment\"># cpu架构</span>\n<span class=\"token assign-left variable\">ID</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">MACHTYPE</span></span><span class=\"token operator\">=</span>x86_64-redhat-linux-gnu <span class=\"token comment\"># 机器硬件等级</span>\n<span class=\"token assign-left variable\">MAIL</span><span class=\"token operator\">=</span>/var/spool/mail/root\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">MAILCHECK</span></span><span class=\"token operator\">=</span><span class=\"token number\">60</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">OPTERR</span></span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">OPTIND</span></span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">OSTYPE</span></span><span class=\"token operator\">=</span>linux-gnu <span class=\"token comment\"># 操作系统等级</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PIPESTATUS</span></span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PPID</span></span><span class=\"token operator\">=</span><span class=\"token number\">26032</span>\n<span class=\"token assign-left variable\">PROMPT_COMMAND</span><span class=\"token operator\">=</span><span class=\"token string\">'printf \"\\033]0;%s@%s:%s\\007\" \"$&#123;USER&#125;\" \"$&#123;HOSTNAME%%.*&#125;\" \"$&#123;PWD/#$HOME/~&#125;\"'</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PS1</span></span><span class=\"token operator\">=</span><span class=\"token string\">'[\\u@\\h \\W]\\$ '</span> <span class=\"token comment\"># cmd-line 的 prompt</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PS2</span></span><span class=\"token operator\">=</span><span class=\"token string\">'> '</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PS4</span></span><span class=\"token operator\">=</span><span class=\"token string\">'+ '</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PWD</span></span><span class=\"token operator\">=</span>/root\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">SHELL</span></span><span class=\"token operator\">=</span>/bin/bash\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">SHELLOPTS</span></span><span class=\"token operator\">=</span>braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">SHLVL</span></span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token assign-left variable\">SSH_TTY</span><span class=\"token operator\">=</span>/dev/pts/1\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">TERM</span></span><span class=\"token operator\">=</span>xterm\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">UID</span></span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">USER</span></span><span class=\"token operator\">=</span>root\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">XDG_RUNTIME_DIR</span></span><span class=\"token operator\">=</span>/run/user/0\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">XDG_SESSION_ID</span></span><span class=\"token operator\">=</span><span class=\"token number\">5747</span>\n<span class=\"token assign-left variable\">_</span><span class=\"token operator\">=</span>set\n<span class=\"token assign-left variable\">colors</span><span class=\"token operator\">=</span>/root/.dircolors<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"语系变量\"><a href=\"#语系变量\" class=\"headerlink\" title=\"语系变量\"></a>语系变量</h2><h3 id=\"locale\"><a href=\"#locale\" class=\"headerlink\" title=\"locale\"></a>locale</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">locale -a <span class=\"token comment\"># 查看所有支持的语系</span>\nlocale <span class=\"token comment\"># 查看当前使用的语系</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LANG</span></span><span class=\"token operator\">=</span>en_US.UTF-8\n<span class=\"token assign-left variable\">LC_CTYPE</span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_NUMERIC</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_TIME</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\">LC_COLLATE</span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_MONETARY</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\">LC_MESSAGES</span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_PAPER</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_NAME</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_ADDRESS</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_TELEPHONE</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_MEASUREMENT</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_IDENTIFICATION</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_ALL</span></span><span class=\"token operator\">=</span>\n<span class=\"token comment\"># 系统的整体语系</span>\n<span class=\"token function\">cat</span> /etc/locale.conf\n<span class=\"token comment\"># 修改语系</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">locale_var</span><span class=\"token operator\">=</span>language <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"变量的赋值，声明\"><a href=\"#变量的赋值，声明\" class=\"headerlink\" title=\"变量的赋值，声明\"></a>变量的赋值，声明</h2><h3 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read\"></a>read</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># read [-pt] var</span>\n<span class=\"token comment\"># -p 后面跟提示信息</span>\n<span class=\"token comment\"># -t 实践限制，单位秒</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"declare-typeset\"><a href=\"#declare-typeset\" class=\"headerlink\" title=\"declare,typeset\"></a>declare,typeset</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a</td>\n<td>将后面的变量设置为数组</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>将后面的变量设置为整数</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>export</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>readonly</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>查看变量类型</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># declare [-aixr] var</span>\n<span class=\"token builtin class-name\">declare</span> -x <span class=\"token function\">sum</span> <span class=\"token comment\"># sum 变为环境变量</span>\n<span class=\"token builtin class-name\">declare</span> +x <span class=\"token function\">sum</span> <span class=\"token comment\"># 取消sum的环境变量属性</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"文件系统和程序的限制\"><a href=\"#文件系统和程序的限制\" class=\"headerlink\" title=\"文件系统和程序的限制\"></a>文件系统和程序的限制</h2><h3 id=\"ulimit\"><a href=\"#ulimit\" class=\"headerlink\" title=\"ulimit\"></a>ulimit</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># ulimit [-option] [配额]</span>\n<span class=\"token builtin class-name\">ulimit</span> -a <span class=\"token comment\"># 查看当前所有的限制额度</span>\n<span class=\"token comment\"># 具体选项通过上面这条看看就知道了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"变量中的内容的删除、取代和替换\"><a href=\"#变量中的内容的删除、取代和替换\" class=\"headerlink\" title=\"变量中的内容的删除、取代和替换\"></a>变量中的内容的删除、取代和替换</h2><h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>使用<code>#</code>和<code>%</code></p>\n<ul>\n<li><code>#</code>删除<strong>从前往后</strong>符合替换条件的<strong>最短</strong>的那个</li>\n<li><code>##</code>删除<strong>从前往后</strong>符合替换条件的<strong>最长</strong>的那个</li>\n<li><code>%</code>删除<strong>从后往前</strong>符合替换条件的<strong>最短</strong>的那个</li>\n<li><code>%</code>删除<strong>从后往前</strong>符合替换条件的<strong>最长</strong>的那个</li>\n<li>使用通配符<code>*</code></li>\n</ul>\n<h3 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h3><p>使用<code>/</code>和<code>//</code></p>\n<ul>\n<li><code>/</code>会将<strong>第一个</strong>符合条件的内容替换</li>\n<li><code>//</code>会将<strong>所有</strong>符合条件的内容替换</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">path</span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;<span class=\"token environment constant\">PATH</span>&#125;</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;path<span class=\"token operator\">#</span><span class=\"token operator\">/</span>*local<span class=\"token operator\">/</span>bin<span class=\"token operator\">:</span>&#125;</span> <span class=\"token comment\"># 删除path变量中从前往后最短的符合该条件的内容</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;path<span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>SBIN&#125;</span> <span class=\"token comment\"># 将path变量中第一个符合sbin的字符串替换为后面的SBIN</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"默认变量和变量检测\"><a href=\"#默认变量和变量检测\" class=\"headerlink\" title=\"默认变量和变量检测\"></a>默认变量和变量检测</h3><p>使用<code>-</code>，<code>+</code>，<code>?</code>和<code>:</code></p>\n<p><strong>这个功能超好，但是没法写笔记</strong></p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/kon3.jpg","excerpt":"","more":"<h1 id=\"Shell变量\"><a href=\"#Shell变量\" class=\"headerlink\" title=\"Shell变量\"></a>Shell变量</h1><h2 id=\"查看shells\"><a href=\"#查看shells\" class=\"headerlink\" title=\"查看shells\"></a>查看shells</h2><p><code>/etc/shells</code></p>\n<h2 id=\"查看命令是否为bash内置\"><a href=\"#查看命令是否为bash内置\" class=\"headerlink\" title=\"查看命令是否为bash内置\"></a>查看命令是否为bash内置</h2><h3 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">type</span> <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>选项</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-t</td>\n<td>显示其类型</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>当name为外部命令时显示完整文件名</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>显示PATH中全部name</td>\n</tr>\n</tbody></table>\n<h2 id=\"命令的执行小技巧\"><a href=\"#命令的执行小技巧\" class=\"headerlink\" title=\"命令的执行小技巧\"></a>命令的执行小技巧</h2><table>\n<thead>\n<tr>\n<th>组合键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ctrl+u&#x2F;ctrl+k</td>\n<td>从光标处向前或向后删除命令串</td>\n</tr>\n<tr>\n<td>ctrl+a&#x2F;ctrl+e</td>\n<td>让光标移动到整个命令行最前面或最后面</td>\n</tr>\n</tbody></table>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看变量</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$var</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;var&#125;</span>\n<span class=\"token comment\"># 设置变量</span>\n<span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>kawhicurry <span class=\"token comment\"># 变量只能以字母开头，只能包含数字和字母</span>\n<span class=\"token comment\"># 不能随意空格，加空格方式如下</span>\n<span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"kawhi curry\"</span>\n<span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>kawhi<span class=\"token punctuation\">\\</span> curry\n<span class=\"token comment\"># 单引号和双引号的区别</span>\n<span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>‘<span class=\"token environment constant\">$USER</span>’ <span class=\"token comment\"># 单引号内仅为普通字符</span>\n<span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token environment constant\">$USER</span>\"</span> <span class=\"token comment\"># 双引号内变量保持原本含义</span>\n<span class=\"token comment\"># 取得其他指令所提供的信息</span>\n<span class=\"token assign-left variable\">version</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">uname</span> -r<span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">version</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">uname</span> -r<span class=\"token variable\">`</span></span>\n<span class=\"token comment\"># 扩增变量内容</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token environment constant\">$PATH</span>\"</span>:/home/bin\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;<span class=\"token environment constant\">PATH</span>&#125;</span>:/home/bin\n<span class=\"token comment\"># 变量需要在其他子程序执行</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token environment constant\">PATH</span> <span class=\"token comment\"># 注意不需要加$</span>\n<span class=\"token comment\"># 取消变量</span>\n<span class=\"token builtin class-name\">unset</span> version <span class=\"token comment\"># 也不需要加$</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><h3 id=\"env\"><a href=\"#env\" class=\"headerlink\" title=\"env\"></a>env</h3><p>查看环境变量</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">env</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">XDG_SESSION_ID</span></span><span class=\"token operator\">=</span><span class=\"token number\">5747</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HOSTNAME</span></span><span class=\"token operator\">=</span>Shuihua\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">TERM</span></span><span class=\"token operator\">=</span>xterm <span class=\"token comment\"># 终端环境</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">SHELL</span></span><span class=\"token operator\">=</span>/bin/bash <span class=\"token comment\"># shell环境</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HISTSIZE</span></span><span class=\"token operator\">=</span><span class=\"token number\">1000</span> <span class=\"token comment\"># history记录的条数</span>\n<span class=\"token assign-left variable\">SSH_TTY</span><span class=\"token operator\">=</span>/dev/pts/1\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">USER</span></span><span class=\"token operator\">=</span>root <span class=\"token comment\"># 当前用户名称</span>\n<span class=\"token assign-left variable\">MAIL</span><span class=\"token operator\">=</span>/var/spool/mail/root <span class=\"token comment\"># 邮箱</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PWD</span></span><span class=\"token operator\">=</span>/root\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LANG</span></span><span class=\"token operator\">=</span>en_US.UTF-8 <span class=\"token comment\"># 语系</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HISTCONTROL</span></span><span class=\"token operator\">=</span>ignoredups\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">SHLVL</span></span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HOME</span></span><span class=\"token operator\">=</span>/root\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LOGNAME</span></span><span class=\"token operator\">=</span>root <span class=\"token comment\">#登陆人</span>\n<span class=\"token assign-left variable\">SSH_CONNECTION</span><span class=\"token operator\">=</span><span class=\"token number\">175.5</span>.235.93 <span class=\"token number\">43351</span> <span class=\"token number\">172.29</span>.89.99 <span class=\"token number\">22</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LESSOPEN</span></span><span class=\"token operator\">=</span><span class=\"token operator\">||</span>/usr/bin/lesspipe.sh %s\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">XDG_RUNTIME_DIR</span></span><span class=\"token operator\">=</span>/run/user/0\n<span class=\"token assign-left variable\">_</span><span class=\"token operator\">=</span>/usr/bin/env <span class=\"token comment\"># 上一次使用的命令的最后一个参数（或是命令本身）</span>\n\n<span class=\"token comment\"># 其他</span>\n<span class=\"token environment constant\">RANDOM</span> <span class=\"token comment\"># 位于/dev/random的随机数生成器，生成0~32768的随机数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h3><p>查看所有变量</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">set</span> <span class=\"token comment\"># 节选</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HOSTNAME</span></span><span class=\"token operator\">=</span>Shuihua\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HOSTTYPE</span></span><span class=\"token operator\">=</span>x86_64 <span class=\"token comment\"># cpu架构</span>\n<span class=\"token assign-left variable\">ID</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">MACHTYPE</span></span><span class=\"token operator\">=</span>x86_64-redhat-linux-gnu <span class=\"token comment\"># 机器硬件等级</span>\n<span class=\"token assign-left variable\">MAIL</span><span class=\"token operator\">=</span>/var/spool/mail/root\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">MAILCHECK</span></span><span class=\"token operator\">=</span><span class=\"token number\">60</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">OPTERR</span></span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">OPTIND</span></span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">OSTYPE</span></span><span class=\"token operator\">=</span>linux-gnu <span class=\"token comment\"># 操作系统等级</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PIPESTATUS</span></span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PPID</span></span><span class=\"token operator\">=</span><span class=\"token number\">26032</span>\n<span class=\"token assign-left variable\">PROMPT_COMMAND</span><span class=\"token operator\">=</span><span class=\"token string\">'printf \"\\033]0;%s@%s:%s\\007\" \"$&#123;USER&#125;\" \"$&#123;HOSTNAME%%.*&#125;\" \"$&#123;PWD/#$HOME/~&#125;\"'</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PS1</span></span><span class=\"token operator\">=</span><span class=\"token string\">'[\\u@\\h \\W]\\$ '</span> <span class=\"token comment\"># cmd-line 的 prompt</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PS2</span></span><span class=\"token operator\">=</span><span class=\"token string\">'> '</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PS4</span></span><span class=\"token operator\">=</span><span class=\"token string\">'+ '</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PWD</span></span><span class=\"token operator\">=</span>/root\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">SHELL</span></span><span class=\"token operator\">=</span>/bin/bash\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">SHELLOPTS</span></span><span class=\"token operator\">=</span>braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">SHLVL</span></span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token assign-left variable\">SSH_TTY</span><span class=\"token operator\">=</span>/dev/pts/1\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">TERM</span></span><span class=\"token operator\">=</span>xterm\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">UID</span></span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">USER</span></span><span class=\"token operator\">=</span>root\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">XDG_RUNTIME_DIR</span></span><span class=\"token operator\">=</span>/run/user/0\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">XDG_SESSION_ID</span></span><span class=\"token operator\">=</span><span class=\"token number\">5747</span>\n<span class=\"token assign-left variable\">_</span><span class=\"token operator\">=</span>set\n<span class=\"token assign-left variable\">colors</span><span class=\"token operator\">=</span>/root/.dircolors<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"语系变量\"><a href=\"#语系变量\" class=\"headerlink\" title=\"语系变量\"></a>语系变量</h2><h3 id=\"locale\"><a href=\"#locale\" class=\"headerlink\" title=\"locale\"></a>locale</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">locale -a <span class=\"token comment\"># 查看所有支持的语系</span>\nlocale <span class=\"token comment\"># 查看当前使用的语系</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LANG</span></span><span class=\"token operator\">=</span>en_US.UTF-8\n<span class=\"token assign-left variable\">LC_CTYPE</span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_NUMERIC</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_TIME</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\">LC_COLLATE</span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_MONETARY</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\">LC_MESSAGES</span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_PAPER</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_NAME</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_ADDRESS</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_TELEPHONE</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_MEASUREMENT</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_IDENTIFICATION</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"en_US.UTF-8\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_ALL</span></span><span class=\"token operator\">=</span>\n<span class=\"token comment\"># 系统的整体语系</span>\n<span class=\"token function\">cat</span> /etc/locale.conf\n<span class=\"token comment\"># 修改语系</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">locale_var</span><span class=\"token operator\">=</span>language <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"变量的赋值，声明\"><a href=\"#变量的赋值，声明\" class=\"headerlink\" title=\"变量的赋值，声明\"></a>变量的赋值，声明</h2><h3 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read\"></a>read</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># read [-pt] var</span>\n<span class=\"token comment\"># -p 后面跟提示信息</span>\n<span class=\"token comment\"># -t 实践限制，单位秒</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"declare-typeset\"><a href=\"#declare-typeset\" class=\"headerlink\" title=\"declare,typeset\"></a>declare,typeset</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a</td>\n<td>将后面的变量设置为数组</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>将后面的变量设置为整数</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>export</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>readonly</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>查看变量类型</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># declare [-aixr] var</span>\n<span class=\"token builtin class-name\">declare</span> -x <span class=\"token function\">sum</span> <span class=\"token comment\"># sum 变为环境变量</span>\n<span class=\"token builtin class-name\">declare</span> +x <span class=\"token function\">sum</span> <span class=\"token comment\"># 取消sum的环境变量属性</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"文件系统和程序的限制\"><a href=\"#文件系统和程序的限制\" class=\"headerlink\" title=\"文件系统和程序的限制\"></a>文件系统和程序的限制</h2><h3 id=\"ulimit\"><a href=\"#ulimit\" class=\"headerlink\" title=\"ulimit\"></a>ulimit</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># ulimit [-option] [配额]</span>\n<span class=\"token builtin class-name\">ulimit</span> -a <span class=\"token comment\"># 查看当前所有的限制额度</span>\n<span class=\"token comment\"># 具体选项通过上面这条看看就知道了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"变量中的内容的删除、取代和替换\"><a href=\"#变量中的内容的删除、取代和替换\" class=\"headerlink\" title=\"变量中的内容的删除、取代和替换\"></a>变量中的内容的删除、取代和替换</h2><h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>使用<code>#</code>和<code>%</code></p>\n<ul>\n<li><code>#</code>删除<strong>从前往后</strong>符合替换条件的<strong>最短</strong>的那个</li>\n<li><code>##</code>删除<strong>从前往后</strong>符合替换条件的<strong>最长</strong>的那个</li>\n<li><code>%</code>删除<strong>从后往前</strong>符合替换条件的<strong>最短</strong>的那个</li>\n<li><code>%</code>删除<strong>从后往前</strong>符合替换条件的<strong>最长</strong>的那个</li>\n<li>使用通配符<code>*</code></li>\n</ul>\n<h3 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h3><p>使用<code>/</code>和<code>//</code></p>\n<ul>\n<li><code>/</code>会将<strong>第一个</strong>符合条件的内容替换</li>\n<li><code>//</code>会将<strong>所有</strong>符合条件的内容替换</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">path</span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;<span class=\"token environment constant\">PATH</span>&#125;</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;path<span class=\"token operator\">#</span><span class=\"token operator\">/</span>*local<span class=\"token operator\">/</span>bin<span class=\"token operator\">:</span>&#125;</span> <span class=\"token comment\"># 删除path变量中从前往后最短的符合该条件的内容</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$&#123;path<span class=\"token operator\">/</span>sbin<span class=\"token operator\">/</span>SBIN&#125;</span> <span class=\"token comment\"># 将path变量中第一个符合sbin的字符串替换为后面的SBIN</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"默认变量和变量检测\"><a href=\"#默认变量和变量检测\" class=\"headerlink\" title=\"默认变量和变量检测\"></a>默认变量和变量检测</h3><p>使用<code>-</code>，<code>+</code>，<code>?</code>和<code>:</code></p>\n<p><strong>这个功能超好，但是没法写笔记</strong></p>\n"},{"title":"重学linux（7）","abbrlink":"6a7d7eac","date":"2022-02-10T11:58:13.000Z","_content":"\n# 别名与历史\n\n## alias\n\nalias\n\nunalias\n\n## history\n\n```bash\n$ history [n]\n$ history [-c]\n$ history [-raw] histfiles # default is ~/.\n# r : read histfiles (connect with var ${HISTFILESIZE})\n# a : new command will be add to histfiles\n# w : command before will be add to histfiles\n```\n\n## !!!\n\n```bash\n$ ! # 执行上一条命令\n$ !! # 上上条\n$ !5 # 第5条（使用history查看）\n$ !al # 执行最近以al开头的命令\n```\n\n# Bash的操作环境\n\n## PATH\n\n查找顺序\n\n1. 相对/绝对路径\n2. alias\n3. bash's builtin command\n4. in ${PATH}\n\n## bash的登录信息\n\n### /etc/issue\n\n登录页面。使用`man issue`和`man agetty`查看参数和书写方式。\n\n除了`/etc/issue`还有个`/etc/issue.net`，用于telnet登录的欢迎信息\n\n### /etc/motd\n\n用户登录提示信息\n\n**注**：在ubuntu这样的发行版中，motd是动态生成的，如ubuntu实际上的motd文件时`/run/motd.dynamic`，而该文件是由`/etc/update-motd.d/`下的脚本生成的，初次之外，`/etc/pam.d/login`文件设置了开启记录系统的上一次登录时间。\n\n### 上述两个文件的区别？\n\n`motd` represent `message of today`\n\n用于某个用户登录时（毕竟linux设计上是多用户os），展示的提示信息。\n\n`issue`用于登录之前，tty显示的内容。\n\n如果是远程登录，`issue`的内容会显示在`motd`之前。\n\n## bash的环境配置文件\n\n**注**：`login shell`和`non-login shell`读取的文件不同\n\n### /etc/profile（login shell only）\n\n根据uid来读取不同的配置，主要是通过调用其他脚本来设置环境，设定的内容包括：`PATH,MAIL,USER,umask`。\n\n### /etc/profile.d/*.sh\n\n只要脚本文件位于该目录下且具有`r`（注意是r，不是x）的权限，就可以被`/etc/profile`调用\n\n### /etc/locale.conf\n\n由`/etc/profile.d/lang.sh`调用，设定了os的语系\n\n### /usr/share/bash-completion/completion/*\n\n由`/etc/profile.d/bash_completion.sh`调用，除了命令补齐和文件名补齐之外，还提供了命令的选项和参数补齐。\n\n### ~/bash_profile（login shell only）\n\n- ~/.bash_profile\n- ~/.bash_login\n- ~/.profile\n\n上述三个文件只读取其中一个，优先级由上到下\n\n**注**：ubuntu下的`~/.profile`会读取下面的`~/.bashrc`，这也是为什么`bashrc`文件中的内容也能在login shell中生效的原因。\n\n### ~/.bashrc(non-login shell only)\n\n来源于`/etc/skel/.bashrc`。\n\n会去调用`/etc/bashrc`和`/etc/profile.d/*.sh`，来获取系统环境\n\n### 其他文件\n\n- `/etc/man_db.conf`：man page的路径\n- `~/.bash_history`：历史记录\n- `~/.bash_logout`：注销bash后执行的内容\n\n### 总结\n\n- 对于login shell\n  - 读取/etc/profile\n    - 读取/etc/proflie.d/*.sh\n      - 调用如/etc/locale.conf之类的文件\n    - 读取/etc/bashrc或/etc/bash.bashrc\n      - 调用其他配置文件\n  - 读取~/.bash_profile（或其他的profile）\n    - 读取~/.bashrc\n- 对于non-login shell\n  - 读取~/.bashrc\n    - 读取/etc/bashrc或/etc/bash.bashrc\n    - 读取/etc/profile.d/*.sh\n\n## 终端的环境设置\n\n### stty\n\n```bash\n$ stty -a # 查看所有终端配置\n$ stty erase ^h # 设置某个按键\n```\n\n| 参数  | 含义                 |\n| ----- | -------------------- |\n| intr  | interrupt signal     |\n| quit  | quit signal          |\n| erase | delete character     |\n| kill  | delete all charcater |\n| eof   | end of line          |\n| start | restart              |\n| stop  | pause                |\n| susp  | terminal stop signal |\n\n### set\n\n使用`echo $-`查看set已经设置的内容\n\n### 通配符\n\n| 符号 | 含义                           |\n| ---- | ------------------------------ |\n| *    | 0到无穷多任意字符              |\n| ？   | 一定有一个字符                 |\n| []   | 一定有一个在括号里的字符       |\n| [-]  | 减号表示在编码顺序内的一定字符 |\n| [^]  | ^表示反选                      |\n\n","source":"_posts/Operation/重学linux（7）.md","raw":"---\ntitle: 重学linux（7）\ntags:\n  - 专栏：重学linux\n  - linux\ncategories: Operation\nabbrlink: 6a7d7eac\ndate: 2022-02-10 19:58:13\n---\n\n# 别名与历史\n\n## alias\n\nalias\n\nunalias\n\n## history\n\n```bash\n$ history [n]\n$ history [-c]\n$ history [-raw] histfiles # default is ~/.\n# r : read histfiles (connect with var ${HISTFILESIZE})\n# a : new command will be add to histfiles\n# w : command before will be add to histfiles\n```\n\n## !!!\n\n```bash\n$ ! # 执行上一条命令\n$ !! # 上上条\n$ !5 # 第5条（使用history查看）\n$ !al # 执行最近以al开头的命令\n```\n\n# Bash的操作环境\n\n## PATH\n\n查找顺序\n\n1. 相对/绝对路径\n2. alias\n3. bash's builtin command\n4. in ${PATH}\n\n## bash的登录信息\n\n### /etc/issue\n\n登录页面。使用`man issue`和`man agetty`查看参数和书写方式。\n\n除了`/etc/issue`还有个`/etc/issue.net`，用于telnet登录的欢迎信息\n\n### /etc/motd\n\n用户登录提示信息\n\n**注**：在ubuntu这样的发行版中，motd是动态生成的，如ubuntu实际上的motd文件时`/run/motd.dynamic`，而该文件是由`/etc/update-motd.d/`下的脚本生成的，初次之外，`/etc/pam.d/login`文件设置了开启记录系统的上一次登录时间。\n\n### 上述两个文件的区别？\n\n`motd` represent `message of today`\n\n用于某个用户登录时（毕竟linux设计上是多用户os），展示的提示信息。\n\n`issue`用于登录之前，tty显示的内容。\n\n如果是远程登录，`issue`的内容会显示在`motd`之前。\n\n## bash的环境配置文件\n\n**注**：`login shell`和`non-login shell`读取的文件不同\n\n### /etc/profile（login shell only）\n\n根据uid来读取不同的配置，主要是通过调用其他脚本来设置环境，设定的内容包括：`PATH,MAIL,USER,umask`。\n\n### /etc/profile.d/*.sh\n\n只要脚本文件位于该目录下且具有`r`（注意是r，不是x）的权限，就可以被`/etc/profile`调用\n\n### /etc/locale.conf\n\n由`/etc/profile.d/lang.sh`调用，设定了os的语系\n\n### /usr/share/bash-completion/completion/*\n\n由`/etc/profile.d/bash_completion.sh`调用，除了命令补齐和文件名补齐之外，还提供了命令的选项和参数补齐。\n\n### ~/bash_profile（login shell only）\n\n- ~/.bash_profile\n- ~/.bash_login\n- ~/.profile\n\n上述三个文件只读取其中一个，优先级由上到下\n\n**注**：ubuntu下的`~/.profile`会读取下面的`~/.bashrc`，这也是为什么`bashrc`文件中的内容也能在login shell中生效的原因。\n\n### ~/.bashrc(non-login shell only)\n\n来源于`/etc/skel/.bashrc`。\n\n会去调用`/etc/bashrc`和`/etc/profile.d/*.sh`，来获取系统环境\n\n### 其他文件\n\n- `/etc/man_db.conf`：man page的路径\n- `~/.bash_history`：历史记录\n- `~/.bash_logout`：注销bash后执行的内容\n\n### 总结\n\n- 对于login shell\n  - 读取/etc/profile\n    - 读取/etc/proflie.d/*.sh\n      - 调用如/etc/locale.conf之类的文件\n    - 读取/etc/bashrc或/etc/bash.bashrc\n      - 调用其他配置文件\n  - 读取~/.bash_profile（或其他的profile）\n    - 读取~/.bashrc\n- 对于non-login shell\n  - 读取~/.bashrc\n    - 读取/etc/bashrc或/etc/bash.bashrc\n    - 读取/etc/profile.d/*.sh\n\n## 终端的环境设置\n\n### stty\n\n```bash\n$ stty -a # 查看所有终端配置\n$ stty erase ^h # 设置某个按键\n```\n\n| 参数  | 含义                 |\n| ----- | -------------------- |\n| intr  | interrupt signal     |\n| quit  | quit signal          |\n| erase | delete character     |\n| kill  | delete all charcater |\n| eof   | end of line          |\n| start | restart              |\n| stop  | pause                |\n| susp  | terminal stop signal |\n\n### set\n\n使用`echo $-`查看set已经设置的内容\n\n### 通配符\n\n| 符号 | 含义                           |\n| ---- | ------------------------------ |\n| *    | 0到无穷多任意字符              |\n| ？   | 一定有一个字符                 |\n| []   | 一定有一个在括号里的字符       |\n| [-]  | 减号表示在编码顺序内的一定字符 |\n| [^]  | ^表示反选                      |\n\n","slug":"重学linux（7）","published":1,"category":"Operation","updated":"2022-02-11T07:13:45.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxq002i8wulbh6s7fch","content":"<h1 id=\"别名与历史\"><a href=\"#别名与历史\" class=\"headerlink\" title=\"别名与历史\"></a>别名与历史</h1><h2 id=\"alias\"><a href=\"#alias\" class=\"headerlink\" title=\"alias\"></a>alias</h2><p>alias</p>\n<p>unalias</p>\n<h2 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">history</span> <span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n$ <span class=\"token function\">history</span> <span class=\"token punctuation\">[</span>-c<span class=\"token punctuation\">]</span>\n$ <span class=\"token function\">history</span> <span class=\"token punctuation\">[</span>-raw<span class=\"token punctuation\">]</span> histfiles <span class=\"token comment\"># default is ~/.</span>\n<span class=\"token comment\"># r : read histfiles (connect with var $&#123;HISTFILESIZE&#125;)</span>\n<span class=\"token comment\"># a : new command will be add to histfiles</span>\n<span class=\"token comment\"># w : command before will be add to histfiles</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"!!!\"></a>!!!</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token operator\">!</span> <span class=\"token comment\"># 执行上一条命令</span>\n$ <span class=\"token operator\">!</span><span class=\"token operator\">!</span> <span class=\"token comment\"># 上上条</span>\n$ <span class=\"token operator\">!</span><span class=\"token number\">5</span> <span class=\"token comment\"># 第5条（使用history查看）</span>\n$ <span class=\"token operator\">!</span>al <span class=\"token comment\"># 执行最近以al开头的命令</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Bash的操作环境\"><a href=\"#Bash的操作环境\" class=\"headerlink\" title=\"Bash的操作环境\"></a>Bash的操作环境</h1><h2 id=\"PATH\"><a href=\"#PATH\" class=\"headerlink\" title=\"PATH\"></a>PATH</h2><p>查找顺序</p>\n<ol>\n<li>相对&#x2F;绝对路径</li>\n<li>alias</li>\n<li>bash’s builtin command</li>\n<li>in ${PATH}</li>\n</ol>\n<h2 id=\"bash的登录信息\"><a href=\"#bash的登录信息\" class=\"headerlink\" title=\"bash的登录信息\"></a>bash的登录信息</h2><h3 id=\"x2F-etc-x2F-issue\"><a href=\"#x2F-etc-x2F-issue\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;issue\"></a>&#x2F;etc&#x2F;issue</h3><p>登录页面。使用<code>man issue</code>和<code>man agetty</code>查看参数和书写方式。</p>\n<p>除了<code>/etc/issue</code>还有个<code>/etc/issue.net</code>，用于telnet登录的欢迎信息</p>\n<h3 id=\"x2F-etc-x2F-motd\"><a href=\"#x2F-etc-x2F-motd\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;motd\"></a>&#x2F;etc&#x2F;motd</h3><p>用户登录提示信息</p>\n<p><strong>注</strong>：在ubuntu这样的发行版中，motd是动态生成的，如ubuntu实际上的motd文件时<code>/run/motd.dynamic</code>，而该文件是由<code>/etc/update-motd.d/</code>下的脚本生成的，初次之外，<code>/etc/pam.d/login</code>文件设置了开启记录系统的上一次登录时间。</p>\n<h3 id=\"上述两个文件的区别？\"><a href=\"#上述两个文件的区别？\" class=\"headerlink\" title=\"上述两个文件的区别？\"></a>上述两个文件的区别？</h3><p><code>motd</code> represent <code>message of today</code></p>\n<p>用于某个用户登录时（毕竟linux设计上是多用户os），展示的提示信息。</p>\n<p><code>issue</code>用于登录之前，tty显示的内容。</p>\n<p>如果是远程登录，<code>issue</code>的内容会显示在<code>motd</code>之前。</p>\n<h2 id=\"bash的环境配置文件\"><a href=\"#bash的环境配置文件\" class=\"headerlink\" title=\"bash的环境配置文件\"></a>bash的环境配置文件</h2><p><strong>注</strong>：<code>login shell</code>和<code>non-login shell</code>读取的文件不同</p>\n<h3 id=\"x2F-etc-x2F-profile（login-shell-only）\"><a href=\"#x2F-etc-x2F-profile（login-shell-only）\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;profile（login shell only）\"></a>&#x2F;etc&#x2F;profile（login shell only）</h3><p>根据uid来读取不同的配置，主要是通过调用其他脚本来设置环境，设定的内容包括：<code>PATH,MAIL,USER,umask</code>。</p>\n<h3 id=\"x2F-etc-x2F-profile-d-x2F-sh\"><a href=\"#x2F-etc-x2F-profile-d-x2F-sh\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;profile.d&#x2F;*.sh\"></a>&#x2F;etc&#x2F;profile.d&#x2F;*.sh</h3><p>只要脚本文件位于该目录下且具有<code>r</code>（注意是r，不是x）的权限，就可以被<code>/etc/profile</code>调用</p>\n<h3 id=\"x2F-etc-x2F-locale-conf\"><a href=\"#x2F-etc-x2F-locale-conf\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;locale.conf\"></a>&#x2F;etc&#x2F;locale.conf</h3><p>由<code>/etc/profile.d/lang.sh</code>调用，设定了os的语系</p>\n<h3 id=\"x2F-usr-x2F-share-x2F-bash-completion-x2F-completion-x2F\"><a href=\"#x2F-usr-x2F-share-x2F-bash-completion-x2F-completion-x2F\" class=\"headerlink\" title=\"&#x2F;usr&#x2F;share&#x2F;bash-completion&#x2F;completion&#x2F;*\"></a>&#x2F;usr&#x2F;share&#x2F;bash-completion&#x2F;completion&#x2F;*</h3><p>由<code>/etc/profile.d/bash_completion.sh</code>调用，除了命令补齐和文件名补齐之外，还提供了命令的选项和参数补齐。</p>\n<h3 id=\"x2F-bash-profile（login-shell-only）\"><a href=\"#x2F-bash-profile（login-shell-only）\" class=\"headerlink\" title=\"~&#x2F;bash_profile（login shell only）\"></a>~&#x2F;bash_profile（login shell only）</h3><ul>\n<li>~&#x2F;.bash_profile</li>\n<li>~&#x2F;.bash_login</li>\n<li>~&#x2F;.profile</li>\n</ul>\n<p>上述三个文件只读取其中一个，优先级由上到下</p>\n<p><strong>注</strong>：ubuntu下的<code>~/.profile</code>会读取下面的<code>~/.bashrc</code>，这也是为什么<code>bashrc</code>文件中的内容也能在login shell中生效的原因。</p>\n<h3 id=\"x2F-bashrc-non-login-shell-only\"><a href=\"#x2F-bashrc-non-login-shell-only\" class=\"headerlink\" title=\"~&#x2F;.bashrc(non-login shell only)\"></a>~&#x2F;.bashrc(non-login shell only)</h3><p>来源于<code>/etc/skel/.bashrc</code>。</p>\n<p>会去调用<code>/etc/bashrc</code>和<code>/etc/profile.d/*.sh</code>，来获取系统环境</p>\n<h3 id=\"其他文件\"><a href=\"#其他文件\" class=\"headerlink\" title=\"其他文件\"></a>其他文件</h3><ul>\n<li><code>/etc/man_db.conf</code>：man page的路径</li>\n<li><code>~/.bash_history</code>：历史记录</li>\n<li><code>~/.bash_logout</code>：注销bash后执行的内容</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>对于login shell<ul>\n<li>读取&#x2F;etc&#x2F;profile<ul>\n<li>读取&#x2F;etc&#x2F;proflie.d&#x2F;*.sh<ul>\n<li>调用如&#x2F;etc&#x2F;locale.conf之类的文件</li>\n</ul>\n</li>\n<li>读取&#x2F;etc&#x2F;bashrc或&#x2F;etc&#x2F;bash.bashrc<ul>\n<li>调用其他配置文件</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>读取~&#x2F;.bash_profile（或其他的profile）<ul>\n<li>读取~&#x2F;.bashrc</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>对于non-login shell<ul>\n<li>读取~&#x2F;.bashrc<ul>\n<li>读取&#x2F;etc&#x2F;bashrc或&#x2F;etc&#x2F;bash.bashrc</li>\n<li>读取&#x2F;etc&#x2F;profile.d&#x2F;*.sh</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"终端的环境设置\"><a href=\"#终端的环境设置\" class=\"headerlink\" title=\"终端的环境设置\"></a>终端的环境设置</h2><h3 id=\"stty\"><a href=\"#stty\" class=\"headerlink\" title=\"stty\"></a>stty</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ stty -a <span class=\"token comment\"># 查看所有终端配置</span>\n$ stty erase ^h <span class=\"token comment\"># 设置某个按键</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>intr</td>\n<td>interrupt signal</td>\n</tr>\n<tr>\n<td>quit</td>\n<td>quit signal</td>\n</tr>\n<tr>\n<td>erase</td>\n<td>delete character</td>\n</tr>\n<tr>\n<td>kill</td>\n<td>delete all charcater</td>\n</tr>\n<tr>\n<td>eof</td>\n<td>end of line</td>\n</tr>\n<tr>\n<td>start</td>\n<td>restart</td>\n</tr>\n<tr>\n<td>stop</td>\n<td>pause</td>\n</tr>\n<tr>\n<td>susp</td>\n<td>terminal stop signal</td>\n</tr>\n</tbody></table>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h3><p>使用<code>echo $-</code>查看set已经设置的内容</p>\n<h3 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h3><table>\n<thead>\n<tr>\n<th>符号</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>0到无穷多任意字符</td>\n</tr>\n<tr>\n<td>？</td>\n<td>一定有一个字符</td>\n</tr>\n<tr>\n<td>[]</td>\n<td>一定有一个在括号里的字符</td>\n</tr>\n<tr>\n<td>[-]</td>\n<td>减号表示在编码顺序内的一定字符</td>\n</tr>\n<tr>\n<td>[^]</td>\n<td>^表示反选</td>\n</tr>\n</tbody></table>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/re04.jpg","excerpt":"","more":"<h1 id=\"别名与历史\"><a href=\"#别名与历史\" class=\"headerlink\" title=\"别名与历史\"></a>别名与历史</h1><h2 id=\"alias\"><a href=\"#alias\" class=\"headerlink\" title=\"alias\"></a>alias</h2><p>alias</p>\n<p>unalias</p>\n<h2 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">history</span> <span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n$ <span class=\"token function\">history</span> <span class=\"token punctuation\">[</span>-c<span class=\"token punctuation\">]</span>\n$ <span class=\"token function\">history</span> <span class=\"token punctuation\">[</span>-raw<span class=\"token punctuation\">]</span> histfiles <span class=\"token comment\"># default is ~/.</span>\n<span class=\"token comment\"># r : read histfiles (connect with var $&#123;HISTFILESIZE&#125;)</span>\n<span class=\"token comment\"># a : new command will be add to histfiles</span>\n<span class=\"token comment\"># w : command before will be add to histfiles</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"!!!\"></a>!!!</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token operator\">!</span> <span class=\"token comment\"># 执行上一条命令</span>\n$ <span class=\"token operator\">!</span><span class=\"token operator\">!</span> <span class=\"token comment\"># 上上条</span>\n$ <span class=\"token operator\">!</span><span class=\"token number\">5</span> <span class=\"token comment\"># 第5条（使用history查看）</span>\n$ <span class=\"token operator\">!</span>al <span class=\"token comment\"># 执行最近以al开头的命令</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Bash的操作环境\"><a href=\"#Bash的操作环境\" class=\"headerlink\" title=\"Bash的操作环境\"></a>Bash的操作环境</h1><h2 id=\"PATH\"><a href=\"#PATH\" class=\"headerlink\" title=\"PATH\"></a>PATH</h2><p>查找顺序</p>\n<ol>\n<li>相对&#x2F;绝对路径</li>\n<li>alias</li>\n<li>bash’s builtin command</li>\n<li>in ${PATH}</li>\n</ol>\n<h2 id=\"bash的登录信息\"><a href=\"#bash的登录信息\" class=\"headerlink\" title=\"bash的登录信息\"></a>bash的登录信息</h2><h3 id=\"x2F-etc-x2F-issue\"><a href=\"#x2F-etc-x2F-issue\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;issue\"></a>&#x2F;etc&#x2F;issue</h3><p>登录页面。使用<code>man issue</code>和<code>man agetty</code>查看参数和书写方式。</p>\n<p>除了<code>/etc/issue</code>还有个<code>/etc/issue.net</code>，用于telnet登录的欢迎信息</p>\n<h3 id=\"x2F-etc-x2F-motd\"><a href=\"#x2F-etc-x2F-motd\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;motd\"></a>&#x2F;etc&#x2F;motd</h3><p>用户登录提示信息</p>\n<p><strong>注</strong>：在ubuntu这样的发行版中，motd是动态生成的，如ubuntu实际上的motd文件时<code>/run/motd.dynamic</code>，而该文件是由<code>/etc/update-motd.d/</code>下的脚本生成的，初次之外，<code>/etc/pam.d/login</code>文件设置了开启记录系统的上一次登录时间。</p>\n<h3 id=\"上述两个文件的区别？\"><a href=\"#上述两个文件的区别？\" class=\"headerlink\" title=\"上述两个文件的区别？\"></a>上述两个文件的区别？</h3><p><code>motd</code> represent <code>message of today</code></p>\n<p>用于某个用户登录时（毕竟linux设计上是多用户os），展示的提示信息。</p>\n<p><code>issue</code>用于登录之前，tty显示的内容。</p>\n<p>如果是远程登录，<code>issue</code>的内容会显示在<code>motd</code>之前。</p>\n<h2 id=\"bash的环境配置文件\"><a href=\"#bash的环境配置文件\" class=\"headerlink\" title=\"bash的环境配置文件\"></a>bash的环境配置文件</h2><p><strong>注</strong>：<code>login shell</code>和<code>non-login shell</code>读取的文件不同</p>\n<h3 id=\"x2F-etc-x2F-profile（login-shell-only）\"><a href=\"#x2F-etc-x2F-profile（login-shell-only）\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;profile（login shell only）\"></a>&#x2F;etc&#x2F;profile（login shell only）</h3><p>根据uid来读取不同的配置，主要是通过调用其他脚本来设置环境，设定的内容包括：<code>PATH,MAIL,USER,umask</code>。</p>\n<h3 id=\"x2F-etc-x2F-profile-d-x2F-sh\"><a href=\"#x2F-etc-x2F-profile-d-x2F-sh\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;profile.d&#x2F;*.sh\"></a>&#x2F;etc&#x2F;profile.d&#x2F;*.sh</h3><p>只要脚本文件位于该目录下且具有<code>r</code>（注意是r，不是x）的权限，就可以被<code>/etc/profile</code>调用</p>\n<h3 id=\"x2F-etc-x2F-locale-conf\"><a href=\"#x2F-etc-x2F-locale-conf\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;locale.conf\"></a>&#x2F;etc&#x2F;locale.conf</h3><p>由<code>/etc/profile.d/lang.sh</code>调用，设定了os的语系</p>\n<h3 id=\"x2F-usr-x2F-share-x2F-bash-completion-x2F-completion-x2F\"><a href=\"#x2F-usr-x2F-share-x2F-bash-completion-x2F-completion-x2F\" class=\"headerlink\" title=\"&#x2F;usr&#x2F;share&#x2F;bash-completion&#x2F;completion&#x2F;*\"></a>&#x2F;usr&#x2F;share&#x2F;bash-completion&#x2F;completion&#x2F;*</h3><p>由<code>/etc/profile.d/bash_completion.sh</code>调用，除了命令补齐和文件名补齐之外，还提供了命令的选项和参数补齐。</p>\n<h3 id=\"x2F-bash-profile（login-shell-only）\"><a href=\"#x2F-bash-profile（login-shell-only）\" class=\"headerlink\" title=\"~&#x2F;bash_profile（login shell only）\"></a>~&#x2F;bash_profile（login shell only）</h3><ul>\n<li>~&#x2F;.bash_profile</li>\n<li>~&#x2F;.bash_login</li>\n<li>~&#x2F;.profile</li>\n</ul>\n<p>上述三个文件只读取其中一个，优先级由上到下</p>\n<p><strong>注</strong>：ubuntu下的<code>~/.profile</code>会读取下面的<code>~/.bashrc</code>，这也是为什么<code>bashrc</code>文件中的内容也能在login shell中生效的原因。</p>\n<h3 id=\"x2F-bashrc-non-login-shell-only\"><a href=\"#x2F-bashrc-non-login-shell-only\" class=\"headerlink\" title=\"~&#x2F;.bashrc(non-login shell only)\"></a>~&#x2F;.bashrc(non-login shell only)</h3><p>来源于<code>/etc/skel/.bashrc</code>。</p>\n<p>会去调用<code>/etc/bashrc</code>和<code>/etc/profile.d/*.sh</code>，来获取系统环境</p>\n<h3 id=\"其他文件\"><a href=\"#其他文件\" class=\"headerlink\" title=\"其他文件\"></a>其他文件</h3><ul>\n<li><code>/etc/man_db.conf</code>：man page的路径</li>\n<li><code>~/.bash_history</code>：历史记录</li>\n<li><code>~/.bash_logout</code>：注销bash后执行的内容</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>对于login shell<ul>\n<li>读取&#x2F;etc&#x2F;profile<ul>\n<li>读取&#x2F;etc&#x2F;proflie.d&#x2F;*.sh<ul>\n<li>调用如&#x2F;etc&#x2F;locale.conf之类的文件</li>\n</ul>\n</li>\n<li>读取&#x2F;etc&#x2F;bashrc或&#x2F;etc&#x2F;bash.bashrc<ul>\n<li>调用其他配置文件</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>读取~&#x2F;.bash_profile（或其他的profile）<ul>\n<li>读取~&#x2F;.bashrc</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>对于non-login shell<ul>\n<li>读取~&#x2F;.bashrc<ul>\n<li>读取&#x2F;etc&#x2F;bashrc或&#x2F;etc&#x2F;bash.bashrc</li>\n<li>读取&#x2F;etc&#x2F;profile.d&#x2F;*.sh</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"终端的环境设置\"><a href=\"#终端的环境设置\" class=\"headerlink\" title=\"终端的环境设置\"></a>终端的环境设置</h2><h3 id=\"stty\"><a href=\"#stty\" class=\"headerlink\" title=\"stty\"></a>stty</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ stty -a <span class=\"token comment\"># 查看所有终端配置</span>\n$ stty erase ^h <span class=\"token comment\"># 设置某个按键</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>intr</td>\n<td>interrupt signal</td>\n</tr>\n<tr>\n<td>quit</td>\n<td>quit signal</td>\n</tr>\n<tr>\n<td>erase</td>\n<td>delete character</td>\n</tr>\n<tr>\n<td>kill</td>\n<td>delete all charcater</td>\n</tr>\n<tr>\n<td>eof</td>\n<td>end of line</td>\n</tr>\n<tr>\n<td>start</td>\n<td>restart</td>\n</tr>\n<tr>\n<td>stop</td>\n<td>pause</td>\n</tr>\n<tr>\n<td>susp</td>\n<td>terminal stop signal</td>\n</tr>\n</tbody></table>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h3><p>使用<code>echo $-</code>查看set已经设置的内容</p>\n<h3 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h3><table>\n<thead>\n<tr>\n<th>符号</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>0到无穷多任意字符</td>\n</tr>\n<tr>\n<td>？</td>\n<td>一定有一个字符</td>\n</tr>\n<tr>\n<td>[]</td>\n<td>一定有一个在括号里的字符</td>\n</tr>\n<tr>\n<td>[-]</td>\n<td>减号表示在编码顺序内的一定字符</td>\n</tr>\n<tr>\n<td>[^]</td>\n<td>^表示反选</td>\n</tr>\n</tbody></table>\n"},{"title":"重学linux（8）","abbrlink":"321e6efa","date":"2022-02-11T09:16:09.000Z","_content":"\n# 重定向\n\n## stream\n\n- stdin: code 0,< <<\n- stdout: code 1,> >>\n- stderr: code 2,2> 2>>\n\n丢弃数据`/dev/null`\n\n所有输出重定向至同一文件`2>&1`或`&>`\n\n`<<`右侧用于定义结束字符\n\n## `;` ,`&&`和 `||`\n\n  `$?`查看上一条指令的返回值\n\n# pipe\n\n将前一个command的stdout作为后一个command的stdin\n\n*注*：可以使用前面的`2>&1`来使得stdout也通过pipe。\n\n## 选取\n\n### cut\n\n```bash\n# 按分隔符来处理数据\ncut -d 'divide character' -c 'character number' -f field\n# -c 取一个字符区间 如 -c 12- 或 -c -12\n# -f 指定第一个区间\n```\n\n### grep\n\n```bash\n# 按行来处理数据\ngrep 'charcter' filename\n# -c 计算查找到的数量\n# -i 忽略大小写\n# -n 输出符号\n# -v 反选\n```\n\n## 排序\n\n### sort\n\n| 参数 | 含义                     |\n| ---- | ------------------------ |\n| -f   | 忽略大小写               |\n| -b   | 忽略最前面的空格         |\n| -M   | 以月份排序               |\n| -n   | 以纯数字排序             |\n| -r   | 反向                     |\n| -u   | uniq，相同选项只列出一项 |\n| -t   | 分隔符                   |\n| -k   | 选定区间                 |\n\n```bash\n# 一直想干的事，把/etc/passwd按uid从小到大排序\ncat /etc/passwd | sort -t ':' -k 3 -r\n```\n\n### uniq\n\n去重\n\n### wc\n\n统计字数，直接使用输出的数据分别为行数，字数，字符数\n\n可以用选项`-l`,`-w`,`-m`，分别输出\n\n## 双向重定向\n\n### tee\n\n```bash\ntee [-a] file\n# -a append\n```\n\n将数据流分别重定向到file和screen。输送到screen的部分实质上是stdout，也就是说可以接着重定向。\n\n## 字符替换\n\n### tr\n\n删除一段信息中的某些文字\n\n```bash\ntr [-ds] SET1\n# -d delete\n# -s substitude\n\n# 大小写转换\nls -l / | tr '[a-z]' '[A-Z]'\n# 删除字符\ncat /etc/passwd | tr -d ':'\n# dos2unix\ncat file | tr -d '\\r' > newfile # \\r是dos的换行符\n```\n\n### col\n\ntab转空格（终于找到这个令人好东西了，可以解决好多奇怪的tab按键）\n\n```bash\ncol -x # tab转空格\n```\n\n### join\n\n将两个文件有相同数据的部分合并\n\n```bash\njoin -t '分隔符' -1 第x部分 file_1 -2 第y部分 file_2\njoin -t ':' -l 4 /etc/passwd -2 3 /etc/group | head -n 3\n```\n\n过于高级，暂时不展开。\n\n### paste\n\n将两个文件的同一行粘贴在一起\n\n```bash\npaste [-d 分隔符，默认为tab] file_1 file_2\n```\n\n### expand\n\ntab转空格（又来？）\n\n```bash\nexpand [-t tab转空格的数量,默认为8] file\n```\n\n## 文件划分\n\n### split\n\n```bash\nsplit [-bt] file PREFIX\n-b: 按大小划分\n-t: 按行数划分\nPREFIX: 分割后的文件名前缀（后缀会按abc的方式命名）\n\ncd /tmp; split -b 300k /etc/services services\n```\n\n### 重组\n\n使用重定向即可\n\n```bash\ncat services* >> services_back\n```\n\n## 参数代换\n\n### xargs\n\n用于产生某个命令的参数\n\n超级nb的东西，用于给不支持管道的命令提供参数。\n\n```bash\nid root\n# 使用id可以查询某个用户的id信息\n# 接下来查询/etc/passwd中前3个用户的id信息\n cut -d ':' -f 1 /etc/passwd | head -n 3 | id\n# 最后只执行了id，因为id不是管道命令，不接受前面的参数\n cut -d ':' -f 1 /etc/passwd | head -n 3 | xargs -n 1 id\n# 要制定id只接收1个参数，多了也不行\n\nxargs [-0epn] command\n```\n\n| 参数 | 含义                              |\n| ---- | --------------------------------- |\n| -0   | 将stdin中的特殊字符还原成一般字符 |\n| -e   | 指定EOF                           |\n| -p   | 每次执行都询问用户                |\n| -n   | 指定command要使用几个参数         |\n\n## - 减号\n\npipe中，`-`可用于替代stdin和stdout\n\n```bash\ntar -cvf - /home | tar -xvf - -C /tmp/homework\n# 前一个tar打包的数据不会写入到文件，而是交给pipe\n# 后一个tar的stdin来自pipe\n```\n\n# 文件的格式化\n\n## 格式化打印\n\n### printf\n\n```bash\nprintf 'format' content\n# 固定格式（表格形式\nprintf '%10s %5i' content1 content2\n```\n\n过于高级，不再多说，现用现查\n\n## 数据处理\n\n### awk\n\n数据处理工具，适用于小型文本\n\n```bash\nawk 'condition_1{operation_1} condition_2{operation_2}' filename\n```\n\nawk以**行**为一次处理的单位，以**字段**为最小的处理单位。\n\n- \\$1 \\$2 分别表示一行中的第一和第二个字段（默认以空格或tab分割）\n- \\$0表示**第一列**的所有数据\n\n关于数据总共有多少行多少列，可以用以下变量\n\n- NF：每一列拥有的字段数\n- NR：目前awk所处理的是第几段数据\n- FS：目前的分割字符，默认是空格\n\nawk的逻辑运算符与C一致\n\nawk的关键字\n\n- BEGIN从头开始\n- END从末尾开始\n\n## 文件比对\n\n### diff\n\n```bash\ndirr [-bBI] from-file to-file\n# -b 忽略空格差异\n# -B 忽略空白行差异\n# -i 忽略大小写差异\n\n# 以下为diff的输出\n\n3d2 # 左边的第三行被删除（d）了，基准是右边第二行\n< bin:x:2:2:bin:/bin:/usr/sbin/nologin # 这是左边（<)被删除的哪一行\n6c5 # 左边的第六行被替换（c）成了右边第五行\n< games:x:5:60:games:/usr/games:/usr/sbin/nologin # 左边（<）第六行的内容\n---\n> no six line # 接上面，这是右边（>）第五行的内容\n\n```\n\n### cmp\n\n```bash\ncmp [-l] file1 file2\n# -l 将所有不懂点全部标出来，默认只标出第一个\n# cmp可用于比较二进制文件\n```\n\n### patch\n\n使用`diff`制作补丁，然后使用`patch`更新\n\n```bash\n# 流程\n## 记录差异\ndiff -Naur old_file new_file > file.patch\n## 更新\npatch -pN < patch_file\n## 还原\npatch -R -pN < patch_file\n\n# N 表示目录层级，新旧文件在同一目录下时使用-p0即可\n# 更详细的内容在后面y\n```\n\n### pr\n\n文件打印，鸟哥说这玩意参数太多\n","source":"_posts/Operation/重学linux（8）.md","raw":"---\ntitle: 重学linux（8）\ntags:\n  - 专栏：重学linux\n  - linux\ncategories: Operation\nabbrlink: 321e6efa\ndate: 2022-02-11 17:16:09\n---\n\n# 重定向\n\n## stream\n\n- stdin: code 0,< <<\n- stdout: code 1,> >>\n- stderr: code 2,2> 2>>\n\n丢弃数据`/dev/null`\n\n所有输出重定向至同一文件`2>&1`或`&>`\n\n`<<`右侧用于定义结束字符\n\n## `;` ,`&&`和 `||`\n\n  `$?`查看上一条指令的返回值\n\n# pipe\n\n将前一个command的stdout作为后一个command的stdin\n\n*注*：可以使用前面的`2>&1`来使得stdout也通过pipe。\n\n## 选取\n\n### cut\n\n```bash\n# 按分隔符来处理数据\ncut -d 'divide character' -c 'character number' -f field\n# -c 取一个字符区间 如 -c 12- 或 -c -12\n# -f 指定第一个区间\n```\n\n### grep\n\n```bash\n# 按行来处理数据\ngrep 'charcter' filename\n# -c 计算查找到的数量\n# -i 忽略大小写\n# -n 输出符号\n# -v 反选\n```\n\n## 排序\n\n### sort\n\n| 参数 | 含义                     |\n| ---- | ------------------------ |\n| -f   | 忽略大小写               |\n| -b   | 忽略最前面的空格         |\n| -M   | 以月份排序               |\n| -n   | 以纯数字排序             |\n| -r   | 反向                     |\n| -u   | uniq，相同选项只列出一项 |\n| -t   | 分隔符                   |\n| -k   | 选定区间                 |\n\n```bash\n# 一直想干的事，把/etc/passwd按uid从小到大排序\ncat /etc/passwd | sort -t ':' -k 3 -r\n```\n\n### uniq\n\n去重\n\n### wc\n\n统计字数，直接使用输出的数据分别为行数，字数，字符数\n\n可以用选项`-l`,`-w`,`-m`，分别输出\n\n## 双向重定向\n\n### tee\n\n```bash\ntee [-a] file\n# -a append\n```\n\n将数据流分别重定向到file和screen。输送到screen的部分实质上是stdout，也就是说可以接着重定向。\n\n## 字符替换\n\n### tr\n\n删除一段信息中的某些文字\n\n```bash\ntr [-ds] SET1\n# -d delete\n# -s substitude\n\n# 大小写转换\nls -l / | tr '[a-z]' '[A-Z]'\n# 删除字符\ncat /etc/passwd | tr -d ':'\n# dos2unix\ncat file | tr -d '\\r' > newfile # \\r是dos的换行符\n```\n\n### col\n\ntab转空格（终于找到这个令人好东西了，可以解决好多奇怪的tab按键）\n\n```bash\ncol -x # tab转空格\n```\n\n### join\n\n将两个文件有相同数据的部分合并\n\n```bash\njoin -t '分隔符' -1 第x部分 file_1 -2 第y部分 file_2\njoin -t ':' -l 4 /etc/passwd -2 3 /etc/group | head -n 3\n```\n\n过于高级，暂时不展开。\n\n### paste\n\n将两个文件的同一行粘贴在一起\n\n```bash\npaste [-d 分隔符，默认为tab] file_1 file_2\n```\n\n### expand\n\ntab转空格（又来？）\n\n```bash\nexpand [-t tab转空格的数量,默认为8] file\n```\n\n## 文件划分\n\n### split\n\n```bash\nsplit [-bt] file PREFIX\n-b: 按大小划分\n-t: 按行数划分\nPREFIX: 分割后的文件名前缀（后缀会按abc的方式命名）\n\ncd /tmp; split -b 300k /etc/services services\n```\n\n### 重组\n\n使用重定向即可\n\n```bash\ncat services* >> services_back\n```\n\n## 参数代换\n\n### xargs\n\n用于产生某个命令的参数\n\n超级nb的东西，用于给不支持管道的命令提供参数。\n\n```bash\nid root\n# 使用id可以查询某个用户的id信息\n# 接下来查询/etc/passwd中前3个用户的id信息\n cut -d ':' -f 1 /etc/passwd | head -n 3 | id\n# 最后只执行了id，因为id不是管道命令，不接受前面的参数\n cut -d ':' -f 1 /etc/passwd | head -n 3 | xargs -n 1 id\n# 要制定id只接收1个参数，多了也不行\n\nxargs [-0epn] command\n```\n\n| 参数 | 含义                              |\n| ---- | --------------------------------- |\n| -0   | 将stdin中的特殊字符还原成一般字符 |\n| -e   | 指定EOF                           |\n| -p   | 每次执行都询问用户                |\n| -n   | 指定command要使用几个参数         |\n\n## - 减号\n\npipe中，`-`可用于替代stdin和stdout\n\n```bash\ntar -cvf - /home | tar -xvf - -C /tmp/homework\n# 前一个tar打包的数据不会写入到文件，而是交给pipe\n# 后一个tar的stdin来自pipe\n```\n\n# 文件的格式化\n\n## 格式化打印\n\n### printf\n\n```bash\nprintf 'format' content\n# 固定格式（表格形式\nprintf '%10s %5i' content1 content2\n```\n\n过于高级，不再多说，现用现查\n\n## 数据处理\n\n### awk\n\n数据处理工具，适用于小型文本\n\n```bash\nawk 'condition_1{operation_1} condition_2{operation_2}' filename\n```\n\nawk以**行**为一次处理的单位，以**字段**为最小的处理单位。\n\n- \\$1 \\$2 分别表示一行中的第一和第二个字段（默认以空格或tab分割）\n- \\$0表示**第一列**的所有数据\n\n关于数据总共有多少行多少列，可以用以下变量\n\n- NF：每一列拥有的字段数\n- NR：目前awk所处理的是第几段数据\n- FS：目前的分割字符，默认是空格\n\nawk的逻辑运算符与C一致\n\nawk的关键字\n\n- BEGIN从头开始\n- END从末尾开始\n\n## 文件比对\n\n### diff\n\n```bash\ndirr [-bBI] from-file to-file\n# -b 忽略空格差异\n# -B 忽略空白行差异\n# -i 忽略大小写差异\n\n# 以下为diff的输出\n\n3d2 # 左边的第三行被删除（d）了，基准是右边第二行\n< bin:x:2:2:bin:/bin:/usr/sbin/nologin # 这是左边（<)被删除的哪一行\n6c5 # 左边的第六行被替换（c）成了右边第五行\n< games:x:5:60:games:/usr/games:/usr/sbin/nologin # 左边（<）第六行的内容\n---\n> no six line # 接上面，这是右边（>）第五行的内容\n\n```\n\n### cmp\n\n```bash\ncmp [-l] file1 file2\n# -l 将所有不懂点全部标出来，默认只标出第一个\n# cmp可用于比较二进制文件\n```\n\n### patch\n\n使用`diff`制作补丁，然后使用`patch`更新\n\n```bash\n# 流程\n## 记录差异\ndiff -Naur old_file new_file > file.patch\n## 更新\npatch -pN < patch_file\n## 还原\npatch -R -pN < patch_file\n\n# N 表示目录层级，新旧文件在同一目录下时使用-p0即可\n# 更详细的内容在后面y\n```\n\n### pr\n\n文件打印，鸟哥说这玩意参数太多\n","slug":"重学linux（8）","published":1,"category":"Operation","updated":"2022-02-15T03:51:05.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxq002k8wulabvvg263","content":"<h1 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h1><h2 id=\"stream\"><a href=\"#stream\" class=\"headerlink\" title=\"stream\"></a>stream</h2><ul>\n<li>stdin: code 0,&lt; &lt;&lt;</li>\n<li>stdout: code 1,&gt; &gt;&gt;</li>\n<li>stderr: code 2,2&gt; 2&gt;&gt;</li>\n</ul>\n<p>丢弃数据<code>/dev/null</code></p>\n<p>所有输出重定向至同一文件<code>2&gt;&amp;1</code>或<code>&amp;&gt;</code></p>\n<p><code>&lt;&lt;</code>右侧用于定义结束字符</p>\n<h2 id=\"amp-amp-和\"><a href=\"#amp-amp-和\" class=\"headerlink\" title=\"; ,&amp;&amp;和 ||\"></a><code>;</code> ,<code>&amp;&amp;</code>和 <code>||</code></h2><p>  <code>$?</code>查看上一条指令的返回值</p>\n<h1 id=\"pipe\"><a href=\"#pipe\" class=\"headerlink\" title=\"pipe\"></a>pipe</h1><p>将前一个command的stdout作为后一个command的stdin</p>\n<p><em>注</em>：可以使用前面的<code>2&gt;&amp;1</code>来使得stdout也通过pipe。</p>\n<h2 id=\"选取\"><a href=\"#选取\" class=\"headerlink\" title=\"选取\"></a>选取</h2><h3 id=\"cut\"><a href=\"#cut\" class=\"headerlink\" title=\"cut\"></a>cut</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 按分隔符来处理数据</span>\n<span class=\"token function\">cut</span> -d <span class=\"token string\">'divide character'</span> -c <span class=\"token string\">'character number'</span> -f field\n<span class=\"token comment\"># -c 取一个字符区间 如 -c 12- 或 -c -12</span>\n<span class=\"token comment\"># -f 指定第一个区间</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 按行来处理数据</span>\n<span class=\"token function\">grep</span> <span class=\"token string\">'charcter'</span> filename\n<span class=\"token comment\"># -c 计算查找到的数量</span>\n<span class=\"token comment\"># -i 忽略大小写</span>\n<span class=\"token comment\"># -n 输出符号</span>\n<span class=\"token comment\"># -v 反选</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-f</td>\n<td>忽略大小写</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>忽略最前面的空格</td>\n</tr>\n<tr>\n<td>-M</td>\n<td>以月份排序</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>以纯数字排序</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>反向</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>uniq，相同选项只列出一项</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>分隔符</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>选定区间</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 一直想干的事，把/etc/passwd按uid从小到大排序</span>\n<span class=\"token function\">cat</span> /etc/passwd <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> -t <span class=\"token string\">':'</span> -k <span class=\"token number\">3</span> -r<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"uniq\"><a href=\"#uniq\" class=\"headerlink\" title=\"uniq\"></a>uniq</h3><p>去重</p>\n<h3 id=\"wc\"><a href=\"#wc\" class=\"headerlink\" title=\"wc\"></a>wc</h3><p>统计字数，直接使用输出的数据分别为行数，字数，字符数</p>\n<p>可以用选项<code>-l</code>,<code>-w</code>,<code>-m</code>，分别输出</p>\n<h2 id=\"双向重定向\"><a href=\"#双向重定向\" class=\"headerlink\" title=\"双向重定向\"></a>双向重定向</h2><h3 id=\"tee\"><a href=\"#tee\" class=\"headerlink\" title=\"tee\"></a>tee</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tee</span> <span class=\"token punctuation\">[</span>-a<span class=\"token punctuation\">]</span> <span class=\"token function\">file</span>\n<span class=\"token comment\"># -a append</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>将数据流分别重定向到file和screen。输送到screen的部分实质上是stdout，也就是说可以接着重定向。</p>\n<h2 id=\"字符替换\"><a href=\"#字符替换\" class=\"headerlink\" title=\"字符替换\"></a>字符替换</h2><h3 id=\"tr\"><a href=\"#tr\" class=\"headerlink\" title=\"tr\"></a>tr</h3><p>删除一段信息中的某些文字</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tr</span> <span class=\"token punctuation\">[</span>-ds<span class=\"token punctuation\">]</span> SET1\n<span class=\"token comment\"># -d delete</span>\n<span class=\"token comment\"># -s substitude</span>\n\n<span class=\"token comment\"># 大小写转换</span>\n<span class=\"token function\">ls</span> -l / <span class=\"token operator\">|</span> <span class=\"token function\">tr</span> <span class=\"token string\">'[a-z]'</span> <span class=\"token string\">'[A-Z]'</span>\n<span class=\"token comment\"># 删除字符</span>\n<span class=\"token function\">cat</span> /etc/passwd <span class=\"token operator\">|</span> <span class=\"token function\">tr</span> -d <span class=\"token string\">':'</span>\n<span class=\"token comment\"># dos2unix</span>\n<span class=\"token function\">cat</span> <span class=\"token function\">file</span> <span class=\"token operator\">|</span> <span class=\"token function\">tr</span> -d <span class=\"token string\">'\\r'</span> <span class=\"token operator\">></span> newfile <span class=\"token comment\"># \\r是dos的换行符</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"col\"><a href=\"#col\" class=\"headerlink\" title=\"col\"></a>col</h3><p>tab转空格（终于找到这个令人好东西了，可以解决好多奇怪的tab按键）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">col -x <span class=\"token comment\"># tab转空格</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h3><p>将两个文件有相同数据的部分合并</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">join</span> -t <span class=\"token string\">'分隔符'</span> -1 第x部分 file_1 -2 第y部分 file_2\n<span class=\"token function\">join</span> -t <span class=\"token string\">':'</span> -l <span class=\"token number\">4</span> /etc/passwd -2 <span class=\"token number\">3</span> /etc/group <span class=\"token operator\">|</span> <span class=\"token function\">head</span> -n <span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>过于高级，暂时不展开。</p>\n<h3 id=\"paste\"><a href=\"#paste\" class=\"headerlink\" title=\"paste\"></a>paste</h3><p>将两个文件的同一行粘贴在一起</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">paste</span> <span class=\"token punctuation\">[</span>-d 分隔符，默认为tab<span class=\"token punctuation\">]</span> file_1 file_2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"expand\"><a href=\"#expand\" class=\"headerlink\" title=\"expand\"></a>expand</h3><p>tab转空格（又来？）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">expand</span> <span class=\"token punctuation\">[</span>-t tab转空格的数量,默认为8<span class=\"token punctuation\">]</span> <span class=\"token function\">file</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"文件划分\"><a href=\"#文件划分\" class=\"headerlink\" title=\"文件划分\"></a>文件划分</h2><h3 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split\"></a>split</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">split</span> <span class=\"token punctuation\">[</span>-bt<span class=\"token punctuation\">]</span> <span class=\"token function\">file</span> PREFIX\n-b: 按大小划分\n-t: 按行数划分\nPREFIX: 分割后的文件名前缀（后缀会按abc的方式命名）\n\n<span class=\"token builtin class-name\">cd</span> /tmp<span class=\"token punctuation\">;</span> <span class=\"token function\">split</span> -b 300k /etc/services services<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"重组\"><a href=\"#重组\" class=\"headerlink\" title=\"重组\"></a>重组</h3><p>使用重定向即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> services* <span class=\"token operator\">>></span> services_back<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"参数代换\"><a href=\"#参数代换\" class=\"headerlink\" title=\"参数代换\"></a>参数代换</h2><h3 id=\"xargs\"><a href=\"#xargs\" class=\"headerlink\" title=\"xargs\"></a>xargs</h3><p>用于产生某个命令的参数</p>\n<p>超级nb的东西，用于给不支持管道的命令提供参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">id</span> root\n<span class=\"token comment\"># 使用id可以查询某个用户的id信息</span>\n<span class=\"token comment\"># 接下来查询/etc/passwd中前3个用户的id信息</span>\n <span class=\"token function\">cut</span> -d <span class=\"token string\">':'</span> -f <span class=\"token number\">1</span> /etc/passwd <span class=\"token operator\">|</span> <span class=\"token function\">head</span> -n <span class=\"token number\">3</span> <span class=\"token operator\">|</span> <span class=\"token function\">id</span>\n<span class=\"token comment\"># 最后只执行了id，因为id不是管道命令，不接受前面的参数</span>\n <span class=\"token function\">cut</span> -d <span class=\"token string\">':'</span> -f <span class=\"token number\">1</span> /etc/passwd <span class=\"token operator\">|</span> <span class=\"token function\">head</span> -n <span class=\"token number\">3</span> <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> -n <span class=\"token number\">1</span> <span class=\"token function\">id</span>\n<span class=\"token comment\"># 要制定id只接收1个参数，多了也不行</span>\n\n<span class=\"token function\">xargs</span> <span class=\"token punctuation\">[</span>-0epn<span class=\"token punctuation\">]</span> <span class=\"token builtin class-name\">command</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-0</td>\n<td>将stdin中的特殊字符还原成一般字符</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>指定EOF</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>每次执行都询问用户</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>指定command要使用几个参数</td>\n</tr>\n</tbody></table>\n<h2 id=\"减号\"><a href=\"#减号\" class=\"headerlink\" title=\"- 减号\"></a>- 减号</h2><p>pipe中，<code>-</code>可用于替代stdin和stdout</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> -cvf - /home <span class=\"token operator\">|</span> <span class=\"token function\">tar</span> -xvf - -C /tmp/homework\n<span class=\"token comment\"># 前一个tar打包的数据不会写入到文件，而是交给pipe</span>\n<span class=\"token comment\"># 后一个tar的stdin来自pipe</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"文件的格式化\"><a href=\"#文件的格式化\" class=\"headerlink\" title=\"文件的格式化\"></a>文件的格式化</h1><h2 id=\"格式化打印\"><a href=\"#格式化打印\" class=\"headerlink\" title=\"格式化打印\"></a>格式化打印</h2><h3 id=\"printf\"><a href=\"#printf\" class=\"headerlink\" title=\"printf\"></a>printf</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">'format'</span> content\n<span class=\"token comment\"># 固定格式（表格形式</span>\n<span class=\"token builtin class-name\">printf</span> <span class=\"token string\">'%10s %5i'</span> content1 content2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>过于高级，不再多说，现用现查</p>\n<h2 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a>数据处理</h2><h3 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h3><p>数据处理工具，适用于小型文本</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token string\">'condition_1&#123;operation_1&#125; condition_2&#123;operation_2&#125;'</span> filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>awk以<strong>行</strong>为一次处理的单位，以<strong>字段</strong>为最小的处理单位。</p>\n<ul>\n<li>$1 $2 分别表示一行中的第一和第二个字段（默认以空格或tab分割）</li>\n<li>$0表示<strong>第一列</strong>的所有数据</li>\n</ul>\n<p>关于数据总共有多少行多少列，可以用以下变量</p>\n<ul>\n<li>NF：每一列拥有的字段数</li>\n<li>NR：目前awk所处理的是第几段数据</li>\n<li>FS：目前的分割字符，默认是空格</li>\n</ul>\n<p>awk的逻辑运算符与C一致</p>\n<p>awk的关键字</p>\n<ul>\n<li>BEGIN从头开始</li>\n<li>END从末尾开始</li>\n</ul>\n<h2 id=\"文件比对\"><a href=\"#文件比对\" class=\"headerlink\" title=\"文件比对\"></a>文件比对</h2><h3 id=\"diff\"><a href=\"#diff\" class=\"headerlink\" title=\"diff\"></a>diff</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">dirr <span class=\"token punctuation\">[</span>-bBI<span class=\"token punctuation\">]</span> from-file to-file\n<span class=\"token comment\"># -b 忽略空格差异</span>\n<span class=\"token comment\"># -B 忽略空白行差异</span>\n<span class=\"token comment\"># -i 忽略大小写差异</span>\n\n<span class=\"token comment\"># 以下为diff的输出</span>\n\n3d2 <span class=\"token comment\"># 左边的第三行被删除（d）了，基准是右边第二行</span>\n<span class=\"token operator\">&lt;</span> bin:x:2:2:bin:/bin:/usr/sbin/nologin <span class=\"token comment\"># 这是左边（&lt;)被删除的哪一行</span>\n6c5 <span class=\"token comment\"># 左边的第六行被替换（c）成了右边第五行</span>\n<span class=\"token operator\">&lt;</span> games:x:5:60:games:/usr/games:/usr/sbin/nologin <span class=\"token comment\"># 左边（&lt;）第六行的内容</span>\n---\n<span class=\"token operator\">></span> no six line <span class=\"token comment\"># 接上面，这是右边（>）第五行的内容</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"cmp\"><a href=\"#cmp\" class=\"headerlink\" title=\"cmp\"></a>cmp</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cmp</span> <span class=\"token punctuation\">[</span>-l<span class=\"token punctuation\">]</span> file1 file2\n<span class=\"token comment\"># -l 将所有不懂点全部标出来，默认只标出第一个</span>\n<span class=\"token comment\"># cmp可用于比较二进制文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"patch\"><a href=\"#patch\" class=\"headerlink\" title=\"patch\"></a>patch</h3><p>使用<code>diff</code>制作补丁，然后使用<code>patch</code>更新</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 流程</span>\n<span class=\"token comment\">## 记录差异</span>\n<span class=\"token function\">diff</span> -Naur old_file new_file <span class=\"token operator\">></span> file.patch\n<span class=\"token comment\">## 更新</span>\npatch -pN <span class=\"token operator\">&lt;</span> patch_file\n<span class=\"token comment\">## 还原</span>\npatch -R -pN <span class=\"token operator\">&lt;</span> patch_file\n\n<span class=\"token comment\"># N 表示目录层级，新旧文件在同一目录下时使用-p0即可</span>\n<span class=\"token comment\"># 更详细的内容在后面y</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"pr\"><a href=\"#pr\" class=\"headerlink\" title=\"pr\"></a>pr</h3><p>文件打印，鸟哥说这玩意参数太多</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/kon2.jpg","excerpt":"","more":"<h1 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h1><h2 id=\"stream\"><a href=\"#stream\" class=\"headerlink\" title=\"stream\"></a>stream</h2><ul>\n<li>stdin: code 0,&lt; &lt;&lt;</li>\n<li>stdout: code 1,&gt; &gt;&gt;</li>\n<li>stderr: code 2,2&gt; 2&gt;&gt;</li>\n</ul>\n<p>丢弃数据<code>/dev/null</code></p>\n<p>所有输出重定向至同一文件<code>2&gt;&amp;1</code>或<code>&amp;&gt;</code></p>\n<p><code>&lt;&lt;</code>右侧用于定义结束字符</p>\n<h2 id=\"amp-amp-和\"><a href=\"#amp-amp-和\" class=\"headerlink\" title=\"; ,&amp;&amp;和 ||\"></a><code>;</code> ,<code>&amp;&amp;</code>和 <code>||</code></h2><p>  <code>$?</code>查看上一条指令的返回值</p>\n<h1 id=\"pipe\"><a href=\"#pipe\" class=\"headerlink\" title=\"pipe\"></a>pipe</h1><p>将前一个command的stdout作为后一个command的stdin</p>\n<p><em>注</em>：可以使用前面的<code>2&gt;&amp;1</code>来使得stdout也通过pipe。</p>\n<h2 id=\"选取\"><a href=\"#选取\" class=\"headerlink\" title=\"选取\"></a>选取</h2><h3 id=\"cut\"><a href=\"#cut\" class=\"headerlink\" title=\"cut\"></a>cut</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 按分隔符来处理数据</span>\n<span class=\"token function\">cut</span> -d <span class=\"token string\">'divide character'</span> -c <span class=\"token string\">'character number'</span> -f field\n<span class=\"token comment\"># -c 取一个字符区间 如 -c 12- 或 -c -12</span>\n<span class=\"token comment\"># -f 指定第一个区间</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"grep\"><a href=\"#grep\" class=\"headerlink\" title=\"grep\"></a>grep</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 按行来处理数据</span>\n<span class=\"token function\">grep</span> <span class=\"token string\">'charcter'</span> filename\n<span class=\"token comment\"># -c 计算查找到的数量</span>\n<span class=\"token comment\"># -i 忽略大小写</span>\n<span class=\"token comment\"># -n 输出符号</span>\n<span class=\"token comment\"># -v 反选</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-f</td>\n<td>忽略大小写</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>忽略最前面的空格</td>\n</tr>\n<tr>\n<td>-M</td>\n<td>以月份排序</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>以纯数字排序</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>反向</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>uniq，相同选项只列出一项</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>分隔符</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>选定区间</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 一直想干的事，把/etc/passwd按uid从小到大排序</span>\n<span class=\"token function\">cat</span> /etc/passwd <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> -t <span class=\"token string\">':'</span> -k <span class=\"token number\">3</span> -r<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"uniq\"><a href=\"#uniq\" class=\"headerlink\" title=\"uniq\"></a>uniq</h3><p>去重</p>\n<h3 id=\"wc\"><a href=\"#wc\" class=\"headerlink\" title=\"wc\"></a>wc</h3><p>统计字数，直接使用输出的数据分别为行数，字数，字符数</p>\n<p>可以用选项<code>-l</code>,<code>-w</code>,<code>-m</code>，分别输出</p>\n<h2 id=\"双向重定向\"><a href=\"#双向重定向\" class=\"headerlink\" title=\"双向重定向\"></a>双向重定向</h2><h3 id=\"tee\"><a href=\"#tee\" class=\"headerlink\" title=\"tee\"></a>tee</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tee</span> <span class=\"token punctuation\">[</span>-a<span class=\"token punctuation\">]</span> <span class=\"token function\">file</span>\n<span class=\"token comment\"># -a append</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>将数据流分别重定向到file和screen。输送到screen的部分实质上是stdout，也就是说可以接着重定向。</p>\n<h2 id=\"字符替换\"><a href=\"#字符替换\" class=\"headerlink\" title=\"字符替换\"></a>字符替换</h2><h3 id=\"tr\"><a href=\"#tr\" class=\"headerlink\" title=\"tr\"></a>tr</h3><p>删除一段信息中的某些文字</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tr</span> <span class=\"token punctuation\">[</span>-ds<span class=\"token punctuation\">]</span> SET1\n<span class=\"token comment\"># -d delete</span>\n<span class=\"token comment\"># -s substitude</span>\n\n<span class=\"token comment\"># 大小写转换</span>\n<span class=\"token function\">ls</span> -l / <span class=\"token operator\">|</span> <span class=\"token function\">tr</span> <span class=\"token string\">'[a-z]'</span> <span class=\"token string\">'[A-Z]'</span>\n<span class=\"token comment\"># 删除字符</span>\n<span class=\"token function\">cat</span> /etc/passwd <span class=\"token operator\">|</span> <span class=\"token function\">tr</span> -d <span class=\"token string\">':'</span>\n<span class=\"token comment\"># dos2unix</span>\n<span class=\"token function\">cat</span> <span class=\"token function\">file</span> <span class=\"token operator\">|</span> <span class=\"token function\">tr</span> -d <span class=\"token string\">'\\r'</span> <span class=\"token operator\">></span> newfile <span class=\"token comment\"># \\r是dos的换行符</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"col\"><a href=\"#col\" class=\"headerlink\" title=\"col\"></a>col</h3><p>tab转空格（终于找到这个令人好东西了，可以解决好多奇怪的tab按键）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">col -x <span class=\"token comment\"># tab转空格</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h3><p>将两个文件有相同数据的部分合并</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">join</span> -t <span class=\"token string\">'分隔符'</span> -1 第x部分 file_1 -2 第y部分 file_2\n<span class=\"token function\">join</span> -t <span class=\"token string\">':'</span> -l <span class=\"token number\">4</span> /etc/passwd -2 <span class=\"token number\">3</span> /etc/group <span class=\"token operator\">|</span> <span class=\"token function\">head</span> -n <span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>过于高级，暂时不展开。</p>\n<h3 id=\"paste\"><a href=\"#paste\" class=\"headerlink\" title=\"paste\"></a>paste</h3><p>将两个文件的同一行粘贴在一起</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">paste</span> <span class=\"token punctuation\">[</span>-d 分隔符，默认为tab<span class=\"token punctuation\">]</span> file_1 file_2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"expand\"><a href=\"#expand\" class=\"headerlink\" title=\"expand\"></a>expand</h3><p>tab转空格（又来？）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">expand</span> <span class=\"token punctuation\">[</span>-t tab转空格的数量,默认为8<span class=\"token punctuation\">]</span> <span class=\"token function\">file</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"文件划分\"><a href=\"#文件划分\" class=\"headerlink\" title=\"文件划分\"></a>文件划分</h2><h3 id=\"split\"><a href=\"#split\" class=\"headerlink\" title=\"split\"></a>split</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">split</span> <span class=\"token punctuation\">[</span>-bt<span class=\"token punctuation\">]</span> <span class=\"token function\">file</span> PREFIX\n-b: 按大小划分\n-t: 按行数划分\nPREFIX: 分割后的文件名前缀（后缀会按abc的方式命名）\n\n<span class=\"token builtin class-name\">cd</span> /tmp<span class=\"token punctuation\">;</span> <span class=\"token function\">split</span> -b 300k /etc/services services<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"重组\"><a href=\"#重组\" class=\"headerlink\" title=\"重组\"></a>重组</h3><p>使用重定向即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> services* <span class=\"token operator\">>></span> services_back<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"参数代换\"><a href=\"#参数代换\" class=\"headerlink\" title=\"参数代换\"></a>参数代换</h2><h3 id=\"xargs\"><a href=\"#xargs\" class=\"headerlink\" title=\"xargs\"></a>xargs</h3><p>用于产生某个命令的参数</p>\n<p>超级nb的东西，用于给不支持管道的命令提供参数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">id</span> root\n<span class=\"token comment\"># 使用id可以查询某个用户的id信息</span>\n<span class=\"token comment\"># 接下来查询/etc/passwd中前3个用户的id信息</span>\n <span class=\"token function\">cut</span> -d <span class=\"token string\">':'</span> -f <span class=\"token number\">1</span> /etc/passwd <span class=\"token operator\">|</span> <span class=\"token function\">head</span> -n <span class=\"token number\">3</span> <span class=\"token operator\">|</span> <span class=\"token function\">id</span>\n<span class=\"token comment\"># 最后只执行了id，因为id不是管道命令，不接受前面的参数</span>\n <span class=\"token function\">cut</span> -d <span class=\"token string\">':'</span> -f <span class=\"token number\">1</span> /etc/passwd <span class=\"token operator\">|</span> <span class=\"token function\">head</span> -n <span class=\"token number\">3</span> <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> -n <span class=\"token number\">1</span> <span class=\"token function\">id</span>\n<span class=\"token comment\"># 要制定id只接收1个参数，多了也不行</span>\n\n<span class=\"token function\">xargs</span> <span class=\"token punctuation\">[</span>-0epn<span class=\"token punctuation\">]</span> <span class=\"token builtin class-name\">command</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-0</td>\n<td>将stdin中的特殊字符还原成一般字符</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>指定EOF</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>每次执行都询问用户</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>指定command要使用几个参数</td>\n</tr>\n</tbody></table>\n<h2 id=\"减号\"><a href=\"#减号\" class=\"headerlink\" title=\"- 减号\"></a>- 减号</h2><p>pipe中，<code>-</code>可用于替代stdin和stdout</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> -cvf - /home <span class=\"token operator\">|</span> <span class=\"token function\">tar</span> -xvf - -C /tmp/homework\n<span class=\"token comment\"># 前一个tar打包的数据不会写入到文件，而是交给pipe</span>\n<span class=\"token comment\"># 后一个tar的stdin来自pipe</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"文件的格式化\"><a href=\"#文件的格式化\" class=\"headerlink\" title=\"文件的格式化\"></a>文件的格式化</h1><h2 id=\"格式化打印\"><a href=\"#格式化打印\" class=\"headerlink\" title=\"格式化打印\"></a>格式化打印</h2><h3 id=\"printf\"><a href=\"#printf\" class=\"headerlink\" title=\"printf\"></a>printf</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">'format'</span> content\n<span class=\"token comment\"># 固定格式（表格形式</span>\n<span class=\"token builtin class-name\">printf</span> <span class=\"token string\">'%10s %5i'</span> content1 content2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>过于高级，不再多说，现用现查</p>\n<h2 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a>数据处理</h2><h3 id=\"awk\"><a href=\"#awk\" class=\"headerlink\" title=\"awk\"></a>awk</h3><p>数据处理工具，适用于小型文本</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token string\">'condition_1&#123;operation_1&#125; condition_2&#123;operation_2&#125;'</span> filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>awk以<strong>行</strong>为一次处理的单位，以<strong>字段</strong>为最小的处理单位。</p>\n<ul>\n<li>$1 $2 分别表示一行中的第一和第二个字段（默认以空格或tab分割）</li>\n<li>$0表示<strong>第一列</strong>的所有数据</li>\n</ul>\n<p>关于数据总共有多少行多少列，可以用以下变量</p>\n<ul>\n<li>NF：每一列拥有的字段数</li>\n<li>NR：目前awk所处理的是第几段数据</li>\n<li>FS：目前的分割字符，默认是空格</li>\n</ul>\n<p>awk的逻辑运算符与C一致</p>\n<p>awk的关键字</p>\n<ul>\n<li>BEGIN从头开始</li>\n<li>END从末尾开始</li>\n</ul>\n<h2 id=\"文件比对\"><a href=\"#文件比对\" class=\"headerlink\" title=\"文件比对\"></a>文件比对</h2><h3 id=\"diff\"><a href=\"#diff\" class=\"headerlink\" title=\"diff\"></a>diff</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">dirr <span class=\"token punctuation\">[</span>-bBI<span class=\"token punctuation\">]</span> from-file to-file\n<span class=\"token comment\"># -b 忽略空格差异</span>\n<span class=\"token comment\"># -B 忽略空白行差异</span>\n<span class=\"token comment\"># -i 忽略大小写差异</span>\n\n<span class=\"token comment\"># 以下为diff的输出</span>\n\n3d2 <span class=\"token comment\"># 左边的第三行被删除（d）了，基准是右边第二行</span>\n<span class=\"token operator\">&lt;</span> bin:x:2:2:bin:/bin:/usr/sbin/nologin <span class=\"token comment\"># 这是左边（&lt;)被删除的哪一行</span>\n6c5 <span class=\"token comment\"># 左边的第六行被替换（c）成了右边第五行</span>\n<span class=\"token operator\">&lt;</span> games:x:5:60:games:/usr/games:/usr/sbin/nologin <span class=\"token comment\"># 左边（&lt;）第六行的内容</span>\n---\n<span class=\"token operator\">></span> no six line <span class=\"token comment\"># 接上面，这是右边（>）第五行的内容</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"cmp\"><a href=\"#cmp\" class=\"headerlink\" title=\"cmp\"></a>cmp</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cmp</span> <span class=\"token punctuation\">[</span>-l<span class=\"token punctuation\">]</span> file1 file2\n<span class=\"token comment\"># -l 将所有不懂点全部标出来，默认只标出第一个</span>\n<span class=\"token comment\"># cmp可用于比较二进制文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"patch\"><a href=\"#patch\" class=\"headerlink\" title=\"patch\"></a>patch</h3><p>使用<code>diff</code>制作补丁，然后使用<code>patch</code>更新</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 流程</span>\n<span class=\"token comment\">## 记录差异</span>\n<span class=\"token function\">diff</span> -Naur old_file new_file <span class=\"token operator\">></span> file.patch\n<span class=\"token comment\">## 更新</span>\npatch -pN <span class=\"token operator\">&lt;</span> patch_file\n<span class=\"token comment\">## 还原</span>\npatch -R -pN <span class=\"token operator\">&lt;</span> patch_file\n\n<span class=\"token comment\"># N 表示目录层级，新旧文件在同一目录下时使用-p0即可</span>\n<span class=\"token comment\"># 更详细的内容在后面y</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"pr\"><a href=\"#pr\" class=\"headerlink\" title=\"pr\"></a>pr</h3><p>文件打印，鸟哥说这玩意参数太多</p>\n"},{"title":"可以用来阅读源码的工具","abbrlink":"541ba3b7","date":"2021-12-15T07:55:21.000Z","_content":"\n今天突然想看看nginx的源码，于是随手下了一份，发现写的挺清楚的。不过看的时候还是有不少麻烦事，比如看着看着就记不得之前看到哪了。之前看robocup2d的代码也是这个问题，这里记录了一下这几天为了看源码找的工具。\n\n## Source Insight\n\n这个说是老牌IDE了，据说有很多好的功能，但是因为\n\n- 要钱\n- 古老的UI\n- 看起来很复杂\n\n所以就没用它了\n\n## Source trail\n\n就是因为它我才知道原来有专门看源码用的软件\n\n这个软件提供了\n\n- 对于各种结构（文件，类）的图形化展示\n- 对于各种component间相互作用的展示\n- 支持图形化和源码相互对照的功能\n\n但是也有这些缺点\n\n- 程序流程不够清晰（可能这点本来就是给人看的）\n- 对于宏的处理不够好，不能做到“把宏当变量”（也可能是我不会？）\n- 程序必须要能完全编译才能生成图形展示。\n\n上面这些都是看robocup的代码时候的感想，这个工程直接使用了makefile。而软件可能对cmake、vs、qt的工程更友好一些。\n\n## VScode\n\n最后还是拿vscode看了起来，goto来goto去还是很爽的。不过为了能更爽的看代码，搜了下插件\n\n### insight\n\n一个快捷搜索用的小插件，可以在左侧快速搜索勾选的word，但是只支持诸如google、stack overflow此类的网站（其实挺好的，但是我不是很方便。。。）\n\n我考虑考虑学学typescript帮忙更新下这个插件哈。感觉不难（\n\n### codetour\n\n好东西了属于是。可以按顺序记录每次看的内容并生成一个.tour文件（本质上是json），这玩意可以很轻松的记录我看某个东西的流程，并且支持修改我看的内容。比如我看的时候走错了地方，我还能倒回去）。更进一步，这个工具可以用来记录决策树。\n\n\n\n比起工具，还是更加注重代码本身吧，毕竟目的是“学习源码的精髓”而不是“学几个工具”。","source":"_posts/Tools/可以用来阅读源码的工具.md","raw":"---\ntitle: 可以用来阅读源码的工具\ncategories:\n  - Tools\nabbrlink: 541ba3b7\ndate: 2021-12-15 15:55:21\ntags:\n---\n\n今天突然想看看nginx的源码，于是随手下了一份，发现写的挺清楚的。不过看的时候还是有不少麻烦事，比如看着看着就记不得之前看到哪了。之前看robocup2d的代码也是这个问题，这里记录了一下这几天为了看源码找的工具。\n\n## Source Insight\n\n这个说是老牌IDE了，据说有很多好的功能，但是因为\n\n- 要钱\n- 古老的UI\n- 看起来很复杂\n\n所以就没用它了\n\n## Source trail\n\n就是因为它我才知道原来有专门看源码用的软件\n\n这个软件提供了\n\n- 对于各种结构（文件，类）的图形化展示\n- 对于各种component间相互作用的展示\n- 支持图形化和源码相互对照的功能\n\n但是也有这些缺点\n\n- 程序流程不够清晰（可能这点本来就是给人看的）\n- 对于宏的处理不够好，不能做到“把宏当变量”（也可能是我不会？）\n- 程序必须要能完全编译才能生成图形展示。\n\n上面这些都是看robocup的代码时候的感想，这个工程直接使用了makefile。而软件可能对cmake、vs、qt的工程更友好一些。\n\n## VScode\n\n最后还是拿vscode看了起来，goto来goto去还是很爽的。不过为了能更爽的看代码，搜了下插件\n\n### insight\n\n一个快捷搜索用的小插件，可以在左侧快速搜索勾选的word，但是只支持诸如google、stack overflow此类的网站（其实挺好的，但是我不是很方便。。。）\n\n我考虑考虑学学typescript帮忙更新下这个插件哈。感觉不难（\n\n### codetour\n\n好东西了属于是。可以按顺序记录每次看的内容并生成一个.tour文件（本质上是json），这玩意可以很轻松的记录我看某个东西的流程，并且支持修改我看的内容。比如我看的时候走错了地方，我还能倒回去）。更进一步，这个工具可以用来记录决策树。\n\n\n\n比起工具，还是更加注重代码本身吧，毕竟目的是“学习源码的精髓”而不是“学几个工具”。","slug":"可以用来阅读源码的工具","published":1,"category":"Tools","updated":"2022-02-11T05:17:56.406Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxs002n8wul32531cnm","content":"<p>今天突然想看看nginx的源码，于是随手下了一份，发现写的挺清楚的。不过看的时候还是有不少麻烦事，比如看着看着就记不得之前看到哪了。之前看robocup2d的代码也是这个问题，这里记录了一下这几天为了看源码找的工具。</p>\n<h2 id=\"Source-Insight\"><a href=\"#Source-Insight\" class=\"headerlink\" title=\"Source Insight\"></a>Source Insight</h2><p>这个说是老牌IDE了，据说有很多好的功能，但是因为</p>\n<ul>\n<li>要钱</li>\n<li>古老的UI</li>\n<li>看起来很复杂</li>\n</ul>\n<p>所以就没用它了</p>\n<h2 id=\"Source-trail\"><a href=\"#Source-trail\" class=\"headerlink\" title=\"Source trail\"></a>Source trail</h2><p>就是因为它我才知道原来有专门看源码用的软件</p>\n<p>这个软件提供了</p>\n<ul>\n<li>对于各种结构（文件，类）的图形化展示</li>\n<li>对于各种component间相互作用的展示</li>\n<li>支持图形化和源码相互对照的功能</li>\n</ul>\n<p>但是也有这些缺点</p>\n<ul>\n<li>程序流程不够清晰（可能这点本来就是给人看的）</li>\n<li>对于宏的处理不够好，不能做到“把宏当变量”（也可能是我不会？）</li>\n<li>程序必须要能完全编译才能生成图形展示。</li>\n</ul>\n<p>上面这些都是看robocup的代码时候的感想，这个工程直接使用了makefile。而软件可能对cmake、vs、qt的工程更友好一些。</p>\n<h2 id=\"VScode\"><a href=\"#VScode\" class=\"headerlink\" title=\"VScode\"></a>VScode</h2><p>最后还是拿vscode看了起来，goto来goto去还是很爽的。不过为了能更爽的看代码，搜了下插件</p>\n<h3 id=\"insight\"><a href=\"#insight\" class=\"headerlink\" title=\"insight\"></a>insight</h3><p>一个快捷搜索用的小插件，可以在左侧快速搜索勾选的word，但是只支持诸如google、stack overflow此类的网站（其实挺好的，但是我不是很方便。。。）</p>\n<p>我考虑考虑学学typescript帮忙更新下这个插件哈。感觉不难（</p>\n<h3 id=\"codetour\"><a href=\"#codetour\" class=\"headerlink\" title=\"codetour\"></a>codetour</h3><p>好东西了属于是。可以按顺序记录每次看的内容并生成一个.tour文件（本质上是json），这玩意可以很轻松的记录我看某个东西的流程，并且支持修改我看的内容。比如我看的时候走错了地方，我还能倒回去）。更进一步，这个工具可以用来记录决策树。</p>\n<p>比起工具，还是更加注重代码本身吧，毕竟目的是“学习源码的精髓”而不是“学几个工具”。</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/re01.jpg","excerpt":"","more":"<p>今天突然想看看nginx的源码，于是随手下了一份，发现写的挺清楚的。不过看的时候还是有不少麻烦事，比如看着看着就记不得之前看到哪了。之前看robocup2d的代码也是这个问题，这里记录了一下这几天为了看源码找的工具。</p>\n<h2 id=\"Source-Insight\"><a href=\"#Source-Insight\" class=\"headerlink\" title=\"Source Insight\"></a>Source Insight</h2><p>这个说是老牌IDE了，据说有很多好的功能，但是因为</p>\n<ul>\n<li>要钱</li>\n<li>古老的UI</li>\n<li>看起来很复杂</li>\n</ul>\n<p>所以就没用它了</p>\n<h2 id=\"Source-trail\"><a href=\"#Source-trail\" class=\"headerlink\" title=\"Source trail\"></a>Source trail</h2><p>就是因为它我才知道原来有专门看源码用的软件</p>\n<p>这个软件提供了</p>\n<ul>\n<li>对于各种结构（文件，类）的图形化展示</li>\n<li>对于各种component间相互作用的展示</li>\n<li>支持图形化和源码相互对照的功能</li>\n</ul>\n<p>但是也有这些缺点</p>\n<ul>\n<li>程序流程不够清晰（可能这点本来就是给人看的）</li>\n<li>对于宏的处理不够好，不能做到“把宏当变量”（也可能是我不会？）</li>\n<li>程序必须要能完全编译才能生成图形展示。</li>\n</ul>\n<p>上面这些都是看robocup的代码时候的感想，这个工程直接使用了makefile。而软件可能对cmake、vs、qt的工程更友好一些。</p>\n<h2 id=\"VScode\"><a href=\"#VScode\" class=\"headerlink\" title=\"VScode\"></a>VScode</h2><p>最后还是拿vscode看了起来，goto来goto去还是很爽的。不过为了能更爽的看代码，搜了下插件</p>\n<h3 id=\"insight\"><a href=\"#insight\" class=\"headerlink\" title=\"insight\"></a>insight</h3><p>一个快捷搜索用的小插件，可以在左侧快速搜索勾选的word，但是只支持诸如google、stack overflow此类的网站（其实挺好的，但是我不是很方便。。。）</p>\n<p>我考虑考虑学学typescript帮忙更新下这个插件哈。感觉不难（</p>\n<h3 id=\"codetour\"><a href=\"#codetour\" class=\"headerlink\" title=\"codetour\"></a>codetour</h3><p>好东西了属于是。可以按顺序记录每次看的内容并生成一个.tour文件（本质上是json），这玩意可以很轻松的记录我看某个东西的流程，并且支持修改我看的内容。比如我看的时候走错了地方，我还能倒回去）。更进一步，这个工具可以用来记录决策树。</p>\n<p>比起工具，还是更加注重代码本身吧，毕竟目的是“学习源码的精髓”而不是“学几个工具”。</p>\n"},{"title":"重学linux（9）","abbrlink":"8aa2099f","date":"2022-02-15T02:59:43.000Z","_content":"\n# Linux账号与用户组\n\n## UID和GID\n\n总之就是非常重要，不要乱改/etc/passwd下的东西\n\n## 用户账号\n\n登陆时OS做了什么\n\n- 在/etc/passwd中查询是否有该用户名，若有，读出UID和GID\n- 在/etc/shadow中查询账号和UID，然后确认密码\n\n*所以要保护好上述内容的权限*\n\n### /etc/passwd的文件结构\n\n每行一个账号，以冒号分割\n\n`root:x:0:0:root:/root:/bin/bash`\n\n按顺序分别为\n\n- 账号名\n- 密码（woc），早期的密码是放在这的，后来移动到/etc/shadow上了\n- UID\n- GID\n- 用户信息说明，说明这个账号是干啥的\n- 家目录\n- 使用的shell\n\n### /etc/shadow的文件结构\n\n```bash\nroot:!:19032:0:99999:7:::\ndaemon:*:18480:0:99999:7:::\nbin:*:18480:0:99999:7:::\n```\n\n同上，按顺序\n\n- 账号名称\n- 密码\n- 最近修改密码的日期，单位是天，指到1970年1月1号的天数。\n- 密码不可被修改的天数（与第三个字段相比较）\n- 密码需要被修改的天数（与第三个字段相比较）\n- 密码需要被修改的期限前的警告天数（与第五个字段比较）\n- 密码过期后强制修改的天数（与第五个字段比较）\n- 保留字段\n\n关于shadow，注意要保持其权限为600。\n\n关于shadow的加密方式，根据linux distribution版本不同而不懂，可以使用`authconfig --test | grep hashing`查看。（好像这个指令太老了？）\n\n## 用户组\n\n### /etc/group的文件结构\n\n格式同/etc/passwd，按顺序：\n\n- 组名\n- 用户组密码\n- GID\n- 此用户组支持的账号名称\n\n### 初始用户组与有效用户组\n\n/etc/passwd中记录的GID为**初始用户组**，用户一登陆就拥有该用户组的所有权限。\n\n/etc/group中记录了某用户后，该用户也**支持**该用户组。\n\n- 使用`groups`查看当前用户支持的所用用户组，显示的第一个用户组为当前的**有效用户组**\n- 使用`newgrp`切换有效用户组。注意，该指令使用一个新的shell来切换有效用户组，因此要使用`exit`来退出而不是直接切换回去。\n\n### /etc/gshadow的文件结构\n\n格式同上，按顺序：\n\n- 组名\n- 密码栏，`!`表示无合法密码（即无用户组管理员）\n- 用户组管理员的账号\n- 加入该用户组支持的所属账号\n\n# 账号管理\n\n## 新增和删除用户\n\n### useradd\n\n```bash\nuseradd [-u UID] [-g initial group] [-G other group] name\n```\n\n| 参数 | 含义                                           |\n| ---- | ---------------------------------------------- |\n| -u   | UID                                            |\n| -g   | 初始用户组                                     |\n| -G   | 次要用户组                                     |\n| -M   | 强制不要建立用户家目录                         |\n| -m   | 强制要建立用户家目录                           |\n| -c   | 用户说明                                       |\n| -d   | 试某个目录成为家目录，注意，务必要使用绝对路径 |\n| -r   | 建立系统账号，即UID小于1000                    |\n| -s   | 指定使用的shell                                |\n| -e   | 设定账号失效日期                               |\n| -f   | 指定密码是否会失效                             |\n\n使用useradd时，linux会做以下内容\n\n- 向/etc/passwd中写入一行与账号相关的信息\n- 向/etc/shadow中写入此账号的密码相关信息，但还没有真的密码\n- 向/etc/group中写入一个默认的组名\n- 在/home下建立默认的家目录、\n\n使用`useradd -D`查看其默认值，其内容来源于/etc/default/useradd\n\n```bash\nGROUP=100 # 默认GID\nHOME=/home # 默认家目录\nINACTIVE=-1 # 密码失效日期\nEXPIRE= # 账号失效日期\nSHELL=/bin/sh # 默认的shell\nSKEL=/etc/skel # 用户家目录内容的参考数据\nCREATE_MAIL_SPOOL=no # 是否主动帮用户建立邮箱\n```\n\n除此之外，UID/GID的密码参数在/etc/login.defs文件（下面这个是筛选过的）\n\n```bash\nMAIL_DIR        /var/mail # 默认邮箱目录\nFAILLOG_ENAB            yes\nLOG_UNKFAIL_ENAB        no\nLOG_OK_LOGINS           no\nSYSLOG_SU_ENAB          yes\nSYSLOG_SG_ENAB          yes\nFTMP_FILE       /var/log/btmp\nSU_NAME         su\nHUSHLOGIN_FILE  .hushlogin\nENV_SUPATH      PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nENV_PATH        PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games\nTTYGROUP        tty\nTTYPERM         0600\nERASECHAR       0177\nKILLCHAR        025\nUMASK           02 # 用户的umask\nPASS_MAX_DAYS   99999 # 多久需要修改密码\nPASS_MIN_DAYS   0 # 多久不可重设密码\nPASS_WARN_AGE   7 # 密码过期警告日期\nUID_MIN                  1000 # 用户可以使用的最小UID\nUID_MAX                 60000 # 最大UID\nGID_MIN                  1000 # 用户可以使用的最小GID\nGID_MAX                 60000 # 最大GID\n#SYS_GID_MIN              100 # 系统账号保留的最小UID\n#SYS_GID_MAX              999 # 系统账号的最大UID\nLOGIN_RETRIES           5\nLOGIN_TIMEOUT           60\nCHFN_RESTRICT           rwh\nDEFAULT_HOME    yes # 默认是否为用户创建家目录\nUSERGROUPS_ENAB yes # 使用userdel删除用户时，是否删除初始用户组\nENCRYPT_METHOD SHA512 # 密码的加密机制\n```\n\n### passwd\n\n刚建好的账号是锁定的，得设置密码\n\n```bash\npasswd [] username\n```\n\n| 参数    | 含义                                               |\n| ------- | -------------------------------------------------- |\n| --stdin | 接收前一个pipe的数据                               |\n| -l      | lock，使密码失效                                   |\n| -u      | unlock                                             |\n| -S      | 列出密码相关的信息，主要是展示/etc/shadows中的内容 |\n| -n      | 多久不可修改密码的天数                             |\n| -x      | 多久必须修改密码                                   |\n| -w      | 密码过期前的警告天数                               |\n| -i      | 密码失效日期                                       |\n\n### chage\n\n高级一点的`passwd`\n\n```bash\nchage [-option] username\n```\n\n| 参数 | 选项                                       |\n| ---- | ------------------------------------------ |\n| -l   | 列出详细信息                               |\n| -d   | 修改shadow第三栏位，最近一次修改日期的时间 |\n| -m   | 第四栏位，密码保留天数                     |\n| -M   | 第五栏位，密码多久需要修改                 |\n| -W   | 第六栏位，密码过期前警告                   |\n| -I   | 第七栏位，密码失效日期                     |\n| -E   | 第八栏位，账号失效日期                     |\n\n### usermod\n\n修改用户设置\n\n#### userdel\n\n删除用户，包括以下数据\n\n- /etc/passwd，/etc/shadow\n- /etc/group，/etc/gshadow\n- /home/username，/var/spool/mail/username\n\n```bash\nuserdel [-r] username\n# -r 表示将家目录也删除\n```\n\n## 用户功能\n\n### id\n\n查询自己（或别人）的uid等基本信息\n\n### finger\n\n查看更多信息（默认不安装）\n\n### chfg\n\nchange finger，感觉用不上\n\n### chsh\n\nchange shell\n\n```bash\nchsh -l # 列出可用的shell\nchsh -s # 设置shell\n```\n\n## 新增和删除用户组\n\n### groupadd\n\n```bash\ngroupadd [-g gid] [-r] groupname\n# -r 建立系统用户组\n```\n\n### groupmod\n\n```bash\ngroupmod [-g gid] [-n group_name] groupname\n# -n 用来修改现有的用户组名\n```\n\n### groupdel\n\n```bash\ngroupdel [groupname]\n```\n\n若有用户使用某个用户组作为初始用户组，则该用户组无法删除。此时可以\n\n- 修改用户的GID\n- 删除该用户\n\n### gpasswd\n\n建立group管理员\n\n```bash\n# root的使用\ngpasswd groupname # 设置group密码\ngpasswd -A user groupname # 指定group的用户管理员\ngpasswd -M user groupname # 将用户加入group\n# -r 使group密码失效\n# -R 使group密码栏失效\n\n# 用户组管理员的使用\ngpasswd -a user # 添加用户\ngpasswd -d user # 删除用户\n```\n\n# ACL的使用\n\nauthconfig和authconfig-tui可用于外部身份认证\n\n## ACL介绍\n\n`Access Control List`\n\nACL可针对的方面\n\n- user\n- group\n- mask（默认属性）\n\n## ACL的设置\n\n### setfacl\n\n用于设置某个文件/目录的ACL权限\n\n```bash\nsetfacl [bkRd] [{-m|-x} acl argument] filename\n# ACL参数格式\nu:user:[rwx] # 对特定user\ng:group:[rwx] # 对特定group\nm:[rwx] # 对mask(有效权限)\nd:[ug]:[rwx] #默认权限\n```\n\n| 参数 | 含义                                 |\n| ---- | ------------------------------------ |\n| -m   | 设置后续的ACL参数                    |\n| -x   | 删除后续的ACL参数，删除时用`-`来占位 |\n| -b   | 删除所有的ACL参数，删除时用`-`来占位 |\n| -k   | 删除默认的ACL参数                    |\n| -R   | 递归                                 |\n| -d   | 设置默认的ACL参数（只对目录有效）    |\n\n### getfacl\n\n用于查看某个文件/目录的ACL权限\n\n```bash\ngetfacl filename\n```\n\n# 用户身份切换\n\n## su\n\n```bash\nsu [-lm] [-c command] [username]\n# - 使用login-shell方式登录\n# -l 同上，但后面必须加username\n# 不加-就是nologin-shell登录\n# -m 和 -p表示“使用目前的环境变量设置，而不读取新使用者的配置为文件\n# -c 只执行一次command\n```\n\n**注：那个`-`很重要**\n\n## sudo\n\n在`/etc/sudoers`内记录\n\n```bash\nsudo [-b] [-u username]\n# -b background，将命令放到后台进行\n# -u 后面接欲切换的用户，默认为root\n```\n\n### sudo的执行流程\n\n- 系统查看/etc/sudoers文件中该用户是否有sudo权限\n- 让用户输入自己的密码，若自己就是要切换的用户，则不必输入密码。root使用sudo也不需要输入密码\n- 执行命令\n\n### 修改/etc/sudoers\n\n该文件具有一定规范，因此更推荐使用`visudo`去修改（怎么觉得没啥区别？）\n\n```bash\nroot\tALL=(ALL)\tALL # username\tlogin_host_name=(user_available)  command_available\n%wheel\tALL=(ALL)\tALL # % represent group\n%wheel\tALL=(ALL)\tNOPASSWD: ALL # 免密\nuser1\tALL=(root)\t!/usr/bin/psswd, /usr/bin/passwd [A-za-z]*, !/usr/bin/passwd root #!表示不可执行，这样就可以修改别的用户的密码，但不能修改root的\nUser_Alias ADMPW = pro1,pro2,pro3 # 别名建立新账号，注意该账号必须是大写\nCmnd_Alias ADMPWCOM = !/usr/bin/passwd,/usr/bin/passwd [A-Za-z]*,!/usr/bin/passwd root\nADMPW\tALL=(root)\tADMPWCOM\n```\n\n### 关于切换到root用户的方法\n\n以前的我：`su`。这样是使用nologin shell的变量文件登录的root\n\n那是不是应该`su -`，这样就完整的读取了root的login shell配置文件\n\n如果我只执行一条命令的话，那就是`su - -c command`\n\n不过这样还要输入root的密码，要是没有root密码呢？\n\n`sudo`咯，这样也是每条指令前都要加`sudo`\n\n鸟哥还教了一个方法，在`/etc/sudoers`中这样写\n\n```bash\nUser_Alias ADMINS = user1,user2\nADMINS\tALL=(root)\t/bin/su -\n# 然后就可以这样登录root了\nsudo su -\n```\n\n不过现在的主流方式好像是`sudo -i`\n\nman page的说法是，这样相当于登录的root的login shell，读取了它的所有环境变量，并以一个interactive shell的形式呈现，还帮忙把用户切换到家目录里去了。\n\n这应该是sudo提供的一个“装的很像”的切换方式，既然装的这么像，那还是用它。\n\n# PAM模块\n\n`Pluggable Authentication Modules`\n\n是个linux内置的api，返回的结果要么成功要么失败。\n\n是个很nb的功能。跳了，暂时用不上，但迟早要用上，一定要记得回来看\n\n//todo\n\n# linux主机上信息的传递\n\n## 查询用户\n\n### w\n\n用的多，略\n\n### who\n\n有w了，懒得用\n\n### last\n\n最近的登录记录\n\n### lastlog\n\n各个用户的最近登录记录\n\n## 用户交流\n\n### write\n\n`write username [terminal]`\n\n就硬发，打断你也要发\n\n### mesg\n\n可使用`mesg n`强制闭上鼻子不听别人发（但阻止不了root）\n\n`mesg y`再打开\n\n### wall\n\n发给所有人\n\n### 用户邮箱\n\n再次提醒：/var/spool/mail\n\n### mail\n\n```bash\nmail -s \"title\" user\n# 然后这里输入 . 来表示结束（我猜ctrl+d的EOF也可以）\n# 也可以用stdin重定向进来\nmail # 进入交互界面，查看邮件\n& #<== 这是个提示符，示意你输命令\n```\n\n| 命令 | 含义                          |\n| ---- | ----------------------------- |\n| ?    | ?                             |\n| h    | 列出邮件标头，h 40            |\n| d    | 删除，d10，d20-40             |\n| s    | 存储邮件内容，s 5 ~/mail.file |\n| x    | 不做任何事直接退出            |\n| q    | 保存后退出                    |\n\n# 创建大量账号\n\n高级话题，稍微看看\n\n## pwck\n\n用于检查/etc/passwd中的信息是否正确\n\n## grpck\n\n检查用户组\n\n## pwconv\n\n将/etc/passwd中的账号和密码移动到/etc/shadow中，如果用useradd之类的话，是没它什么事的\n\n## pwunconv\n\n将/etc/shadow写入/etc/passwd，然后删除/etc/shadow（危？）\n\n## chpasswd\n\n读入未加密的密码，加密后写入/etc/shadown中，示例：`echo \"user1:abcdefg\" | chpasswd`\n\n### 一个大量创建账号的模板\n\n用不到的样子\n","source":"_posts/Operation/重学linux（9）.md","raw":"---\ntitle: 重学linux（9）\ntags:\n  - 专栏：重学linux\n  - linux\ncategories: Operation\nabbrlink: 8aa2099f\ndate: 2022-02-15 10:59:43\n---\n\n# Linux账号与用户组\n\n## UID和GID\n\n总之就是非常重要，不要乱改/etc/passwd下的东西\n\n## 用户账号\n\n登陆时OS做了什么\n\n- 在/etc/passwd中查询是否有该用户名，若有，读出UID和GID\n- 在/etc/shadow中查询账号和UID，然后确认密码\n\n*所以要保护好上述内容的权限*\n\n### /etc/passwd的文件结构\n\n每行一个账号，以冒号分割\n\n`root:x:0:0:root:/root:/bin/bash`\n\n按顺序分别为\n\n- 账号名\n- 密码（woc），早期的密码是放在这的，后来移动到/etc/shadow上了\n- UID\n- GID\n- 用户信息说明，说明这个账号是干啥的\n- 家目录\n- 使用的shell\n\n### /etc/shadow的文件结构\n\n```bash\nroot:!:19032:0:99999:7:::\ndaemon:*:18480:0:99999:7:::\nbin:*:18480:0:99999:7:::\n```\n\n同上，按顺序\n\n- 账号名称\n- 密码\n- 最近修改密码的日期，单位是天，指到1970年1月1号的天数。\n- 密码不可被修改的天数（与第三个字段相比较）\n- 密码需要被修改的天数（与第三个字段相比较）\n- 密码需要被修改的期限前的警告天数（与第五个字段比较）\n- 密码过期后强制修改的天数（与第五个字段比较）\n- 保留字段\n\n关于shadow，注意要保持其权限为600。\n\n关于shadow的加密方式，根据linux distribution版本不同而不懂，可以使用`authconfig --test | grep hashing`查看。（好像这个指令太老了？）\n\n## 用户组\n\n### /etc/group的文件结构\n\n格式同/etc/passwd，按顺序：\n\n- 组名\n- 用户组密码\n- GID\n- 此用户组支持的账号名称\n\n### 初始用户组与有效用户组\n\n/etc/passwd中记录的GID为**初始用户组**，用户一登陆就拥有该用户组的所有权限。\n\n/etc/group中记录了某用户后，该用户也**支持**该用户组。\n\n- 使用`groups`查看当前用户支持的所用用户组，显示的第一个用户组为当前的**有效用户组**\n- 使用`newgrp`切换有效用户组。注意，该指令使用一个新的shell来切换有效用户组，因此要使用`exit`来退出而不是直接切换回去。\n\n### /etc/gshadow的文件结构\n\n格式同上，按顺序：\n\n- 组名\n- 密码栏，`!`表示无合法密码（即无用户组管理员）\n- 用户组管理员的账号\n- 加入该用户组支持的所属账号\n\n# 账号管理\n\n## 新增和删除用户\n\n### useradd\n\n```bash\nuseradd [-u UID] [-g initial group] [-G other group] name\n```\n\n| 参数 | 含义                                           |\n| ---- | ---------------------------------------------- |\n| -u   | UID                                            |\n| -g   | 初始用户组                                     |\n| -G   | 次要用户组                                     |\n| -M   | 强制不要建立用户家目录                         |\n| -m   | 强制要建立用户家目录                           |\n| -c   | 用户说明                                       |\n| -d   | 试某个目录成为家目录，注意，务必要使用绝对路径 |\n| -r   | 建立系统账号，即UID小于1000                    |\n| -s   | 指定使用的shell                                |\n| -e   | 设定账号失效日期                               |\n| -f   | 指定密码是否会失效                             |\n\n使用useradd时，linux会做以下内容\n\n- 向/etc/passwd中写入一行与账号相关的信息\n- 向/etc/shadow中写入此账号的密码相关信息，但还没有真的密码\n- 向/etc/group中写入一个默认的组名\n- 在/home下建立默认的家目录、\n\n使用`useradd -D`查看其默认值，其内容来源于/etc/default/useradd\n\n```bash\nGROUP=100 # 默认GID\nHOME=/home # 默认家目录\nINACTIVE=-1 # 密码失效日期\nEXPIRE= # 账号失效日期\nSHELL=/bin/sh # 默认的shell\nSKEL=/etc/skel # 用户家目录内容的参考数据\nCREATE_MAIL_SPOOL=no # 是否主动帮用户建立邮箱\n```\n\n除此之外，UID/GID的密码参数在/etc/login.defs文件（下面这个是筛选过的）\n\n```bash\nMAIL_DIR        /var/mail # 默认邮箱目录\nFAILLOG_ENAB            yes\nLOG_UNKFAIL_ENAB        no\nLOG_OK_LOGINS           no\nSYSLOG_SU_ENAB          yes\nSYSLOG_SG_ENAB          yes\nFTMP_FILE       /var/log/btmp\nSU_NAME         su\nHUSHLOGIN_FILE  .hushlogin\nENV_SUPATH      PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nENV_PATH        PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games\nTTYGROUP        tty\nTTYPERM         0600\nERASECHAR       0177\nKILLCHAR        025\nUMASK           02 # 用户的umask\nPASS_MAX_DAYS   99999 # 多久需要修改密码\nPASS_MIN_DAYS   0 # 多久不可重设密码\nPASS_WARN_AGE   7 # 密码过期警告日期\nUID_MIN                  1000 # 用户可以使用的最小UID\nUID_MAX                 60000 # 最大UID\nGID_MIN                  1000 # 用户可以使用的最小GID\nGID_MAX                 60000 # 最大GID\n#SYS_GID_MIN              100 # 系统账号保留的最小UID\n#SYS_GID_MAX              999 # 系统账号的最大UID\nLOGIN_RETRIES           5\nLOGIN_TIMEOUT           60\nCHFN_RESTRICT           rwh\nDEFAULT_HOME    yes # 默认是否为用户创建家目录\nUSERGROUPS_ENAB yes # 使用userdel删除用户时，是否删除初始用户组\nENCRYPT_METHOD SHA512 # 密码的加密机制\n```\n\n### passwd\n\n刚建好的账号是锁定的，得设置密码\n\n```bash\npasswd [] username\n```\n\n| 参数    | 含义                                               |\n| ------- | -------------------------------------------------- |\n| --stdin | 接收前一个pipe的数据                               |\n| -l      | lock，使密码失效                                   |\n| -u      | unlock                                             |\n| -S      | 列出密码相关的信息，主要是展示/etc/shadows中的内容 |\n| -n      | 多久不可修改密码的天数                             |\n| -x      | 多久必须修改密码                                   |\n| -w      | 密码过期前的警告天数                               |\n| -i      | 密码失效日期                                       |\n\n### chage\n\n高级一点的`passwd`\n\n```bash\nchage [-option] username\n```\n\n| 参数 | 选项                                       |\n| ---- | ------------------------------------------ |\n| -l   | 列出详细信息                               |\n| -d   | 修改shadow第三栏位，最近一次修改日期的时间 |\n| -m   | 第四栏位，密码保留天数                     |\n| -M   | 第五栏位，密码多久需要修改                 |\n| -W   | 第六栏位，密码过期前警告                   |\n| -I   | 第七栏位，密码失效日期                     |\n| -E   | 第八栏位，账号失效日期                     |\n\n### usermod\n\n修改用户设置\n\n#### userdel\n\n删除用户，包括以下数据\n\n- /etc/passwd，/etc/shadow\n- /etc/group，/etc/gshadow\n- /home/username，/var/spool/mail/username\n\n```bash\nuserdel [-r] username\n# -r 表示将家目录也删除\n```\n\n## 用户功能\n\n### id\n\n查询自己（或别人）的uid等基本信息\n\n### finger\n\n查看更多信息（默认不安装）\n\n### chfg\n\nchange finger，感觉用不上\n\n### chsh\n\nchange shell\n\n```bash\nchsh -l # 列出可用的shell\nchsh -s # 设置shell\n```\n\n## 新增和删除用户组\n\n### groupadd\n\n```bash\ngroupadd [-g gid] [-r] groupname\n# -r 建立系统用户组\n```\n\n### groupmod\n\n```bash\ngroupmod [-g gid] [-n group_name] groupname\n# -n 用来修改现有的用户组名\n```\n\n### groupdel\n\n```bash\ngroupdel [groupname]\n```\n\n若有用户使用某个用户组作为初始用户组，则该用户组无法删除。此时可以\n\n- 修改用户的GID\n- 删除该用户\n\n### gpasswd\n\n建立group管理员\n\n```bash\n# root的使用\ngpasswd groupname # 设置group密码\ngpasswd -A user groupname # 指定group的用户管理员\ngpasswd -M user groupname # 将用户加入group\n# -r 使group密码失效\n# -R 使group密码栏失效\n\n# 用户组管理员的使用\ngpasswd -a user # 添加用户\ngpasswd -d user # 删除用户\n```\n\n# ACL的使用\n\nauthconfig和authconfig-tui可用于外部身份认证\n\n## ACL介绍\n\n`Access Control List`\n\nACL可针对的方面\n\n- user\n- group\n- mask（默认属性）\n\n## ACL的设置\n\n### setfacl\n\n用于设置某个文件/目录的ACL权限\n\n```bash\nsetfacl [bkRd] [{-m|-x} acl argument] filename\n# ACL参数格式\nu:user:[rwx] # 对特定user\ng:group:[rwx] # 对特定group\nm:[rwx] # 对mask(有效权限)\nd:[ug]:[rwx] #默认权限\n```\n\n| 参数 | 含义                                 |\n| ---- | ------------------------------------ |\n| -m   | 设置后续的ACL参数                    |\n| -x   | 删除后续的ACL参数，删除时用`-`来占位 |\n| -b   | 删除所有的ACL参数，删除时用`-`来占位 |\n| -k   | 删除默认的ACL参数                    |\n| -R   | 递归                                 |\n| -d   | 设置默认的ACL参数（只对目录有效）    |\n\n### getfacl\n\n用于查看某个文件/目录的ACL权限\n\n```bash\ngetfacl filename\n```\n\n# 用户身份切换\n\n## su\n\n```bash\nsu [-lm] [-c command] [username]\n# - 使用login-shell方式登录\n# -l 同上，但后面必须加username\n# 不加-就是nologin-shell登录\n# -m 和 -p表示“使用目前的环境变量设置，而不读取新使用者的配置为文件\n# -c 只执行一次command\n```\n\n**注：那个`-`很重要**\n\n## sudo\n\n在`/etc/sudoers`内记录\n\n```bash\nsudo [-b] [-u username]\n# -b background，将命令放到后台进行\n# -u 后面接欲切换的用户，默认为root\n```\n\n### sudo的执行流程\n\n- 系统查看/etc/sudoers文件中该用户是否有sudo权限\n- 让用户输入自己的密码，若自己就是要切换的用户，则不必输入密码。root使用sudo也不需要输入密码\n- 执行命令\n\n### 修改/etc/sudoers\n\n该文件具有一定规范，因此更推荐使用`visudo`去修改（怎么觉得没啥区别？）\n\n```bash\nroot\tALL=(ALL)\tALL # username\tlogin_host_name=(user_available)  command_available\n%wheel\tALL=(ALL)\tALL # % represent group\n%wheel\tALL=(ALL)\tNOPASSWD: ALL # 免密\nuser1\tALL=(root)\t!/usr/bin/psswd, /usr/bin/passwd [A-za-z]*, !/usr/bin/passwd root #!表示不可执行，这样就可以修改别的用户的密码，但不能修改root的\nUser_Alias ADMPW = pro1,pro2,pro3 # 别名建立新账号，注意该账号必须是大写\nCmnd_Alias ADMPWCOM = !/usr/bin/passwd,/usr/bin/passwd [A-Za-z]*,!/usr/bin/passwd root\nADMPW\tALL=(root)\tADMPWCOM\n```\n\n### 关于切换到root用户的方法\n\n以前的我：`su`。这样是使用nologin shell的变量文件登录的root\n\n那是不是应该`su -`，这样就完整的读取了root的login shell配置文件\n\n如果我只执行一条命令的话，那就是`su - -c command`\n\n不过这样还要输入root的密码，要是没有root密码呢？\n\n`sudo`咯，这样也是每条指令前都要加`sudo`\n\n鸟哥还教了一个方法，在`/etc/sudoers`中这样写\n\n```bash\nUser_Alias ADMINS = user1,user2\nADMINS\tALL=(root)\t/bin/su -\n# 然后就可以这样登录root了\nsudo su -\n```\n\n不过现在的主流方式好像是`sudo -i`\n\nman page的说法是，这样相当于登录的root的login shell，读取了它的所有环境变量，并以一个interactive shell的形式呈现，还帮忙把用户切换到家目录里去了。\n\n这应该是sudo提供的一个“装的很像”的切换方式，既然装的这么像，那还是用它。\n\n# PAM模块\n\n`Pluggable Authentication Modules`\n\n是个linux内置的api，返回的结果要么成功要么失败。\n\n是个很nb的功能。跳了，暂时用不上，但迟早要用上，一定要记得回来看\n\n//todo\n\n# linux主机上信息的传递\n\n## 查询用户\n\n### w\n\n用的多，略\n\n### who\n\n有w了，懒得用\n\n### last\n\n最近的登录记录\n\n### lastlog\n\n各个用户的最近登录记录\n\n## 用户交流\n\n### write\n\n`write username [terminal]`\n\n就硬发，打断你也要发\n\n### mesg\n\n可使用`mesg n`强制闭上鼻子不听别人发（但阻止不了root）\n\n`mesg y`再打开\n\n### wall\n\n发给所有人\n\n### 用户邮箱\n\n再次提醒：/var/spool/mail\n\n### mail\n\n```bash\nmail -s \"title\" user\n# 然后这里输入 . 来表示结束（我猜ctrl+d的EOF也可以）\n# 也可以用stdin重定向进来\nmail # 进入交互界面，查看邮件\n& #<== 这是个提示符，示意你输命令\n```\n\n| 命令 | 含义                          |\n| ---- | ----------------------------- |\n| ?    | ?                             |\n| h    | 列出邮件标头，h 40            |\n| d    | 删除，d10，d20-40             |\n| s    | 存储邮件内容，s 5 ~/mail.file |\n| x    | 不做任何事直接退出            |\n| q    | 保存后退出                    |\n\n# 创建大量账号\n\n高级话题，稍微看看\n\n## pwck\n\n用于检查/etc/passwd中的信息是否正确\n\n## grpck\n\n检查用户组\n\n## pwconv\n\n将/etc/passwd中的账号和密码移动到/etc/shadow中，如果用useradd之类的话，是没它什么事的\n\n## pwunconv\n\n将/etc/shadow写入/etc/passwd，然后删除/etc/shadow（危？）\n\n## chpasswd\n\n读入未加密的密码，加密后写入/etc/shadown中，示例：`echo \"user1:abcdefg\" | chpasswd`\n\n### 一个大量创建账号的模板\n\n用不到的样子\n","slug":"重学linux（9）","published":1,"category":"Operation","updated":"2022-03-01T14:47:25.363Z","_id":"ckzs3irxs002q8wul4yknasu7","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Linux账号与用户组\"><a href=\"#Linux账号与用户组\" class=\"headerlink\" title=\"Linux账号与用户组\"></a>Linux账号与用户组</h1><h2 id=\"UID和GID\"><a href=\"#UID和GID\" class=\"headerlink\" title=\"UID和GID\"></a>UID和GID</h2><p>总之就是非常重要，不要乱改&#x2F;etc&#x2F;passwd下的东西</p>\n<h2 id=\"用户账号\"><a href=\"#用户账号\" class=\"headerlink\" title=\"用户账号\"></a>用户账号</h2><p>登陆时OS做了什么</p>\n<ul>\n<li>在&#x2F;etc&#x2F;passwd中查询是否有该用户名，若有，读出UID和GID</li>\n<li>在&#x2F;etc&#x2F;shadow中查询账号和UID，然后确认密码</li>\n</ul>\n<p><em>所以要保护好上述内容的权限</em></p>\n<h3 id=\"x2F-etc-x2F-passwd的文件结构\"><a href=\"#x2F-etc-x2F-passwd的文件结构\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;passwd的文件结构\"></a>&#x2F;etc&#x2F;passwd的文件结构</h3><p>每行一个账号，以冒号分割</p>\n<p><code>root:x:0:0:root:/root:/bin/bash</code></p>\n<p>按顺序分别为</p>\n<ul>\n<li>账号名</li>\n<li>密码（woc），早期的密码是放在这的，后来移动到&#x2F;etc&#x2F;shadow上了</li>\n<li>UID</li>\n<li>GID</li>\n<li>用户信息说明，说明这个账号是干啥的</li>\n<li>家目录</li>\n<li>使用的shell</li>\n</ul>\n<h3 id=\"x2F-etc-x2F-shadow的文件结构\"><a href=\"#x2F-etc-x2F-shadow的文件结构\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;shadow的文件结构\"></a>&#x2F;etc&#x2F;shadow的文件结构</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">root:<span class=\"token operator\">!</span>:19032:0:99999:7:::\ndaemon:*:18480:0:99999:7:::\nbin:*:18480:0:99999:7:::<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>同上，按顺序</p>\n<ul>\n<li>账号名称</li>\n<li>密码</li>\n<li>最近修改密码的日期，单位是天，指到1970年1月1号的天数。</li>\n<li>密码不可被修改的天数（与第三个字段相比较）</li>\n<li>密码需要被修改的天数（与第三个字段相比较）</li>\n<li>密码需要被修改的期限前的警告天数（与第五个字段比较）</li>\n<li>密码过期后强制修改的天数（与第五个字段比较）</li>\n<li>保留字段</li>\n</ul>\n<p>关于shadow，注意要保持其权限为600。</p>\n<p>关于shadow的加密方式，根据linux distribution版本不同而不懂，可以使用<code>authconfig --test | grep hashing</code>查看。（好像这个指令太老了？）</p>\n<h2 id=\"用户组\"><a href=\"#用户组\" class=\"headerlink\" title=\"用户组\"></a>用户组</h2><h3 id=\"x2F-etc-x2F-group的文件结构\"><a href=\"#x2F-etc-x2F-group的文件结构\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;group的文件结构\"></a>&#x2F;etc&#x2F;group的文件结构</h3><p>格式同&#x2F;etc&#x2F;passwd，按顺序：</p>\n<ul>\n<li>组名</li>\n<li>用户组密码</li>\n<li>GID</li>\n<li>此用户组支持的账号名称</li>\n</ul>\n<h3 id=\"初始用户组与有效用户组\"><a href=\"#初始用户组与有效用户组\" class=\"headerlink\" title=\"初始用户组与有效用户组\"></a>初始用户组与有效用户组</h3><p>&#x2F;etc&#x2F;passwd中记录的GID为<strong>初始用户组</strong>，用户一登陆就拥有该用户组的所有权限。</p>\n<p>&#x2F;etc&#x2F;group中记录了某用户后，该用户也<strong>支持</strong>该用户组。</p>\n<ul>\n<li>使用<code>groups</code>查看当前用户支持的所用用户组，显示的第一个用户组为当前的<strong>有效用户组</strong></li>\n<li>使用<code>newgrp</code>切换有效用户组。注意，该指令使用一个新的shell来切换有效用户组，因此要使用<code>exit</code>来退出而不是直接切换回去。</li>\n</ul>\n<h3 id=\"x2F-etc-x2F-gshadow的文件结构\"><a href=\"#x2F-etc-x2F-gshadow的文件结构\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;gshadow的文件结构\"></a>&#x2F;etc&#x2F;gshadow的文件结构</h3><p>格式同上，按顺序：</p>\n<ul>\n<li>组名</li>\n<li>密码栏，<code>!</code>表示无合法密码（即无用户组管理员）</li>\n<li>用户组管理员的账号</li>\n<li>加入该用户组支持的所属账号</li>\n</ul>\n<h1 id=\"账号管理\"><a href=\"#账号管理\" class=\"headerlink\" title=\"账号管理\"></a>账号管理</h1><h2 id=\"新增和删除用户\"><a href=\"#新增和删除用户\" class=\"headerlink\" title=\"新增和删除用户\"></a>新增和删除用户</h2><h3 id=\"useradd\"><a href=\"#useradd\" class=\"headerlink\" title=\"useradd\"></a>useradd</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">useradd</span> <span class=\"token punctuation\">[</span>-u <span class=\"token environment constant\">UID</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-g initial group<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-G other group<span class=\"token punctuation\">]</span> name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-u</td>\n<td>UID</td>\n</tr>\n<tr>\n<td>-g</td>\n<td>初始用户组</td>\n</tr>\n<tr>\n<td>-G</td>\n<td>次要用户组</td>\n</tr>\n<tr>\n<td>-M</td>\n<td>强制不要建立用户家目录</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>强制要建立用户家目录</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>用户说明</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>试某个目录成为家目录，注意，务必要使用绝对路径</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>建立系统账号，即UID小于1000</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>指定使用的shell</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>设定账号失效日期</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>指定密码是否会失效</td>\n</tr>\n</tbody></table>\n<p>使用useradd时，linux会做以下内容</p>\n<ul>\n<li>向&#x2F;etc&#x2F;passwd中写入一行与账号相关的信息</li>\n<li>向&#x2F;etc&#x2F;shadow中写入此账号的密码相关信息，但还没有真的密码</li>\n<li>向&#x2F;etc&#x2F;group中写入一个默认的组名</li>\n<li>在&#x2F;home下建立默认的家目录、</li>\n</ul>\n<p>使用<code>useradd -D</code>查看其默认值，其内容来源于&#x2F;etc&#x2F;default&#x2F;useradd</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">GROUP</span><span class=\"token operator\">=</span><span class=\"token number\">100</span> <span class=\"token comment\"># 默认GID</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HOME</span></span><span class=\"token operator\">=</span>/home <span class=\"token comment\"># 默认家目录</span>\n<span class=\"token assign-left variable\">INACTIVE</span><span class=\"token operator\">=</span>-1 <span class=\"token comment\"># 密码失效日期</span>\n<span class=\"token assign-left variable\">EXPIRE</span><span class=\"token operator\">=</span> <span class=\"token comment\"># 账号失效日期</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">SHELL</span></span><span class=\"token operator\">=</span>/bin/sh <span class=\"token comment\"># 默认的shell</span>\n<span class=\"token assign-left variable\">SKEL</span><span class=\"token operator\">=</span>/etc/skel <span class=\"token comment\"># 用户家目录内容的参考数据</span>\n<span class=\"token assign-left variable\">CREATE_MAIL_SPOOL</span><span class=\"token operator\">=</span>no <span class=\"token comment\"># 是否主动帮用户建立邮箱</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>除此之外，UID&#x2F;GID的密码参数在&#x2F;etc&#x2F;login.defs文件（下面这个是筛选过的）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">MAIL_DIR        /var/mail <span class=\"token comment\"># 默认邮箱目录</span>\nFAILLOG_ENAB            <span class=\"token function\">yes</span>\nLOG_UNKFAIL_ENAB        no\nLOG_OK_LOGINS           no\nSYSLOG_SU_ENAB          <span class=\"token function\">yes</span>\nSYSLOG_SG_ENAB          <span class=\"token function\">yes</span>\nFTMP_FILE       /var/log/btmp\nSU_NAME         <span class=\"token function\">su</span>\nHUSHLOGIN_FILE  .hushlogin\nENV_SUPATH      <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nENV_PATH        <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games\nTTYGROUP        <span class=\"token function\">tty</span>\nTTYPERM         0600\nERASECHAR       0177\nKILLCHAR        025\nUMASK           02 <span class=\"token comment\"># 用户的umask</span>\nPASS_MAX_DAYS   <span class=\"token number\">99999</span> <span class=\"token comment\"># 多久需要修改密码</span>\nPASS_MIN_DAYS   <span class=\"token number\">0</span> <span class=\"token comment\"># 多久不可重设密码</span>\nPASS_WARN_AGE   <span class=\"token number\">7</span> <span class=\"token comment\"># 密码过期警告日期</span>\nUID_MIN                  <span class=\"token number\">1000</span> <span class=\"token comment\"># 用户可以使用的最小UID</span>\nUID_MAX                 <span class=\"token number\">60000</span> <span class=\"token comment\"># 最大UID</span>\nGID_MIN                  <span class=\"token number\">1000</span> <span class=\"token comment\"># 用户可以使用的最小GID</span>\nGID_MAX                 <span class=\"token number\">60000</span> <span class=\"token comment\"># 最大GID</span>\n<span class=\"token comment\">#SYS_GID_MIN              100 # 系统账号保留的最小UID</span>\n<span class=\"token comment\">#SYS_GID_MAX              999 # 系统账号的最大UID</span>\nLOGIN_RETRIES           <span class=\"token number\">5</span>\nLOGIN_TIMEOUT           <span class=\"token number\">60</span>\nCHFN_RESTRICT           rwh\nDEFAULT_HOME    <span class=\"token function\">yes</span> <span class=\"token comment\"># 默认是否为用户创建家目录</span>\nUSERGROUPS_ENAB <span class=\"token function\">yes</span> <span class=\"token comment\"># 使用userdel删除用户时，是否删除初始用户组</span>\nENCRYPT_METHOD SHA512 <span class=\"token comment\"># 密码的加密机制</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"passwd\"><a href=\"#passwd\" class=\"headerlink\" title=\"passwd\"></a>passwd</h3><p>刚建好的账号是锁定的，得设置密码</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">passwd</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> username<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–stdin</td>\n<td>接收前一个pipe的数据</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>lock，使密码失效</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>unlock</td>\n</tr>\n<tr>\n<td>-S</td>\n<td>列出密码相关的信息，主要是展示&#x2F;etc&#x2F;shadows中的内容</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>多久不可修改密码的天数</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>多久必须修改密码</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>密码过期前的警告天数</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>密码失效日期</td>\n</tr>\n</tbody></table>\n<h3 id=\"chage\"><a href=\"#chage\" class=\"headerlink\" title=\"chage\"></a>chage</h3><p>高级一点的<code>passwd</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">chage <span class=\"token punctuation\">[</span>-option<span class=\"token punctuation\">]</span> username<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>选项</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-l</td>\n<td>列出详细信息</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>修改shadow第三栏位，最近一次修改日期的时间</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>第四栏位，密码保留天数</td>\n</tr>\n<tr>\n<td>-M</td>\n<td>第五栏位，密码多久需要修改</td>\n</tr>\n<tr>\n<td>-W</td>\n<td>第六栏位，密码过期前警告</td>\n</tr>\n<tr>\n<td>-I</td>\n<td>第七栏位，密码失效日期</td>\n</tr>\n<tr>\n<td>-E</td>\n<td>第八栏位，账号失效日期</td>\n</tr>\n</tbody></table>\n<h3 id=\"usermod\"><a href=\"#usermod\" class=\"headerlink\" title=\"usermod\"></a>usermod</h3><p>修改用户设置</p>\n<h4 id=\"userdel\"><a href=\"#userdel\" class=\"headerlink\" title=\"userdel\"></a>userdel</h4><p>删除用户，包括以下数据</p>\n<ul>\n<li>&#x2F;etc&#x2F;passwd，&#x2F;etc&#x2F;shadow</li>\n<li>&#x2F;etc&#x2F;group，&#x2F;etc&#x2F;gshadow</li>\n<li>&#x2F;home&#x2F;username，&#x2F;var&#x2F;spool&#x2F;mail&#x2F;username</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">userdel</span> <span class=\"token punctuation\">[</span>-r<span class=\"token punctuation\">]</span> username\n<span class=\"token comment\"># -r 表示将家目录也删除</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"用户功能\"><a href=\"#用户功能\" class=\"headerlink\" title=\"用户功能\"></a>用户功能</h2><h3 id=\"id\"><a href=\"#id\" class=\"headerlink\" title=\"id\"></a>id</h3><p>查询自己（或别人）的uid等基本信息</p>\n<h3 id=\"finger\"><a href=\"#finger\" class=\"headerlink\" title=\"finger\"></a>finger</h3><p>查看更多信息（默认不安装）</p>\n<h3 id=\"chfg\"><a href=\"#chfg\" class=\"headerlink\" title=\"chfg\"></a>chfg</h3><p>change finger，感觉用不上</p>\n<h3 id=\"chsh\"><a href=\"#chsh\" class=\"headerlink\" title=\"chsh\"></a>chsh</h3><p>change shell</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">chsh -l <span class=\"token comment\"># 列出可用的shell</span>\nchsh -s <span class=\"token comment\"># 设置shell</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"新增和删除用户组\"><a href=\"#新增和删除用户组\" class=\"headerlink\" title=\"新增和删除用户组\"></a>新增和删除用户组</h2><h3 id=\"groupadd\"><a href=\"#groupadd\" class=\"headerlink\" title=\"groupadd\"></a>groupadd</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">groupadd</span> <span class=\"token punctuation\">[</span>-g gid<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-r<span class=\"token punctuation\">]</span> groupname\n<span class=\"token comment\"># -r 建立系统用户组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"groupmod\"><a href=\"#groupmod\" class=\"headerlink\" title=\"groupmod\"></a>groupmod</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">groupmod</span> <span class=\"token punctuation\">[</span>-g gid<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-n group_name<span class=\"token punctuation\">]</span> groupname\n<span class=\"token comment\"># -n 用来修改现有的用户组名</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"groupdel\"><a href=\"#groupdel\" class=\"headerlink\" title=\"groupdel\"></a>groupdel</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">groupdel</span> <span class=\"token punctuation\">[</span>groupname<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>若有用户使用某个用户组作为初始用户组，则该用户组无法删除。此时可以</p>\n<ul>\n<li>修改用户的GID</li>\n<li>删除该用户</li>\n</ul>\n<h3 id=\"gpasswd\"><a href=\"#gpasswd\" class=\"headerlink\" title=\"gpasswd\"></a>gpasswd</h3><p>建立group管理员</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># root的使用</span>\ngpasswd groupname <span class=\"token comment\"># 设置group密码</span>\ngpasswd -A user groupname <span class=\"token comment\"># 指定group的用户管理员</span>\ngpasswd -M user groupname <span class=\"token comment\"># 将用户加入group</span>\n<span class=\"token comment\"># -r 使group密码失效</span>\n<span class=\"token comment\"># -R 使group密码栏失效</span>\n\n<span class=\"token comment\"># 用户组管理员的使用</span>\ngpasswd -a user <span class=\"token comment\"># 添加用户</span>\ngpasswd -d user <span class=\"token comment\"># 删除用户</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"ACL的使用\"><a href=\"#ACL的使用\" class=\"headerlink\" title=\"ACL的使用\"></a>ACL的使用</h1><p>authconfig和authconfig-tui可用于外部身份认证</p>\n<h2 id=\"ACL介绍\"><a href=\"#ACL介绍\" class=\"headerlink\" title=\"ACL介绍\"></a>ACL介绍</h2><p><code>Access Control List</code></p>\n<p>ACL可针对的方面</p>\n<ul>\n<li>user</li>\n<li>group</li>\n<li>mask（默认属性）</li>\n</ul>\n<h2 id=\"ACL的设置\"><a href=\"#ACL的设置\" class=\"headerlink\" title=\"ACL的设置\"></a>ACL的设置</h2><h3 id=\"setfacl\"><a href=\"#setfacl\" class=\"headerlink\" title=\"setfacl\"></a>setfacl</h3><p>用于设置某个文件&#x2F;目录的ACL权限</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">setfacl <span class=\"token punctuation\">[</span>bkRd<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>-m<span class=\"token operator\">|</span>-x<span class=\"token punctuation\">&#125;</span> acl argument<span class=\"token punctuation\">]</span> filename\n<span class=\"token comment\"># ACL参数格式</span>\nu:user:<span class=\"token punctuation\">[</span>rwx<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 对特定user</span>\ng:group:<span class=\"token punctuation\">[</span>rwx<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 对特定group</span>\nm:<span class=\"token punctuation\">[</span>rwx<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 对mask(有效权限)</span>\nd:<span class=\"token punctuation\">[</span>ug<span class=\"token punctuation\">]</span>:<span class=\"token punctuation\">[</span>rwx<span class=\"token punctuation\">]</span> <span class=\"token comment\">#默认权限</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-m</td>\n<td>设置后续的ACL参数</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>删除后续的ACL参数，删除时用<code>-</code>来占位</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>删除所有的ACL参数，删除时用<code>-</code>来占位</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>删除默认的ACL参数</td>\n</tr>\n<tr>\n<td>-R</td>\n<td>递归</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>设置默认的ACL参数（只对目录有效）</td>\n</tr>\n</tbody></table>\n<h3 id=\"getfacl\"><a href=\"#getfacl\" class=\"headerlink\" title=\"getfacl\"></a>getfacl</h3><p>用于查看某个文件&#x2F;目录的ACL权限</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">getfacl filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"用户身份切换\"><a href=\"#用户身份切换\" class=\"headerlink\" title=\"用户身份切换\"></a>用户身份切换</h1><h2 id=\"su\"><a href=\"#su\" class=\"headerlink\" title=\"su\"></a>su</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">su</span> <span class=\"token punctuation\">[</span>-lm<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-c command<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># - 使用login-shell方式登录</span>\n<span class=\"token comment\"># -l 同上，但后面必须加username</span>\n<span class=\"token comment\"># 不加-就是nologin-shell登录</span>\n<span class=\"token comment\"># -m 和 -p表示“使用目前的环境变量设置，而不读取新使用者的配置为文件</span>\n<span class=\"token comment\"># -c 只执行一次command</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注：那个<code>-</code>很重要</strong></p>\n<h2 id=\"sudo\"><a href=\"#sudo\" class=\"headerlink\" title=\"sudo\"></a>sudo</h2><p>在<code>/etc/sudoers</code>内记录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token punctuation\">[</span>-b<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-u username<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># -b background，将命令放到后台进行</span>\n<span class=\"token comment\"># -u 后面接欲切换的用户，默认为root</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"sudo的执行流程\"><a href=\"#sudo的执行流程\" class=\"headerlink\" title=\"sudo的执行流程\"></a>sudo的执行流程</h3><ul>\n<li>系统查看&#x2F;etc&#x2F;sudoers文件中该用户是否有sudo权限</li>\n<li>让用户输入自己的密码，若自己就是要切换的用户，则不必输入密码。root使用sudo也不需要输入密码</li>\n<li>执行命令</li>\n</ul>\n<h3 id=\"修改-x2F-etc-x2F-sudoers\"><a href=\"#修改-x2F-etc-x2F-sudoers\" class=\"headerlink\" title=\"修改&#x2F;etc&#x2F;sudoers\"></a>修改&#x2F;etc&#x2F;sudoers</h3><p>该文件具有一定规范，因此更推荐使用<code>visudo</code>去修改（怎么觉得没啥区别？）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">root\t<span class=\"token assign-left variable\">ALL</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ALL<span class=\"token punctuation\">)</span>\tALL <span class=\"token comment\"># username\tlogin_host_name=(user_available)  command_available</span>\n%wheel\t<span class=\"token assign-left variable\">ALL</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ALL<span class=\"token punctuation\">)</span>\tALL <span class=\"token comment\"># % represent group</span>\n%wheel\t<span class=\"token assign-left variable\">ALL</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ALL<span class=\"token punctuation\">)</span>\tNOPASSWD: ALL <span class=\"token comment\"># 免密</span>\nuser1\t<span class=\"token assign-left variable\">ALL</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\t<span class=\"token operator\">!</span>/usr/bin/psswd, /usr/bin/passwd <span class=\"token punctuation\">[</span>A-za-z<span class=\"token punctuation\">]</span>*, <span class=\"token operator\">!</span>/usr/bin/passwd root <span class=\"token comment\">#!表示不可执行，这样就可以修改别的用户的密码，但不能修改root的</span>\nUser_Alias ADMPW <span class=\"token operator\">=</span> pro1,pro2,pro3 <span class=\"token comment\"># 别名建立新账号，注意该账号必须是大写</span>\nCmnd_Alias ADMPWCOM <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>/usr/bin/passwd,/usr/bin/passwd <span class=\"token punctuation\">[</span>A-Za-z<span class=\"token punctuation\">]</span>*,<span class=\"token operator\">!</span>/usr/bin/passwd root\nADMPW\t<span class=\"token assign-left variable\">ALL</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\tADMPWCOM<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"关于切换到root用户的方法\"><a href=\"#关于切换到root用户的方法\" class=\"headerlink\" title=\"关于切换到root用户的方法\"></a>关于切换到root用户的方法</h3><p>以前的我：<code>su</code>。这样是使用nologin shell的变量文件登录的root</p>\n<p>那是不是应该<code>su -</code>，这样就完整的读取了root的login shell配置文件</p>\n<p>如果我只执行一条命令的话，那就是<code>su - -c command</code></p>\n<p>不过这样还要输入root的密码，要是没有root密码呢？</p>\n<p><code>sudo</code>咯，这样也是每条指令前都要加<code>sudo</code></p>\n<p>鸟哥还教了一个方法，在<code>/etc/sudoers</code>中这样写</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">User_Alias ADMINS <span class=\"token operator\">=</span> user1,user2\nADMINS\t<span class=\"token assign-left variable\">ALL</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\t/bin/su -\n<span class=\"token comment\"># 然后就可以这样登录root了</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">su</span> -<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不过现在的主流方式好像是<code>sudo -i</code></p>\n<p>man page的说法是，这样相当于登录的root的login shell，读取了它的所有环境变量，并以一个interactive shell的形式呈现，还帮忙把用户切换到家目录里去了。</p>\n<p>这应该是sudo提供的一个“装的很像”的切换方式，既然装的这么像，那还是用它。</p>\n<h1 id=\"PAM模块\"><a href=\"#PAM模块\" class=\"headerlink\" title=\"PAM模块\"></a>PAM模块</h1><p><code>Pluggable Authentication Modules</code></p>\n<p>是个linux内置的api，返回的结果要么成功要么失败。</p>\n<p>是个很nb的功能。跳了，暂时用不上，但迟早要用上，一定要记得回来看</p>\n<p>&#x2F;&#x2F;todo</p>\n<h1 id=\"linux主机上信息的传递\"><a href=\"#linux主机上信息的传递\" class=\"headerlink\" title=\"linux主机上信息的传递\"></a>linux主机上信息的传递</h1><h2 id=\"查询用户\"><a href=\"#查询用户\" class=\"headerlink\" title=\"查询用户\"></a>查询用户</h2><h3 id=\"w\"><a href=\"#w\" class=\"headerlink\" title=\"w\"></a>w</h3><p>用的多，略</p>\n<h3 id=\"who\"><a href=\"#who\" class=\"headerlink\" title=\"who\"></a>who</h3><p>有w了，懒得用</p>\n<h3 id=\"last\"><a href=\"#last\" class=\"headerlink\" title=\"last\"></a>last</h3><p>最近的登录记录</p>\n<h3 id=\"lastlog\"><a href=\"#lastlog\" class=\"headerlink\" title=\"lastlog\"></a>lastlog</h3><p>各个用户的最近登录记录</p>\n<h2 id=\"用户交流\"><a href=\"#用户交流\" class=\"headerlink\" title=\"用户交流\"></a>用户交流</h2><h3 id=\"write\"><a href=\"#write\" class=\"headerlink\" title=\"write\"></a>write</h3><p><code>write username [terminal]</code></p>\n<p>就硬发，打断你也要发</p>\n<h3 id=\"mesg\"><a href=\"#mesg\" class=\"headerlink\" title=\"mesg\"></a>mesg</h3><p>可使用<code>mesg n</code>强制闭上鼻子不听别人发（但阻止不了root）</p>\n<p><code>mesg y</code>再打开</p>\n<h3 id=\"wall\"><a href=\"#wall\" class=\"headerlink\" title=\"wall\"></a>wall</h3><p>发给所有人</p>\n<h3 id=\"用户邮箱\"><a href=\"#用户邮箱\" class=\"headerlink\" title=\"用户邮箱\"></a>用户邮箱</h3><p>再次提醒：&#x2F;var&#x2F;spool&#x2F;mail</p>\n<h3 id=\"mail\"><a href=\"#mail\" class=\"headerlink\" title=\"mail\"></a>mail</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mail -s <span class=\"token string\">\"title\"</span> user\n<span class=\"token comment\"># 然后这里输入 . 来表示结束（我猜ctrl+d的EOF也可以）</span>\n<span class=\"token comment\"># 也可以用stdin重定向进来</span>\nmail <span class=\"token comment\"># 进入交互界面，查看邮件</span>\n<span class=\"token operator\">&amp;</span> <span class=\"token comment\">#&lt;== 这是个提示符，示意你输命令</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>?</td>\n<td>?</td>\n</tr>\n<tr>\n<td>h</td>\n<td>列出邮件标头，h 40</td>\n</tr>\n<tr>\n<td>d</td>\n<td>删除，d10，d20-40</td>\n</tr>\n<tr>\n<td>s</td>\n<td>存储邮件内容，s 5 ~&#x2F;mail.file</td>\n</tr>\n<tr>\n<td>x</td>\n<td>不做任何事直接退出</td>\n</tr>\n<tr>\n<td>q</td>\n<td>保存后退出</td>\n</tr>\n</tbody></table>\n<h1 id=\"创建大量账号\"><a href=\"#创建大量账号\" class=\"headerlink\" title=\"创建大量账号\"></a>创建大量账号</h1><p>高级话题，稍微看看</p>\n<h2 id=\"pwck\"><a href=\"#pwck\" class=\"headerlink\" title=\"pwck\"></a>pwck</h2><p>用于检查&#x2F;etc&#x2F;passwd中的信息是否正确</p>\n<h2 id=\"grpck\"><a href=\"#grpck\" class=\"headerlink\" title=\"grpck\"></a>grpck</h2><p>检查用户组</p>\n<h2 id=\"pwconv\"><a href=\"#pwconv\" class=\"headerlink\" title=\"pwconv\"></a>pwconv</h2><p>将&#x2F;etc&#x2F;passwd中的账号和密码移动到&#x2F;etc&#x2F;shadow中，如果用useradd之类的话，是没它什么事的</p>\n<h2 id=\"pwunconv\"><a href=\"#pwunconv\" class=\"headerlink\" title=\"pwunconv\"></a>pwunconv</h2><p>将&#x2F;etc&#x2F;shadow写入&#x2F;etc&#x2F;passwd，然后删除&#x2F;etc&#x2F;shadow（危？）</p>\n<h2 id=\"chpasswd\"><a href=\"#chpasswd\" class=\"headerlink\" title=\"chpasswd\"></a>chpasswd</h2><p>读入未加密的密码，加密后写入&#x2F;etc&#x2F;shadown中，示例：<code>echo &quot;user1:abcdefg&quot; | chpasswd</code></p>\n<h3 id=\"一个大量创建账号的模板\"><a href=\"#一个大量创建账号的模板\" class=\"headerlink\" title=\"一个大量创建账号的模板\"></a>一个大量创建账号的模板</h3><p>用不到的样子</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/kon2.jpg","excerpt":"","more":"<h1 id=\"Linux账号与用户组\"><a href=\"#Linux账号与用户组\" class=\"headerlink\" title=\"Linux账号与用户组\"></a>Linux账号与用户组</h1><h2 id=\"UID和GID\"><a href=\"#UID和GID\" class=\"headerlink\" title=\"UID和GID\"></a>UID和GID</h2><p>总之就是非常重要，不要乱改&#x2F;etc&#x2F;passwd下的东西</p>\n<h2 id=\"用户账号\"><a href=\"#用户账号\" class=\"headerlink\" title=\"用户账号\"></a>用户账号</h2><p>登陆时OS做了什么</p>\n<ul>\n<li>在&#x2F;etc&#x2F;passwd中查询是否有该用户名，若有，读出UID和GID</li>\n<li>在&#x2F;etc&#x2F;shadow中查询账号和UID，然后确认密码</li>\n</ul>\n<p><em>所以要保护好上述内容的权限</em></p>\n<h3 id=\"x2F-etc-x2F-passwd的文件结构\"><a href=\"#x2F-etc-x2F-passwd的文件结构\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;passwd的文件结构\"></a>&#x2F;etc&#x2F;passwd的文件结构</h3><p>每行一个账号，以冒号分割</p>\n<p><code>root:x:0:0:root:/root:/bin/bash</code></p>\n<p>按顺序分别为</p>\n<ul>\n<li>账号名</li>\n<li>密码（woc），早期的密码是放在这的，后来移动到&#x2F;etc&#x2F;shadow上了</li>\n<li>UID</li>\n<li>GID</li>\n<li>用户信息说明，说明这个账号是干啥的</li>\n<li>家目录</li>\n<li>使用的shell</li>\n</ul>\n<h3 id=\"x2F-etc-x2F-shadow的文件结构\"><a href=\"#x2F-etc-x2F-shadow的文件结构\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;shadow的文件结构\"></a>&#x2F;etc&#x2F;shadow的文件结构</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">root:<span class=\"token operator\">!</span>:19032:0:99999:7:::\ndaemon:*:18480:0:99999:7:::\nbin:*:18480:0:99999:7:::<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>同上，按顺序</p>\n<ul>\n<li>账号名称</li>\n<li>密码</li>\n<li>最近修改密码的日期，单位是天，指到1970年1月1号的天数。</li>\n<li>密码不可被修改的天数（与第三个字段相比较）</li>\n<li>密码需要被修改的天数（与第三个字段相比较）</li>\n<li>密码需要被修改的期限前的警告天数（与第五个字段比较）</li>\n<li>密码过期后强制修改的天数（与第五个字段比较）</li>\n<li>保留字段</li>\n</ul>\n<p>关于shadow，注意要保持其权限为600。</p>\n<p>关于shadow的加密方式，根据linux distribution版本不同而不懂，可以使用<code>authconfig --test | grep hashing</code>查看。（好像这个指令太老了？）</p>\n<h2 id=\"用户组\"><a href=\"#用户组\" class=\"headerlink\" title=\"用户组\"></a>用户组</h2><h3 id=\"x2F-etc-x2F-group的文件结构\"><a href=\"#x2F-etc-x2F-group的文件结构\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;group的文件结构\"></a>&#x2F;etc&#x2F;group的文件结构</h3><p>格式同&#x2F;etc&#x2F;passwd，按顺序：</p>\n<ul>\n<li>组名</li>\n<li>用户组密码</li>\n<li>GID</li>\n<li>此用户组支持的账号名称</li>\n</ul>\n<h3 id=\"初始用户组与有效用户组\"><a href=\"#初始用户组与有效用户组\" class=\"headerlink\" title=\"初始用户组与有效用户组\"></a>初始用户组与有效用户组</h3><p>&#x2F;etc&#x2F;passwd中记录的GID为<strong>初始用户组</strong>，用户一登陆就拥有该用户组的所有权限。</p>\n<p>&#x2F;etc&#x2F;group中记录了某用户后，该用户也<strong>支持</strong>该用户组。</p>\n<ul>\n<li>使用<code>groups</code>查看当前用户支持的所用用户组，显示的第一个用户组为当前的<strong>有效用户组</strong></li>\n<li>使用<code>newgrp</code>切换有效用户组。注意，该指令使用一个新的shell来切换有效用户组，因此要使用<code>exit</code>来退出而不是直接切换回去。</li>\n</ul>\n<h3 id=\"x2F-etc-x2F-gshadow的文件结构\"><a href=\"#x2F-etc-x2F-gshadow的文件结构\" class=\"headerlink\" title=\"&#x2F;etc&#x2F;gshadow的文件结构\"></a>&#x2F;etc&#x2F;gshadow的文件结构</h3><p>格式同上，按顺序：</p>\n<ul>\n<li>组名</li>\n<li>密码栏，<code>!</code>表示无合法密码（即无用户组管理员）</li>\n<li>用户组管理员的账号</li>\n<li>加入该用户组支持的所属账号</li>\n</ul>\n<h1 id=\"账号管理\"><a href=\"#账号管理\" class=\"headerlink\" title=\"账号管理\"></a>账号管理</h1><h2 id=\"新增和删除用户\"><a href=\"#新增和删除用户\" class=\"headerlink\" title=\"新增和删除用户\"></a>新增和删除用户</h2><h3 id=\"useradd\"><a href=\"#useradd\" class=\"headerlink\" title=\"useradd\"></a>useradd</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">useradd</span> <span class=\"token punctuation\">[</span>-u <span class=\"token environment constant\">UID</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-g initial group<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-G other group<span class=\"token punctuation\">]</span> name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-u</td>\n<td>UID</td>\n</tr>\n<tr>\n<td>-g</td>\n<td>初始用户组</td>\n</tr>\n<tr>\n<td>-G</td>\n<td>次要用户组</td>\n</tr>\n<tr>\n<td>-M</td>\n<td>强制不要建立用户家目录</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>强制要建立用户家目录</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>用户说明</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>试某个目录成为家目录，注意，务必要使用绝对路径</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>建立系统账号，即UID小于1000</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>指定使用的shell</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>设定账号失效日期</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>指定密码是否会失效</td>\n</tr>\n</tbody></table>\n<p>使用useradd时，linux会做以下内容</p>\n<ul>\n<li>向&#x2F;etc&#x2F;passwd中写入一行与账号相关的信息</li>\n<li>向&#x2F;etc&#x2F;shadow中写入此账号的密码相关信息，但还没有真的密码</li>\n<li>向&#x2F;etc&#x2F;group中写入一个默认的组名</li>\n<li>在&#x2F;home下建立默认的家目录、</li>\n</ul>\n<p>使用<code>useradd -D</code>查看其默认值，其内容来源于&#x2F;etc&#x2F;default&#x2F;useradd</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">GROUP</span><span class=\"token operator\">=</span><span class=\"token number\">100</span> <span class=\"token comment\"># 默认GID</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HOME</span></span><span class=\"token operator\">=</span>/home <span class=\"token comment\"># 默认家目录</span>\n<span class=\"token assign-left variable\">INACTIVE</span><span class=\"token operator\">=</span>-1 <span class=\"token comment\"># 密码失效日期</span>\n<span class=\"token assign-left variable\">EXPIRE</span><span class=\"token operator\">=</span> <span class=\"token comment\"># 账号失效日期</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">SHELL</span></span><span class=\"token operator\">=</span>/bin/sh <span class=\"token comment\"># 默认的shell</span>\n<span class=\"token assign-left variable\">SKEL</span><span class=\"token operator\">=</span>/etc/skel <span class=\"token comment\"># 用户家目录内容的参考数据</span>\n<span class=\"token assign-left variable\">CREATE_MAIL_SPOOL</span><span class=\"token operator\">=</span>no <span class=\"token comment\"># 是否主动帮用户建立邮箱</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>除此之外，UID&#x2F;GID的密码参数在&#x2F;etc&#x2F;login.defs文件（下面这个是筛选过的）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">MAIL_DIR        /var/mail <span class=\"token comment\"># 默认邮箱目录</span>\nFAILLOG_ENAB            <span class=\"token function\">yes</span>\nLOG_UNKFAIL_ENAB        no\nLOG_OK_LOGINS           no\nSYSLOG_SU_ENAB          <span class=\"token function\">yes</span>\nSYSLOG_SG_ENAB          <span class=\"token function\">yes</span>\nFTMP_FILE       /var/log/btmp\nSU_NAME         <span class=\"token function\">su</span>\nHUSHLOGIN_FILE  .hushlogin\nENV_SUPATH      <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nENV_PATH        <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games\nTTYGROUP        <span class=\"token function\">tty</span>\nTTYPERM         0600\nERASECHAR       0177\nKILLCHAR        025\nUMASK           02 <span class=\"token comment\"># 用户的umask</span>\nPASS_MAX_DAYS   <span class=\"token number\">99999</span> <span class=\"token comment\"># 多久需要修改密码</span>\nPASS_MIN_DAYS   <span class=\"token number\">0</span> <span class=\"token comment\"># 多久不可重设密码</span>\nPASS_WARN_AGE   <span class=\"token number\">7</span> <span class=\"token comment\"># 密码过期警告日期</span>\nUID_MIN                  <span class=\"token number\">1000</span> <span class=\"token comment\"># 用户可以使用的最小UID</span>\nUID_MAX                 <span class=\"token number\">60000</span> <span class=\"token comment\"># 最大UID</span>\nGID_MIN                  <span class=\"token number\">1000</span> <span class=\"token comment\"># 用户可以使用的最小GID</span>\nGID_MAX                 <span class=\"token number\">60000</span> <span class=\"token comment\"># 最大GID</span>\n<span class=\"token comment\">#SYS_GID_MIN              100 # 系统账号保留的最小UID</span>\n<span class=\"token comment\">#SYS_GID_MAX              999 # 系统账号的最大UID</span>\nLOGIN_RETRIES           <span class=\"token number\">5</span>\nLOGIN_TIMEOUT           <span class=\"token number\">60</span>\nCHFN_RESTRICT           rwh\nDEFAULT_HOME    <span class=\"token function\">yes</span> <span class=\"token comment\"># 默认是否为用户创建家目录</span>\nUSERGROUPS_ENAB <span class=\"token function\">yes</span> <span class=\"token comment\"># 使用userdel删除用户时，是否删除初始用户组</span>\nENCRYPT_METHOD SHA512 <span class=\"token comment\"># 密码的加密机制</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"passwd\"><a href=\"#passwd\" class=\"headerlink\" title=\"passwd\"></a>passwd</h3><p>刚建好的账号是锁定的，得设置密码</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">passwd</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> username<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–stdin</td>\n<td>接收前一个pipe的数据</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>lock，使密码失效</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>unlock</td>\n</tr>\n<tr>\n<td>-S</td>\n<td>列出密码相关的信息，主要是展示&#x2F;etc&#x2F;shadows中的内容</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>多久不可修改密码的天数</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>多久必须修改密码</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>密码过期前的警告天数</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>密码失效日期</td>\n</tr>\n</tbody></table>\n<h3 id=\"chage\"><a href=\"#chage\" class=\"headerlink\" title=\"chage\"></a>chage</h3><p>高级一点的<code>passwd</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">chage <span class=\"token punctuation\">[</span>-option<span class=\"token punctuation\">]</span> username<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>选项</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-l</td>\n<td>列出详细信息</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>修改shadow第三栏位，最近一次修改日期的时间</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>第四栏位，密码保留天数</td>\n</tr>\n<tr>\n<td>-M</td>\n<td>第五栏位，密码多久需要修改</td>\n</tr>\n<tr>\n<td>-W</td>\n<td>第六栏位，密码过期前警告</td>\n</tr>\n<tr>\n<td>-I</td>\n<td>第七栏位，密码失效日期</td>\n</tr>\n<tr>\n<td>-E</td>\n<td>第八栏位，账号失效日期</td>\n</tr>\n</tbody></table>\n<h3 id=\"usermod\"><a href=\"#usermod\" class=\"headerlink\" title=\"usermod\"></a>usermod</h3><p>修改用户设置</p>\n<h4 id=\"userdel\"><a href=\"#userdel\" class=\"headerlink\" title=\"userdel\"></a>userdel</h4><p>删除用户，包括以下数据</p>\n<ul>\n<li>&#x2F;etc&#x2F;passwd，&#x2F;etc&#x2F;shadow</li>\n<li>&#x2F;etc&#x2F;group，&#x2F;etc&#x2F;gshadow</li>\n<li>&#x2F;home&#x2F;username，&#x2F;var&#x2F;spool&#x2F;mail&#x2F;username</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">userdel</span> <span class=\"token punctuation\">[</span>-r<span class=\"token punctuation\">]</span> username\n<span class=\"token comment\"># -r 表示将家目录也删除</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"用户功能\"><a href=\"#用户功能\" class=\"headerlink\" title=\"用户功能\"></a>用户功能</h2><h3 id=\"id\"><a href=\"#id\" class=\"headerlink\" title=\"id\"></a>id</h3><p>查询自己（或别人）的uid等基本信息</p>\n<h3 id=\"finger\"><a href=\"#finger\" class=\"headerlink\" title=\"finger\"></a>finger</h3><p>查看更多信息（默认不安装）</p>\n<h3 id=\"chfg\"><a href=\"#chfg\" class=\"headerlink\" title=\"chfg\"></a>chfg</h3><p>change finger，感觉用不上</p>\n<h3 id=\"chsh\"><a href=\"#chsh\" class=\"headerlink\" title=\"chsh\"></a>chsh</h3><p>change shell</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">chsh -l <span class=\"token comment\"># 列出可用的shell</span>\nchsh -s <span class=\"token comment\"># 设置shell</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"新增和删除用户组\"><a href=\"#新增和删除用户组\" class=\"headerlink\" title=\"新增和删除用户组\"></a>新增和删除用户组</h2><h3 id=\"groupadd\"><a href=\"#groupadd\" class=\"headerlink\" title=\"groupadd\"></a>groupadd</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">groupadd</span> <span class=\"token punctuation\">[</span>-g gid<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-r<span class=\"token punctuation\">]</span> groupname\n<span class=\"token comment\"># -r 建立系统用户组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"groupmod\"><a href=\"#groupmod\" class=\"headerlink\" title=\"groupmod\"></a>groupmod</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">groupmod</span> <span class=\"token punctuation\">[</span>-g gid<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-n group_name<span class=\"token punctuation\">]</span> groupname\n<span class=\"token comment\"># -n 用来修改现有的用户组名</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"groupdel\"><a href=\"#groupdel\" class=\"headerlink\" title=\"groupdel\"></a>groupdel</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">groupdel</span> <span class=\"token punctuation\">[</span>groupname<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>若有用户使用某个用户组作为初始用户组，则该用户组无法删除。此时可以</p>\n<ul>\n<li>修改用户的GID</li>\n<li>删除该用户</li>\n</ul>\n<h3 id=\"gpasswd\"><a href=\"#gpasswd\" class=\"headerlink\" title=\"gpasswd\"></a>gpasswd</h3><p>建立group管理员</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># root的使用</span>\ngpasswd groupname <span class=\"token comment\"># 设置group密码</span>\ngpasswd -A user groupname <span class=\"token comment\"># 指定group的用户管理员</span>\ngpasswd -M user groupname <span class=\"token comment\"># 将用户加入group</span>\n<span class=\"token comment\"># -r 使group密码失效</span>\n<span class=\"token comment\"># -R 使group密码栏失效</span>\n\n<span class=\"token comment\"># 用户组管理员的使用</span>\ngpasswd -a user <span class=\"token comment\"># 添加用户</span>\ngpasswd -d user <span class=\"token comment\"># 删除用户</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"ACL的使用\"><a href=\"#ACL的使用\" class=\"headerlink\" title=\"ACL的使用\"></a>ACL的使用</h1><p>authconfig和authconfig-tui可用于外部身份认证</p>\n<h2 id=\"ACL介绍\"><a href=\"#ACL介绍\" class=\"headerlink\" title=\"ACL介绍\"></a>ACL介绍</h2><p><code>Access Control List</code></p>\n<p>ACL可针对的方面</p>\n<ul>\n<li>user</li>\n<li>group</li>\n<li>mask（默认属性）</li>\n</ul>\n<h2 id=\"ACL的设置\"><a href=\"#ACL的设置\" class=\"headerlink\" title=\"ACL的设置\"></a>ACL的设置</h2><h3 id=\"setfacl\"><a href=\"#setfacl\" class=\"headerlink\" title=\"setfacl\"></a>setfacl</h3><p>用于设置某个文件&#x2F;目录的ACL权限</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">setfacl <span class=\"token punctuation\">[</span>bkRd<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>-m<span class=\"token operator\">|</span>-x<span class=\"token punctuation\">&#125;</span> acl argument<span class=\"token punctuation\">]</span> filename\n<span class=\"token comment\"># ACL参数格式</span>\nu:user:<span class=\"token punctuation\">[</span>rwx<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 对特定user</span>\ng:group:<span class=\"token punctuation\">[</span>rwx<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 对特定group</span>\nm:<span class=\"token punctuation\">[</span>rwx<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 对mask(有效权限)</span>\nd:<span class=\"token punctuation\">[</span>ug<span class=\"token punctuation\">]</span>:<span class=\"token punctuation\">[</span>rwx<span class=\"token punctuation\">]</span> <span class=\"token comment\">#默认权限</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-m</td>\n<td>设置后续的ACL参数</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>删除后续的ACL参数，删除时用<code>-</code>来占位</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>删除所有的ACL参数，删除时用<code>-</code>来占位</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>删除默认的ACL参数</td>\n</tr>\n<tr>\n<td>-R</td>\n<td>递归</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>设置默认的ACL参数（只对目录有效）</td>\n</tr>\n</tbody></table>\n<h3 id=\"getfacl\"><a href=\"#getfacl\" class=\"headerlink\" title=\"getfacl\"></a>getfacl</h3><p>用于查看某个文件&#x2F;目录的ACL权限</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">getfacl filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"用户身份切换\"><a href=\"#用户身份切换\" class=\"headerlink\" title=\"用户身份切换\"></a>用户身份切换</h1><h2 id=\"su\"><a href=\"#su\" class=\"headerlink\" title=\"su\"></a>su</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">su</span> <span class=\"token punctuation\">[</span>-lm<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-c command<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># - 使用login-shell方式登录</span>\n<span class=\"token comment\"># -l 同上，但后面必须加username</span>\n<span class=\"token comment\"># 不加-就是nologin-shell登录</span>\n<span class=\"token comment\"># -m 和 -p表示“使用目前的环境变量设置，而不读取新使用者的配置为文件</span>\n<span class=\"token comment\"># -c 只执行一次command</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注：那个<code>-</code>很重要</strong></p>\n<h2 id=\"sudo\"><a href=\"#sudo\" class=\"headerlink\" title=\"sudo\"></a>sudo</h2><p>在<code>/etc/sudoers</code>内记录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token punctuation\">[</span>-b<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-u username<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># -b background，将命令放到后台进行</span>\n<span class=\"token comment\"># -u 后面接欲切换的用户，默认为root</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"sudo的执行流程\"><a href=\"#sudo的执行流程\" class=\"headerlink\" title=\"sudo的执行流程\"></a>sudo的执行流程</h3><ul>\n<li>系统查看&#x2F;etc&#x2F;sudoers文件中该用户是否有sudo权限</li>\n<li>让用户输入自己的密码，若自己就是要切换的用户，则不必输入密码。root使用sudo也不需要输入密码</li>\n<li>执行命令</li>\n</ul>\n<h3 id=\"修改-x2F-etc-x2F-sudoers\"><a href=\"#修改-x2F-etc-x2F-sudoers\" class=\"headerlink\" title=\"修改&#x2F;etc&#x2F;sudoers\"></a>修改&#x2F;etc&#x2F;sudoers</h3><p>该文件具有一定规范，因此更推荐使用<code>visudo</code>去修改（怎么觉得没啥区别？）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">root\t<span class=\"token assign-left variable\">ALL</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ALL<span class=\"token punctuation\">)</span>\tALL <span class=\"token comment\"># username\tlogin_host_name=(user_available)  command_available</span>\n%wheel\t<span class=\"token assign-left variable\">ALL</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ALL<span class=\"token punctuation\">)</span>\tALL <span class=\"token comment\"># % represent group</span>\n%wheel\t<span class=\"token assign-left variable\">ALL</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ALL<span class=\"token punctuation\">)</span>\tNOPASSWD: ALL <span class=\"token comment\"># 免密</span>\nuser1\t<span class=\"token assign-left variable\">ALL</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\t<span class=\"token operator\">!</span>/usr/bin/psswd, /usr/bin/passwd <span class=\"token punctuation\">[</span>A-za-z<span class=\"token punctuation\">]</span>*, <span class=\"token operator\">!</span>/usr/bin/passwd root <span class=\"token comment\">#!表示不可执行，这样就可以修改别的用户的密码，但不能修改root的</span>\nUser_Alias ADMPW <span class=\"token operator\">=</span> pro1,pro2,pro3 <span class=\"token comment\"># 别名建立新账号，注意该账号必须是大写</span>\nCmnd_Alias ADMPWCOM <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>/usr/bin/passwd,/usr/bin/passwd <span class=\"token punctuation\">[</span>A-Za-z<span class=\"token punctuation\">]</span>*,<span class=\"token operator\">!</span>/usr/bin/passwd root\nADMPW\t<span class=\"token assign-left variable\">ALL</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\tADMPWCOM<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"关于切换到root用户的方法\"><a href=\"#关于切换到root用户的方法\" class=\"headerlink\" title=\"关于切换到root用户的方法\"></a>关于切换到root用户的方法</h3><p>以前的我：<code>su</code>。这样是使用nologin shell的变量文件登录的root</p>\n<p>那是不是应该<code>su -</code>，这样就完整的读取了root的login shell配置文件</p>\n<p>如果我只执行一条命令的话，那就是<code>su - -c command</code></p>\n<p>不过这样还要输入root的密码，要是没有root密码呢？</p>\n<p><code>sudo</code>咯，这样也是每条指令前都要加<code>sudo</code></p>\n<p>鸟哥还教了一个方法，在<code>/etc/sudoers</code>中这样写</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">User_Alias ADMINS <span class=\"token operator\">=</span> user1,user2\nADMINS\t<span class=\"token assign-left variable\">ALL</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\t/bin/su -\n<span class=\"token comment\"># 然后就可以这样登录root了</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">su</span> -<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不过现在的主流方式好像是<code>sudo -i</code></p>\n<p>man page的说法是，这样相当于登录的root的login shell，读取了它的所有环境变量，并以一个interactive shell的形式呈现，还帮忙把用户切换到家目录里去了。</p>\n<p>这应该是sudo提供的一个“装的很像”的切换方式，既然装的这么像，那还是用它。</p>\n<h1 id=\"PAM模块\"><a href=\"#PAM模块\" class=\"headerlink\" title=\"PAM模块\"></a>PAM模块</h1><p><code>Pluggable Authentication Modules</code></p>\n<p>是个linux内置的api，返回的结果要么成功要么失败。</p>\n<p>是个很nb的功能。跳了，暂时用不上，但迟早要用上，一定要记得回来看</p>\n<p>&#x2F;&#x2F;todo</p>\n<h1 id=\"linux主机上信息的传递\"><a href=\"#linux主机上信息的传递\" class=\"headerlink\" title=\"linux主机上信息的传递\"></a>linux主机上信息的传递</h1><h2 id=\"查询用户\"><a href=\"#查询用户\" class=\"headerlink\" title=\"查询用户\"></a>查询用户</h2><h3 id=\"w\"><a href=\"#w\" class=\"headerlink\" title=\"w\"></a>w</h3><p>用的多，略</p>\n<h3 id=\"who\"><a href=\"#who\" class=\"headerlink\" title=\"who\"></a>who</h3><p>有w了，懒得用</p>\n<h3 id=\"last\"><a href=\"#last\" class=\"headerlink\" title=\"last\"></a>last</h3><p>最近的登录记录</p>\n<h3 id=\"lastlog\"><a href=\"#lastlog\" class=\"headerlink\" title=\"lastlog\"></a>lastlog</h3><p>各个用户的最近登录记录</p>\n<h2 id=\"用户交流\"><a href=\"#用户交流\" class=\"headerlink\" title=\"用户交流\"></a>用户交流</h2><h3 id=\"write\"><a href=\"#write\" class=\"headerlink\" title=\"write\"></a>write</h3><p><code>write username [terminal]</code></p>\n<p>就硬发，打断你也要发</p>\n<h3 id=\"mesg\"><a href=\"#mesg\" class=\"headerlink\" title=\"mesg\"></a>mesg</h3><p>可使用<code>mesg n</code>强制闭上鼻子不听别人发（但阻止不了root）</p>\n<p><code>mesg y</code>再打开</p>\n<h3 id=\"wall\"><a href=\"#wall\" class=\"headerlink\" title=\"wall\"></a>wall</h3><p>发给所有人</p>\n<h3 id=\"用户邮箱\"><a href=\"#用户邮箱\" class=\"headerlink\" title=\"用户邮箱\"></a>用户邮箱</h3><p>再次提醒：&#x2F;var&#x2F;spool&#x2F;mail</p>\n<h3 id=\"mail\"><a href=\"#mail\" class=\"headerlink\" title=\"mail\"></a>mail</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mail -s <span class=\"token string\">\"title\"</span> user\n<span class=\"token comment\"># 然后这里输入 . 来表示结束（我猜ctrl+d的EOF也可以）</span>\n<span class=\"token comment\"># 也可以用stdin重定向进来</span>\nmail <span class=\"token comment\"># 进入交互界面，查看邮件</span>\n<span class=\"token operator\">&amp;</span> <span class=\"token comment\">#&lt;== 这是个提示符，示意你输命令</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>?</td>\n<td>?</td>\n</tr>\n<tr>\n<td>h</td>\n<td>列出邮件标头，h 40</td>\n</tr>\n<tr>\n<td>d</td>\n<td>删除，d10，d20-40</td>\n</tr>\n<tr>\n<td>s</td>\n<td>存储邮件内容，s 5 ~&#x2F;mail.file</td>\n</tr>\n<tr>\n<td>x</td>\n<td>不做任何事直接退出</td>\n</tr>\n<tr>\n<td>q</td>\n<td>保存后退出</td>\n</tr>\n</tbody></table>\n<h1 id=\"创建大量账号\"><a href=\"#创建大量账号\" class=\"headerlink\" title=\"创建大量账号\"></a>创建大量账号</h1><p>高级话题，稍微看看</p>\n<h2 id=\"pwck\"><a href=\"#pwck\" class=\"headerlink\" title=\"pwck\"></a>pwck</h2><p>用于检查&#x2F;etc&#x2F;passwd中的信息是否正确</p>\n<h2 id=\"grpck\"><a href=\"#grpck\" class=\"headerlink\" title=\"grpck\"></a>grpck</h2><p>检查用户组</p>\n<h2 id=\"pwconv\"><a href=\"#pwconv\" class=\"headerlink\" title=\"pwconv\"></a>pwconv</h2><p>将&#x2F;etc&#x2F;passwd中的账号和密码移动到&#x2F;etc&#x2F;shadow中，如果用useradd之类的话，是没它什么事的</p>\n<h2 id=\"pwunconv\"><a href=\"#pwunconv\" class=\"headerlink\" title=\"pwunconv\"></a>pwunconv</h2><p>将&#x2F;etc&#x2F;shadow写入&#x2F;etc&#x2F;passwd，然后删除&#x2F;etc&#x2F;shadow（危？）</p>\n<h2 id=\"chpasswd\"><a href=\"#chpasswd\" class=\"headerlink\" title=\"chpasswd\"></a>chpasswd</h2><p>读入未加密的密码，加密后写入&#x2F;etc&#x2F;shadown中，示例：<code>echo &quot;user1:abcdefg&quot; | chpasswd</code></p>\n<h3 id=\"一个大量创建账号的模板\"><a href=\"#一个大量创建账号的模板\" class=\"headerlink\" title=\"一个大量创建账号的模板\"></a>一个大量创建账号的模板</h3><p>用不到的样子</p>\n"},{"title":"给Apollo的面对对象课","abbrlink":"49144470","date":"2021-11-21T11:21:13.000Z","_content":"\n# 课前提醒（给我自己的）\n\n1. 打开vscode，准备源码\n2. 准备好使用g++\n\n# 多文件编程\n\n## Why\n\n非结构化与结构化：`goto`满天飞的后果\n\n## How\n\n```cpp\n//fun.h\nvoid func();\n\n//fun.cpp\n#include \"fun.h\"\nvoid func(){\n\tstd::cout<<\"hello\"<<std::endl;//?\n}\n\n//main.cpp\n#include <stdio.h>\n#inlcude \"fun.h\"\nusing namespace std;\nint main(){\n    printf(\"hi\\n\");\n\tfunc();\n\treturn 0;\n}\n```\n\n**提问**：`iostream`头文件应该放在哪？\n\n```cpp\n//fun.h\n#include <iostream>\n```\n\n**提问**：`main.cpp` 如何找到func()的实现？\n\nVS（IDE）的编译过程：\n\n- 预处理\n- 编译，生成中间可执行文件\n- **链接**\n- 生成最终可执行文件\n\n---\n\n演示：https://zhuanlan.zhihu.com/p/106781089\n\n---\n\n更进一步：Make\n\n**提问**：如果把上面的`stdio.h`改成`iostream`，会怎么样\n\n```cpp\n//fun.h\n#ifndef _fun\n#define _fun\n\n#include <iostream>\n\n#endif\n```\n\n# 面对对象\n\n**提问**：计算机是用来干啥的？为何计算机今天能为我们带来如此多好处？一个词语，两个汉字。\n\n1. 面向过程：我让机器干啥就干啥\n2. 面向对象：以对象为中心，把问题分解成对象\n\n*举例*：卖书\n\n## C的对象\n\n```c\nstruct book{\n    char name[10];\n    char ISBN[20];\n    double price;\n}\n\ndouble getPrice(struct book* theBook){\n    return theBook->price;\n}\nvoid showPrice(struct book* theBook){\n    printf(\"%lf\",theBook->price);\n}\n```\n\n**提问**：考虑一另一把剑🗡\n\n```c\nstruct sword{\n    char name[10];\n    double price;\n}\ndouble getPrice(struct sword* theSword){\n    return theSword->price;\n}\nvoid showPrice(struct book* theSword){\n    printf(\"%lf\",theSword->price);\n}\n```\n\nC不允许同名函数，即使允许，你也不知道show了谁的price。如何解决这个问题？（其实可以同名，在后面的重载会讲到）\n\n把函数写在struct里面，让函数成为struct的“专属函数”。C不许我们这么做，但是C++可以\n\n```cpp\nstruct Book{\n    char name[10];\n    char ISBN[20];\n    double price;\n    \n    double getPrice(){\n    \treturn price;\n\t}\n\tvoid showPrice(){\n    \tprintf(\"%lf\",price);\n\t}\n    //...\n};\n\nstruct Book theBook=/*...*/;\ntheBook.showPrice();\n```\n\n**提问**：考虑price的合理性，如何正确的为price赋值？（price>0)\n\n```cpp\n//考虑这种用法\ntheBook.price=100;\n\nint setPrice(double value){\n    if(value<0){\n        return -1;\n    }else{\n        price=value;\n        return 0;\n    }\n}\n//还是没有解决问题，依然可以\ntheBook.price=100;\n```\n\n封装的必要性\n\n```cpp\nclass Book{\nprivate:\n    char name[10];\n    char ISBN[20];\n    double price;\npublic:\n\tint setPrice(double value){\n    \tif(value<0){\n        \treturn -1;\n    \t}else{\n        \tprice=value;\n    \t}\n\t}\n    double getPrice(){\n    \treturn price;\n\t}\n\tvoid showPrice(){\n    \tprintf(\"%lf\",price);\n\t}\n    //...\n};\n\n//无法直接修改price，必须通过公共成员函数\n```\n\n## 构造函数\n\nC中的`struct`如何创建对象？\n\n```c\ntypedef struct{\n\tint num;\n}Book;\n\nBook b;\n```\n\n考虑 `int a=1`，我们能不能`Book b`？\n\n我们可以如何创建一个对象？我们需要Constructor，构造函数。\n\n```cpp\nclass Book{\npublic:\n    Book(){}\n    //Book(double the_price):price(the_price){}\n    Book(double the_price){setPrice(the_price);}\n    Book(double the_price,char* the_name){\n        Book(the_price,the_name,\"0000\");\n    }\n    Book(double the_price=10.0,char* the_name=\"none\",char* ISBN){\n        setPrice(the_price);\n        memcpy(name,the_name,10);\n        memcpy(ISBN,the_ISBN,20);\n    }\n    \nprivate:\n    double price;\n    char name[10];\n    char ISBN[20];\n    //...\n};\n\nBook b0;\nBook b1(10);\nBook b2(10,\"Apollo\");\n```\n\n参考：\n\n1. 拷贝构造\n2. 移动构造\n3. 合成构造\n\n## 继承与多态\n\n**提问**：我希望有一个科幻书，科幻书有一个别人没有的成员：科幻程度(depth)。同时有一种传记，有一个独有的值来记录传记主人公的名字(person)。\n\n```cpp\nclass Book{\npublic:\n    //...\nprivate:\n    double price;\n    char name[10];\n    char ISBN[20];\n    int depth;\n    char* person;\n    //...\n    \n    //...\n};\n```\n\n有公共属性，也有独有的属性(attribute)\n\n```cpp\nclass Fiction:public Book{\npublic:\n    Fiction();\n    \n    int setPrice(double value){\n    \tif(value<10){\n        \treturn -1;\n    \t}else{\n        \tprice=value;\n    \t}\n\t}\nprivate:\n    //不用写，都继承过来了\n    //...\n};\nclass biography:public Book{\n  //现场要求写一个  \n};\n```\n\n继承的方式有三种：\n\n>当一个类派生自基类，该基类可以被继承为 **public、protected** 或 **private** 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。\n>\n>我们几乎不使用 **protected** 或 **private** 继承，通常使用 **public** 继承。当使用不同类型的继承时，遵循以下几个规则：\n>\n>- **公有继承（public）：**当一个类派生自**公有**基类时，基类的**公有**成员也是派生类的**公有**成员，基类的**保护**成员也是派生类的**保护**成员，基类的**私有**成员不能直接被派生类访问，但是可以通过调用基类的**公有**和**保护**成员来访问。\n>- **保护继承（protected）：** 当一个类派生自**保护**基类时，基类的**公有**和**保护**成员将成为派生类的**保护**成员。\n>- **私有继承（private）：**当一个类派生自**私有**基类时，基类的**公有**和**保护**成员将成为派生类的**私有**成员。\n\n现在，我希望所有书都是被分了类的（如果不知道怎么分，就分到“未知分类”里面去），我们现在不允许直接创建一个Book对象，必须要先从Book继承一个专门的分类，再创建该分类的对象。\n\n```cpp\nclass Book{\npublic:\n    virtual Book();\n    virtual Book(double the_price);\n    virtual Book(double the_price);\n    \n    virtual int setPrice(double value);\n    \nprivate:\n    char name[10];\n    char ISBN[20];\n    double price;\n    //...\n};\n```\n\n`virtual`意味着必须由子类来实现这些函数。这叫纯虚函数，关于virtual，还有更多用法。\n\n## 重载\n\n`virtual`要求必须由子类来实现，这就是重载。重载允许同名，但必须接受不同参数。\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nvoid func(int a) { cout << \"1\" << endl; }\nvoid func(char b) { cout << \"2\" << endl; }\n\nint main() {\n  func(1);\n  func('a');\n}\n```\n\n**提问**：\n\n```cpp\n//已经有了这个函数\nBook(double the_price,char* the_name){\n   setPrice(the_price);\n   memcpy(name,the_name,10);\n}\n//又有了这个\nBook(double the_price,char* the_ISBN){\n   setPrice(the_price);\n   memcpy(name,the_ISBN,10);\n}\n\nBook b3(10,\"Apollo\");\n//Apollo 会变成name还是ISBN？\n```\n\nC++编译器不允许这样的事情发生，会出现redefinition报错，编译器认为这两个是同一函数。因此，参数的类型应该有所区别。\n\n更进一步，考虑Book==Book\n\n```cpp\nBook a(1,\"apollo\");\nBook b(10,\"apollo\");\n\n//a.equal(b);\nif(a==b){}\n\nclass Book{\npublic:\n    //...\n    bool operator==(const Book) {\n      if (this->name == Book::name)\n        return true;\n      else\n        return false;\n    }\n    \nprivate:\n    char name[10];\n    char ISBN[20];\n    double price;\n    //...\n};\n//写一个重载+，当两本书相同时，价格相加\n```\n\n## 析构函数\n\n一个对象创建完成后，也要销毁，我们应当定义它如何被销毁。\n\n## 两种风格的对象\n\n- 使这个对象像个“东西”，示例如上\n- 使这个对象像个“指针”，先看看内存管理\n\n# 内存管理\n\n**提问**：a+b中的内存是如何分配的？\n\n>**栈区（stack）：**指那些由编译器在需要的时候分配，不需要时自动清除的变量所在的储存区，如函数执行时，函数的形参以及函数内的局部变量分配在栈区，函数运行结束后，形参和局部变量去栈（自动释放）。栈内存分配运算内置与处理器的指令集中，效率高但是分配的内存空间有限。\n>\n>**堆区（heap）：**指哪些由程序员手动分配释放的储存区，如果程序员不释放这块内存，内存将一直被占用，直到程序运行结束由系统自动收回，c语言中使用malloc，free申请和释放空间。\n>\n>**静态储存区（static）：**全局变量和静态变量的储存是放在一块的，其中初始化的全局变量和静态变量在一个区域，这块空间当程序运行结束后由系统释放。\n>\n>**常量储存区（const）：**常量字符串就是储存在这里的，如“ABC”字符串就储存在常量区，储存在常量区的只读不可写。const修饰的全局变量也储存在常量区，const修饰的局部变量依然在栈上。\n>\n>**程序代码区：**存放源程序的二进制代码。\n\n**提问**：如何创建一个长度不定的数组\n\n错误示范：\n\n```c\nint main(void) {\n    int N = 0;\n\n    printf(\"请输入数组的大小\\n\");\n    scanf(\"%d\", &N);\n    int arr[N] = { 0 };\n}\n```\n\n正确示范：\n\n```c\nint main(void) {\n\n    int arr[1000] = { 0 };\n    int N = 0;\n    int i = 0;\n\n    printf(\"请输入数组的大小\\n\");\n    scanf(\"%d\", &N);\n\n    printf(\"请输入%d个数\\n\", N);\n    for (i = 0; i < N; i++)\n        scanf(\"%d\", &arr[i]);\n\n    return 0;\n}\n```\n\n## 手动内存管理\n\nC 使用malloc 分配内存和 free释放内存。\n\n```c\n#include<stdlib.h>\n\nint main(void) {\n\n    int i = 0;\n    int N = 0;\n    int* arr;\n\n    printf(\"请输入数组的大小\\n\");\n    scanf(\"%d\", &N);\n\n    arr = (int*)malloc(sizeof(int) * N);\n\n    printf(\"请输入%d个数\\n\", N);\n    for (i = 0; i < N; i++)\n        scanf(\"%d\", &arr[i]);\n\n    free(arr);\n    return 0;\n}\n```\n\nC++ 使用封装好的new 和delete\n\n```cpp\nint main(void) {\n\n    int i = 0;\n    int N = 0;\n\n    printf(\"请输入数组的大小\\n\");\n    cin<<N;\n\n    int *arr = new int[N];\n\n    cin<<\"请输入%d个数\\n\"<<endl;\n    for (i = 0; i < N; i++)\n        cin<< arr[i]);\n\n    delete[] p;\n    return 0;\n}\n```\n\n **提问**：为什么不是delete p?\n\n## 内存泄漏\n\n画图\n\n*share_ptr* 的原理：对指针进行计数\n\n# 使用STL库\n\n## String\n\n- 创建string\n- string+\n- insert\n- substr\n\n## Vector\n\n- 创建vector\n- size\n- begin\n- end\n- resize\n\n## Algorithm\n\n- find\n- rotate\n- sort\n- min\n- max\n\n## Utility\n\n- swap\n- pari\n- tuple\n\n# 完整示例\n\n```cpp\n//book.h\n#ifndef _book\n#define _book\n\n#include <string>\n#include \"show.hpp\"\n\nclass Book{\npublic:\n    Book(){init();};\n    //Book(double the_price):price(the_price){}\n    Book(double the_price);\n    Book(std::string the_name)=delete;\n    //Book(double the_price,std::string the_name);\n    Book(double the_price,std::string the_name,std::string ISBN);\n    \n    Book(Book);\n    \n    Book(Book b);\n    \n    int set_price();\n    int set_name();\n    int set_ISBN();\n    \n    friend void show_price(Book);\n    \nprivate:\n    double price;\n    std::string name;\n    std::string ISBN;\n    \n    int init(double the_price=0,std::string the_name=\"\",std::string ISBN=\"\");\n};\n#endif\n```\n\n```cpp\n//book.cpp\n#include \"book.h\"\n\nBook::Book(double the_price){Book()}\n//Book::Book(double the_price=0,std::string the_name):Book(the_price,the_name,\"\"){}\nBook::Book(double the_price=0,std::string the_name=\"\",std::string the_ISBN=\"\"){\n    Book::init(the_price,the_name,the_ISBN);\n}\nBook::Book(Book the_book){}\n\nint Book::init(double the_price,std::string the_name,std::string the_ISBN){\n    return set_price(the_price) && set_name(the_name) && set_ISBN(the_ISBN);\n}\nint Book::set_price(double the_price){\n    if(the_price>=0){\n        this->price=the_price;\n        return 1;\n    }else{\n        return 0;\n    }\n}\n//set_name 和 set_ISBN 略\n```\n\n```cpp\n//show.hpp\nvoid show_price(Book the_book){\n    std::cout<<the_book.price<<std::endl;\n}\n```\n\n```cpp\n//main.cpp\n#include \"book.hpp\"\n\nint main(){\n    Book b;\n    b.set_price(10);\n    show_price(b);\n    Book bb(b);\n    //Book bb=b;\n    //Book bb{b};\n}\n```\n\n\n\n# Apollo2D\n\n//这里是Agent2d中的WorldModel","source":"_posts/Language/oop-for-apollo.md","raw":"---\ntitle: 给Apollo的面对对象课\ncategories: Language\ntags:\n  - cpp\nabbrlink: '49144470'\ndate: 2021-11-21 19:21:13\n---\n\n# 课前提醒（给我自己的）\n\n1. 打开vscode，准备源码\n2. 准备好使用g++\n\n# 多文件编程\n\n## Why\n\n非结构化与结构化：`goto`满天飞的后果\n\n## How\n\n```cpp\n//fun.h\nvoid func();\n\n//fun.cpp\n#include \"fun.h\"\nvoid func(){\n\tstd::cout<<\"hello\"<<std::endl;//?\n}\n\n//main.cpp\n#include <stdio.h>\n#inlcude \"fun.h\"\nusing namespace std;\nint main(){\n    printf(\"hi\\n\");\n\tfunc();\n\treturn 0;\n}\n```\n\n**提问**：`iostream`头文件应该放在哪？\n\n```cpp\n//fun.h\n#include <iostream>\n```\n\n**提问**：`main.cpp` 如何找到func()的实现？\n\nVS（IDE）的编译过程：\n\n- 预处理\n- 编译，生成中间可执行文件\n- **链接**\n- 生成最终可执行文件\n\n---\n\n演示：https://zhuanlan.zhihu.com/p/106781089\n\n---\n\n更进一步：Make\n\n**提问**：如果把上面的`stdio.h`改成`iostream`，会怎么样\n\n```cpp\n//fun.h\n#ifndef _fun\n#define _fun\n\n#include <iostream>\n\n#endif\n```\n\n# 面对对象\n\n**提问**：计算机是用来干啥的？为何计算机今天能为我们带来如此多好处？一个词语，两个汉字。\n\n1. 面向过程：我让机器干啥就干啥\n2. 面向对象：以对象为中心，把问题分解成对象\n\n*举例*：卖书\n\n## C的对象\n\n```c\nstruct book{\n    char name[10];\n    char ISBN[20];\n    double price;\n}\n\ndouble getPrice(struct book* theBook){\n    return theBook->price;\n}\nvoid showPrice(struct book* theBook){\n    printf(\"%lf\",theBook->price);\n}\n```\n\n**提问**：考虑一另一把剑🗡\n\n```c\nstruct sword{\n    char name[10];\n    double price;\n}\ndouble getPrice(struct sword* theSword){\n    return theSword->price;\n}\nvoid showPrice(struct book* theSword){\n    printf(\"%lf\",theSword->price);\n}\n```\n\nC不允许同名函数，即使允许，你也不知道show了谁的price。如何解决这个问题？（其实可以同名，在后面的重载会讲到）\n\n把函数写在struct里面，让函数成为struct的“专属函数”。C不许我们这么做，但是C++可以\n\n```cpp\nstruct Book{\n    char name[10];\n    char ISBN[20];\n    double price;\n    \n    double getPrice(){\n    \treturn price;\n\t}\n\tvoid showPrice(){\n    \tprintf(\"%lf\",price);\n\t}\n    //...\n};\n\nstruct Book theBook=/*...*/;\ntheBook.showPrice();\n```\n\n**提问**：考虑price的合理性，如何正确的为price赋值？（price>0)\n\n```cpp\n//考虑这种用法\ntheBook.price=100;\n\nint setPrice(double value){\n    if(value<0){\n        return -1;\n    }else{\n        price=value;\n        return 0;\n    }\n}\n//还是没有解决问题，依然可以\ntheBook.price=100;\n```\n\n封装的必要性\n\n```cpp\nclass Book{\nprivate:\n    char name[10];\n    char ISBN[20];\n    double price;\npublic:\n\tint setPrice(double value){\n    \tif(value<0){\n        \treturn -1;\n    \t}else{\n        \tprice=value;\n    \t}\n\t}\n    double getPrice(){\n    \treturn price;\n\t}\n\tvoid showPrice(){\n    \tprintf(\"%lf\",price);\n\t}\n    //...\n};\n\n//无法直接修改price，必须通过公共成员函数\n```\n\n## 构造函数\n\nC中的`struct`如何创建对象？\n\n```c\ntypedef struct{\n\tint num;\n}Book;\n\nBook b;\n```\n\n考虑 `int a=1`，我们能不能`Book b`？\n\n我们可以如何创建一个对象？我们需要Constructor，构造函数。\n\n```cpp\nclass Book{\npublic:\n    Book(){}\n    //Book(double the_price):price(the_price){}\n    Book(double the_price){setPrice(the_price);}\n    Book(double the_price,char* the_name){\n        Book(the_price,the_name,\"0000\");\n    }\n    Book(double the_price=10.0,char* the_name=\"none\",char* ISBN){\n        setPrice(the_price);\n        memcpy(name,the_name,10);\n        memcpy(ISBN,the_ISBN,20);\n    }\n    \nprivate:\n    double price;\n    char name[10];\n    char ISBN[20];\n    //...\n};\n\nBook b0;\nBook b1(10);\nBook b2(10,\"Apollo\");\n```\n\n参考：\n\n1. 拷贝构造\n2. 移动构造\n3. 合成构造\n\n## 继承与多态\n\n**提问**：我希望有一个科幻书，科幻书有一个别人没有的成员：科幻程度(depth)。同时有一种传记，有一个独有的值来记录传记主人公的名字(person)。\n\n```cpp\nclass Book{\npublic:\n    //...\nprivate:\n    double price;\n    char name[10];\n    char ISBN[20];\n    int depth;\n    char* person;\n    //...\n    \n    //...\n};\n```\n\n有公共属性，也有独有的属性(attribute)\n\n```cpp\nclass Fiction:public Book{\npublic:\n    Fiction();\n    \n    int setPrice(double value){\n    \tif(value<10){\n        \treturn -1;\n    \t}else{\n        \tprice=value;\n    \t}\n\t}\nprivate:\n    //不用写，都继承过来了\n    //...\n};\nclass biography:public Book{\n  //现场要求写一个  \n};\n```\n\n继承的方式有三种：\n\n>当一个类派生自基类，该基类可以被继承为 **public、protected** 或 **private** 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。\n>\n>我们几乎不使用 **protected** 或 **private** 继承，通常使用 **public** 继承。当使用不同类型的继承时，遵循以下几个规则：\n>\n>- **公有继承（public）：**当一个类派生自**公有**基类时，基类的**公有**成员也是派生类的**公有**成员，基类的**保护**成员也是派生类的**保护**成员，基类的**私有**成员不能直接被派生类访问，但是可以通过调用基类的**公有**和**保护**成员来访问。\n>- **保护继承（protected）：** 当一个类派生自**保护**基类时，基类的**公有**和**保护**成员将成为派生类的**保护**成员。\n>- **私有继承（private）：**当一个类派生自**私有**基类时，基类的**公有**和**保护**成员将成为派生类的**私有**成员。\n\n现在，我希望所有书都是被分了类的（如果不知道怎么分，就分到“未知分类”里面去），我们现在不允许直接创建一个Book对象，必须要先从Book继承一个专门的分类，再创建该分类的对象。\n\n```cpp\nclass Book{\npublic:\n    virtual Book();\n    virtual Book(double the_price);\n    virtual Book(double the_price);\n    \n    virtual int setPrice(double value);\n    \nprivate:\n    char name[10];\n    char ISBN[20];\n    double price;\n    //...\n};\n```\n\n`virtual`意味着必须由子类来实现这些函数。这叫纯虚函数，关于virtual，还有更多用法。\n\n## 重载\n\n`virtual`要求必须由子类来实现，这就是重载。重载允许同名，但必须接受不同参数。\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nvoid func(int a) { cout << \"1\" << endl; }\nvoid func(char b) { cout << \"2\" << endl; }\n\nint main() {\n  func(1);\n  func('a');\n}\n```\n\n**提问**：\n\n```cpp\n//已经有了这个函数\nBook(double the_price,char* the_name){\n   setPrice(the_price);\n   memcpy(name,the_name,10);\n}\n//又有了这个\nBook(double the_price,char* the_ISBN){\n   setPrice(the_price);\n   memcpy(name,the_ISBN,10);\n}\n\nBook b3(10,\"Apollo\");\n//Apollo 会变成name还是ISBN？\n```\n\nC++编译器不允许这样的事情发生，会出现redefinition报错，编译器认为这两个是同一函数。因此，参数的类型应该有所区别。\n\n更进一步，考虑Book==Book\n\n```cpp\nBook a(1,\"apollo\");\nBook b(10,\"apollo\");\n\n//a.equal(b);\nif(a==b){}\n\nclass Book{\npublic:\n    //...\n    bool operator==(const Book) {\n      if (this->name == Book::name)\n        return true;\n      else\n        return false;\n    }\n    \nprivate:\n    char name[10];\n    char ISBN[20];\n    double price;\n    //...\n};\n//写一个重载+，当两本书相同时，价格相加\n```\n\n## 析构函数\n\n一个对象创建完成后，也要销毁，我们应当定义它如何被销毁。\n\n## 两种风格的对象\n\n- 使这个对象像个“东西”，示例如上\n- 使这个对象像个“指针”，先看看内存管理\n\n# 内存管理\n\n**提问**：a+b中的内存是如何分配的？\n\n>**栈区（stack）：**指那些由编译器在需要的时候分配，不需要时自动清除的变量所在的储存区，如函数执行时，函数的形参以及函数内的局部变量分配在栈区，函数运行结束后，形参和局部变量去栈（自动释放）。栈内存分配运算内置与处理器的指令集中，效率高但是分配的内存空间有限。\n>\n>**堆区（heap）：**指哪些由程序员手动分配释放的储存区，如果程序员不释放这块内存，内存将一直被占用，直到程序运行结束由系统自动收回，c语言中使用malloc，free申请和释放空间。\n>\n>**静态储存区（static）：**全局变量和静态变量的储存是放在一块的，其中初始化的全局变量和静态变量在一个区域，这块空间当程序运行结束后由系统释放。\n>\n>**常量储存区（const）：**常量字符串就是储存在这里的，如“ABC”字符串就储存在常量区，储存在常量区的只读不可写。const修饰的全局变量也储存在常量区，const修饰的局部变量依然在栈上。\n>\n>**程序代码区：**存放源程序的二进制代码。\n\n**提问**：如何创建一个长度不定的数组\n\n错误示范：\n\n```c\nint main(void) {\n    int N = 0;\n\n    printf(\"请输入数组的大小\\n\");\n    scanf(\"%d\", &N);\n    int arr[N] = { 0 };\n}\n```\n\n正确示范：\n\n```c\nint main(void) {\n\n    int arr[1000] = { 0 };\n    int N = 0;\n    int i = 0;\n\n    printf(\"请输入数组的大小\\n\");\n    scanf(\"%d\", &N);\n\n    printf(\"请输入%d个数\\n\", N);\n    for (i = 0; i < N; i++)\n        scanf(\"%d\", &arr[i]);\n\n    return 0;\n}\n```\n\n## 手动内存管理\n\nC 使用malloc 分配内存和 free释放内存。\n\n```c\n#include<stdlib.h>\n\nint main(void) {\n\n    int i = 0;\n    int N = 0;\n    int* arr;\n\n    printf(\"请输入数组的大小\\n\");\n    scanf(\"%d\", &N);\n\n    arr = (int*)malloc(sizeof(int) * N);\n\n    printf(\"请输入%d个数\\n\", N);\n    for (i = 0; i < N; i++)\n        scanf(\"%d\", &arr[i]);\n\n    free(arr);\n    return 0;\n}\n```\n\nC++ 使用封装好的new 和delete\n\n```cpp\nint main(void) {\n\n    int i = 0;\n    int N = 0;\n\n    printf(\"请输入数组的大小\\n\");\n    cin<<N;\n\n    int *arr = new int[N];\n\n    cin<<\"请输入%d个数\\n\"<<endl;\n    for (i = 0; i < N; i++)\n        cin<< arr[i]);\n\n    delete[] p;\n    return 0;\n}\n```\n\n **提问**：为什么不是delete p?\n\n## 内存泄漏\n\n画图\n\n*share_ptr* 的原理：对指针进行计数\n\n# 使用STL库\n\n## String\n\n- 创建string\n- string+\n- insert\n- substr\n\n## Vector\n\n- 创建vector\n- size\n- begin\n- end\n- resize\n\n## Algorithm\n\n- find\n- rotate\n- sort\n- min\n- max\n\n## Utility\n\n- swap\n- pari\n- tuple\n\n# 完整示例\n\n```cpp\n//book.h\n#ifndef _book\n#define _book\n\n#include <string>\n#include \"show.hpp\"\n\nclass Book{\npublic:\n    Book(){init();};\n    //Book(double the_price):price(the_price){}\n    Book(double the_price);\n    Book(std::string the_name)=delete;\n    //Book(double the_price,std::string the_name);\n    Book(double the_price,std::string the_name,std::string ISBN);\n    \n    Book(Book);\n    \n    Book(Book b);\n    \n    int set_price();\n    int set_name();\n    int set_ISBN();\n    \n    friend void show_price(Book);\n    \nprivate:\n    double price;\n    std::string name;\n    std::string ISBN;\n    \n    int init(double the_price=0,std::string the_name=\"\",std::string ISBN=\"\");\n};\n#endif\n```\n\n```cpp\n//book.cpp\n#include \"book.h\"\n\nBook::Book(double the_price){Book()}\n//Book::Book(double the_price=0,std::string the_name):Book(the_price,the_name,\"\"){}\nBook::Book(double the_price=0,std::string the_name=\"\",std::string the_ISBN=\"\"){\n    Book::init(the_price,the_name,the_ISBN);\n}\nBook::Book(Book the_book){}\n\nint Book::init(double the_price,std::string the_name,std::string the_ISBN){\n    return set_price(the_price) && set_name(the_name) && set_ISBN(the_ISBN);\n}\nint Book::set_price(double the_price){\n    if(the_price>=0){\n        this->price=the_price;\n        return 1;\n    }else{\n        return 0;\n    }\n}\n//set_name 和 set_ISBN 略\n```\n\n```cpp\n//show.hpp\nvoid show_price(Book the_book){\n    std::cout<<the_book.price<<std::endl;\n}\n```\n\n```cpp\n//main.cpp\n#include \"book.hpp\"\n\nint main(){\n    Book b;\n    b.set_price(10);\n    show_price(b);\n    Book bb(b);\n    //Book bb=b;\n    //Book bb{b};\n}\n```\n\n\n\n# Apollo2D\n\n//这里是Agent2d中的WorldModel","slug":"oop-for-apollo","published":1,"category":"Language","updated":"2022-02-11T05:17:56.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxt002v8wul41y8hu4m","content":"<h1 id=\"课前提醒（给我自己的）\"><a href=\"#课前提醒（给我自己的）\" class=\"headerlink\" title=\"课前提醒（给我自己的）\"></a>课前提醒（给我自己的）</h1><ol>\n<li>打开vscode，准备源码</li>\n<li>准备好使用g++</li>\n</ol>\n<h1 id=\"多文件编程\"><a href=\"#多文件编程\" class=\"headerlink\" title=\"多文件编程\"></a>多文件编程</h1><h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><p>非结构化与结构化：<code>goto</code>满天飞的后果</p>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//fun.h</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//fun.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"fun.h\"</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"hello\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//?</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//main.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">inlcude</span> <span class=\"token string\">\"fun.h\"</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：<code>iostream</code>头文件应该放在哪？</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//fun.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：<code>main.cpp</code> 如何找到func()的实现？</p>\n<p>VS（IDE）的编译过程：</p>\n<ul>\n<li>预处理</li>\n<li>编译，生成中间可执行文件</li>\n<li><strong>链接</strong></li>\n<li>生成最终可执行文件</li>\n</ul>\n<hr>\n<p>演示：<a href=\"https://zhuanlan.zhihu.com/p/106781089\">https://zhuanlan.zhihu.com/p/106781089</a></p>\n<hr>\n<p>更进一步：Make</p>\n<p><strong>提问</strong>：如果把上面的<code>stdio.h</code>改成<code>iostream</code>，会怎么样</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//fun.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_fun</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_fun</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"面对对象\"><a href=\"#面对对象\" class=\"headerlink\" title=\"面对对象\"></a>面对对象</h1><p><strong>提问</strong>：计算机是用来干啥的？为何计算机今天能为我们带来如此多好处？一个词语，两个汉字。</p>\n<ol>\n<li>面向过程：我让机器干啥就干啥</li>\n<li>面向对象：以对象为中心，把问题分解成对象</li>\n</ol>\n<p><em>举例</em>：卖书</p>\n<h2 id=\"C的对象\"><a href=\"#C的对象\" class=\"headerlink\" title=\"C的对象\"></a>C的对象</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token operator\">*</span> theBook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> theBook<span class=\"token operator\">-></span>price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token operator\">*</span> theBook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\"</span><span class=\"token punctuation\">,</span>theBook<span class=\"token operator\">-></span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：考虑一另一把剑🗡</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sword</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sword</span><span class=\"token operator\">*</span> theSword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> theSword<span class=\"token operator\">-></span>price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token operator\">*</span> theSword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\"</span><span class=\"token punctuation\">,</span>theSword<span class=\"token operator\">-></span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>C不允许同名函数，即使允许，你也不知道show了谁的price。如何解决这个问题？（其实可以同名，在后面的重载会讲到）</p>\n<p>把函数写在struct里面，让函数成为struct的“专属函数”。C不许我们这么做，但是C++可以</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">double</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\"</span><span class=\"token punctuation\">,</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Book</span> theBook<span class=\"token operator\">=</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">;</span>\ntheBook<span class=\"token punctuation\">.</span><span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：考虑price的合理性，如何正确的为price赋值？（price&gt;0)</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//考虑这种用法</span>\ntheBook<span class=\"token punctuation\">.</span>price<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        price<span class=\"token operator\">=</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//还是没有解决问题，依然可以</span>\ntheBook<span class=\"token punctuation\">.</span>price<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>封装的必要性</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        \tprice<span class=\"token operator\">=</span>value<span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\"</span><span class=\"token punctuation\">,</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//无法直接修改price，必须通过公共成员函数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>C中的<code>struct</code>如何创建对象？</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>Book<span class=\"token punctuation\">;</span>\n\nBook b<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>考虑 <code>int a=1</code>，我们能不能<code>Book b</code>？</p>\n<p>我们可以如何创建一个对象？我们需要Constructor，构造函数。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//Book(double the_price):price(the_price)&#123;&#125;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> the_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">,</span>the_name<span class=\"token punctuation\">,</span><span class=\"token string\">\"0000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token operator\">=</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> the_name<span class=\"token operator\">=</span><span class=\"token string\">\"none\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>the_name<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>ISBN<span class=\"token punctuation\">,</span>the_ISBN<span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nBook b0<span class=\"token punctuation\">;</span>\nBook <span class=\"token function\">b1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nBook <span class=\"token function\">b2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Apollo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>参考：</p>\n<ol>\n<li>拷贝构造</li>\n<li>移动构造</li>\n<li>合成构造</li>\n</ol>\n<h2 id=\"继承与多态\"><a href=\"#继承与多态\" class=\"headerlink\" title=\"继承与多态\"></a>继承与多态</h2><p><strong>提问</strong>：我希望有一个科幻书，科幻书有一个别人没有的成员：科幻程度(depth)。同时有一种传记，有一个独有的值来记录传记主人公的名字(person)。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> person<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n    \n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>有公共属性，也有独有的属性(attribute)</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fiction</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span></span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Fiction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        \tprice<span class=\"token operator\">=</span>value<span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//不用写，都继承过来了</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">biography</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//现场要求写一个  </span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继承的方式有三种：</p>\n<blockquote>\n<p>当一个类派生自基类，该基类可以被继承为 <strong>public、protected</strong> 或 <strong>private</strong> 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。</p>\n<p>我们几乎不使用 <strong>protected</strong> 或 <strong>private</strong> 继承，通常使用 <strong>public</strong> 继承。当使用不同类型的继承时，遵循以下几个规则：</p>\n<ul>\n<li><strong>公有继承（public）：</strong>当一个类派生自<strong>公有</strong>基类时，基类的<strong>公有</strong>成员也是派生类的<strong>公有</strong>成员，基类的<strong>保护</strong>成员也是派生类的<strong>保护</strong>成员，基类的<strong>私有</strong>成员不能直接被派生类访问，但是可以通过调用基类的<strong>公有</strong>和<strong>保护</strong>成员来访问。</li>\n<li><strong>保护继承（protected）：</strong> 当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</li>\n<li><strong>私有继承（private）：</strong>当一个类派生自<strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>成员。</li>\n</ul>\n</blockquote>\n<p>现在，我希望所有书都是被分了类的（如果不知道怎么分，就分到“未知分类”里面去），我们现在不允许直接创建一个Book对象，必须要先从Book继承一个专门的分类，再创建该分类的对象。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>virtual</code>意味着必须由子类来实现这些函数。这叫纯虚函数，关于virtual，还有更多用法。</p>\n<h2 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h2><p><code>virtual</code>要求必须由子类来实现，这就是重载。重载允许同名，但必须接受不同参数。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"1\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//已经有了这个函数</span>\n<span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> the_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>the_name<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//又有了这个</span>\n<span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> the_ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>the_ISBN<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBook <span class=\"token function\">b3</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Apollo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Apollo 会变成name还是ISBN？</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>C++编译器不允许这样的事情发生，会出现redefinition报错，编译器认为这两个是同一函数。因此，参数的类型应该有所区别。</p>\n<p>更进一步，考虑Book&#x3D;&#x3D;Book</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">Book <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"apollo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nBook <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"apollo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//a.equal(b);</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>name <span class=\"token operator\">==</span> Book<span class=\"token double-colon punctuation\">::</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//写一个重载+，当两本书相同时，价格相加</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h2><p>一个对象创建完成后，也要销毁，我们应当定义它如何被销毁。</p>\n<h2 id=\"两种风格的对象\"><a href=\"#两种风格的对象\" class=\"headerlink\" title=\"两种风格的对象\"></a>两种风格的对象</h2><ul>\n<li>使这个对象像个“东西”，示例如上</li>\n<li>使这个对象像个“指针”，先看看内存管理</li>\n</ul>\n<h1 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h1><p><strong>提问</strong>：a+b中的内存是如何分配的？</p>\n<blockquote>\n<p><strong>栈区（stack）：</strong>指那些由编译器在需要的时候分配，不需要时自动清除的变量所在的储存区，如函数执行时，函数的形参以及函数内的局部变量分配在栈区，函数运行结束后，形参和局部变量去栈（自动释放）。栈内存分配运算内置与处理器的指令集中，效率高但是分配的内存空间有限。</p>\n<p><strong>堆区（heap）：</strong>指哪些由程序员手动分配释放的储存区，如果程序员不释放这块内存，内存将一直被占用，直到程序运行结束由系统自动收回，c语言中使用malloc，free申请和释放空间。</p>\n<p><strong>静态储存区（static）：</strong>全局变量和静态变量的储存是放在一块的，其中初始化的全局变量和静态变量在一个区域，这块空间当程序运行结束后由系统释放。</p>\n<p><strong>常量储存区（const）：</strong>常量字符串就是储存在这里的，如“ABC”字符串就储存在常量区，储存在常量区的只读不可写。const修饰的全局变量也储存在常量区，const修饰的局部变量依然在栈上。</p>\n<p><strong>程序代码区：</strong>存放源程序的二进制代码。</p>\n</blockquote>\n<p><strong>提问</strong>：如何创建一个长度不定的数组</p>\n<p>错误示范：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入数组的大小\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>正确示范：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入数组的大小\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入%d个数\\n\"</span><span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"手动内存管理\"><a href=\"#手动内存管理\" class=\"headerlink\" title=\"手动内存管理\"></a>手动内存管理</h2><p>C 使用malloc 分配内存和 free释放内存。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入数组的大小\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入%d个数\\n\"</span><span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>C++ 使用封装好的new 和delete</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入数组的大小\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">&lt;&lt;</span>N<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    cin<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入%d个数\\n\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        cin<span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> <strong>提问</strong>：为什么不是delete p?</p>\n<h2 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h2><p>画图</p>\n<p><em>share_ptr</em> 的原理：对指针进行计数</p>\n<h1 id=\"使用STL库\"><a href=\"#使用STL库\" class=\"headerlink\" title=\"使用STL库\"></a>使用STL库</h1><h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><ul>\n<li>创建string</li>\n<li>string+</li>\n<li>insert</li>\n<li>substr</li>\n</ul>\n<h2 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h2><ul>\n<li>创建vector</li>\n<li>size</li>\n<li>begin</li>\n<li>end</li>\n<li>resize</li>\n</ul>\n<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><ul>\n<li>find</li>\n<li>rotate</li>\n<li>sort</li>\n<li>min</li>\n<li>max</li>\n</ul>\n<h2 id=\"Utility\"><a href=\"#Utility\" class=\"headerlink\" title=\"Utility\"></a>Utility</h2><ul>\n<li>swap</li>\n<li>pari</li>\n<li>tuple</li>\n</ul>\n<h1 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h1><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//book.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_book</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_book</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"show.hpp\"</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//Book(double the_price):price(the_price)&#123;&#125;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//Book(double the_price,std::string the_name);</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>Book b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> <span class=\"token function\">set_price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">set_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">set_ISBN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show_price</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>string name<span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>string ISBN<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string ISBN<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//book.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"book.h\"</span></span>\n\n<span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//Book::Book(double the_price=0,std::string the_name):Book(the_price,the_name,\"\")&#123;&#125;</span>\n<span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_ISBN<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">,</span>the_name<span class=\"token punctuation\">,</span>the_ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>Book the_book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">set_price</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">set_name</span><span class=\"token punctuation\">(</span>the_name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">set_ISBN</span><span class=\"token punctuation\">(</span>the_ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">set_price</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>the_price<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>price<span class=\"token operator\">=</span>the_price<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//set_name 和 set_ISBN 略</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//show.hpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_price</span><span class=\"token punctuation\">(</span>Book the_book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span>the_book<span class=\"token punctuation\">.</span>price<span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//main.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"book.hpp\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    Book b<span class=\"token punctuation\">;</span>\n    b<span class=\"token punctuation\">.</span><span class=\"token function\">set_price</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">show_price</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Book <span class=\"token function\">bb</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//Book bb=b;</span>\n    <span class=\"token comment\">//Book bb&#123;b&#125;;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"Apollo2D\"><a href=\"#Apollo2D\" class=\"headerlink\" title=\"Apollo2D\"></a>Apollo2D</h1><p>&#x2F;&#x2F;这里是Agent2d中的WorldModel</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/re04.jpg","excerpt":"","more":"<h1 id=\"课前提醒（给我自己的）\"><a href=\"#课前提醒（给我自己的）\" class=\"headerlink\" title=\"课前提醒（给我自己的）\"></a>课前提醒（给我自己的）</h1><ol>\n<li>打开vscode，准备源码</li>\n<li>准备好使用g++</li>\n</ol>\n<h1 id=\"多文件编程\"><a href=\"#多文件编程\" class=\"headerlink\" title=\"多文件编程\"></a>多文件编程</h1><h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><p>非结构化与结构化：<code>goto</code>满天飞的后果</p>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//fun.h</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//fun.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"fun.h\"</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"hello\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//?</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//main.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">inlcude</span> <span class=\"token string\">\"fun.h\"</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：<code>iostream</code>头文件应该放在哪？</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//fun.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：<code>main.cpp</code> 如何找到func()的实现？</p>\n<p>VS（IDE）的编译过程：</p>\n<ul>\n<li>预处理</li>\n<li>编译，生成中间可执行文件</li>\n<li><strong>链接</strong></li>\n<li>生成最终可执行文件</li>\n</ul>\n<hr>\n<p>演示：<a href=\"https://zhuanlan.zhihu.com/p/106781089\">https://zhuanlan.zhihu.com/p/106781089</a></p>\n<hr>\n<p>更进一步：Make</p>\n<p><strong>提问</strong>：如果把上面的<code>stdio.h</code>改成<code>iostream</code>，会怎么样</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//fun.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_fun</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_fun</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"面对对象\"><a href=\"#面对对象\" class=\"headerlink\" title=\"面对对象\"></a>面对对象</h1><p><strong>提问</strong>：计算机是用来干啥的？为何计算机今天能为我们带来如此多好处？一个词语，两个汉字。</p>\n<ol>\n<li>面向过程：我让机器干啥就干啥</li>\n<li>面向对象：以对象为中心，把问题分解成对象</li>\n</ol>\n<p><em>举例</em>：卖书</p>\n<h2 id=\"C的对象\"><a href=\"#C的对象\" class=\"headerlink\" title=\"C的对象\"></a>C的对象</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token operator\">*</span> theBook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> theBook<span class=\"token operator\">-></span>price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token operator\">*</span> theBook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\"</span><span class=\"token punctuation\">,</span>theBook<span class=\"token operator\">-></span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：考虑一另一把剑🗡</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sword</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sword</span><span class=\"token operator\">*</span> theSword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> theSword<span class=\"token operator\">-></span>price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token operator\">*</span> theSword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\"</span><span class=\"token punctuation\">,</span>theSword<span class=\"token operator\">-></span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>C不允许同名函数，即使允许，你也不知道show了谁的price。如何解决这个问题？（其实可以同名，在后面的重载会讲到）</p>\n<p>把函数写在struct里面，让函数成为struct的“专属函数”。C不许我们这么做，但是C++可以</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">double</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\"</span><span class=\"token punctuation\">,</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Book</span> theBook<span class=\"token operator\">=</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">;</span>\ntheBook<span class=\"token punctuation\">.</span><span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：考虑price的合理性，如何正确的为price赋值？（price&gt;0)</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//考虑这种用法</span>\ntheBook<span class=\"token punctuation\">.</span>price<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        price<span class=\"token operator\">=</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//还是没有解决问题，依然可以</span>\ntheBook<span class=\"token punctuation\">.</span>price<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>封装的必要性</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        \tprice<span class=\"token operator\">=</span>value<span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\"</span><span class=\"token punctuation\">,</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//无法直接修改price，必须通过公共成员函数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>C中的<code>struct</code>如何创建对象？</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>Book<span class=\"token punctuation\">;</span>\n\nBook b<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>考虑 <code>int a=1</code>，我们能不能<code>Book b</code>？</p>\n<p>我们可以如何创建一个对象？我们需要Constructor，构造函数。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//Book(double the_price):price(the_price)&#123;&#125;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> the_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">,</span>the_name<span class=\"token punctuation\">,</span><span class=\"token string\">\"0000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token operator\">=</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> the_name<span class=\"token operator\">=</span><span class=\"token string\">\"none\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>the_name<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>ISBN<span class=\"token punctuation\">,</span>the_ISBN<span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nBook b0<span class=\"token punctuation\">;</span>\nBook <span class=\"token function\">b1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nBook <span class=\"token function\">b2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Apollo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>参考：</p>\n<ol>\n<li>拷贝构造</li>\n<li>移动构造</li>\n<li>合成构造</li>\n</ol>\n<h2 id=\"继承与多态\"><a href=\"#继承与多态\" class=\"headerlink\" title=\"继承与多态\"></a>继承与多态</h2><p><strong>提问</strong>：我希望有一个科幻书，科幻书有一个别人没有的成员：科幻程度(depth)。同时有一种传记，有一个独有的值来记录传记主人公的名字(person)。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> person<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n    \n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>有公共属性，也有独有的属性(attribute)</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fiction</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span></span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Fiction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        \tprice<span class=\"token operator\">=</span>value<span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//不用写，都继承过来了</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">biography</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//现场要求写一个  </span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继承的方式有三种：</p>\n<blockquote>\n<p>当一个类派生自基类，该基类可以被继承为 <strong>public、protected</strong> 或 <strong>private</strong> 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。</p>\n<p>我们几乎不使用 <strong>protected</strong> 或 <strong>private</strong> 继承，通常使用 <strong>public</strong> 继承。当使用不同类型的继承时，遵循以下几个规则：</p>\n<ul>\n<li><strong>公有继承（public）：</strong>当一个类派生自<strong>公有</strong>基类时，基类的<strong>公有</strong>成员也是派生类的<strong>公有</strong>成员，基类的<strong>保护</strong>成员也是派生类的<strong>保护</strong>成员，基类的<strong>私有</strong>成员不能直接被派生类访问，但是可以通过调用基类的<strong>公有</strong>和<strong>保护</strong>成员来访问。</li>\n<li><strong>保护继承（protected）：</strong> 当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</li>\n<li><strong>私有继承（private）：</strong>当一个类派生自<strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>成员。</li>\n</ul>\n</blockquote>\n<p>现在，我希望所有书都是被分了类的（如果不知道怎么分，就分到“未知分类”里面去），我们现在不允许直接创建一个Book对象，必须要先从Book继承一个专门的分类，再创建该分类的对象。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>virtual</code>意味着必须由子类来实现这些函数。这叫纯虚函数，关于virtual，还有更多用法。</p>\n<h2 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h2><p><code>virtual</code>要求必须由子类来实现，这就是重载。重载允许同名，但必须接受不同参数。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"1\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//已经有了这个函数</span>\n<span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> the_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>the_name<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//又有了这个</span>\n<span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> the_ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>the_ISBN<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBook <span class=\"token function\">b3</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Apollo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Apollo 会变成name还是ISBN？</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>C++编译器不允许这样的事情发生，会出现redefinition报错，编译器认为这两个是同一函数。因此，参数的类型应该有所区别。</p>\n<p>更进一步，考虑Book&#x3D;&#x3D;Book</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">Book <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"apollo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nBook <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"apollo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//a.equal(b);</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>name <span class=\"token operator\">==</span> Book<span class=\"token double-colon punctuation\">::</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//写一个重载+，当两本书相同时，价格相加</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h2><p>一个对象创建完成后，也要销毁，我们应当定义它如何被销毁。</p>\n<h2 id=\"两种风格的对象\"><a href=\"#两种风格的对象\" class=\"headerlink\" title=\"两种风格的对象\"></a>两种风格的对象</h2><ul>\n<li>使这个对象像个“东西”，示例如上</li>\n<li>使这个对象像个“指针”，先看看内存管理</li>\n</ul>\n<h1 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h1><p><strong>提问</strong>：a+b中的内存是如何分配的？</p>\n<blockquote>\n<p><strong>栈区（stack）：</strong>指那些由编译器在需要的时候分配，不需要时自动清除的变量所在的储存区，如函数执行时，函数的形参以及函数内的局部变量分配在栈区，函数运行结束后，形参和局部变量去栈（自动释放）。栈内存分配运算内置与处理器的指令集中，效率高但是分配的内存空间有限。</p>\n<p><strong>堆区（heap）：</strong>指哪些由程序员手动分配释放的储存区，如果程序员不释放这块内存，内存将一直被占用，直到程序运行结束由系统自动收回，c语言中使用malloc，free申请和释放空间。</p>\n<p><strong>静态储存区（static）：</strong>全局变量和静态变量的储存是放在一块的，其中初始化的全局变量和静态变量在一个区域，这块空间当程序运行结束后由系统释放。</p>\n<p><strong>常量储存区（const）：</strong>常量字符串就是储存在这里的，如“ABC”字符串就储存在常量区，储存在常量区的只读不可写。const修饰的全局变量也储存在常量区，const修饰的局部变量依然在栈上。</p>\n<p><strong>程序代码区：</strong>存放源程序的二进制代码。</p>\n</blockquote>\n<p><strong>提问</strong>：如何创建一个长度不定的数组</p>\n<p>错误示范：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入数组的大小\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>正确示范：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入数组的大小\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入%d个数\\n\"</span><span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"手动内存管理\"><a href=\"#手动内存管理\" class=\"headerlink\" title=\"手动内存管理\"></a>手动内存管理</h2><p>C 使用malloc 分配内存和 free释放内存。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入数组的大小\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入%d个数\\n\"</span><span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>C++ 使用封装好的new 和delete</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入数组的大小\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">&lt;&lt;</span>N<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    cin<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入%d个数\\n\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        cin<span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> <strong>提问</strong>：为什么不是delete p?</p>\n<h2 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h2><p>画图</p>\n<p><em>share_ptr</em> 的原理：对指针进行计数</p>\n<h1 id=\"使用STL库\"><a href=\"#使用STL库\" class=\"headerlink\" title=\"使用STL库\"></a>使用STL库</h1><h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><ul>\n<li>创建string</li>\n<li>string+</li>\n<li>insert</li>\n<li>substr</li>\n</ul>\n<h2 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h2><ul>\n<li>创建vector</li>\n<li>size</li>\n<li>begin</li>\n<li>end</li>\n<li>resize</li>\n</ul>\n<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><ul>\n<li>find</li>\n<li>rotate</li>\n<li>sort</li>\n<li>min</li>\n<li>max</li>\n</ul>\n<h2 id=\"Utility\"><a href=\"#Utility\" class=\"headerlink\" title=\"Utility\"></a>Utility</h2><ul>\n<li>swap</li>\n<li>pari</li>\n<li>tuple</li>\n</ul>\n<h1 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h1><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//book.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_book</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_book</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"show.hpp\"</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//Book(double the_price):price(the_price)&#123;&#125;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//Book(double the_price,std::string the_name);</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>Book b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> <span class=\"token function\">set_price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">set_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">set_ISBN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show_price</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>string name<span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>string ISBN<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string ISBN<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//book.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"book.h\"</span></span>\n\n<span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//Book::Book(double the_price=0,std::string the_name):Book(the_price,the_name,\"\")&#123;&#125;</span>\n<span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_ISBN<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">,</span>the_name<span class=\"token punctuation\">,</span>the_ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>Book the_book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">set_price</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">set_name</span><span class=\"token punctuation\">(</span>the_name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">set_ISBN</span><span class=\"token punctuation\">(</span>the_ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">set_price</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>the_price<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>price<span class=\"token operator\">=</span>the_price<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//set_name 和 set_ISBN 略</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//show.hpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_price</span><span class=\"token punctuation\">(</span>Book the_book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span>the_book<span class=\"token punctuation\">.</span>price<span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//main.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"book.hpp\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    Book b<span class=\"token punctuation\">;</span>\n    b<span class=\"token punctuation\">.</span><span class=\"token function\">set_price</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">show_price</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Book <span class=\"token function\">bb</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//Book bb=b;</span>\n    <span class=\"token comment\">//Book bb&#123;b&#125;;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"Apollo2D\"><a href=\"#Apollo2D\" class=\"headerlink\" title=\"Apollo2D\"></a>Apollo2D</h1><p>&#x2F;&#x2F;这里是Agent2d中的WorldModel</p>\n"},{"title":"Magic-Macro","abbrlink":"17d8837d","date":"2021-11-07T12:28:58.000Z","_content":"\n# The magic of macro\n最近在写c，遇到了这样一段逻辑，要根据接受的字符串\n```\n# The magic of macro\n\n最近在写c，遇到了这样一段逻辑，根据要接受的字符串，比如`name=ubuntu`来在结构体mirror中找到对应的mirror.name进行赋值，一开始是这样设计的：\n\n```c\nstatic const char* PARA_LIST[MAX_ARG_NUM] = {\"name\", \"cmd\", \"arg\", \"url\", \"timeout\"};\n//然后对'='前的值与上述值匹配，得到一个id，如name的id为0\nswitch(i){\n    case 0:\n      if (para_len > MAX_NAME_LEN) {\n        printf(\"name too long!\");\n        return;\n      }\n      memcpy(mirror->name, parameter + 1, MAX_NAME_LEN);\n      break;\n    case 1:\n      //...\n    case 4:\n      //...  \n}\n//然后switch进行匹配，在switch中都需要先做长度判断，再给结构体mirror赋值\n```\n\n对于每个case来说，这样的事情都要做一遍，而其中除了struct中的元素不同之外，其他基本都完全一致（除了最后一个timeout），于是我就想简化这个过程。一开始，我想到了写n个不同的函数，这样我就可以在每个case中用一个函数替换，但仔细一想，这样还不是要给每个case写一个函数。这时候我想起了宏，上网查找一番后发现的宏的拼接功能。于是我写出了这个：\n\n```c\n#define set_mirror(the_mirror, element, parameter)            \\\n  {                                                           \\\n    if (!strcmp(#element, \"timeout\")) {                       \\\n      the_mirror.timeout_len = strlen(parameter);             \\\n    }                                                         \\\n    memset(the_mirror.element, 0, strlen(parameter) + 1);     \\\n    memcpy(the_mirror.element, parameter, sizeof(parameter)); \\\n  }\n```\n\n其中的`#element`,会讲element替换成字符串，而`##`可以将set_mirror的参数和后面的内容进行拼接（在后面的版本有示范）。上面这个版本已经可以替换赋值的功能了，但还没对长度进行考察。然后我脑子一抽，写了个`#define len_set_mirror` 其实就是上面`set_mirror`加一个参数，然后再调用`set_mirror`的宏。当时是记住了宏的一种“延迟”的机制，可以在有限次数内对宏进行一个嵌套。后面发现length可以直接从parameter获取，于是就将两个宏合并成了一个：\n\n```c\n#define set_mirror(p_mirror, element, parameter, id)               \\\n  do {                                                             \\\n    if (length(parameter) > MAX_##element##_LEN) {                 \\\n      printf(\"##element too long!\");                               \\\n      return 0;                                                    \\\n    }                                                              \\\n    if (!strcmp(#element, \"timeout\")) {                            \\\n      (p_mirror)->timeout_len = length(parameter);                 \\\n    }                                                              \\\n    memset((p_mirror)->element, '\\0', length(parameter) + 1);      \\\n    memcpy((p_mirror)->element, parameter, length(parameter) - 1); \\\n    ((p_mirror)->available) << id;                                 \\\n  } while (0)\n\n```\n\n这次成功将所有功能合并了，并且学到了用do...while(0)来提高宏的安全性（其实我也想到了用大括号的方法来避免，但确实do...while(0)是一个更好的方案。这种写法之后我只需在case中写两行：\n\n```c\n    case 0:\n      set_mirror(p_mirror, name, parameter, id);\n      break;//break还是老老实实写吧，方便set_mirror复用\n```\n\n其实在第一个宏之前，我还写了个在宏中构造变量来接受值的做法，但我发现完全没有必要，毕竟传递进来的值都应该可以被直接操作的（宏展开后直接获得变量）。由此也引出一条经验，大可不必在宏中定义新变量来处理数据。\n\n我对宏最大的印象就是文本替换，关于上面这段逻辑，switch还可以进一步优化。而对于整个c来说，宏是底层库的基础，我后面试图去实现一个strlen函数时，发现这玩意就是靠宏和汇编来实现的，而像c中的attribute，__VA_ARGS__(可变参数)，更有一片天地。甚至可以做逻辑运算，过于离谱了。\n\n结论：宏是魔法，这是我第一次真正近距离接触它，它真的是c的魔法。","source":"_posts/Language/Magic-Macro.md","raw":"---\ntitle: Magic-Macro\ncategories:\n  - Language\ntags: C\nabbrlink: 17d8837d\ndate: 2021-11-07 20:28:58\n---\n\n# The magic of macro\n最近在写c，遇到了这样一段逻辑，要根据接受的字符串\n```\n# The magic of macro\n\n最近在写c，遇到了这样一段逻辑，根据要接受的字符串，比如`name=ubuntu`来在结构体mirror中找到对应的mirror.name进行赋值，一开始是这样设计的：\n\n```c\nstatic const char* PARA_LIST[MAX_ARG_NUM] = {\"name\", \"cmd\", \"arg\", \"url\", \"timeout\"};\n//然后对'='前的值与上述值匹配，得到一个id，如name的id为0\nswitch(i){\n    case 0:\n      if (para_len > MAX_NAME_LEN) {\n        printf(\"name too long!\");\n        return;\n      }\n      memcpy(mirror->name, parameter + 1, MAX_NAME_LEN);\n      break;\n    case 1:\n      //...\n    case 4:\n      //...  \n}\n//然后switch进行匹配，在switch中都需要先做长度判断，再给结构体mirror赋值\n```\n\n对于每个case来说，这样的事情都要做一遍，而其中除了struct中的元素不同之外，其他基本都完全一致（除了最后一个timeout），于是我就想简化这个过程。一开始，我想到了写n个不同的函数，这样我就可以在每个case中用一个函数替换，但仔细一想，这样还不是要给每个case写一个函数。这时候我想起了宏，上网查找一番后发现的宏的拼接功能。于是我写出了这个：\n\n```c\n#define set_mirror(the_mirror, element, parameter)            \\\n  {                                                           \\\n    if (!strcmp(#element, \"timeout\")) {                       \\\n      the_mirror.timeout_len = strlen(parameter);             \\\n    }                                                         \\\n    memset(the_mirror.element, 0, strlen(parameter) + 1);     \\\n    memcpy(the_mirror.element, parameter, sizeof(parameter)); \\\n  }\n```\n\n其中的`#element`,会讲element替换成字符串，而`##`可以将set_mirror的参数和后面的内容进行拼接（在后面的版本有示范）。上面这个版本已经可以替换赋值的功能了，但还没对长度进行考察。然后我脑子一抽，写了个`#define len_set_mirror` 其实就是上面`set_mirror`加一个参数，然后再调用`set_mirror`的宏。当时是记住了宏的一种“延迟”的机制，可以在有限次数内对宏进行一个嵌套。后面发现length可以直接从parameter获取，于是就将两个宏合并成了一个：\n\n```c\n#define set_mirror(p_mirror, element, parameter, id)               \\\n  do {                                                             \\\n    if (length(parameter) > MAX_##element##_LEN) {                 \\\n      printf(\"##element too long!\");                               \\\n      return 0;                                                    \\\n    }                                                              \\\n    if (!strcmp(#element, \"timeout\")) {                            \\\n      (p_mirror)->timeout_len = length(parameter);                 \\\n    }                                                              \\\n    memset((p_mirror)->element, '\\0', length(parameter) + 1);      \\\n    memcpy((p_mirror)->element, parameter, length(parameter) - 1); \\\n    ((p_mirror)->available) << id;                                 \\\n  } while (0)\n\n```\n\n这次成功将所有功能合并了，并且学到了用do...while(0)来提高宏的安全性（其实我也想到了用大括号的方法来避免，但确实do...while(0)是一个更好的方案。这种写法之后我只需在case中写两行：\n\n```c\n    case 0:\n      set_mirror(p_mirror, name, parameter, id);\n      break;//break还是老老实实写吧，方便set_mirror复用\n```\n\n其实在第一个宏之前，我还写了个在宏中构造变量来接受值的做法，但我发现完全没有必要，毕竟传递进来的值都应该可以被直接操作的（宏展开后直接获得变量）。由此也引出一条经验，大可不必在宏中定义新变量来处理数据。\n\n我对宏最大的印象就是文本替换，关于上面这段逻辑，switch还可以进一步优化。而对于整个c来说，宏是底层库的基础，我后面试图去实现一个strlen函数时，发现这玩意就是靠宏和汇编来实现的，而像c中的attribute，__VA_ARGS__(可变参数)，更有一片天地。甚至可以做逻辑运算，过于离谱了。\n\n结论：宏是魔法，这是我第一次真正近距离接触它，它真的是c的魔法。","slug":"Magic-Macro","published":1,"category":"Language","updated":"2022-02-11T05:17:56.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxv002y8wul6cxify3k","content":"<h1 id=\"The-magic-of-macro\"><a href=\"#The-magic-of-macro\" class=\"headerlink\" title=\"The magic of macro\"></a>The magic of macro</h1><p>最近在写c，遇到了这样一段逻辑，要根据接受的字符串</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># The magic of macro\n\n最近在写c，遇到了这样一段逻辑，根据要接受的字符串，比如&#96;name&#x3D;ubuntu&#96;来在结构体mirror中找到对应的mirror.name进行赋值，一开始是这样设计的：\n\n&#96;&#96;&#96;c\nstatic const char* PARA_LIST[MAX_ARG_NUM] &#x3D; &#123;&quot;name&quot;, &quot;cmd&quot;, &quot;arg&quot;, &quot;url&quot;, &quot;timeout&quot;&#125;;\n&#x2F;&#x2F;然后对&#39;&#x3D;&#39;前的值与上述值匹配，得到一个id，如name的id为0\nswitch(i)&#123;\n    case 0:\n      if (para_len &gt; MAX_NAME_LEN) &#123;\n        printf(&quot;name too long!&quot;);\n        return;\n      &#125;\n      memcpy(mirror-&gt;name, parameter + 1, MAX_NAME_LEN);\n      break;\n    case 1:\n      &#x2F;&#x2F;...\n    case 4:\n      &#x2F;&#x2F;...  \n&#125;\n&#x2F;&#x2F;然后switch进行匹配，在switch中都需要先做长度判断，再给结构体mirror赋值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于每个case来说，这样的事情都要做一遍，而其中除了struct中的元素不同之外，其他基本都完全一致（除了最后一个timeout），于是我就想简化这个过程。一开始，我想到了写n个不同的函数，这样我就可以在每个case中用一个函数替换，但仔细一想，这样还不是要给每个case写一个函数。这时候我想起了宏，上网查找一番后发现的宏的拼接功能。于是我写出了这个：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">set_mirror</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>the_mirror<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">)</span>            </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token punctuation\">&#123;</span>                                                           </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>#element<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"timeout\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                       </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\">the_mirror<span class=\"token punctuation\">.</span>timeout_len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span>                                                         </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>the_mirror<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>the_mirror<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中的<code>#element</code>,会讲element替换成字符串，而<code>##</code>可以将set_mirror的参数和后面的内容进行拼接（在后面的版本有示范）。上面这个版本已经可以替换赋值的功能了，但还没对长度进行考察。然后我脑子一抽，写了个<code>#define len_set_mirror</code> 其实就是上面<code>set_mirror</code>加一个参数，然后再调用<code>set_mirror</code>的宏。当时是记住了宏的一种“延迟”的机制，可以在有限次数内对宏进行一个嵌套。后面发现length可以直接从parameter获取，于是就将两个宏合并成了一个：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">set_mirror</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>               </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>                                                             </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> MAX_</span><span class=\"token punctuation\">##</span><span class=\"token expression\">element</span><span class=\"token punctuation\">##</span><span class=\"token expression\">_LEN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                 </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"##element too long!\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                               </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\"><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                                                    </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span>                                                              </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>#element<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"timeout\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                            </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\"><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>timeout_len <span class=\"token operator\">=</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span>                                                              </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>element<span class=\"token punctuation\">,</span> </span><span class=\"token char\">'\\0'</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>element<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">,</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>available<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> id<span class=\"token punctuation\">;</span>                                 </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这次成功将所有功能合并了，并且学到了用do…while(0)来提高宏的安全性（其实我也想到了用大括号的方法来避免，但确实do…while(0)是一个更好的方案。这种写法之后我只需在case中写两行：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n  <span class=\"token function\">set_mirror</span><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//break还是老老实实写吧，方便set_mirror复用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>其实在第一个宏之前，我还写了个在宏中构造变量来接受值的做法，但我发现完全没有必要，毕竟传递进来的值都应该可以被直接操作的（宏展开后直接获得变量）。由此也引出一条经验，大可不必在宏中定义新变量来处理数据。</p>\n<p>我对宏最大的印象就是文本替换，关于上面这段逻辑，switch还可以进一步优化。而对于整个c来说，宏是底层库的基础，我后面试图去实现一个strlen函数时，发现这玩意就是靠宏和汇编来实现的，而像c中的attribute，<strong>VA_ARGS</strong>(可变参数)，更有一片天地。甚至可以做逻辑运算，过于离谱了。</p>\n<p>结论：宏是魔法，这是我第一次真正近距离接触它，它真的是c的魔法。</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/re03.jpg","excerpt":"","more":"<h1 id=\"The-magic-of-macro\"><a href=\"#The-magic-of-macro\" class=\"headerlink\" title=\"The magic of macro\"></a>The magic of macro</h1><p>最近在写c，遇到了这样一段逻辑，要根据接受的字符串</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># The magic of macro\n\n最近在写c，遇到了这样一段逻辑，根据要接受的字符串，比如&#96;name&#x3D;ubuntu&#96;来在结构体mirror中找到对应的mirror.name进行赋值，一开始是这样设计的：\n\n&#96;&#96;&#96;c\nstatic const char* PARA_LIST[MAX_ARG_NUM] &#x3D; &#123;&quot;name&quot;, &quot;cmd&quot;, &quot;arg&quot;, &quot;url&quot;, &quot;timeout&quot;&#125;;\n&#x2F;&#x2F;然后对&#39;&#x3D;&#39;前的值与上述值匹配，得到一个id，如name的id为0\nswitch(i)&#123;\n    case 0:\n      if (para_len &gt; MAX_NAME_LEN) &#123;\n        printf(&quot;name too long!&quot;);\n        return;\n      &#125;\n      memcpy(mirror-&gt;name, parameter + 1, MAX_NAME_LEN);\n      break;\n    case 1:\n      &#x2F;&#x2F;...\n    case 4:\n      &#x2F;&#x2F;...  \n&#125;\n&#x2F;&#x2F;然后switch进行匹配，在switch中都需要先做长度判断，再给结构体mirror赋值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于每个case来说，这样的事情都要做一遍，而其中除了struct中的元素不同之外，其他基本都完全一致（除了最后一个timeout），于是我就想简化这个过程。一开始，我想到了写n个不同的函数，这样我就可以在每个case中用一个函数替换，但仔细一想，这样还不是要给每个case写一个函数。这时候我想起了宏，上网查找一番后发现的宏的拼接功能。于是我写出了这个：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">set_mirror</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>the_mirror<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">)</span>            </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token punctuation\">&#123;</span>                                                           </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>#element<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"timeout\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                       </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\">the_mirror<span class=\"token punctuation\">.</span>timeout_len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span>                                                         </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>the_mirror<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>the_mirror<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中的<code>#element</code>,会讲element替换成字符串，而<code>##</code>可以将set_mirror的参数和后面的内容进行拼接（在后面的版本有示范）。上面这个版本已经可以替换赋值的功能了，但还没对长度进行考察。然后我脑子一抽，写了个<code>#define len_set_mirror</code> 其实就是上面<code>set_mirror</code>加一个参数，然后再调用<code>set_mirror</code>的宏。当时是记住了宏的一种“延迟”的机制，可以在有限次数内对宏进行一个嵌套。后面发现length可以直接从parameter获取，于是就将两个宏合并成了一个：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">set_mirror</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>               </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>                                                             </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> MAX_</span><span class=\"token punctuation\">##</span><span class=\"token expression\">element</span><span class=\"token punctuation\">##</span><span class=\"token expression\">_LEN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                 </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"##element too long!\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                               </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\"><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                                                    </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span>                                                              </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>#element<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"timeout\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                            </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\"><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>timeout_len <span class=\"token operator\">=</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span>                                                              </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>element<span class=\"token punctuation\">,</span> </span><span class=\"token char\">'\\0'</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>element<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">,</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>available<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> id<span class=\"token punctuation\">;</span>                                 </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这次成功将所有功能合并了，并且学到了用do…while(0)来提高宏的安全性（其实我也想到了用大括号的方法来避免，但确实do…while(0)是一个更好的方案。这种写法之后我只需在case中写两行：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n  <span class=\"token function\">set_mirror</span><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//break还是老老实实写吧，方便set_mirror复用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>其实在第一个宏之前，我还写了个在宏中构造变量来接受值的做法，但我发现完全没有必要，毕竟传递进来的值都应该可以被直接操作的（宏展开后直接获得变量）。由此也引出一条经验，大可不必在宏中定义新变量来处理数据。</p>\n<p>我对宏最大的印象就是文本替换，关于上面这段逻辑，switch还可以进一步优化。而对于整个c来说，宏是底层库的基础，我后面试图去实现一个strlen函数时，发现这玩意就是靠宏和汇编来实现的，而像c中的attribute，<strong>VA_ARGS</strong>(可变参数)，更有一片天地。甚至可以做逻辑运算，过于离谱了。</p>\n<p>结论：宏是魔法，这是我第一次真正近距离接触它，它真的是c的魔法。</p>\n"},{"title":"记录一次makefile改CMake","abbrlink":"147c20ee","date":"2022-02-03T02:58:06.000Z","_content":"\n# 前言\n\n其实这是apollo2019年的代码，原来用makefile也挺稳定的，整个2019的代码也因此显的非常简洁，没有奇奇怪怪的各种文件。只有几个零散的mk文件，大部分都是源码。但也是因为makefile，添加文件会略显麻烦，每次都要在makefile中添加object文件和指定源文件，头文件。因此想换成工程上的CMake。\n\n> 有必要给出结论，在这个过程中因为各种各样的原因，最终没能成功。但是在这个过程中很多东西是值得记录和学习的。\n\n# 需求\n\n明确三点需求\n\n- 可随意添加源文件而不用改动构建系统文件（即`CMakeLists.txt`）\n- 可提升编译速度（应对将来的大量修改内容）\n- 提升代码可迁移性（想让它在windows上跑起来）\n\n主要还是考虑到这份代码将给后面的新同学跑，希望能尽可能减少新同学的难度，也让有实力的同学专注于代码本身。\n\n# 过程\n\n## 第一个想法\n\n一开始，我想到的办法是在每个子目录下都建立`CMakeLists.txt`，然后使用较新的`aux_source_directory`来自动搜索目录下的所有文件，并建成一个`static library`。接下来在上层目录中使用`add_subdirectory`，并通过`add_library`来讲之前的所有静态库合成一个。最后为三个可执行文件分别书写`add_executable`并将为其`link library`。\n\n现在回头去看的话，这个过程真的是槽点满满。\n\n- 首先是自动搜索后新建静态库，搜索这点其实没问题，但是为每个文件夹都建立静态库就有点奇怪了。不过也不是不行，接着往下走。\n- 然后是将静态库合成一个，这个想法其实也不是不行，问题在于cmake**本身**并没有提供任何将多个静态库合成一个的方法。只能调用外部工具如`ar`。参考[stackoverflow](https://stackoverflow.com/questions/37924383/combining-several-static-libraries-into-one-using-cmake)\n- 接下来是`add_executable`，这里也是对源码不够了解，我以为三个`main`文件都需要对除了三个文件夹下的源码有所依赖，实际上它们是完全分开的。也就是说，就算上面的都完成了，最后`link library`也会使得生成的`binary`过于庞大和臃肿。\n\n## 任意源文件问题\n\n其实在使用`aux_source_directory`之前，就已经了解到有`FILE(GLOB_RECURSE)`方法了。但因为`main`文件和其他源文件位于同一个目录下，不敢乱用（后面了解到可以使用`list`方法去掉`main`，但感觉这样~~不够优雅~~意义不大）\n\n后面参考了其他CMake工程的写法，尤其是apollo原先的底层`helios-base`的`CMakeLists`写法（刚好在我准备些的前28天，`helios`先写出来一份了）。发现大部分都是使用单个文件添加的，这样可达不到*任意添加*的目的。因此我还是坚持，使用每个子文件夹下一个`CMakeLists.txt`，然后使用`aux_source_directory`的方法来搜索所有源文件，但绝不是为每个子文件夹都建立*静态库*。\n\n比较正确的想法是把每个源文件都添加到一个列表，然后“一起”生成一个可执行文件或库。这里我了解到了`target_source(target Files)`方法，在上层指定要生成的`target`，然后在下层为源文件指定target即可。\n\n关于添加源文件的依赖这里，[librcsc](https://github.com/helios-base/librcsc)给了我很大的参考，它们使用了`add_library(name OBJECT sources)`，建立`object library`来包含所有生成的中间文件，然后在上层通过`$<target_object:name>`来引用中间文件，并生成最终的`executable binary`。这样的写法就像是我在`makefile`中写`Obj += a.o b.o`。我觉得这种写法才像是`best practice`。\n\n## 生成需要的依赖库\n\napollo2019的源码携带了`rcsc`文件夹，该目录下是apollo源码的底层库的源文件。按照原来的makefile写法，`make`会先将该文件夹整个打包并生成一个`librcsc.so`的动态链接库，并在最后生成`executable binary`时将其链接上去。\n\n一开始我是想偷懒，用`FILE(GLOB_RECURSE)`来直接包含所有**.cpp**文件，然后生成一个大的`lib`。这个操作一开始没发现问题，也确实生成了一个`librcsc.so`，但后面链接时就各种出错。仔细观察才发现，一堆.cpp文件中间混了个装着**.c**的文件夹（该文件来源于[libig](https://github.com/libigl/libigl)，一个图形库）。而.c文件怎么都无法和.cpp文件链接到一起。这里我去翻阅了下最新的[librcsc](https://github.com/helios-base/librcsc)的写法，发现它时完完全全每个子目录下一个CMakeLists的标准写法。对于.c的文件夹，也有专门的处理方式。我想着，这感情好呀，于是把最新的`rcsc`目录拖到了自己的目录下并替换了原来的目录，准备改改CMakeLists就解决问题。这在后面也成了“拖垮我的最后一根稻草”，不过我也不觉得这“都是我的错~”。\n\n`librcsc`正确的使用方式应该还是下载源码后安装到系统库中，然后球队源码带着src文件夹就够了，这种带着rcsc文件夹到处跑的做法其实还是落后了（虽然看源码还是方便）\n\n> 在尝试链接.c和.cpp的时候，还有些小东西值得记录，如果不为CMake工程指定编译器，它会使用`cc`和`c++`来编译c和cpp文件，而指定编译器需要在指定LANGUAGE之前才有效。这点算是让我对CMakeLists的执行顺序有了进一步了解。\n\n## CMakeLists的书写顺序\n\n其实没有那么多复杂的东西，也是一个顺序问题，CMakeLists鼓励我们先把要生成的东西写出来比如`add_executable`或是`add_library`；然后为其设定要链接的库，比如`target_link_libraries`，还有相关的依赖`target_link_directories`，属性`set_property`等等；最后是去把前面提到的变量“找”出来，比如`add_subdirectory`。\n\n当然，最前面肯定是写好`cmake_minimum_required`和`project`，以及其他的全局设定。\n\n对于编译器的参数来说，使用`set(CMAKE_CXX_FLAGS)`之类的方式就可以设定其参数，但对于c系的`definition`，最好还是使用`add_definition(-D)`来指定宏。更进一步，编写`configuration file`并指定`add_definition(-DHAVE_CONFIG_H)`和`configure_file`。\n\n# 总结\n\nCMake确实是有比Makefile有优势的地方，但仍然显的有些繁琐和奇怪。至少它还在不断发展，比如使用`target_link_directories`来替代`link_libraries`，但其中复杂的规则确实会让人痛苦。虽然最后没成功把这个项目改成CMake，但还是稍微深入地了解了CMake的用法。想想大过年的还抽时间来看这个，投入其中的感觉其实挺不错的。不过还是希望下次有项目能把CMakeLists写出来写好，哈哈。\n\n# 后记\n\n为什么最后没有写成？因为换`librcsc`底层的时候发现有的文件名对不上了，一查`librcsc`的更新日志发现，有的变量在08年就改了，也就是说，我们用的是**22-08=14**年前的底层代码。这是真的忍不了，准备重构好了。新的代码基于CMakeLists就ok了。\n","source":"_posts/Language/记录一次makefile改CMake.md","raw":"---\ntitle: 记录一次makefile改CMake\ntags:\n  - c\n  - cpp\n  - cmake\n  - makefile\ncategories:\n  - Language\nabbrlink: 147c20ee\ndate: 2022-02-03 10:58:06\n---\n\n# 前言\n\n其实这是apollo2019年的代码，原来用makefile也挺稳定的，整个2019的代码也因此显的非常简洁，没有奇奇怪怪的各种文件。只有几个零散的mk文件，大部分都是源码。但也是因为makefile，添加文件会略显麻烦，每次都要在makefile中添加object文件和指定源文件，头文件。因此想换成工程上的CMake。\n\n> 有必要给出结论，在这个过程中因为各种各样的原因，最终没能成功。但是在这个过程中很多东西是值得记录和学习的。\n\n# 需求\n\n明确三点需求\n\n- 可随意添加源文件而不用改动构建系统文件（即`CMakeLists.txt`）\n- 可提升编译速度（应对将来的大量修改内容）\n- 提升代码可迁移性（想让它在windows上跑起来）\n\n主要还是考虑到这份代码将给后面的新同学跑，希望能尽可能减少新同学的难度，也让有实力的同学专注于代码本身。\n\n# 过程\n\n## 第一个想法\n\n一开始，我想到的办法是在每个子目录下都建立`CMakeLists.txt`，然后使用较新的`aux_source_directory`来自动搜索目录下的所有文件，并建成一个`static library`。接下来在上层目录中使用`add_subdirectory`，并通过`add_library`来讲之前的所有静态库合成一个。最后为三个可执行文件分别书写`add_executable`并将为其`link library`。\n\n现在回头去看的话，这个过程真的是槽点满满。\n\n- 首先是自动搜索后新建静态库，搜索这点其实没问题，但是为每个文件夹都建立静态库就有点奇怪了。不过也不是不行，接着往下走。\n- 然后是将静态库合成一个，这个想法其实也不是不行，问题在于cmake**本身**并没有提供任何将多个静态库合成一个的方法。只能调用外部工具如`ar`。参考[stackoverflow](https://stackoverflow.com/questions/37924383/combining-several-static-libraries-into-one-using-cmake)\n- 接下来是`add_executable`，这里也是对源码不够了解，我以为三个`main`文件都需要对除了三个文件夹下的源码有所依赖，实际上它们是完全分开的。也就是说，就算上面的都完成了，最后`link library`也会使得生成的`binary`过于庞大和臃肿。\n\n## 任意源文件问题\n\n其实在使用`aux_source_directory`之前，就已经了解到有`FILE(GLOB_RECURSE)`方法了。但因为`main`文件和其他源文件位于同一个目录下，不敢乱用（后面了解到可以使用`list`方法去掉`main`，但感觉这样~~不够优雅~~意义不大）\n\n后面参考了其他CMake工程的写法，尤其是apollo原先的底层`helios-base`的`CMakeLists`写法（刚好在我准备些的前28天，`helios`先写出来一份了）。发现大部分都是使用单个文件添加的，这样可达不到*任意添加*的目的。因此我还是坚持，使用每个子文件夹下一个`CMakeLists.txt`，然后使用`aux_source_directory`的方法来搜索所有源文件，但绝不是为每个子文件夹都建立*静态库*。\n\n比较正确的想法是把每个源文件都添加到一个列表，然后“一起”生成一个可执行文件或库。这里我了解到了`target_source(target Files)`方法，在上层指定要生成的`target`，然后在下层为源文件指定target即可。\n\n关于添加源文件的依赖这里，[librcsc](https://github.com/helios-base/librcsc)给了我很大的参考，它们使用了`add_library(name OBJECT sources)`，建立`object library`来包含所有生成的中间文件，然后在上层通过`$<target_object:name>`来引用中间文件，并生成最终的`executable binary`。这样的写法就像是我在`makefile`中写`Obj += a.o b.o`。我觉得这种写法才像是`best practice`。\n\n## 生成需要的依赖库\n\napollo2019的源码携带了`rcsc`文件夹，该目录下是apollo源码的底层库的源文件。按照原来的makefile写法，`make`会先将该文件夹整个打包并生成一个`librcsc.so`的动态链接库，并在最后生成`executable binary`时将其链接上去。\n\n一开始我是想偷懒，用`FILE(GLOB_RECURSE)`来直接包含所有**.cpp**文件，然后生成一个大的`lib`。这个操作一开始没发现问题，也确实生成了一个`librcsc.so`，但后面链接时就各种出错。仔细观察才发现，一堆.cpp文件中间混了个装着**.c**的文件夹（该文件来源于[libig](https://github.com/libigl/libigl)，一个图形库）。而.c文件怎么都无法和.cpp文件链接到一起。这里我去翻阅了下最新的[librcsc](https://github.com/helios-base/librcsc)的写法，发现它时完完全全每个子目录下一个CMakeLists的标准写法。对于.c的文件夹，也有专门的处理方式。我想着，这感情好呀，于是把最新的`rcsc`目录拖到了自己的目录下并替换了原来的目录，准备改改CMakeLists就解决问题。这在后面也成了“拖垮我的最后一根稻草”，不过我也不觉得这“都是我的错~”。\n\n`librcsc`正确的使用方式应该还是下载源码后安装到系统库中，然后球队源码带着src文件夹就够了，这种带着rcsc文件夹到处跑的做法其实还是落后了（虽然看源码还是方便）\n\n> 在尝试链接.c和.cpp的时候，还有些小东西值得记录，如果不为CMake工程指定编译器，它会使用`cc`和`c++`来编译c和cpp文件，而指定编译器需要在指定LANGUAGE之前才有效。这点算是让我对CMakeLists的执行顺序有了进一步了解。\n\n## CMakeLists的书写顺序\n\n其实没有那么多复杂的东西，也是一个顺序问题，CMakeLists鼓励我们先把要生成的东西写出来比如`add_executable`或是`add_library`；然后为其设定要链接的库，比如`target_link_libraries`，还有相关的依赖`target_link_directories`，属性`set_property`等等；最后是去把前面提到的变量“找”出来，比如`add_subdirectory`。\n\n当然，最前面肯定是写好`cmake_minimum_required`和`project`，以及其他的全局设定。\n\n对于编译器的参数来说，使用`set(CMAKE_CXX_FLAGS)`之类的方式就可以设定其参数，但对于c系的`definition`，最好还是使用`add_definition(-D)`来指定宏。更进一步，编写`configuration file`并指定`add_definition(-DHAVE_CONFIG_H)`和`configure_file`。\n\n# 总结\n\nCMake确实是有比Makefile有优势的地方，但仍然显的有些繁琐和奇怪。至少它还在不断发展，比如使用`target_link_directories`来替代`link_libraries`，但其中复杂的规则确实会让人痛苦。虽然最后没成功把这个项目改成CMake，但还是稍微深入地了解了CMake的用法。想想大过年的还抽时间来看这个，投入其中的感觉其实挺不错的。不过还是希望下次有项目能把CMakeLists写出来写好，哈哈。\n\n# 后记\n\n为什么最后没有写成？因为换`librcsc`底层的时候发现有的文件名对不上了，一查`librcsc`的更新日志发现，有的变量在08年就改了，也就是说，我们用的是**22-08=14**年前的底层代码。这是真的忍不了，准备重构好了。新的代码基于CMakeLists就ok了。\n","slug":"记录一次makefile改CMake","published":1,"category":"Language","updated":"2022-02-11T05:17:56.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxv00318wul4waz7lw6","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>其实这是apollo2019年的代码，原来用makefile也挺稳定的，整个2019的代码也因此显的非常简洁，没有奇奇怪怪的各种文件。只有几个零散的mk文件，大部分都是源码。但也是因为makefile，添加文件会略显麻烦，每次都要在makefile中添加object文件和指定源文件，头文件。因此想换成工程上的CMake。</p>\n<blockquote>\n<p>有必要给出结论，在这个过程中因为各种各样的原因，最终没能成功。但是在这个过程中很多东西是值得记录和学习的。</p>\n</blockquote>\n<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>明确三点需求</p>\n<ul>\n<li>可随意添加源文件而不用改动构建系统文件（即<code>CMakeLists.txt</code>）</li>\n<li>可提升编译速度（应对将来的大量修改内容）</li>\n<li>提升代码可迁移性（想让它在windows上跑起来）</li>\n</ul>\n<p>主要还是考虑到这份代码将给后面的新同学跑，希望能尽可能减少新同学的难度，也让有实力的同学专注于代码本身。</p>\n<h1 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h1><h2 id=\"第一个想法\"><a href=\"#第一个想法\" class=\"headerlink\" title=\"第一个想法\"></a>第一个想法</h2><p>一开始，我想到的办法是在每个子目录下都建立<code>CMakeLists.txt</code>，然后使用较新的<code>aux_source_directory</code>来自动搜索目录下的所有文件，并建成一个<code>static library</code>。接下来在上层目录中使用<code>add_subdirectory</code>，并通过<code>add_library</code>来讲之前的所有静态库合成一个。最后为三个可执行文件分别书写<code>add_executable</code>并将为其<code>link library</code>。</p>\n<p>现在回头去看的话，这个过程真的是槽点满满。</p>\n<ul>\n<li>首先是自动搜索后新建静态库，搜索这点其实没问题，但是为每个文件夹都建立静态库就有点奇怪了。不过也不是不行，接着往下走。</li>\n<li>然后是将静态库合成一个，这个想法其实也不是不行，问题在于cmake<strong>本身</strong>并没有提供任何将多个静态库合成一个的方法。只能调用外部工具如<code>ar</code>。参考<a href=\"https://stackoverflow.com/questions/37924383/combining-several-static-libraries-into-one-using-cmake\">stackoverflow</a></li>\n<li>接下来是<code>add_executable</code>，这里也是对源码不够了解，我以为三个<code>main</code>文件都需要对除了三个文件夹下的源码有所依赖，实际上它们是完全分开的。也就是说，就算上面的都完成了，最后<code>link library</code>也会使得生成的<code>binary</code>过于庞大和臃肿。</li>\n</ul>\n<h2 id=\"任意源文件问题\"><a href=\"#任意源文件问题\" class=\"headerlink\" title=\"任意源文件问题\"></a>任意源文件问题</h2><p>其实在使用<code>aux_source_directory</code>之前，就已经了解到有<code>FILE(GLOB_RECURSE)</code>方法了。但因为<code>main</code>文件和其他源文件位于同一个目录下，不敢乱用（后面了解到可以使用<code>list</code>方法去掉<code>main</code>，但感觉这样<del>不够优雅</del>意义不大）</p>\n<p>后面参考了其他CMake工程的写法，尤其是apollo原先的底层<code>helios-base</code>的<code>CMakeLists</code>写法（刚好在我准备些的前28天，<code>helios</code>先写出来一份了）。发现大部分都是使用单个文件添加的，这样可达不到<em>任意添加</em>的目的。因此我还是坚持，使用每个子文件夹下一个<code>CMakeLists.txt</code>，然后使用<code>aux_source_directory</code>的方法来搜索所有源文件，但绝不是为每个子文件夹都建立<em>静态库</em>。</p>\n<p>比较正确的想法是把每个源文件都添加到一个列表，然后“一起”生成一个可执行文件或库。这里我了解到了<code>target_source(target Files)</code>方法，在上层指定要生成的<code>target</code>，然后在下层为源文件指定target即可。</p>\n<p>关于添加源文件的依赖这里，<a href=\"https://github.com/helios-base/librcsc\">librcsc</a>给了我很大的参考，它们使用了<code>add_library(name OBJECT sources)</code>，建立<code>object library</code>来包含所有生成的中间文件，然后在上层通过<code>$&lt;target_object:name&gt;</code>来引用中间文件，并生成最终的<code>executable binary</code>。这样的写法就像是我在<code>makefile</code>中写<code>Obj += a.o b.o</code>。我觉得这种写法才像是<code>best practice</code>。</p>\n<h2 id=\"生成需要的依赖库\"><a href=\"#生成需要的依赖库\" class=\"headerlink\" title=\"生成需要的依赖库\"></a>生成需要的依赖库</h2><p>apollo2019的源码携带了<code>rcsc</code>文件夹，该目录下是apollo源码的底层库的源文件。按照原来的makefile写法，<code>make</code>会先将该文件夹整个打包并生成一个<code>librcsc.so</code>的动态链接库，并在最后生成<code>executable binary</code>时将其链接上去。</p>\n<p>一开始我是想偷懒，用<code>FILE(GLOB_RECURSE)</code>来直接包含所有**.cpp<strong>文件，然后生成一个大的<code>lib</code>。这个操作一开始没发现问题，也确实生成了一个<code>librcsc.so</code>，但后面链接时就各种出错。仔细观察才发现，一堆.cpp文件中间混了个装着</strong>.c**的文件夹（该文件来源于<a href=\"https://github.com/libigl/libigl\">libig</a>，一个图形库）。而.c文件怎么都无法和.cpp文件链接到一起。这里我去翻阅了下最新的<a href=\"https://github.com/helios-base/librcsc\">librcsc</a>的写法，发现它时完完全全每个子目录下一个CMakeLists的标准写法。对于.c的文件夹，也有专门的处理方式。我想着，这感情好呀，于是把最新的<code>rcsc</code>目录拖到了自己的目录下并替换了原来的目录，准备改改CMakeLists就解决问题。这在后面也成了“拖垮我的最后一根稻草”，不过我也不觉得这“都是我的错~”。</p>\n<p><code>librcsc</code>正确的使用方式应该还是下载源码后安装到系统库中，然后球队源码带着src文件夹就够了，这种带着rcsc文件夹到处跑的做法其实还是落后了（虽然看源码还是方便）</p>\n<blockquote>\n<p>在尝试链接.c和.cpp的时候，还有些小东西值得记录，如果不为CMake工程指定编译器，它会使用<code>cc</code>和<code>c++</code>来编译c和cpp文件，而指定编译器需要在指定LANGUAGE之前才有效。这点算是让我对CMakeLists的执行顺序有了进一步了解。</p>\n</blockquote>\n<h2 id=\"CMakeLists的书写顺序\"><a href=\"#CMakeLists的书写顺序\" class=\"headerlink\" title=\"CMakeLists的书写顺序\"></a>CMakeLists的书写顺序</h2><p>其实没有那么多复杂的东西，也是一个顺序问题，CMakeLists鼓励我们先把要生成的东西写出来比如<code>add_executable</code>或是<code>add_library</code>；然后为其设定要链接的库，比如<code>target_link_libraries</code>，还有相关的依赖<code>target_link_directories</code>，属性<code>set_property</code>等等；最后是去把前面提到的变量“找”出来，比如<code>add_subdirectory</code>。</p>\n<p>当然，最前面肯定是写好<code>cmake_minimum_required</code>和<code>project</code>，以及其他的全局设定。</p>\n<p>对于编译器的参数来说，使用<code>set(CMAKE_CXX_FLAGS)</code>之类的方式就可以设定其参数，但对于c系的<code>definition</code>，最好还是使用<code>add_definition(-D)</code>来指定宏。更进一步，编写<code>configuration file</code>并指定<code>add_definition(-DHAVE_CONFIG_H)</code>和<code>configure_file</code>。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>CMake确实是有比Makefile有优势的地方，但仍然显的有些繁琐和奇怪。至少它还在不断发展，比如使用<code>target_link_directories</code>来替代<code>link_libraries</code>，但其中复杂的规则确实会让人痛苦。虽然最后没成功把这个项目改成CMake，但还是稍微深入地了解了CMake的用法。想想大过年的还抽时间来看这个，投入其中的感觉其实挺不错的。不过还是希望下次有项目能把CMakeLists写出来写好，哈哈。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>为什么最后没有写成？因为换<code>librcsc</code>底层的时候发现有的文件名对不上了，一查<code>librcsc</code>的更新日志发现，有的变量在08年就改了，也就是说，我们用的是<strong>22-08&#x3D;14</strong>年前的底层代码。这是真的忍不了，准备重构好了。新的代码基于CMakeLists就ok了。</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/kon2.jpg","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>其实这是apollo2019年的代码，原来用makefile也挺稳定的，整个2019的代码也因此显的非常简洁，没有奇奇怪怪的各种文件。只有几个零散的mk文件，大部分都是源码。但也是因为makefile，添加文件会略显麻烦，每次都要在makefile中添加object文件和指定源文件，头文件。因此想换成工程上的CMake。</p>\n<blockquote>\n<p>有必要给出结论，在这个过程中因为各种各样的原因，最终没能成功。但是在这个过程中很多东西是值得记录和学习的。</p>\n</blockquote>\n<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>明确三点需求</p>\n<ul>\n<li>可随意添加源文件而不用改动构建系统文件（即<code>CMakeLists.txt</code>）</li>\n<li>可提升编译速度（应对将来的大量修改内容）</li>\n<li>提升代码可迁移性（想让它在windows上跑起来）</li>\n</ul>\n<p>主要还是考虑到这份代码将给后面的新同学跑，希望能尽可能减少新同学的难度，也让有实力的同学专注于代码本身。</p>\n<h1 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h1><h2 id=\"第一个想法\"><a href=\"#第一个想法\" class=\"headerlink\" title=\"第一个想法\"></a>第一个想法</h2><p>一开始，我想到的办法是在每个子目录下都建立<code>CMakeLists.txt</code>，然后使用较新的<code>aux_source_directory</code>来自动搜索目录下的所有文件，并建成一个<code>static library</code>。接下来在上层目录中使用<code>add_subdirectory</code>，并通过<code>add_library</code>来讲之前的所有静态库合成一个。最后为三个可执行文件分别书写<code>add_executable</code>并将为其<code>link library</code>。</p>\n<p>现在回头去看的话，这个过程真的是槽点满满。</p>\n<ul>\n<li>首先是自动搜索后新建静态库，搜索这点其实没问题，但是为每个文件夹都建立静态库就有点奇怪了。不过也不是不行，接着往下走。</li>\n<li>然后是将静态库合成一个，这个想法其实也不是不行，问题在于cmake<strong>本身</strong>并没有提供任何将多个静态库合成一个的方法。只能调用外部工具如<code>ar</code>。参考<a href=\"https://stackoverflow.com/questions/37924383/combining-several-static-libraries-into-one-using-cmake\">stackoverflow</a></li>\n<li>接下来是<code>add_executable</code>，这里也是对源码不够了解，我以为三个<code>main</code>文件都需要对除了三个文件夹下的源码有所依赖，实际上它们是完全分开的。也就是说，就算上面的都完成了，最后<code>link library</code>也会使得生成的<code>binary</code>过于庞大和臃肿。</li>\n</ul>\n<h2 id=\"任意源文件问题\"><a href=\"#任意源文件问题\" class=\"headerlink\" title=\"任意源文件问题\"></a>任意源文件问题</h2><p>其实在使用<code>aux_source_directory</code>之前，就已经了解到有<code>FILE(GLOB_RECURSE)</code>方法了。但因为<code>main</code>文件和其他源文件位于同一个目录下，不敢乱用（后面了解到可以使用<code>list</code>方法去掉<code>main</code>，但感觉这样<del>不够优雅</del>意义不大）</p>\n<p>后面参考了其他CMake工程的写法，尤其是apollo原先的底层<code>helios-base</code>的<code>CMakeLists</code>写法（刚好在我准备些的前28天，<code>helios</code>先写出来一份了）。发现大部分都是使用单个文件添加的，这样可达不到<em>任意添加</em>的目的。因此我还是坚持，使用每个子文件夹下一个<code>CMakeLists.txt</code>，然后使用<code>aux_source_directory</code>的方法来搜索所有源文件，但绝不是为每个子文件夹都建立<em>静态库</em>。</p>\n<p>比较正确的想法是把每个源文件都添加到一个列表，然后“一起”生成一个可执行文件或库。这里我了解到了<code>target_source(target Files)</code>方法，在上层指定要生成的<code>target</code>，然后在下层为源文件指定target即可。</p>\n<p>关于添加源文件的依赖这里，<a href=\"https://github.com/helios-base/librcsc\">librcsc</a>给了我很大的参考，它们使用了<code>add_library(name OBJECT sources)</code>，建立<code>object library</code>来包含所有生成的中间文件，然后在上层通过<code>$&lt;target_object:name&gt;</code>来引用中间文件，并生成最终的<code>executable binary</code>。这样的写法就像是我在<code>makefile</code>中写<code>Obj += a.o b.o</code>。我觉得这种写法才像是<code>best practice</code>。</p>\n<h2 id=\"生成需要的依赖库\"><a href=\"#生成需要的依赖库\" class=\"headerlink\" title=\"生成需要的依赖库\"></a>生成需要的依赖库</h2><p>apollo2019的源码携带了<code>rcsc</code>文件夹，该目录下是apollo源码的底层库的源文件。按照原来的makefile写法，<code>make</code>会先将该文件夹整个打包并生成一个<code>librcsc.so</code>的动态链接库，并在最后生成<code>executable binary</code>时将其链接上去。</p>\n<p>一开始我是想偷懒，用<code>FILE(GLOB_RECURSE)</code>来直接包含所有**.cpp<strong>文件，然后生成一个大的<code>lib</code>。这个操作一开始没发现问题，也确实生成了一个<code>librcsc.so</code>，但后面链接时就各种出错。仔细观察才发现，一堆.cpp文件中间混了个装着</strong>.c**的文件夹（该文件来源于<a href=\"https://github.com/libigl/libigl\">libig</a>，一个图形库）。而.c文件怎么都无法和.cpp文件链接到一起。这里我去翻阅了下最新的<a href=\"https://github.com/helios-base/librcsc\">librcsc</a>的写法，发现它时完完全全每个子目录下一个CMakeLists的标准写法。对于.c的文件夹，也有专门的处理方式。我想着，这感情好呀，于是把最新的<code>rcsc</code>目录拖到了自己的目录下并替换了原来的目录，准备改改CMakeLists就解决问题。这在后面也成了“拖垮我的最后一根稻草”，不过我也不觉得这“都是我的错~”。</p>\n<p><code>librcsc</code>正确的使用方式应该还是下载源码后安装到系统库中，然后球队源码带着src文件夹就够了，这种带着rcsc文件夹到处跑的做法其实还是落后了（虽然看源码还是方便）</p>\n<blockquote>\n<p>在尝试链接.c和.cpp的时候，还有些小东西值得记录，如果不为CMake工程指定编译器，它会使用<code>cc</code>和<code>c++</code>来编译c和cpp文件，而指定编译器需要在指定LANGUAGE之前才有效。这点算是让我对CMakeLists的执行顺序有了进一步了解。</p>\n</blockquote>\n<h2 id=\"CMakeLists的书写顺序\"><a href=\"#CMakeLists的书写顺序\" class=\"headerlink\" title=\"CMakeLists的书写顺序\"></a>CMakeLists的书写顺序</h2><p>其实没有那么多复杂的东西，也是一个顺序问题，CMakeLists鼓励我们先把要生成的东西写出来比如<code>add_executable</code>或是<code>add_library</code>；然后为其设定要链接的库，比如<code>target_link_libraries</code>，还有相关的依赖<code>target_link_directories</code>，属性<code>set_property</code>等等；最后是去把前面提到的变量“找”出来，比如<code>add_subdirectory</code>。</p>\n<p>当然，最前面肯定是写好<code>cmake_minimum_required</code>和<code>project</code>，以及其他的全局设定。</p>\n<p>对于编译器的参数来说，使用<code>set(CMAKE_CXX_FLAGS)</code>之类的方式就可以设定其参数，但对于c系的<code>definition</code>，最好还是使用<code>add_definition(-D)</code>来指定宏。更进一步，编写<code>configuration file</code>并指定<code>add_definition(-DHAVE_CONFIG_H)</code>和<code>configure_file</code>。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>CMake确实是有比Makefile有优势的地方，但仍然显的有些繁琐和奇怪。至少它还在不断发展，比如使用<code>target_link_directories</code>来替代<code>link_libraries</code>，但其中复杂的规则确实会让人痛苦。虽然最后没成功把这个项目改成CMake，但还是稍微深入地了解了CMake的用法。想想大过年的还抽时间来看这个，投入其中的感觉其实挺不错的。不过还是希望下次有项目能把CMakeLists写出来写好，哈哈。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>为什么最后没有写成？因为换<code>librcsc</code>底层的时候发现有的文件名对不上了，一查<code>librcsc</code>的更新日志发现，有的变量在08年就改了，也就是说，我们用的是<strong>22-08&#x3D;14</strong>年前的底层代码。这是真的忍不了，准备重构好了。新的代码基于CMakeLists就ok了。</p>\n"},{"title":"Hello World","abbrlink":"4a17b156","date":"2021-10-25T01:01:06.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/test/hello-world.md","raw":"---\ntitle: Hello World\ncategories: test\ntags:\n  - test\nabbrlink: 4a17b156\ndate: 2021-10-25 09:01:06\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"category":"test","updated":"2022-02-11T05:17:56.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxw00368wul5nya8545","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/bingguo0.jpg","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"image_test","abbrlink":"2a459492","date":"2022-01-27T05:35:31.000Z","_content":"\n# 测试图床\n\n![QQ图片20210909223113](https://raw.githubusercontent.com/kawhicurry/picgo/main/img/202201271336698.jpg)\n","source":"_posts/test/image-test.md","raw":"---\ntitle: image_test\ntags:\n  - test\ncategories:\n  - test\nabbrlink: 2a459492\ndate: 2022-01-27 13:35:31\n---\n\n# 测试图床\n\n![QQ图片20210909223113](https://raw.githubusercontent.com/kawhicurry/picgo/main/img/202201271336698.jpg)\n","slug":"image-test","published":1,"category":"test","updated":"2022-02-11T05:17:56.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxx00388wul0qrw03mr","content":"<h1 id=\"测试图床\"><a href=\"#测试图床\" class=\"headerlink\" title=\"测试图床\"></a>测试图床</h1><p><img src=\"https://raw.githubusercontent.com/kawhicurry/picgo/main/img/202201271336698.jpg\" alt=\"QQ图片20210909223113\"></p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/kon2.jpg","excerpt":"","more":"<h1 id=\"测试图床\"><a href=\"#测试图床\" class=\"headerlink\" title=\"测试图床\"></a>测试图床</h1><p><img src=\"https://raw.githubusercontent.com/kawhicurry/picgo/main/img/202201271336698.jpg\" alt=\"QQ图片20210909223113\"></p>\n"},{"title":"2021-2022寒假apollo2d划","abbrlink":"7b72ee84","date":"2022-01-08T09:02:25.000Z","_content":"\n\n\n# 概述\n\n加入apollo已经一个学期了，相比于勤奋的3d组，2d这边感觉推进的确实很慢。一方面确实新队员的基础确实有差距，另一方面也确实没怎么催。但毕竟robocup是个很不错的比赛，还是要好好抽时间看一看，学习学习。\n\n目前已知要用到的一些必要知识有：\n\n- cpp\n  - 基础语法\n  - 面对对象编程\n  - 多文件（主要使用原生的makefile，可能会考虑CMake和xmake）\n  - 少量设计模式\n- linux\n  - shell\n  - 虚拟机\n- 足球的基本规则和战术\n\n以及一些可选但最好还是学一学的知识：\n\n- markdown\n- git\n- python\n\n以及很有用但是不会用的东西：\n\n- 马尔科夫链\n- 遗传算法\n\n# 寒假指南\n\n这个寒假预计在三个方面做推进：\n\n1. 让cpp基础不好的同学从`bhv*`文件看起，基础稍好的同学看完后看看决策树。\n\n2. 让会python的同学看看已有的优化工具。\n3. 让搞linux的同学研究研究代码的可移植性。\n\n本假期的目的有三：\n\n1. 选拔出能看懂cpp代码的正式队员\n2. 搞清楚具体要优化的方向\n3. 完善文档\n\n# 已知情况\n\n预计春天就会开始国赛，时间不等人。不过对国赛也没有什么特别大的期望，毕竟现在开始其实很晚了，至于世界赛肯定会更难啦。\n\n## 一些通用技能\n\n我这里应该贴一份[计算机教育中缺失的一课](https://missing-semester-cn.github.io/)，看完这门课，至少也要了解以下这里的工具，后面的路会轻松许多。\n\n## 关于Cpp\n\n已知我们使用的是来自日本的`helios base`，世界霸主的底层，相应的底层还有中科大的`wrighteable`和其他的自研底层。底层方面`helios`已经提供了相当丰富的选项，基于它的`agent2d`也是一份刚好能用的初始球队。所以对于还不熟悉cpp的同学来说，这份底层以及`agent2d`将会是最好的学习项目。\n\n根据传统（？），`agent2d`最好从`bhv`文件看起，每个`bhv`文件封装了某种动作链，我们通过定义、修改和调用这些动作链，来让球员执行某些行为。这些文件往往封装的不错，所以可以从这里看起。\n\n相对应的，从`main`函数开始，去看决策树也是一种思路，这样可以了解球员的大体执行流程。\n\n在阅读相关代码时，趁手的工具相当重要。如果你只是单纯的看看代码，那么你可以选择在windows系统下任何一件趁手的工具来做这件事，我个人推荐的有：\n\n- vscode\n- vs\n\n> 注意，这样做的话，可能会找不到某些依赖，因为agent2d是被设计为在ubuntu操作系统上运行的（虽然理论上win也可以跑，但是环境可能会比较难搞定）\n\n但如果你想要让球队跑起来，那还是选择在ubuntu下跑起来比较好。关于操作系统，ubuntu可以选择虚拟机安装或双系统安装，这里推荐虚拟机。而在ubuntu下推荐的工具有：\n\n- vscode\n- kdevelop（来自apollo2d组组长的推荐）\n- Clion（来自电子部副部长的推荐）\n\n我们推荐使用这些现代化的IDE或编辑器以优化读者的源码阅读体验。对于你感兴趣的流程，使用`goto`功能去往任何函数或变量的调用，声明，实现的位置。（这段怎么听起来这么像英文翻译过来的）\n\n## 关于Python\n\n我们已经搜集到了一部分基于python实现的球队优化工具，但我们对于它们如何运行以及有何效果完全没有概念，因此我希望能有人来告诉我们这些工具做了什么。\n\n## 关于linux\n\n这项工作是留给我自己的，我希望这份代码所需要的编译环境等可以“相当不错”的运行下去。因此需要对其编译过程，以及依赖的包有更深入的了解。同时需要配合做python的同学完成优化工具的开发。\n\n## 结语\n\n这个假期应该会相当的漫长，希望在这个假期结束后，2d能真正“上道”。","source":"_posts/Project/2021-2022寒假apollo2d准备计划.md","raw":"---\ntitle: 2021-2022寒假apollo2d划\ntags:\n  - apollo\n  - robucup\ncategories:\n  - Project\nabbrlink: 7b72ee84\ndate: 2022-01-08 17:02:25\n---\n\n\n\n# 概述\n\n加入apollo已经一个学期了，相比于勤奋的3d组，2d这边感觉推进的确实很慢。一方面确实新队员的基础确实有差距，另一方面也确实没怎么催。但毕竟robocup是个很不错的比赛，还是要好好抽时间看一看，学习学习。\n\n目前已知要用到的一些必要知识有：\n\n- cpp\n  - 基础语法\n  - 面对对象编程\n  - 多文件（主要使用原生的makefile，可能会考虑CMake和xmake）\n  - 少量设计模式\n- linux\n  - shell\n  - 虚拟机\n- 足球的基本规则和战术\n\n以及一些可选但最好还是学一学的知识：\n\n- markdown\n- git\n- python\n\n以及很有用但是不会用的东西：\n\n- 马尔科夫链\n- 遗传算法\n\n# 寒假指南\n\n这个寒假预计在三个方面做推进：\n\n1. 让cpp基础不好的同学从`bhv*`文件看起，基础稍好的同学看完后看看决策树。\n\n2. 让会python的同学看看已有的优化工具。\n3. 让搞linux的同学研究研究代码的可移植性。\n\n本假期的目的有三：\n\n1. 选拔出能看懂cpp代码的正式队员\n2. 搞清楚具体要优化的方向\n3. 完善文档\n\n# 已知情况\n\n预计春天就会开始国赛，时间不等人。不过对国赛也没有什么特别大的期望，毕竟现在开始其实很晚了，至于世界赛肯定会更难啦。\n\n## 一些通用技能\n\n我这里应该贴一份[计算机教育中缺失的一课](https://missing-semester-cn.github.io/)，看完这门课，至少也要了解以下这里的工具，后面的路会轻松许多。\n\n## 关于Cpp\n\n已知我们使用的是来自日本的`helios base`，世界霸主的底层，相应的底层还有中科大的`wrighteable`和其他的自研底层。底层方面`helios`已经提供了相当丰富的选项，基于它的`agent2d`也是一份刚好能用的初始球队。所以对于还不熟悉cpp的同学来说，这份底层以及`agent2d`将会是最好的学习项目。\n\n根据传统（？），`agent2d`最好从`bhv`文件看起，每个`bhv`文件封装了某种动作链，我们通过定义、修改和调用这些动作链，来让球员执行某些行为。这些文件往往封装的不错，所以可以从这里看起。\n\n相对应的，从`main`函数开始，去看决策树也是一种思路，这样可以了解球员的大体执行流程。\n\n在阅读相关代码时，趁手的工具相当重要。如果你只是单纯的看看代码，那么你可以选择在windows系统下任何一件趁手的工具来做这件事，我个人推荐的有：\n\n- vscode\n- vs\n\n> 注意，这样做的话，可能会找不到某些依赖，因为agent2d是被设计为在ubuntu操作系统上运行的（虽然理论上win也可以跑，但是环境可能会比较难搞定）\n\n但如果你想要让球队跑起来，那还是选择在ubuntu下跑起来比较好。关于操作系统，ubuntu可以选择虚拟机安装或双系统安装，这里推荐虚拟机。而在ubuntu下推荐的工具有：\n\n- vscode\n- kdevelop（来自apollo2d组组长的推荐）\n- Clion（来自电子部副部长的推荐）\n\n我们推荐使用这些现代化的IDE或编辑器以优化读者的源码阅读体验。对于你感兴趣的流程，使用`goto`功能去往任何函数或变量的调用，声明，实现的位置。（这段怎么听起来这么像英文翻译过来的）\n\n## 关于Python\n\n我们已经搜集到了一部分基于python实现的球队优化工具，但我们对于它们如何运行以及有何效果完全没有概念，因此我希望能有人来告诉我们这些工具做了什么。\n\n## 关于linux\n\n这项工作是留给我自己的，我希望这份代码所需要的编译环境等可以“相当不错”的运行下去。因此需要对其编译过程，以及依赖的包有更深入的了解。同时需要配合做python的同学完成优化工具的开发。\n\n## 结语\n\n这个假期应该会相当的漫长，希望在这个假期结束后，2d能真正“上道”。","slug":"2021-2022寒假apollo2d准备计划","published":1,"category":"Project","updated":"2022-02-11T05:17:56.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxy003d8wul5oz7bduu","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>加入apollo已经一个学期了，相比于勤奋的3d组，2d这边感觉推进的确实很慢。一方面确实新队员的基础确实有差距，另一方面也确实没怎么催。但毕竟robocup是个很不错的比赛，还是要好好抽时间看一看，学习学习。</p>\n<p>目前已知要用到的一些必要知识有：</p>\n<ul>\n<li>cpp<ul>\n<li>基础语法</li>\n<li>面对对象编程</li>\n<li>多文件（主要使用原生的makefile，可能会考虑CMake和xmake）</li>\n<li>少量设计模式</li>\n</ul>\n</li>\n<li>linux<ul>\n<li>shell</li>\n<li>虚拟机</li>\n</ul>\n</li>\n<li>足球的基本规则和战术</li>\n</ul>\n<p>以及一些可选但最好还是学一学的知识：</p>\n<ul>\n<li>markdown</li>\n<li>git</li>\n<li>python</li>\n</ul>\n<p>以及很有用但是不会用的东西：</p>\n<ul>\n<li>马尔科夫链</li>\n<li>遗传算法</li>\n</ul>\n<h1 id=\"寒假指南\"><a href=\"#寒假指南\" class=\"headerlink\" title=\"寒假指南\"></a>寒假指南</h1><p>这个寒假预计在三个方面做推进：</p>\n<ol>\n<li><p>让cpp基础不好的同学从<code>bhv*</code>文件看起，基础稍好的同学看完后看看决策树。</p>\n</li>\n<li><p>让会python的同学看看已有的优化工具。</p>\n</li>\n<li><p>让搞linux的同学研究研究代码的可移植性。</p>\n</li>\n</ol>\n<p>本假期的目的有三：</p>\n<ol>\n<li>选拔出能看懂cpp代码的正式队员</li>\n<li>搞清楚具体要优化的方向</li>\n<li>完善文档</li>\n</ol>\n<h1 id=\"已知情况\"><a href=\"#已知情况\" class=\"headerlink\" title=\"已知情况\"></a>已知情况</h1><p>预计春天就会开始国赛，时间不等人。不过对国赛也没有什么特别大的期望，毕竟现在开始其实很晚了，至于世界赛肯定会更难啦。</p>\n<h2 id=\"一些通用技能\"><a href=\"#一些通用技能\" class=\"headerlink\" title=\"一些通用技能\"></a>一些通用技能</h2><p>我这里应该贴一份<a href=\"https://missing-semester-cn.github.io/\">计算机教育中缺失的一课</a>，看完这门课，至少也要了解以下这里的工具，后面的路会轻松许多。</p>\n<h2 id=\"关于Cpp\"><a href=\"#关于Cpp\" class=\"headerlink\" title=\"关于Cpp\"></a>关于Cpp</h2><p>已知我们使用的是来自日本的<code>helios base</code>，世界霸主的底层，相应的底层还有中科大的<code>wrighteable</code>和其他的自研底层。底层方面<code>helios</code>已经提供了相当丰富的选项，基于它的<code>agent2d</code>也是一份刚好能用的初始球队。所以对于还不熟悉cpp的同学来说，这份底层以及<code>agent2d</code>将会是最好的学习项目。</p>\n<p>根据传统（？），<code>agent2d</code>最好从<code>bhv</code>文件看起，每个<code>bhv</code>文件封装了某种动作链，我们通过定义、修改和调用这些动作链，来让球员执行某些行为。这些文件往往封装的不错，所以可以从这里看起。</p>\n<p>相对应的，从<code>main</code>函数开始，去看决策树也是一种思路，这样可以了解球员的大体执行流程。</p>\n<p>在阅读相关代码时，趁手的工具相当重要。如果你只是单纯的看看代码，那么你可以选择在windows系统下任何一件趁手的工具来做这件事，我个人推荐的有：</p>\n<ul>\n<li>vscode</li>\n<li>vs</li>\n</ul>\n<blockquote>\n<p>注意，这样做的话，可能会找不到某些依赖，因为agent2d是被设计为在ubuntu操作系统上运行的（虽然理论上win也可以跑，但是环境可能会比较难搞定）</p>\n</blockquote>\n<p>但如果你想要让球队跑起来，那还是选择在ubuntu下跑起来比较好。关于操作系统，ubuntu可以选择虚拟机安装或双系统安装，这里推荐虚拟机。而在ubuntu下推荐的工具有：</p>\n<ul>\n<li>vscode</li>\n<li>kdevelop（来自apollo2d组组长的推荐）</li>\n<li>Clion（来自电子部副部长的推荐）</li>\n</ul>\n<p>我们推荐使用这些现代化的IDE或编辑器以优化读者的源码阅读体验。对于你感兴趣的流程，使用<code>goto</code>功能去往任何函数或变量的调用，声明，实现的位置。（这段怎么听起来这么像英文翻译过来的）</p>\n<h2 id=\"关于Python\"><a href=\"#关于Python\" class=\"headerlink\" title=\"关于Python\"></a>关于Python</h2><p>我们已经搜集到了一部分基于python实现的球队优化工具，但我们对于它们如何运行以及有何效果完全没有概念，因此我希望能有人来告诉我们这些工具做了什么。</p>\n<h2 id=\"关于linux\"><a href=\"#关于linux\" class=\"headerlink\" title=\"关于linux\"></a>关于linux</h2><p>这项工作是留给我自己的，我希望这份代码所需要的编译环境等可以“相当不错”的运行下去。因此需要对其编译过程，以及依赖的包有更深入的了解。同时需要配合做python的同学完成优化工具的开发。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>这个假期应该会相当的漫长，希望在这个假期结束后，2d能真正“上道”。</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/re05.jpg","excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>加入apollo已经一个学期了，相比于勤奋的3d组，2d这边感觉推进的确实很慢。一方面确实新队员的基础确实有差距，另一方面也确实没怎么催。但毕竟robocup是个很不错的比赛，还是要好好抽时间看一看，学习学习。</p>\n<p>目前已知要用到的一些必要知识有：</p>\n<ul>\n<li>cpp<ul>\n<li>基础语法</li>\n<li>面对对象编程</li>\n<li>多文件（主要使用原生的makefile，可能会考虑CMake和xmake）</li>\n<li>少量设计模式</li>\n</ul>\n</li>\n<li>linux<ul>\n<li>shell</li>\n<li>虚拟机</li>\n</ul>\n</li>\n<li>足球的基本规则和战术</li>\n</ul>\n<p>以及一些可选但最好还是学一学的知识：</p>\n<ul>\n<li>markdown</li>\n<li>git</li>\n<li>python</li>\n</ul>\n<p>以及很有用但是不会用的东西：</p>\n<ul>\n<li>马尔科夫链</li>\n<li>遗传算法</li>\n</ul>\n<h1 id=\"寒假指南\"><a href=\"#寒假指南\" class=\"headerlink\" title=\"寒假指南\"></a>寒假指南</h1><p>这个寒假预计在三个方面做推进：</p>\n<ol>\n<li><p>让cpp基础不好的同学从<code>bhv*</code>文件看起，基础稍好的同学看完后看看决策树。</p>\n</li>\n<li><p>让会python的同学看看已有的优化工具。</p>\n</li>\n<li><p>让搞linux的同学研究研究代码的可移植性。</p>\n</li>\n</ol>\n<p>本假期的目的有三：</p>\n<ol>\n<li>选拔出能看懂cpp代码的正式队员</li>\n<li>搞清楚具体要优化的方向</li>\n<li>完善文档</li>\n</ol>\n<h1 id=\"已知情况\"><a href=\"#已知情况\" class=\"headerlink\" title=\"已知情况\"></a>已知情况</h1><p>预计春天就会开始国赛，时间不等人。不过对国赛也没有什么特别大的期望，毕竟现在开始其实很晚了，至于世界赛肯定会更难啦。</p>\n<h2 id=\"一些通用技能\"><a href=\"#一些通用技能\" class=\"headerlink\" title=\"一些通用技能\"></a>一些通用技能</h2><p>我这里应该贴一份<a href=\"https://missing-semester-cn.github.io/\">计算机教育中缺失的一课</a>，看完这门课，至少也要了解以下这里的工具，后面的路会轻松许多。</p>\n<h2 id=\"关于Cpp\"><a href=\"#关于Cpp\" class=\"headerlink\" title=\"关于Cpp\"></a>关于Cpp</h2><p>已知我们使用的是来自日本的<code>helios base</code>，世界霸主的底层，相应的底层还有中科大的<code>wrighteable</code>和其他的自研底层。底层方面<code>helios</code>已经提供了相当丰富的选项，基于它的<code>agent2d</code>也是一份刚好能用的初始球队。所以对于还不熟悉cpp的同学来说，这份底层以及<code>agent2d</code>将会是最好的学习项目。</p>\n<p>根据传统（？），<code>agent2d</code>最好从<code>bhv</code>文件看起，每个<code>bhv</code>文件封装了某种动作链，我们通过定义、修改和调用这些动作链，来让球员执行某些行为。这些文件往往封装的不错，所以可以从这里看起。</p>\n<p>相对应的，从<code>main</code>函数开始，去看决策树也是一种思路，这样可以了解球员的大体执行流程。</p>\n<p>在阅读相关代码时，趁手的工具相当重要。如果你只是单纯的看看代码，那么你可以选择在windows系统下任何一件趁手的工具来做这件事，我个人推荐的有：</p>\n<ul>\n<li>vscode</li>\n<li>vs</li>\n</ul>\n<blockquote>\n<p>注意，这样做的话，可能会找不到某些依赖，因为agent2d是被设计为在ubuntu操作系统上运行的（虽然理论上win也可以跑，但是环境可能会比较难搞定）</p>\n</blockquote>\n<p>但如果你想要让球队跑起来，那还是选择在ubuntu下跑起来比较好。关于操作系统，ubuntu可以选择虚拟机安装或双系统安装，这里推荐虚拟机。而在ubuntu下推荐的工具有：</p>\n<ul>\n<li>vscode</li>\n<li>kdevelop（来自apollo2d组组长的推荐）</li>\n<li>Clion（来自电子部副部长的推荐）</li>\n</ul>\n<p>我们推荐使用这些现代化的IDE或编辑器以优化读者的源码阅读体验。对于你感兴趣的流程，使用<code>goto</code>功能去往任何函数或变量的调用，声明，实现的位置。（这段怎么听起来这么像英文翻译过来的）</p>\n<h2 id=\"关于Python\"><a href=\"#关于Python\" class=\"headerlink\" title=\"关于Python\"></a>关于Python</h2><p>我们已经搜集到了一部分基于python实现的球队优化工具，但我们对于它们如何运行以及有何效果完全没有概念，因此我希望能有人来告诉我们这些工具做了什么。</p>\n<h2 id=\"关于linux\"><a href=\"#关于linux\" class=\"headerlink\" title=\"关于linux\"></a>关于linux</h2><p>这项工作是留给我自己的，我希望这份代码所需要的编译环境等可以“相当不错”的运行下去。因此需要对其编译过程，以及依赖的包有更深入的了解。同时需要配合做python的同学完成优化工具的开发。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>这个假期应该会相当的漫长，希望在这个假期结束后，2d能真正“上道”。</p>\n"},{"title":"自制Rss阅读器","abbrlink":"9bf3fade","date":"2021-12-20T13:48:06.000Z","_content":"尝试自制了一个rss阅读器，现在还在开发中。\n\n*2022/2/7更新：暂时放弃了，互联网上还有可用的rss订阅方案*\n\n## 想法\n\n`Rss`：简单信息聚合。\n\n互联网使我们得以接触到广泛的信息，而我们往往希望自己关注的创作者（某个网站）有更新时，自己能第一个被通知。Rss便是为此而生。\n\nRss的概念其实很简单。它的使用过程大致如下\n\n- 创作者使用工具生成一个xml格式的feed。\n- Rss订阅工具（一般是第三方提供）获取这些feed后解析其内容并生成易于阅读的内容，随后通知订阅者内容已经更新。\n- 订阅者得到阅读器提供的清单选择自己感兴趣的内容阅读。\n\n这个过程看起来简单，但这中间又有以下几个问题：\n\n- 创作者不一定会提供feed。\n- Rss订阅工具一般由第三方的企业实现，它们会像爬虫一样（或者说就是爬虫）定时获取网站的feed。而使用服务器是有成本的。\n- 对订阅者的要求，订阅者需要将自己希望阅读的内容加入到订阅工具中。而获取feed对于很多订阅者来说是个难题。当然，浏览器插件一定程度上能解决一部分这个问题。\n- 阅读器的颜值，可能是因为rss凉了很久了，现在遗留下来的阅读器的ui都是一言难尽。\n- 阅读器的跨平台，移动设备近几年才普及开来，而rss在此之前就凉了。因此很少有好的rss跨平台解决方案。\n\n综上，我希望能有一款产品能完美完成我的Rss订阅问题。为何我要如此执着于Rss呢？\n\n- Rss意味着我可以自己选择要看什么，不看什么，而不是被现代的推荐机制牵着鼻子走。\n- Rss意味着我可以第一时间得到更新，而不是等到有人推送，或是选择性的推送，抑或是干脆得不到通知。\n- 好的Rss阅读工具意味着我可以舒服的阅读我想要阅读的内容，甚至可以让内容经过进一步处理后再阅读\n- 好的Rss阅读工具意味着我可以随时随地收到更新，并且在任意设备上进行阅读。\n\n## 实现\n\n接下来讨论下具体的实现。\n\n### 订阅源\n\n关于订阅源，[RssHub](https://docs.rsshub.app/)项目提供了不少有趣的订阅源。\n\n然后是对于一些不直接提供feed的网站，例如我想订阅B站某位up主的更新。[irreader](http://irreader.fatecore.com/)提供了一种不错的思路。让用户手动选择自己想要订阅的区块后，通过网页规则的匹配生成一个订阅规则（像是一种非xml格式的feed）。\n\n### 订阅器\n\n这里的订阅器指定时获取feed的工具。前面提到了部署服务器软件来定时获取feed的做法，除了服务器端的软件外，在用户本地进行同步也是一种办法。\n\n关于定时获取feed，当然原则上是越频繁越好啦，但也不能使劲的访问，搞成压力测试了。所以关于更新的频率，可以用算法优化优化。\n\n然后就是feed的判定，订阅器应当有能力判断获取的feed中是否有更新内容，以往的内容是否失效，哪些内容应当被加入数据库，哪些应当从数据库中去除。\n\n### 阅读器\n\n说到阅读，途径就多种多样了，随手枚举一下：网页，win客户端，linux客户端，Android客户端，iPhone客户端，各种平板，微信小程序。\n\n阅读的方式也有讲究，可以让用户打开链接（调用本地浏览器），或为用户提供一个阅读器，或是其他方式。\n\n## 一种方案\n\n尝试提出一种方案来完成上述所有内容。\n\n向用户提供：\n\n- 各种格式的阅读器，包括网页端和微信小程序（写写前端），桌面客户端及平板客户端（qt跨平台完事），手机客户端（qt好像可以跨Android和ios）。\n\n- 订阅工具，与阅读器集成，支持\n  - 与RssHub接入\n  - 添加自定义feed\n  - 添加自定义非feed源\n\n在服务端（不是服务器端）提供：\n\n- feed获取工具，分为两类：\n  - 服务器端：记录用户的订阅要求后添加至数据库，获得新feed与旧feed对比后写入数据库\n  - 本地端：支持手动或定时获取feed，以本地方式保存数据\n- feed解析工具，将feed解析为：\n  - 链接：用户可通过自己的浏览器阅读源内容\n  - 内容：获取feed中的文本后，解析为便于阅读的格式，交由阅读器供用户阅读","source":"_posts/Project/自制Rss阅读器.md","raw":"---\ntitle: 自制Rss阅读器\ncategories:\n  - Project\ntags:\n  - rss\nabbrlink: 9bf3fade\ndate: 2021-12-20 21:48:06\n---\n尝试自制了一个rss阅读器，现在还在开发中。\n\n*2022/2/7更新：暂时放弃了，互联网上还有可用的rss订阅方案*\n\n## 想法\n\n`Rss`：简单信息聚合。\n\n互联网使我们得以接触到广泛的信息，而我们往往希望自己关注的创作者（某个网站）有更新时，自己能第一个被通知。Rss便是为此而生。\n\nRss的概念其实很简单。它的使用过程大致如下\n\n- 创作者使用工具生成一个xml格式的feed。\n- Rss订阅工具（一般是第三方提供）获取这些feed后解析其内容并生成易于阅读的内容，随后通知订阅者内容已经更新。\n- 订阅者得到阅读器提供的清单选择自己感兴趣的内容阅读。\n\n这个过程看起来简单，但这中间又有以下几个问题：\n\n- 创作者不一定会提供feed。\n- Rss订阅工具一般由第三方的企业实现，它们会像爬虫一样（或者说就是爬虫）定时获取网站的feed。而使用服务器是有成本的。\n- 对订阅者的要求，订阅者需要将自己希望阅读的内容加入到订阅工具中。而获取feed对于很多订阅者来说是个难题。当然，浏览器插件一定程度上能解决一部分这个问题。\n- 阅读器的颜值，可能是因为rss凉了很久了，现在遗留下来的阅读器的ui都是一言难尽。\n- 阅读器的跨平台，移动设备近几年才普及开来，而rss在此之前就凉了。因此很少有好的rss跨平台解决方案。\n\n综上，我希望能有一款产品能完美完成我的Rss订阅问题。为何我要如此执着于Rss呢？\n\n- Rss意味着我可以自己选择要看什么，不看什么，而不是被现代的推荐机制牵着鼻子走。\n- Rss意味着我可以第一时间得到更新，而不是等到有人推送，或是选择性的推送，抑或是干脆得不到通知。\n- 好的Rss阅读工具意味着我可以舒服的阅读我想要阅读的内容，甚至可以让内容经过进一步处理后再阅读\n- 好的Rss阅读工具意味着我可以随时随地收到更新，并且在任意设备上进行阅读。\n\n## 实现\n\n接下来讨论下具体的实现。\n\n### 订阅源\n\n关于订阅源，[RssHub](https://docs.rsshub.app/)项目提供了不少有趣的订阅源。\n\n然后是对于一些不直接提供feed的网站，例如我想订阅B站某位up主的更新。[irreader](http://irreader.fatecore.com/)提供了一种不错的思路。让用户手动选择自己想要订阅的区块后，通过网页规则的匹配生成一个订阅规则（像是一种非xml格式的feed）。\n\n### 订阅器\n\n这里的订阅器指定时获取feed的工具。前面提到了部署服务器软件来定时获取feed的做法，除了服务器端的软件外，在用户本地进行同步也是一种办法。\n\n关于定时获取feed，当然原则上是越频繁越好啦，但也不能使劲的访问，搞成压力测试了。所以关于更新的频率，可以用算法优化优化。\n\n然后就是feed的判定，订阅器应当有能力判断获取的feed中是否有更新内容，以往的内容是否失效，哪些内容应当被加入数据库，哪些应当从数据库中去除。\n\n### 阅读器\n\n说到阅读，途径就多种多样了，随手枚举一下：网页，win客户端，linux客户端，Android客户端，iPhone客户端，各种平板，微信小程序。\n\n阅读的方式也有讲究，可以让用户打开链接（调用本地浏览器），或为用户提供一个阅读器，或是其他方式。\n\n## 一种方案\n\n尝试提出一种方案来完成上述所有内容。\n\n向用户提供：\n\n- 各种格式的阅读器，包括网页端和微信小程序（写写前端），桌面客户端及平板客户端（qt跨平台完事），手机客户端（qt好像可以跨Android和ios）。\n\n- 订阅工具，与阅读器集成，支持\n  - 与RssHub接入\n  - 添加自定义feed\n  - 添加自定义非feed源\n\n在服务端（不是服务器端）提供：\n\n- feed获取工具，分为两类：\n  - 服务器端：记录用户的订阅要求后添加至数据库，获得新feed与旧feed对比后写入数据库\n  - 本地端：支持手动或定时获取feed，以本地方式保存数据\n- feed解析工具，将feed解析为：\n  - 链接：用户可通过自己的浏览器阅读源内容\n  - 内容：获取feed中的文本后，解析为便于阅读的格式，交由阅读器供用户阅读","slug":"自制Rss阅读器","published":1,"category":"Project","updated":"2022-02-11T05:17:56.316Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3irxz003f8wul0npcd0w5","content":"<p>尝试自制了一个rss阅读器，现在还在开发中。</p>\n<p><em>2022&#x2F;2&#x2F;7更新：暂时放弃了，互联网上还有可用的rss订阅方案</em></p>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p><code>Rss</code>：简单信息聚合。</p>\n<p>互联网使我们得以接触到广泛的信息，而我们往往希望自己关注的创作者（某个网站）有更新时，自己能第一个被通知。Rss便是为此而生。</p>\n<p>Rss的概念其实很简单。它的使用过程大致如下</p>\n<ul>\n<li>创作者使用工具生成一个xml格式的feed。</li>\n<li>Rss订阅工具（一般是第三方提供）获取这些feed后解析其内容并生成易于阅读的内容，随后通知订阅者内容已经更新。</li>\n<li>订阅者得到阅读器提供的清单选择自己感兴趣的内容阅读。</li>\n</ul>\n<p>这个过程看起来简单，但这中间又有以下几个问题：</p>\n<ul>\n<li>创作者不一定会提供feed。</li>\n<li>Rss订阅工具一般由第三方的企业实现，它们会像爬虫一样（或者说就是爬虫）定时获取网站的feed。而使用服务器是有成本的。</li>\n<li>对订阅者的要求，订阅者需要将自己希望阅读的内容加入到订阅工具中。而获取feed对于很多订阅者来说是个难题。当然，浏览器插件一定程度上能解决一部分这个问题。</li>\n<li>阅读器的颜值，可能是因为rss凉了很久了，现在遗留下来的阅读器的ui都是一言难尽。</li>\n<li>阅读器的跨平台，移动设备近几年才普及开来，而rss在此之前就凉了。因此很少有好的rss跨平台解决方案。</li>\n</ul>\n<p>综上，我希望能有一款产品能完美完成我的Rss订阅问题。为何我要如此执着于Rss呢？</p>\n<ul>\n<li>Rss意味着我可以自己选择要看什么，不看什么，而不是被现代的推荐机制牵着鼻子走。</li>\n<li>Rss意味着我可以第一时间得到更新，而不是等到有人推送，或是选择性的推送，抑或是干脆得不到通知。</li>\n<li>好的Rss阅读工具意味着我可以舒服的阅读我想要阅读的内容，甚至可以让内容经过进一步处理后再阅读</li>\n<li>好的Rss阅读工具意味着我可以随时随地收到更新，并且在任意设备上进行阅读。</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>接下来讨论下具体的实现。</p>\n<h3 id=\"订阅源\"><a href=\"#订阅源\" class=\"headerlink\" title=\"订阅源\"></a>订阅源</h3><p>关于订阅源，<a href=\"https://docs.rsshub.app/\">RssHub</a>项目提供了不少有趣的订阅源。</p>\n<p>然后是对于一些不直接提供feed的网站，例如我想订阅B站某位up主的更新。<a href=\"http://irreader.fatecore.com/\">irreader</a>提供了一种不错的思路。让用户手动选择自己想要订阅的区块后，通过网页规则的匹配生成一个订阅规则（像是一种非xml格式的feed）。</p>\n<h3 id=\"订阅器\"><a href=\"#订阅器\" class=\"headerlink\" title=\"订阅器\"></a>订阅器</h3><p>这里的订阅器指定时获取feed的工具。前面提到了部署服务器软件来定时获取feed的做法，除了服务器端的软件外，在用户本地进行同步也是一种办法。</p>\n<p>关于定时获取feed，当然原则上是越频繁越好啦，但也不能使劲的访问，搞成压力测试了。所以关于更新的频率，可以用算法优化优化。</p>\n<p>然后就是feed的判定，订阅器应当有能力判断获取的feed中是否有更新内容，以往的内容是否失效，哪些内容应当被加入数据库，哪些应当从数据库中去除。</p>\n<h3 id=\"阅读器\"><a href=\"#阅读器\" class=\"headerlink\" title=\"阅读器\"></a>阅读器</h3><p>说到阅读，途径就多种多样了，随手枚举一下：网页，win客户端，linux客户端，Android客户端，iPhone客户端，各种平板，微信小程序。</p>\n<p>阅读的方式也有讲究，可以让用户打开链接（调用本地浏览器），或为用户提供一个阅读器，或是其他方式。</p>\n<h2 id=\"一种方案\"><a href=\"#一种方案\" class=\"headerlink\" title=\"一种方案\"></a>一种方案</h2><p>尝试提出一种方案来完成上述所有内容。</p>\n<p>向用户提供：</p>\n<ul>\n<li><p>各种格式的阅读器，包括网页端和微信小程序（写写前端），桌面客户端及平板客户端（qt跨平台完事），手机客户端（qt好像可以跨Android和ios）。</p>\n</li>\n<li><p>订阅工具，与阅读器集成，支持</p>\n<ul>\n<li>与RssHub接入</li>\n<li>添加自定义feed</li>\n<li>添加自定义非feed源</li>\n</ul>\n</li>\n</ul>\n<p>在服务端（不是服务器端）提供：</p>\n<ul>\n<li>feed获取工具，分为两类：<ul>\n<li>服务器端：记录用户的订阅要求后添加至数据库，获得新feed与旧feed对比后写入数据库</li>\n<li>本地端：支持手动或定时获取feed，以本地方式保存数据</li>\n</ul>\n</li>\n<li>feed解析工具，将feed解析为：<ul>\n<li>链接：用户可通过自己的浏览器阅读源内容</li>\n<li>内容：获取feed中的文本后，解析为便于阅读的格式，交由阅读器供用户阅读</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/kon2.jpg","excerpt":"","more":"<p>尝试自制了一个rss阅读器，现在还在开发中。</p>\n<p><em>2022&#x2F;2&#x2F;7更新：暂时放弃了，互联网上还有可用的rss订阅方案</em></p>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p><code>Rss</code>：简单信息聚合。</p>\n<p>互联网使我们得以接触到广泛的信息，而我们往往希望自己关注的创作者（某个网站）有更新时，自己能第一个被通知。Rss便是为此而生。</p>\n<p>Rss的概念其实很简单。它的使用过程大致如下</p>\n<ul>\n<li>创作者使用工具生成一个xml格式的feed。</li>\n<li>Rss订阅工具（一般是第三方提供）获取这些feed后解析其内容并生成易于阅读的内容，随后通知订阅者内容已经更新。</li>\n<li>订阅者得到阅读器提供的清单选择自己感兴趣的内容阅读。</li>\n</ul>\n<p>这个过程看起来简单，但这中间又有以下几个问题：</p>\n<ul>\n<li>创作者不一定会提供feed。</li>\n<li>Rss订阅工具一般由第三方的企业实现，它们会像爬虫一样（或者说就是爬虫）定时获取网站的feed。而使用服务器是有成本的。</li>\n<li>对订阅者的要求，订阅者需要将自己希望阅读的内容加入到订阅工具中。而获取feed对于很多订阅者来说是个难题。当然，浏览器插件一定程度上能解决一部分这个问题。</li>\n<li>阅读器的颜值，可能是因为rss凉了很久了，现在遗留下来的阅读器的ui都是一言难尽。</li>\n<li>阅读器的跨平台，移动设备近几年才普及开来，而rss在此之前就凉了。因此很少有好的rss跨平台解决方案。</li>\n</ul>\n<p>综上，我希望能有一款产品能完美完成我的Rss订阅问题。为何我要如此执着于Rss呢？</p>\n<ul>\n<li>Rss意味着我可以自己选择要看什么，不看什么，而不是被现代的推荐机制牵着鼻子走。</li>\n<li>Rss意味着我可以第一时间得到更新，而不是等到有人推送，或是选择性的推送，抑或是干脆得不到通知。</li>\n<li>好的Rss阅读工具意味着我可以舒服的阅读我想要阅读的内容，甚至可以让内容经过进一步处理后再阅读</li>\n<li>好的Rss阅读工具意味着我可以随时随地收到更新，并且在任意设备上进行阅读。</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>接下来讨论下具体的实现。</p>\n<h3 id=\"订阅源\"><a href=\"#订阅源\" class=\"headerlink\" title=\"订阅源\"></a>订阅源</h3><p>关于订阅源，<a href=\"https://docs.rsshub.app/\">RssHub</a>项目提供了不少有趣的订阅源。</p>\n<p>然后是对于一些不直接提供feed的网站，例如我想订阅B站某位up主的更新。<a href=\"http://irreader.fatecore.com/\">irreader</a>提供了一种不错的思路。让用户手动选择自己想要订阅的区块后，通过网页规则的匹配生成一个订阅规则（像是一种非xml格式的feed）。</p>\n<h3 id=\"订阅器\"><a href=\"#订阅器\" class=\"headerlink\" title=\"订阅器\"></a>订阅器</h3><p>这里的订阅器指定时获取feed的工具。前面提到了部署服务器软件来定时获取feed的做法，除了服务器端的软件外，在用户本地进行同步也是一种办法。</p>\n<p>关于定时获取feed，当然原则上是越频繁越好啦，但也不能使劲的访问，搞成压力测试了。所以关于更新的频率，可以用算法优化优化。</p>\n<p>然后就是feed的判定，订阅器应当有能力判断获取的feed中是否有更新内容，以往的内容是否失效，哪些内容应当被加入数据库，哪些应当从数据库中去除。</p>\n<h3 id=\"阅读器\"><a href=\"#阅读器\" class=\"headerlink\" title=\"阅读器\"></a>阅读器</h3><p>说到阅读，途径就多种多样了，随手枚举一下：网页，win客户端，linux客户端，Android客户端，iPhone客户端，各种平板，微信小程序。</p>\n<p>阅读的方式也有讲究，可以让用户打开链接（调用本地浏览器），或为用户提供一个阅读器，或是其他方式。</p>\n<h2 id=\"一种方案\"><a href=\"#一种方案\" class=\"headerlink\" title=\"一种方案\"></a>一种方案</h2><p>尝试提出一种方案来完成上述所有内容。</p>\n<p>向用户提供：</p>\n<ul>\n<li><p>各种格式的阅读器，包括网页端和微信小程序（写写前端），桌面客户端及平板客户端（qt跨平台完事），手机客户端（qt好像可以跨Android和ios）。</p>\n</li>\n<li><p>订阅工具，与阅读器集成，支持</p>\n<ul>\n<li>与RssHub接入</li>\n<li>添加自定义feed</li>\n<li>添加自定义非feed源</li>\n</ul>\n</li>\n</ul>\n<p>在服务端（不是服务器端）提供：</p>\n<ul>\n<li>feed获取工具，分为两类：<ul>\n<li>服务器端：记录用户的订阅要求后添加至数据库，获得新feed与旧feed对比后写入数据库</li>\n<li>本地端：支持手动或定时获取feed，以本地方式保存数据</li>\n</ul>\n</li>\n<li>feed解析工具，将feed解析为：<ul>\n<li>链接：用户可通过自己的浏览器阅读源内容</li>\n<li>内容：获取feed中的文本后，解析为便于阅读的格式，交由阅读器供用户阅读</li>\n</ul>\n</li>\n</ul>\n"},{"title":"0xCalculator 16进制计算器","abbrlink":"9bb627a","date":"2021-11-28T09:31:31.000Z","_content":"\n# 功能\n\n1. 对十六进制数进行双目、表达式运算\n2. 对运算结果进行保存和再读取，支持自动保存和手动保存\n3. 自定义运算结果储存位置\n4. 自定义字体大小\n5. 可更换窗口风格（换肤）\n6. 自动保存设置\n\n# 任务分配\n\n1. ：ui设计与qt框架\n2. ：核心算法\n3. ：文件读写\n\n# 开源地址\n<https://github.com/kawhicurry/0xCalculator>\n\n# 开发过程\n\n## Qt框架\n\nqt文件将会以平铺的方式放置在同一工程目录下，其组织结构由`.pro`文件记录，该文件类似于makefile（可以看作是qmakefile？）。其标准目录如下：\n\n> .pro：记录文件\n>\n> /Headers：略\n>\n> /Sources：略\n>\n> /Forms：存放`.ui`文件，实际为`xml`格式，但不建议直接编辑，所有操作应当在设计模块中完成\n>\n> /Resources：存放qt标准资源（可以qt方式引用的资源）\n>\n> /Other files\n\n## UI设计\n\n直接在qt creator的设计界面中打开`设计`模块。从画面左侧拖动组件，摆放至设计框中即可。\n\n*问题*：组件散乱\n\n- 左侧组件库中有`layout`组件,将其拖动至设计框中,再向layout中添加组件，即可使所有组件呈现一定规律。\n\n>布局类型：\n>\n>垂直：略\n>\n>水平：略\n>\n>栅格（grid）：上面俩合起来\n>\n>窗口：？存疑，不是很能理解这是啥\n\n*问题*：使用layout组件后无法布局固定，启动ui界面后拖动窗口改变其大小，layout组件位置不动。\n\n- 应当首先在右侧`对象`框中选中主窗口（mainwindow）中的中间部件（centralwidget），右键选择布局，为整个中间部分设定大的布局，（注：主窗口除了中间部件还初始化了一个菜单栏（menubar）），然后在该布局中嵌套布局或组件。本方案选择了栅格布局，虽然只需垂直布局即可，但为了可拓展性，还是选择栅格。接下来在整个中间部分的栅格布局中，嵌套了一个垂直布局（用于输入和输出）和一个栅格布局（用于存放按键）。\n\n接下来在主窗口中添加所需的组件，分别为输入框、输出框、5*6个按键。然后可以对其属性进行可视化的设计，以下是对`设计`界面中一些工具的解释：\n\n> 右侧下方为属性框，显示了所选定组件的属性，每个组件都是层层继承而来，因此要注意每一层的具体属性以及继承关系。\n>\n> 右侧上方为对象框，显示了当前ui文件中所有文件属性。\n>\n> 正中央下方的框实际上有两个可编辑区域，一个为action editor，即为组件添加动作（可方便设置快捷键）。另一个为信号与槽。\n>\n> 注：信号与槽是最Qt制作ui界面中最重要的机制。\n\n创建槽函数：在信号与槽编辑框中点击加号创建信号与槽，然后选择信号的发送对象、发送信号量、槽、响应函数。此处的创建**只支持内定的槽函数**，想要自定义槽函数，需在右侧对象中找到对象，然后右键选择转到槽，接下来选择信号量之后，Qt会跳转该ui文件对应的cpp文件下，并自动创建一个该槽函数的实现（.h文件中也会自动添加声明）。接下来只需在此槽函数中编写发送信号后（触发信号发送条件），所需只需的步骤即可。\n\n> 信号量是Qt类自带的属性，某个类既有自己的属性，也有继承而来的属性。如pushButton组件继承自QAbstractButton，后者又继承自QWidget，后者又继承自QObject。对于QAbstractButton，其自带的信号有`clicked()`,`pressed()`等，对于QWidget，有`windowIconChanged`等。具体解释请参考官方文档。\n\n`设计`界面支持大量的属性设置，如字体，背景等。并且可以直接在ui界面中即时显示，但并不推荐直接做修改。\n\n一种渲染方式：Qt提供了qss来进行类似css的样式渲染，只需选中对象然后右键改变样式表，修改某个组件的样式表即可。Qss还提供了选择器的功能，因此，只需在某个较大的组件中设置样式表，并对不同的渲染对象进行选择即可。本方案一开始的办法就是在centralwidget组件中设置样式表，完成了酷炫的按键风格。需要注意的是，改变样式表的方法在Qt中是存在一定问题的，并且，**任何写死的方法都可能在以后要修改时造成麻烦**。关于样式表后面还会再进一步设定。\n\n## 模拟按键\n\n一个计算器应当提供一系列的按键，因此要在栅格布局中拖入一定数量的按键。按键分为输入按键和功能按键。\n\n- 输入按键：0123456789ABCDEF+-*/（）\n- 功能按键：<- -> DEL CE UP DOWN =\n\n对于输入按键，按下按键后应当在输入框中显示对应的输入，同时这些按键应当有对应的键盘输入。\n\n对于输出按键，左移和右移是为了移动输入框中的光标。DEL清除一个字符，CE要同时清除输入和输出框。UP和DOWN提供了查看历史功能。等号是整个计算器的核心功能，按下等号后，应当读取输入框中的算式，进行计算后将结果字符串返回至输出框中。\n\n通过在组件上右键选择 转到槽 可以快捷创建槽函数。示例如图：\n\n```cpp\n//mainwindow.h\nvoid MainWindow::on_pushButton_left_bracket_clicked();\n//mainwindow.cpp\nvoid MainWindow::on_pushButton_left_bracket_clicked() {\n  ui->textBrowser_input->setFocus();\n  ui->textBrowser_input->insertPlainText(\"(\");\n}\n```\n\n手动创建几个后，就可以发现其规矩。一个槽函数的名称由`on_name_action`组成。`pushButton_left_bracket`是改按键的名称，这个名称需要在ui文件中指定，当拖动pushButton的时候，qt会按照12345依次给其一个默认名称，并且上面的默认文字都是pushButton。因此对于声明，可以用宏生成。\n\n```cpp\n//mainwindwo.h\n#define clicked_func(name) void on_pushButton_##name##_clicked();\n  clicked_func(0);\n  clicked_func(1);\n  clicked_func(2);\n  clicked_func(3);\n//...\n#define triggered_func(name) void on_action##name##_triggered();\n\n  triggered_func(Author);\n  triggered_func(Save) triggered_func(Read);\n  triggered_func(History_location);\n  triggered_func(Auto_Save);\n```\n\n对于实现，部分直接输入的槽函数也可以用宏生成\n\n```cpp\n//mainwindow.cpp\n#define set_insert_func(name)                         \\\n  void MainWindow::on_pushButton_##name##_clicked() { \\\n    ui->textBrowser_input->setFocus();                \\\n    ui->textBrowser_input->insertPlainText(#name);    \\\n  }\n\nset_insert_func(0);\nset_insert_func(1);\nset_insert_func(2);\nset_insert_func(3);\nset_insert_func(4);\n```\n\n剩下的就只能自己写咯。\n\n## 输入输出框\n\nqt为用户提供了`text Browser`,`text Edit`,`Plain text edit`,`line edit`等组件作为文本框。这里选择了text Browser，目的是屏蔽直接复制粘贴输入，防止非法字符进入。结果后面发现`text Browser`是由`text Edit`继承而来，因此browser也可以提供输入功能（离谱，read Only属性。\n\n所有的输入按键都将在输入框中插入一个对应的字符。这里只需要调用`text Browser`类中自带的public function member：`insertPlainText(QString)`。\n\n*问题*：文本框中的光标只有在选中文本框时才会显示，如果使用鼠标点击按键进行输入，输入框中的光标实际仍然存在但不显示。\n\n- 为了使得光标时刻存在，这里使用了一个简单粗暴的方法，为所有按键功能加上`setFocus()`。从而保证焦点始终在输入框中。\n\n对于输出框，每次显示结果都是更新所有内容（而不是插入），因此需要`setPlainText`。\n\n## 等号\n\n等号按键是计算器最核心的按键，以下为等号按键的槽函数\n\n```cpp\n//mainwindow.cpp\nvoid MainWindow::on_pushButton_equal_clicked() {\n  ui->textBrowser_input->setFocus();\n\n  Location::isRead = 0;\n\n  QString s = ui->textBrowser_input->toPlainText();\n  QString rst = parser(s);\n  ui->textBrowser_output->setPlainText(rst);\n  if (Location::autoSave) {\n    save(Location::filePath, s, rst);\n  }\n}\n```\n\n按下等号后，程序首先保证焦点仍然在输入框口上，然后讲是否正在读取历史记录按键设置为0（这讲在后面的历史记录读取中说到），然后获取输入框中的内容，交给由竞赛大佬@龚程昊编写的parser函数进行处理（这将在后面数据处理中说到），然后将parser函数返回的字符串（QString）显示到输出框中，然后在自动保存功能开启的情况下，保存至本地文件中。\n\n## 数据处理\n\n等会儿copy大佬写的东西，大致思路是使用栈和转化为前缀表达式。\n\n但大佬使用的使用的是std库，并且是作为一个单独的cpp程序书写的（方便调试）。因此，这里将源文件复制到parser文件中，并将main函数改写成接受`QString`作为参数，返回`QString`的parser()函数。这里用到了`QString::toStdString`和`QString::fromStdString`。\n\n记录几个当时测试出来的bug：\n\n1. 只写一个数后按等号，直接返回0\n2. 没有考虑负数\n3. 没有考虑溢出\n\n附上代码\n\n```cpp\n//parser.cpp\n#include \"parser.h\"\n\nusing namespace std;\n\nbool pd(char i) {\n  if ((i <= 57 && i >= 48) || (i >= 65 && i <= 70)) return 0;\n  return 1;\n}\n\nint pri(char i)  // priority\n{\n  if (i == '+' || i == '-') return 1;\n  if (i == '*' || i == '/') return 2;\n  if (i == '(') return 0;\n  if (i == ')') return -1;\n  return 255;\n}\nbool judge(char i)  //乱码\n{\n  if ((i <= 57 && i >= 48) || (i >= 65 && i <= 70) || i == '+' || i == '-' ||\n      i == '*' || i == '/' || i == '(' || i == ')') {\n    return 0;\n  }\n  return 1;\n}\n\nQString parser(QString expression) {\n  using namespace std;\n  const int N = 1007;\n  const long R = LONG_MAX;\n  char s[N], stack1[N];\n  long read[N], sta[N], stack2[N], stt[N];\n  bool f[N] = {0}, flag[N] = {0}, ff = 0, fff = 0;\n  string c, sc;\n  string str, as = expression.toStdString();\n  str = \"0+\" + as;\n  int l = str.length();\n  for (int i = 0; i < l; i++) {\n    s[i] = str[i];\n    if (judge(s[i])) {\n      ff = 1;\n    }\n    if (s[i] == '(' && (s[i + 1] == '*' || s[i + 1] == '/')) ff = 1;\n    if (s[i] == ')' && (s[i - 1] == '+' || s[i - 1] == '-' || s[i - 1] == '*' ||\n                        s[i - 1] == '/'))\n      ff = 1;\n  }\n  if (pd(s[l - 1]) && s[l - 1] != ')') ff = 1;\n  int st = 0;\n  for (int i = 0; i < l; i++)  //括号是否匹配\n  {\n    if (s[i] == '(') st++;\n    if (s[i] == ')') st--;\n  }\n  if (st != 0) ff = 1;\n  int j = 0, k = 0, m = 0;\n  while (j < l && ff == 0) {\n    if (!pd(s[j]))  //数字\n    {\n      if (s[j] <= 57 && s[j] >= 48) {\n        sta[k] = s[j] - 48;\n        j++;\n        k++;\n      } else if (s[j] >= 65 && s[j] <= 70) {\n        sta[k] = s[j] - 55;\n        j++;\n        k++;\n      }\n    } else if (pd(s[j]))  //符号\n    {\n      if (!pd(s[j - 1]) && j > 0)  //前面的数字\n      {\n        int cnt = 0;\n        char c = s[j];\n        for (int h = 0; k > 0; h++) {\n          cnt += sta[k - 1] * pow(16, h);\n          k--;\n        }\n        read[m] = cnt;\n        m++;\n        j++;\n        read[m] = c;\n        f[m] = 1;\n        m++;\n\n      } else {  //前面的符号\n        char c = s[j];\n        read[m] = c;\n        f[m] = 1;\n        m++;\n        j++;\n      }\n    }\n  }\n  if (!pd(s[l - 1]))  //数字\n  {\n    if (k > 9) {\n      return \"Detect Overflow\";\n    }\n    int cnt = 0;\n    for (int h = 0; k > 0; h++) {\n      cnt += sta[k - 1] * pow(16, h);\n      if (cnt > R) return \"Detect Overflow\";\n      k--;\n    }\n    read[m] = cnt;\n    m++;\n    j++;\n  }\n  for (int i = 0; i < m - 1; i++) {\n    if (i == 1) {\n      if (f[i] == 1 && f[i + 1] == 1 && pri(read[i]) >= 1 &&\n          pri(read[i + 1]) == 2) {\n        ff = 1;\n      }\n    } else if (f[i] == 1 && f[i + 1] == 1 && pri(read[i]) >= 1 &&\n               pri(read[i + 1]) >= 1) {\n      ff = 1;\n    }\n  }\n  int a = 0, b = 0;  //反缀表达式\n  for (int i = 0; i < m; i++) {\n    if (f[i] == 0) {\n      stack2[a] = read[i];\n      a++;\n    } else if (f[i] == 1) {\n      if (read[i] == '(') {\n        stack1[b] = '(';\n        b++;\n      } else if (pri(read[i]) == 1)  //+-\n      {\n        while (pri(stack1[b - 1]) >= 1 && b > 0) {\n          stack2[a] = stack1[b - 1];\n          flag[a] = 1;\n          b--;\n          a++;\n        }\n        stack1[b] = read[i];\n        b++;\n      } else if (pri(read[i]) == 2)  //*/\n      {\n        while (pri(stack1[b - 1]) == 2 && b > 0) {\n          stack2[a] = stack1[b - 1];\n          flag[a] = 1;\n          b--;\n          a++;\n        }\n        stack1[b] = read[i];\n        b++;\n      } else if (read[i] == ')') {\n        while (stack1[b - 1] != '(') {\n          stack2[a] = stack1[b - 1];\n          flag[a] = 1;\n          b--;\n          a++;\n        }\n        b--;\n      }\n    }\n  }\n  while (b > 0) {\n    stack2[a] = stack1[b - 1];\n    flag[a] = 1;\n    a++;\n    b--;\n  }\n  // calculation\n  int g = 0, cn = 0;\n  for (int i = 0; i < a; i++) {\n    if (!flag[i])  //数字\n    {\n      stt[g] = stack2[i];\n      g++;\n    } else if (flag[i])  //符号\n    {\n      switch (stack2[i]) {\n        case '+':\n          cn = stt[g - 2] + stt[g - 1];\n          if (cn > R) ff = 1;\n          break;\n        case '-':\n          cn = stt[g - 2] - stt[g - 1];\n          if (cn < -R) ff = 1;\n          break;\n        case '*':\n          cn = stt[g - 2] * stt[g - 1];\n          if (cn > R || cn < -R) ff = 1;\n          break;\n        case '/':\n          if (stt[g - 1] != 0) {\n            cn = stt[g - 2] / stt[g - 1];\n            break;\n          } else if (stt[g - 1] == 0) {\n            ff = 1;\n            break;\n          }\n      }\n      g -= 2;\n      stt[g] = cn;\n      g++;\n    }\n  }\n  int x;\n  int cnn = cn;\n  if (cn == 0 && !ff) {\n    //        cout<<str<<\"=\"<<cn<<endl;\n    return \"0\";\n    fff = 1;\n  }\n  while (cn != 0 && !ff)  //转十六进制\n  {\n    if (cn >= 0) {\n      x = cn % 16;\n      if (x < 10)\n        c = x + '0';\n      else\n        c = x + 'A' - 10;\n      sc = c + sc;\n      cn /= 16;\n    } else if (cn <= 0) {\n      x = cn % 16;\n      if (x > -10)\n        c = -x + '0';\n      else\n        c = -x + 'A' - 10;\n      sc = c + sc;\n      cn /= 16;\n    }\n  }\n  if (cnn < 0) {\n    sc = '-' + sc;\n  }\n  if (!ff && !fff) {\n    //        cout<<as<<\"=\";\n    //        cout<<sc<<endl;\n    if (sc == \"-80000000\") {\n      return \"Detect Overflow\";\n    }\n    return QString::fromStdString(sc);\n  }\n  return \"Formula Error\";\n}\n\n```\n\n贴代码的时候才发现大佬写了一个pd（判断）和一个judge（还是判断）。算了算了，能用就行（\n\n## 历史记录\n\n如果只是作为计算器，以上功能就已经可以算完成了。但大多数计算器都是有历史记录功能的，因此这个计算器也该有一个。\n\n这里将历史记录分为底层和顶层两部分来设计，顶层使用Qt框架，而底层使用c的基本库，从而实现更加原子化和方便的操作。\n\n顶层实现的用户接口功能：\n\n- 手动保存当前结果\n- 选择是否自动保存结果\n- 选择保存位置\n- 读取历史记录\n\n底层实现的文本的读写功能\n\n- 获取时间\n- 记录结果\n- 写入和读取\n\n### 底层设计细节\n\n保存功能被设计为，获取当前时间和本次运算的算式和结果，以新行的方式追加到某文件的结尾。保存功能的底层设计都被保存在`saving`文件下。\n\n为此底层使用std库设计了`save()`函数。该函数还调用了`getCurrentTime()`来获取当前时间。当然，这个函数也是由`main()`函数修改而来，由std框架接入了qt框架。源码如下：\n\n```cpp\n//saving.cpp\nstatic string getCurrentTime()  //输出当前时间\n{\n  time_t t = time(0);\n  char ch[64] = {0};\n  strftime(ch, sizeof(ch) - 1, \"%Y-%m-%d %H:%M:%S\", localtime(&t));\n  return ch;\n}\nbool save(QString location, QString fomula, QString data) {\n  string addr = location.toStdString();\n  fstream f;\n  f.open(addr, ios::out | ios::app);\n  f << getCurrentTime() << \" \" << fomula.toStdString() << \"=\"\n    << data.toStdString()\n    << endl;  //变量addr、以及gch的等式和输出结果变量还需加进去\n  f.close();\n  return 1;\n}\n```\n\n除了保存结果外，还需要读取结果，读取结果需要始终从最后一行开始往上读。经历了一系列讨论之后，本项目决定使用读取整个文件来获取所有的行数，并根据行数来获取内容。为此有了`CountLine()`和`readLine()`两个函数：\n\n```cpp\nint CountLines(QString filename) {\n  ifstream f;\n  int n = 0;\n  string tmp;\n  string stdfilename = filename.toStdString();\n  // ios::in 表示以只读的方式读取文件\n  f.open(stdfilename, ios::in);\n  //文件打开失败:返回0\n  if (f.fail()) {\n    return 0;\n  } else {\n    //文件存在\n    while (getline(f, tmp, '\\n')) {\n      n++;\n    }\n    f.close();\n    return n;\n  }\n}\nQString ReadLine(QString filename, int line)  //读取指定行文件\n{\n  // line行数限制 1 - lines\n  if (line > 0 && line <= CountLines(filename)) {\n    ifstream f;\n    string stdfilename = filename.toStdString();\n    f.open(stdfilename, ios::in);\n\n    vector<string> strVec;\n    //行0 - 行lines对应strvect[0] - strvect[lines]\n    while (!f.eof()) {\n      string inbuf;\n      getline(f, inbuf, '\\n');\n      strVec.push_back(inbuf);\n    }\n    return QString::fromStdString(strVec[line - 1]);\n  } else {\n    return NULL;\n  }\n}\n```\n\n读取整个文件并计算行数并不是一个效率高的方式，但在文件不大和不追求高效率的条件下，这是最好的实践方式。因为考虑这里还需要考虑到连续读取历史文件。\n\n当用户按下`UP`按键时，表示用户开始读取历史文件。用户首先查看的应该是历史文件的最后一行，当用户再次按下`UP`时，读取倒数第二行，依次类推。为了实现该功能，这里使用了一个全局变量`line`表示当前正在读取的行数，该行数被初始化为历史记录的总行数。然后再次读取将会`--line`后读取。当用户按下`DOWN`按键时，++line后读取。\n\n这里就要考虑到另一个问题，读取一定历史记录后，用户重新进行计算，然后再次查看历史记录，这样行数应当从新的历史记录最后一行开始计算。为此，这里引入了`isRead`变量，该变量初始化为`0`，表示现在未在读取。首次按下`UP`按键时，该变量置`1`，同时将`line`变量初始化为当前历史记录行数。当用户按下`UP`或`DOWN`按键时，正常修改`line`变量的值并进行读取即可。当用户按下`=`或手动保存时，需要将`isRead`置零。这样下一次按下`UP`时，将重新读取历史文件行数并为`line`赋值。\n\n```cpp\n//mainwindow.cpp\n//等号的槽函数在上面\nvoid MainWindow::on_pushButton_Up_clicked() {\n  ui->textBrowser_input->setFocus();\n  if (Location::isRead) {\n    --Location::line;\n  } else {\n    Location::line = CountLines(Location::filePath);\n    Location::isRead = 1;\n  }\n  ui->textBrowser_output->setText(ReadLine(Location::filePath, Location::line));\n}\nvoid MainWindow::on_pushButton_Down_clicked() {\n  ui->textBrowser_input->setFocus();\n  if (Location::isRead) {\n    ++Location::line;\n  }\n  ui->textBrowser_output->setText(ReadLine(Location::filePath, Location::line));\n}\n```\n\n保存和读取的路径将在`顶层设计细节`中进一步讨论。\n\n### 顶层设计细节\n\n这里在menubar中设置了一个`history location`按键，用于修改历史文件的存放位置。当按下此按键时，程序应当打开一个新的窗口，因此，需要首先在源文件中创建一个新的窗口。右键点击`项目`，选择`add new`，选择`qt设计师类`，然后会分别在三个文件夹中依次得到头文件、源文件、ui设计文件。然后需要在主窗口中设置点击`history location`按键打开新窗口。\n\n```cpp\n//mainwindow.cpp\nvoid MainWindow::on_actionHistory_location_triggered() {\n  Location *new_win = new Location();\n  new_win->show();\n}\n```\n\n**注意**：记得在`mainwindow.h`中include`location.h`，按下打开新窗口实际上就是创建一个新的Location窗口，然后展示。\n\n接下来就是在`location.ui`中修改和设计可视化窗口，此项目使用了栅格布局，在左侧设置了一个较大的`textBrowser`和较小的`lineEdit`（设为不可修改，用于给出提示），在右侧依次设置了`选择文件`，`选择文件夹`，`确定`，`取消` 四个按键。\n\n> 选择文件：调用Qt库，打开系统默认的文件选择框，设置必须选择.txt格式结尾的文件，将返回的结果输出至`textBrowser`。\n>\n> 选择文件夹：同上，但是选择的是文件夹，并且返回的是存在的文件夹的路径，将返回的结果加上`/result.txt`后输入至`textBrowser`。\n>\n> 确定：按下后，读取`textBrowser`中的路径，检查其合法性（因为一开始`textBrowser`设置了可以直接更改，因此可能会输入奇怪的路径），若不合法则在`lineEdit`中给出相应的报错（格式不合法或路径不合法）。若合法，则检查文件是否存在，不存在则创建。当一切都合理以后，将全局变量`filePath`设为文本框中的内容，并关闭`Location`窗口。\n>\n> 取消：直接关闭，不做任何修改。\n\n```cpp\n//location.cpp\nvoid Location::on_pushButton_path_clicked() {\n  QString file_name =\n      QFileDialog::getOpenFileName(NULL, \"选择txt文件\", \".\", \"*.txt\");\n  ui->textEdit->setText(file_name);\n}\n\nvoid Location::on_pushButton_dir_clicked() {\n  QString dir_name = QFileDialog::getExistingDirectory(NULL, \"选择文件夹\", \".\");\n  ui->textEdit->setText(dir_name + \"/result.txt\");\n}\n\nvoid Location::on_pushButton_cancel_clicked() { Location::close(); }\n\nvoid Location::on_pushButton_sure_clicked() {\n  QString new_path = ui->textEdit->toPlainText();\n  QFileInfo info(new_path);\n\n  if (!info.exists()) {\n    if (new_path.contains(\".txt\")) {\n      QFile f(new_path);\n      f.open(QIODevice::WriteOnly);\n      f.close();\n    } else {\n      ui->prompt->setText(\"路径或格式不合法，请重新输入\");\n    }\n  }\n  Location::filePath=new_path;\n  Location::close();\n}\n```\n\n自动保存功能被设计为主窗口中菜单栏中的一个按键，默认为开启状态，显示为`Auto Save On`，当点击该按键后，槽函数将该文本替换为`Auto Save Off`，并将全局变量`autoSave`置零。\n\n`filePath`和`autoSave`以及底层中的`isRead`和`line`都设计为一个全局变量，便于主窗口调用。\n\n```cpp\n//location.h\nclass Location : public QDialog {\n public:\n  static QString filePath;\n  static int line;\n  static bool isRead;\n  static bool autoSave;\n}\n\n//location.cpp\nQString Location::filePath = \"result.txt\";\nint Location::line = 0;\nbool Location::isRead = 0;\nbool Location::autoSave = 1;\n```\n\n在主窗口中，只有用户按下等号（并且自动保存功能开启）或手动保存（在`menubar`中设置了一个保存按键并且设置了快捷键）时，才会保存。因此只需在这些地方加入`save()`函数即可。当然，也要有对`autoSave`的判断。\n\n## 样式设定\n\n前面提到了可以在`ui`文件中直接修改样式，但这种方式并不利于后面的修改，因此我们选择直接调用函数的方式。如要为`centralWidget`设定样式，可以调用`setStyelSheet()`，后接一个QString，该字符串中直接书写qss内容。\n\n这里选择了另一种方式，使用qt的资源文件管理功能来存储单独的qss文件，然后以前缀引用的方式来调用这些文件。\n\n在`项目`中右键新建`qt resource file`，设定名称后打开管理界面，点击添加前缀`add prefix`。然后添加文件`add Files`。前缀决定了调用的方式（将会在源代码中演示）。文件可以新建一个`general file`后添加，也可以将其他方式创建的qss文件加入。\n\n引入的资源可以以`QFile`的方式引用。本项目在菜单栏中添加了一个黑色主题的选项，其槽函数如下\n\n```cpp\nvoid MainWindow::on_actionBlack_theme_triggered() {\n  globalQss = \":/Black.qss\";\n  QFile defaultQss(globalQss);\n  defaultQss.open(QFile::ReadOnly);\n  QString qssContent = defaultQss.readAll();\n  centralWidget()->setStyleSheet(qssContent);\n}\n```\n\n`/`为我设定的前缀，只需以冒号开头，加上前缀和文件，即表明在应用qt指定好的资源文件。接下来就只需打开该文件并读取其内容，然后为需要的组件设定qss样式即可。\n\n**注意**：使用qss的一些麻烦：后面我希望能设定字体的大小、样式等，但这时通过`setFont()`等函数并不起作用。原因估计是qss的优先级很高，直接设定将不起作用。这时我只能再写一个`changeStyle()`函数，通过qss样式表更新来进行样式更新\n\n```cpp\nvoid MainWindow::changeStyle(QString newStyle, QWidget *widget) {\n  QString oldStyle = widget->styleSheet();\n  oldStyle += newStyle;\n  widget->setStyleSheet(oldStyle);\n}\n```\n\n所以这里我只写了改变字体的函数。\n\n```cpp\nvoid MainWindow::on_actionLarge_font_size_triggered() {\n  changeStyle(\"*{font:30px;}\", MainWindow::centralWidget());\n}\n```\n\n## 保存设置\n\n类似于文件的保存位置，是否自动保存等功能，每次重新启动程序后都会按照程序的设定重新初始化。为了使得这些设定能被保存下来，需要使用一个文件将这些配置保存下来。恰好最近见到了许多`ini`格式文件，qt也提供了`QSetting`及配套的`ini`配置文件读写。\n\n配置文件应当在主窗口创建时被读取，在主窗口被销毁时被存入。因此只需在`mainwindow`的构造函数和析构函数中加入读写`ini`文件的步骤即可。需要注意的是，要考虑`ini`文件不存在的情况，不存在时需要使用程序的内置设定。\n\n ```cpp\n MainWindow::MainWindow(QWidget *parent)\n     : QMainWindow(parent), ui(new Ui::MainWindow) {\n   ui->setupUi(this);\n \n   this->grabKeyboard();\n \n   QSettings *iniRead = new QSettings(\"config.ini\", QSettings::IniFormat);\n   QString iniAuto = iniRead->value(\"autoSave\").toString();\n   QString iniPath = iniRead->value(\"filePath\").toString();\n   QString iniQss = iniRead->value(\"globalQss\").toString();\n   delete iniRead;\n \n   // init autoSave\n   if (!iniAuto.isEmpty() && !iniAuto.toInt()) {\n     Location::autoSave = 0;\n     ui->actionAuto_Save->setText(\"Auto Save Off\");\n   }\n \n   // init filePath\n   QFile iniPathFile(iniPath);\n   if (iniPathFile.open(QFile::WriteOnly)) {\n     Location::filePath = iniPath;\n   }\n \n   // init Qss file(theme)\n   QFile iniQssFile(iniQss);\n   QString qssContent;\n   if (iniQssFile.open(QFile::ReadOnly)) {\n     qssContent = iniQssFile.readAll();\n     globalQss = iniQss;\n   } else {\n     QFile defaultQss(\":/Black.qss\");\n     defaultQss.open(QFile::ReadOnly);\n     qssContent = defaultQss.readAll();\n   }\n   centralWidget()->setStyleSheet(qssContent);\n }\n \n MainWindow::~MainWindow() {\n   QSettings *IniWrite = new QSettings(\"config.ini\", QSettings::IniFormat);\n   IniWrite->setValue(\"autoSave\", Location::autoSave);\n   IniWrite->setValue(\"filePath\", Location::filePath);\n   IniWrite->setValue(\"globalQss\", globalQss);\n   delete IniWrite;\n \n   delete ui;\n }\n \n ```\n\n## 其他\n\n- 在主函数中为整个窗口设置了透明度，让它看起来酷炫一点点。\n- 在主函数中为窗口设定名称。\n- 在`.pro`文件中加入图标文件，使得生成的程序有图标\n\n# 感想\n\n## 收获\n\n- 不再害怕qt框架了，反而觉得它好用。\n- qt的窗口类很舒服，有清晰且层次分明的关系，有足够好用的成员函数。\n- qt的基本库也有不少可以讨论的，如QString的设计，不仅提供了基本的可变长度和操作符重载，还考虑到了和std库之间的转换。\n- qt的信号与槽机制是qt最精髓的东西之一，信号是一种非常不错的线程间通信方式，很遗憾我没有手动使用connect函数来创建信号与槽。但确实在写qt的过程中，qtcreator已经为我提供了足够的可视化信号与槽构建工具。\n- qss基本等于css\n- qt以易于制作ui界面出名，但用了之后发现，qt实际上是借鉴了很多现代浏览器（前端）的实现方式。我写的时候感觉自己像是在写js+css。对于一个web项目来说，前端工程师书写html，css，以及利用框架来写js。后端工程师则使用各种工具来构建web服务。但对于qt这样一种前后结合的一体化程序设计框架来说，前后的分离并不彻底（虽然对硬件工程师来说可能会很友好）。\n- 我还是支持“qt是一个平台而不只是一个ui框架”这种说法。qt在基本库中的内容一点也不比它在ui界面中的少。无论是基本库还是ui库，都有很多可以研究的东西。\n- 宏的自动扩展确实好用\n- qt毕竟还是封装的比较高层了，要是需要一些简单的功能，还是老老实实写原生的c和std吧。\n\n## 遗憾\n\n- 大佬说他使用了前缀表达式，求余和翻方功能不好实现，我懂的算法也不多，这两个功能没能实现。只能说算法能力有待提高了。\n","source":"_posts/Project/0xCalculator.md","raw":"---\ntitle: 0xCalculator 16进制计算器\ncategories:\n  - Project\ntags:\n  - cpp\nabbrlink: 9bb627a\ndate: 2021-11-28 17:31:31\n---\n\n# 功能\n\n1. 对十六进制数进行双目、表达式运算\n2. 对运算结果进行保存和再读取，支持自动保存和手动保存\n3. 自定义运算结果储存位置\n4. 自定义字体大小\n5. 可更换窗口风格（换肤）\n6. 自动保存设置\n\n# 任务分配\n\n1. ：ui设计与qt框架\n2. ：核心算法\n3. ：文件读写\n\n# 开源地址\n<https://github.com/kawhicurry/0xCalculator>\n\n# 开发过程\n\n## Qt框架\n\nqt文件将会以平铺的方式放置在同一工程目录下，其组织结构由`.pro`文件记录，该文件类似于makefile（可以看作是qmakefile？）。其标准目录如下：\n\n> .pro：记录文件\n>\n> /Headers：略\n>\n> /Sources：略\n>\n> /Forms：存放`.ui`文件，实际为`xml`格式，但不建议直接编辑，所有操作应当在设计模块中完成\n>\n> /Resources：存放qt标准资源（可以qt方式引用的资源）\n>\n> /Other files\n\n## UI设计\n\n直接在qt creator的设计界面中打开`设计`模块。从画面左侧拖动组件，摆放至设计框中即可。\n\n*问题*：组件散乱\n\n- 左侧组件库中有`layout`组件,将其拖动至设计框中,再向layout中添加组件，即可使所有组件呈现一定规律。\n\n>布局类型：\n>\n>垂直：略\n>\n>水平：略\n>\n>栅格（grid）：上面俩合起来\n>\n>窗口：？存疑，不是很能理解这是啥\n\n*问题*：使用layout组件后无法布局固定，启动ui界面后拖动窗口改变其大小，layout组件位置不动。\n\n- 应当首先在右侧`对象`框中选中主窗口（mainwindow）中的中间部件（centralwidget），右键选择布局，为整个中间部分设定大的布局，（注：主窗口除了中间部件还初始化了一个菜单栏（menubar）），然后在该布局中嵌套布局或组件。本方案选择了栅格布局，虽然只需垂直布局即可，但为了可拓展性，还是选择栅格。接下来在整个中间部分的栅格布局中，嵌套了一个垂直布局（用于输入和输出）和一个栅格布局（用于存放按键）。\n\n接下来在主窗口中添加所需的组件，分别为输入框、输出框、5*6个按键。然后可以对其属性进行可视化的设计，以下是对`设计`界面中一些工具的解释：\n\n> 右侧下方为属性框，显示了所选定组件的属性，每个组件都是层层继承而来，因此要注意每一层的具体属性以及继承关系。\n>\n> 右侧上方为对象框，显示了当前ui文件中所有文件属性。\n>\n> 正中央下方的框实际上有两个可编辑区域，一个为action editor，即为组件添加动作（可方便设置快捷键）。另一个为信号与槽。\n>\n> 注：信号与槽是最Qt制作ui界面中最重要的机制。\n\n创建槽函数：在信号与槽编辑框中点击加号创建信号与槽，然后选择信号的发送对象、发送信号量、槽、响应函数。此处的创建**只支持内定的槽函数**，想要自定义槽函数，需在右侧对象中找到对象，然后右键选择转到槽，接下来选择信号量之后，Qt会跳转该ui文件对应的cpp文件下，并自动创建一个该槽函数的实现（.h文件中也会自动添加声明）。接下来只需在此槽函数中编写发送信号后（触发信号发送条件），所需只需的步骤即可。\n\n> 信号量是Qt类自带的属性，某个类既有自己的属性，也有继承而来的属性。如pushButton组件继承自QAbstractButton，后者又继承自QWidget，后者又继承自QObject。对于QAbstractButton，其自带的信号有`clicked()`,`pressed()`等，对于QWidget，有`windowIconChanged`等。具体解释请参考官方文档。\n\n`设计`界面支持大量的属性设置，如字体，背景等。并且可以直接在ui界面中即时显示，但并不推荐直接做修改。\n\n一种渲染方式：Qt提供了qss来进行类似css的样式渲染，只需选中对象然后右键改变样式表，修改某个组件的样式表即可。Qss还提供了选择器的功能，因此，只需在某个较大的组件中设置样式表，并对不同的渲染对象进行选择即可。本方案一开始的办法就是在centralwidget组件中设置样式表，完成了酷炫的按键风格。需要注意的是，改变样式表的方法在Qt中是存在一定问题的，并且，**任何写死的方法都可能在以后要修改时造成麻烦**。关于样式表后面还会再进一步设定。\n\n## 模拟按键\n\n一个计算器应当提供一系列的按键，因此要在栅格布局中拖入一定数量的按键。按键分为输入按键和功能按键。\n\n- 输入按键：0123456789ABCDEF+-*/（）\n- 功能按键：<- -> DEL CE UP DOWN =\n\n对于输入按键，按下按键后应当在输入框中显示对应的输入，同时这些按键应当有对应的键盘输入。\n\n对于输出按键，左移和右移是为了移动输入框中的光标。DEL清除一个字符，CE要同时清除输入和输出框。UP和DOWN提供了查看历史功能。等号是整个计算器的核心功能，按下等号后，应当读取输入框中的算式，进行计算后将结果字符串返回至输出框中。\n\n通过在组件上右键选择 转到槽 可以快捷创建槽函数。示例如图：\n\n```cpp\n//mainwindow.h\nvoid MainWindow::on_pushButton_left_bracket_clicked();\n//mainwindow.cpp\nvoid MainWindow::on_pushButton_left_bracket_clicked() {\n  ui->textBrowser_input->setFocus();\n  ui->textBrowser_input->insertPlainText(\"(\");\n}\n```\n\n手动创建几个后，就可以发现其规矩。一个槽函数的名称由`on_name_action`组成。`pushButton_left_bracket`是改按键的名称，这个名称需要在ui文件中指定，当拖动pushButton的时候，qt会按照12345依次给其一个默认名称，并且上面的默认文字都是pushButton。因此对于声明，可以用宏生成。\n\n```cpp\n//mainwindwo.h\n#define clicked_func(name) void on_pushButton_##name##_clicked();\n  clicked_func(0);\n  clicked_func(1);\n  clicked_func(2);\n  clicked_func(3);\n//...\n#define triggered_func(name) void on_action##name##_triggered();\n\n  triggered_func(Author);\n  triggered_func(Save) triggered_func(Read);\n  triggered_func(History_location);\n  triggered_func(Auto_Save);\n```\n\n对于实现，部分直接输入的槽函数也可以用宏生成\n\n```cpp\n//mainwindow.cpp\n#define set_insert_func(name)                         \\\n  void MainWindow::on_pushButton_##name##_clicked() { \\\n    ui->textBrowser_input->setFocus();                \\\n    ui->textBrowser_input->insertPlainText(#name);    \\\n  }\n\nset_insert_func(0);\nset_insert_func(1);\nset_insert_func(2);\nset_insert_func(3);\nset_insert_func(4);\n```\n\n剩下的就只能自己写咯。\n\n## 输入输出框\n\nqt为用户提供了`text Browser`,`text Edit`,`Plain text edit`,`line edit`等组件作为文本框。这里选择了text Browser，目的是屏蔽直接复制粘贴输入，防止非法字符进入。结果后面发现`text Browser`是由`text Edit`继承而来，因此browser也可以提供输入功能（离谱，read Only属性。\n\n所有的输入按键都将在输入框中插入一个对应的字符。这里只需要调用`text Browser`类中自带的public function member：`insertPlainText(QString)`。\n\n*问题*：文本框中的光标只有在选中文本框时才会显示，如果使用鼠标点击按键进行输入，输入框中的光标实际仍然存在但不显示。\n\n- 为了使得光标时刻存在，这里使用了一个简单粗暴的方法，为所有按键功能加上`setFocus()`。从而保证焦点始终在输入框中。\n\n对于输出框，每次显示结果都是更新所有内容（而不是插入），因此需要`setPlainText`。\n\n## 等号\n\n等号按键是计算器最核心的按键，以下为等号按键的槽函数\n\n```cpp\n//mainwindow.cpp\nvoid MainWindow::on_pushButton_equal_clicked() {\n  ui->textBrowser_input->setFocus();\n\n  Location::isRead = 0;\n\n  QString s = ui->textBrowser_input->toPlainText();\n  QString rst = parser(s);\n  ui->textBrowser_output->setPlainText(rst);\n  if (Location::autoSave) {\n    save(Location::filePath, s, rst);\n  }\n}\n```\n\n按下等号后，程序首先保证焦点仍然在输入框口上，然后讲是否正在读取历史记录按键设置为0（这讲在后面的历史记录读取中说到），然后获取输入框中的内容，交给由竞赛大佬@龚程昊编写的parser函数进行处理（这将在后面数据处理中说到），然后将parser函数返回的字符串（QString）显示到输出框中，然后在自动保存功能开启的情况下，保存至本地文件中。\n\n## 数据处理\n\n等会儿copy大佬写的东西，大致思路是使用栈和转化为前缀表达式。\n\n但大佬使用的使用的是std库，并且是作为一个单独的cpp程序书写的（方便调试）。因此，这里将源文件复制到parser文件中，并将main函数改写成接受`QString`作为参数，返回`QString`的parser()函数。这里用到了`QString::toStdString`和`QString::fromStdString`。\n\n记录几个当时测试出来的bug：\n\n1. 只写一个数后按等号，直接返回0\n2. 没有考虑负数\n3. 没有考虑溢出\n\n附上代码\n\n```cpp\n//parser.cpp\n#include \"parser.h\"\n\nusing namespace std;\n\nbool pd(char i) {\n  if ((i <= 57 && i >= 48) || (i >= 65 && i <= 70)) return 0;\n  return 1;\n}\n\nint pri(char i)  // priority\n{\n  if (i == '+' || i == '-') return 1;\n  if (i == '*' || i == '/') return 2;\n  if (i == '(') return 0;\n  if (i == ')') return -1;\n  return 255;\n}\nbool judge(char i)  //乱码\n{\n  if ((i <= 57 && i >= 48) || (i >= 65 && i <= 70) || i == '+' || i == '-' ||\n      i == '*' || i == '/' || i == '(' || i == ')') {\n    return 0;\n  }\n  return 1;\n}\n\nQString parser(QString expression) {\n  using namespace std;\n  const int N = 1007;\n  const long R = LONG_MAX;\n  char s[N], stack1[N];\n  long read[N], sta[N], stack2[N], stt[N];\n  bool f[N] = {0}, flag[N] = {0}, ff = 0, fff = 0;\n  string c, sc;\n  string str, as = expression.toStdString();\n  str = \"0+\" + as;\n  int l = str.length();\n  for (int i = 0; i < l; i++) {\n    s[i] = str[i];\n    if (judge(s[i])) {\n      ff = 1;\n    }\n    if (s[i] == '(' && (s[i + 1] == '*' || s[i + 1] == '/')) ff = 1;\n    if (s[i] == ')' && (s[i - 1] == '+' || s[i - 1] == '-' || s[i - 1] == '*' ||\n                        s[i - 1] == '/'))\n      ff = 1;\n  }\n  if (pd(s[l - 1]) && s[l - 1] != ')') ff = 1;\n  int st = 0;\n  for (int i = 0; i < l; i++)  //括号是否匹配\n  {\n    if (s[i] == '(') st++;\n    if (s[i] == ')') st--;\n  }\n  if (st != 0) ff = 1;\n  int j = 0, k = 0, m = 0;\n  while (j < l && ff == 0) {\n    if (!pd(s[j]))  //数字\n    {\n      if (s[j] <= 57 && s[j] >= 48) {\n        sta[k] = s[j] - 48;\n        j++;\n        k++;\n      } else if (s[j] >= 65 && s[j] <= 70) {\n        sta[k] = s[j] - 55;\n        j++;\n        k++;\n      }\n    } else if (pd(s[j]))  //符号\n    {\n      if (!pd(s[j - 1]) && j > 0)  //前面的数字\n      {\n        int cnt = 0;\n        char c = s[j];\n        for (int h = 0; k > 0; h++) {\n          cnt += sta[k - 1] * pow(16, h);\n          k--;\n        }\n        read[m] = cnt;\n        m++;\n        j++;\n        read[m] = c;\n        f[m] = 1;\n        m++;\n\n      } else {  //前面的符号\n        char c = s[j];\n        read[m] = c;\n        f[m] = 1;\n        m++;\n        j++;\n      }\n    }\n  }\n  if (!pd(s[l - 1]))  //数字\n  {\n    if (k > 9) {\n      return \"Detect Overflow\";\n    }\n    int cnt = 0;\n    for (int h = 0; k > 0; h++) {\n      cnt += sta[k - 1] * pow(16, h);\n      if (cnt > R) return \"Detect Overflow\";\n      k--;\n    }\n    read[m] = cnt;\n    m++;\n    j++;\n  }\n  for (int i = 0; i < m - 1; i++) {\n    if (i == 1) {\n      if (f[i] == 1 && f[i + 1] == 1 && pri(read[i]) >= 1 &&\n          pri(read[i + 1]) == 2) {\n        ff = 1;\n      }\n    } else if (f[i] == 1 && f[i + 1] == 1 && pri(read[i]) >= 1 &&\n               pri(read[i + 1]) >= 1) {\n      ff = 1;\n    }\n  }\n  int a = 0, b = 0;  //反缀表达式\n  for (int i = 0; i < m; i++) {\n    if (f[i] == 0) {\n      stack2[a] = read[i];\n      a++;\n    } else if (f[i] == 1) {\n      if (read[i] == '(') {\n        stack1[b] = '(';\n        b++;\n      } else if (pri(read[i]) == 1)  //+-\n      {\n        while (pri(stack1[b - 1]) >= 1 && b > 0) {\n          stack2[a] = stack1[b - 1];\n          flag[a] = 1;\n          b--;\n          a++;\n        }\n        stack1[b] = read[i];\n        b++;\n      } else if (pri(read[i]) == 2)  //*/\n      {\n        while (pri(stack1[b - 1]) == 2 && b > 0) {\n          stack2[a] = stack1[b - 1];\n          flag[a] = 1;\n          b--;\n          a++;\n        }\n        stack1[b] = read[i];\n        b++;\n      } else if (read[i] == ')') {\n        while (stack1[b - 1] != '(') {\n          stack2[a] = stack1[b - 1];\n          flag[a] = 1;\n          b--;\n          a++;\n        }\n        b--;\n      }\n    }\n  }\n  while (b > 0) {\n    stack2[a] = stack1[b - 1];\n    flag[a] = 1;\n    a++;\n    b--;\n  }\n  // calculation\n  int g = 0, cn = 0;\n  for (int i = 0; i < a; i++) {\n    if (!flag[i])  //数字\n    {\n      stt[g] = stack2[i];\n      g++;\n    } else if (flag[i])  //符号\n    {\n      switch (stack2[i]) {\n        case '+':\n          cn = stt[g - 2] + stt[g - 1];\n          if (cn > R) ff = 1;\n          break;\n        case '-':\n          cn = stt[g - 2] - stt[g - 1];\n          if (cn < -R) ff = 1;\n          break;\n        case '*':\n          cn = stt[g - 2] * stt[g - 1];\n          if (cn > R || cn < -R) ff = 1;\n          break;\n        case '/':\n          if (stt[g - 1] != 0) {\n            cn = stt[g - 2] / stt[g - 1];\n            break;\n          } else if (stt[g - 1] == 0) {\n            ff = 1;\n            break;\n          }\n      }\n      g -= 2;\n      stt[g] = cn;\n      g++;\n    }\n  }\n  int x;\n  int cnn = cn;\n  if (cn == 0 && !ff) {\n    //        cout<<str<<\"=\"<<cn<<endl;\n    return \"0\";\n    fff = 1;\n  }\n  while (cn != 0 && !ff)  //转十六进制\n  {\n    if (cn >= 0) {\n      x = cn % 16;\n      if (x < 10)\n        c = x + '0';\n      else\n        c = x + 'A' - 10;\n      sc = c + sc;\n      cn /= 16;\n    } else if (cn <= 0) {\n      x = cn % 16;\n      if (x > -10)\n        c = -x + '0';\n      else\n        c = -x + 'A' - 10;\n      sc = c + sc;\n      cn /= 16;\n    }\n  }\n  if (cnn < 0) {\n    sc = '-' + sc;\n  }\n  if (!ff && !fff) {\n    //        cout<<as<<\"=\";\n    //        cout<<sc<<endl;\n    if (sc == \"-80000000\") {\n      return \"Detect Overflow\";\n    }\n    return QString::fromStdString(sc);\n  }\n  return \"Formula Error\";\n}\n\n```\n\n贴代码的时候才发现大佬写了一个pd（判断）和一个judge（还是判断）。算了算了，能用就行（\n\n## 历史记录\n\n如果只是作为计算器，以上功能就已经可以算完成了。但大多数计算器都是有历史记录功能的，因此这个计算器也该有一个。\n\n这里将历史记录分为底层和顶层两部分来设计，顶层使用Qt框架，而底层使用c的基本库，从而实现更加原子化和方便的操作。\n\n顶层实现的用户接口功能：\n\n- 手动保存当前结果\n- 选择是否自动保存结果\n- 选择保存位置\n- 读取历史记录\n\n底层实现的文本的读写功能\n\n- 获取时间\n- 记录结果\n- 写入和读取\n\n### 底层设计细节\n\n保存功能被设计为，获取当前时间和本次运算的算式和结果，以新行的方式追加到某文件的结尾。保存功能的底层设计都被保存在`saving`文件下。\n\n为此底层使用std库设计了`save()`函数。该函数还调用了`getCurrentTime()`来获取当前时间。当然，这个函数也是由`main()`函数修改而来，由std框架接入了qt框架。源码如下：\n\n```cpp\n//saving.cpp\nstatic string getCurrentTime()  //输出当前时间\n{\n  time_t t = time(0);\n  char ch[64] = {0};\n  strftime(ch, sizeof(ch) - 1, \"%Y-%m-%d %H:%M:%S\", localtime(&t));\n  return ch;\n}\nbool save(QString location, QString fomula, QString data) {\n  string addr = location.toStdString();\n  fstream f;\n  f.open(addr, ios::out | ios::app);\n  f << getCurrentTime() << \" \" << fomula.toStdString() << \"=\"\n    << data.toStdString()\n    << endl;  //变量addr、以及gch的等式和输出结果变量还需加进去\n  f.close();\n  return 1;\n}\n```\n\n除了保存结果外，还需要读取结果，读取结果需要始终从最后一行开始往上读。经历了一系列讨论之后，本项目决定使用读取整个文件来获取所有的行数，并根据行数来获取内容。为此有了`CountLine()`和`readLine()`两个函数：\n\n```cpp\nint CountLines(QString filename) {\n  ifstream f;\n  int n = 0;\n  string tmp;\n  string stdfilename = filename.toStdString();\n  // ios::in 表示以只读的方式读取文件\n  f.open(stdfilename, ios::in);\n  //文件打开失败:返回0\n  if (f.fail()) {\n    return 0;\n  } else {\n    //文件存在\n    while (getline(f, tmp, '\\n')) {\n      n++;\n    }\n    f.close();\n    return n;\n  }\n}\nQString ReadLine(QString filename, int line)  //读取指定行文件\n{\n  // line行数限制 1 - lines\n  if (line > 0 && line <= CountLines(filename)) {\n    ifstream f;\n    string stdfilename = filename.toStdString();\n    f.open(stdfilename, ios::in);\n\n    vector<string> strVec;\n    //行0 - 行lines对应strvect[0] - strvect[lines]\n    while (!f.eof()) {\n      string inbuf;\n      getline(f, inbuf, '\\n');\n      strVec.push_back(inbuf);\n    }\n    return QString::fromStdString(strVec[line - 1]);\n  } else {\n    return NULL;\n  }\n}\n```\n\n读取整个文件并计算行数并不是一个效率高的方式，但在文件不大和不追求高效率的条件下，这是最好的实践方式。因为考虑这里还需要考虑到连续读取历史文件。\n\n当用户按下`UP`按键时，表示用户开始读取历史文件。用户首先查看的应该是历史文件的最后一行，当用户再次按下`UP`时，读取倒数第二行，依次类推。为了实现该功能，这里使用了一个全局变量`line`表示当前正在读取的行数，该行数被初始化为历史记录的总行数。然后再次读取将会`--line`后读取。当用户按下`DOWN`按键时，++line后读取。\n\n这里就要考虑到另一个问题，读取一定历史记录后，用户重新进行计算，然后再次查看历史记录，这样行数应当从新的历史记录最后一行开始计算。为此，这里引入了`isRead`变量，该变量初始化为`0`，表示现在未在读取。首次按下`UP`按键时，该变量置`1`，同时将`line`变量初始化为当前历史记录行数。当用户按下`UP`或`DOWN`按键时，正常修改`line`变量的值并进行读取即可。当用户按下`=`或手动保存时，需要将`isRead`置零。这样下一次按下`UP`时，将重新读取历史文件行数并为`line`赋值。\n\n```cpp\n//mainwindow.cpp\n//等号的槽函数在上面\nvoid MainWindow::on_pushButton_Up_clicked() {\n  ui->textBrowser_input->setFocus();\n  if (Location::isRead) {\n    --Location::line;\n  } else {\n    Location::line = CountLines(Location::filePath);\n    Location::isRead = 1;\n  }\n  ui->textBrowser_output->setText(ReadLine(Location::filePath, Location::line));\n}\nvoid MainWindow::on_pushButton_Down_clicked() {\n  ui->textBrowser_input->setFocus();\n  if (Location::isRead) {\n    ++Location::line;\n  }\n  ui->textBrowser_output->setText(ReadLine(Location::filePath, Location::line));\n}\n```\n\n保存和读取的路径将在`顶层设计细节`中进一步讨论。\n\n### 顶层设计细节\n\n这里在menubar中设置了一个`history location`按键，用于修改历史文件的存放位置。当按下此按键时，程序应当打开一个新的窗口，因此，需要首先在源文件中创建一个新的窗口。右键点击`项目`，选择`add new`，选择`qt设计师类`，然后会分别在三个文件夹中依次得到头文件、源文件、ui设计文件。然后需要在主窗口中设置点击`history location`按键打开新窗口。\n\n```cpp\n//mainwindow.cpp\nvoid MainWindow::on_actionHistory_location_triggered() {\n  Location *new_win = new Location();\n  new_win->show();\n}\n```\n\n**注意**：记得在`mainwindow.h`中include`location.h`，按下打开新窗口实际上就是创建一个新的Location窗口，然后展示。\n\n接下来就是在`location.ui`中修改和设计可视化窗口，此项目使用了栅格布局，在左侧设置了一个较大的`textBrowser`和较小的`lineEdit`（设为不可修改，用于给出提示），在右侧依次设置了`选择文件`，`选择文件夹`，`确定`，`取消` 四个按键。\n\n> 选择文件：调用Qt库，打开系统默认的文件选择框，设置必须选择.txt格式结尾的文件，将返回的结果输出至`textBrowser`。\n>\n> 选择文件夹：同上，但是选择的是文件夹，并且返回的是存在的文件夹的路径，将返回的结果加上`/result.txt`后输入至`textBrowser`。\n>\n> 确定：按下后，读取`textBrowser`中的路径，检查其合法性（因为一开始`textBrowser`设置了可以直接更改，因此可能会输入奇怪的路径），若不合法则在`lineEdit`中给出相应的报错（格式不合法或路径不合法）。若合法，则检查文件是否存在，不存在则创建。当一切都合理以后，将全局变量`filePath`设为文本框中的内容，并关闭`Location`窗口。\n>\n> 取消：直接关闭，不做任何修改。\n\n```cpp\n//location.cpp\nvoid Location::on_pushButton_path_clicked() {\n  QString file_name =\n      QFileDialog::getOpenFileName(NULL, \"选择txt文件\", \".\", \"*.txt\");\n  ui->textEdit->setText(file_name);\n}\n\nvoid Location::on_pushButton_dir_clicked() {\n  QString dir_name = QFileDialog::getExistingDirectory(NULL, \"选择文件夹\", \".\");\n  ui->textEdit->setText(dir_name + \"/result.txt\");\n}\n\nvoid Location::on_pushButton_cancel_clicked() { Location::close(); }\n\nvoid Location::on_pushButton_sure_clicked() {\n  QString new_path = ui->textEdit->toPlainText();\n  QFileInfo info(new_path);\n\n  if (!info.exists()) {\n    if (new_path.contains(\".txt\")) {\n      QFile f(new_path);\n      f.open(QIODevice::WriteOnly);\n      f.close();\n    } else {\n      ui->prompt->setText(\"路径或格式不合法，请重新输入\");\n    }\n  }\n  Location::filePath=new_path;\n  Location::close();\n}\n```\n\n自动保存功能被设计为主窗口中菜单栏中的一个按键，默认为开启状态，显示为`Auto Save On`，当点击该按键后，槽函数将该文本替换为`Auto Save Off`，并将全局变量`autoSave`置零。\n\n`filePath`和`autoSave`以及底层中的`isRead`和`line`都设计为一个全局变量，便于主窗口调用。\n\n```cpp\n//location.h\nclass Location : public QDialog {\n public:\n  static QString filePath;\n  static int line;\n  static bool isRead;\n  static bool autoSave;\n}\n\n//location.cpp\nQString Location::filePath = \"result.txt\";\nint Location::line = 0;\nbool Location::isRead = 0;\nbool Location::autoSave = 1;\n```\n\n在主窗口中，只有用户按下等号（并且自动保存功能开启）或手动保存（在`menubar`中设置了一个保存按键并且设置了快捷键）时，才会保存。因此只需在这些地方加入`save()`函数即可。当然，也要有对`autoSave`的判断。\n\n## 样式设定\n\n前面提到了可以在`ui`文件中直接修改样式，但这种方式并不利于后面的修改，因此我们选择直接调用函数的方式。如要为`centralWidget`设定样式，可以调用`setStyelSheet()`，后接一个QString，该字符串中直接书写qss内容。\n\n这里选择了另一种方式，使用qt的资源文件管理功能来存储单独的qss文件，然后以前缀引用的方式来调用这些文件。\n\n在`项目`中右键新建`qt resource file`，设定名称后打开管理界面，点击添加前缀`add prefix`。然后添加文件`add Files`。前缀决定了调用的方式（将会在源代码中演示）。文件可以新建一个`general file`后添加，也可以将其他方式创建的qss文件加入。\n\n引入的资源可以以`QFile`的方式引用。本项目在菜单栏中添加了一个黑色主题的选项，其槽函数如下\n\n```cpp\nvoid MainWindow::on_actionBlack_theme_triggered() {\n  globalQss = \":/Black.qss\";\n  QFile defaultQss(globalQss);\n  defaultQss.open(QFile::ReadOnly);\n  QString qssContent = defaultQss.readAll();\n  centralWidget()->setStyleSheet(qssContent);\n}\n```\n\n`/`为我设定的前缀，只需以冒号开头，加上前缀和文件，即表明在应用qt指定好的资源文件。接下来就只需打开该文件并读取其内容，然后为需要的组件设定qss样式即可。\n\n**注意**：使用qss的一些麻烦：后面我希望能设定字体的大小、样式等，但这时通过`setFont()`等函数并不起作用。原因估计是qss的优先级很高，直接设定将不起作用。这时我只能再写一个`changeStyle()`函数，通过qss样式表更新来进行样式更新\n\n```cpp\nvoid MainWindow::changeStyle(QString newStyle, QWidget *widget) {\n  QString oldStyle = widget->styleSheet();\n  oldStyle += newStyle;\n  widget->setStyleSheet(oldStyle);\n}\n```\n\n所以这里我只写了改变字体的函数。\n\n```cpp\nvoid MainWindow::on_actionLarge_font_size_triggered() {\n  changeStyle(\"*{font:30px;}\", MainWindow::centralWidget());\n}\n```\n\n## 保存设置\n\n类似于文件的保存位置，是否自动保存等功能，每次重新启动程序后都会按照程序的设定重新初始化。为了使得这些设定能被保存下来，需要使用一个文件将这些配置保存下来。恰好最近见到了许多`ini`格式文件，qt也提供了`QSetting`及配套的`ini`配置文件读写。\n\n配置文件应当在主窗口创建时被读取，在主窗口被销毁时被存入。因此只需在`mainwindow`的构造函数和析构函数中加入读写`ini`文件的步骤即可。需要注意的是，要考虑`ini`文件不存在的情况，不存在时需要使用程序的内置设定。\n\n ```cpp\n MainWindow::MainWindow(QWidget *parent)\n     : QMainWindow(parent), ui(new Ui::MainWindow) {\n   ui->setupUi(this);\n \n   this->grabKeyboard();\n \n   QSettings *iniRead = new QSettings(\"config.ini\", QSettings::IniFormat);\n   QString iniAuto = iniRead->value(\"autoSave\").toString();\n   QString iniPath = iniRead->value(\"filePath\").toString();\n   QString iniQss = iniRead->value(\"globalQss\").toString();\n   delete iniRead;\n \n   // init autoSave\n   if (!iniAuto.isEmpty() && !iniAuto.toInt()) {\n     Location::autoSave = 0;\n     ui->actionAuto_Save->setText(\"Auto Save Off\");\n   }\n \n   // init filePath\n   QFile iniPathFile(iniPath);\n   if (iniPathFile.open(QFile::WriteOnly)) {\n     Location::filePath = iniPath;\n   }\n \n   // init Qss file(theme)\n   QFile iniQssFile(iniQss);\n   QString qssContent;\n   if (iniQssFile.open(QFile::ReadOnly)) {\n     qssContent = iniQssFile.readAll();\n     globalQss = iniQss;\n   } else {\n     QFile defaultQss(\":/Black.qss\");\n     defaultQss.open(QFile::ReadOnly);\n     qssContent = defaultQss.readAll();\n   }\n   centralWidget()->setStyleSheet(qssContent);\n }\n \n MainWindow::~MainWindow() {\n   QSettings *IniWrite = new QSettings(\"config.ini\", QSettings::IniFormat);\n   IniWrite->setValue(\"autoSave\", Location::autoSave);\n   IniWrite->setValue(\"filePath\", Location::filePath);\n   IniWrite->setValue(\"globalQss\", globalQss);\n   delete IniWrite;\n \n   delete ui;\n }\n \n ```\n\n## 其他\n\n- 在主函数中为整个窗口设置了透明度，让它看起来酷炫一点点。\n- 在主函数中为窗口设定名称。\n- 在`.pro`文件中加入图标文件，使得生成的程序有图标\n\n# 感想\n\n## 收获\n\n- 不再害怕qt框架了，反而觉得它好用。\n- qt的窗口类很舒服，有清晰且层次分明的关系，有足够好用的成员函数。\n- qt的基本库也有不少可以讨论的，如QString的设计，不仅提供了基本的可变长度和操作符重载，还考虑到了和std库之间的转换。\n- qt的信号与槽机制是qt最精髓的东西之一，信号是一种非常不错的线程间通信方式，很遗憾我没有手动使用connect函数来创建信号与槽。但确实在写qt的过程中，qtcreator已经为我提供了足够的可视化信号与槽构建工具。\n- qss基本等于css\n- qt以易于制作ui界面出名，但用了之后发现，qt实际上是借鉴了很多现代浏览器（前端）的实现方式。我写的时候感觉自己像是在写js+css。对于一个web项目来说，前端工程师书写html，css，以及利用框架来写js。后端工程师则使用各种工具来构建web服务。但对于qt这样一种前后结合的一体化程序设计框架来说，前后的分离并不彻底（虽然对硬件工程师来说可能会很友好）。\n- 我还是支持“qt是一个平台而不只是一个ui框架”这种说法。qt在基本库中的内容一点也不比它在ui界面中的少。无论是基本库还是ui库，都有很多可以研究的东西。\n- 宏的自动扩展确实好用\n- qt毕竟还是封装的比较高层了，要是需要一些简单的功能，还是老老实实写原生的c和std吧。\n\n## 遗憾\n\n- 大佬说他使用了前缀表达式，求余和翻方功能不好实现，我懂的算法也不多，这两个功能没能实现。只能说算法能力有待提高了。\n","slug":"0xCalculator","published":1,"category":"Project","updated":"2022-02-11T05:17:56.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckzs3itx000628wul5eqb01sy","content":"<h1 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h1><ol>\n<li>对十六进制数进行双目、表达式运算</li>\n<li>对运算结果进行保存和再读取，支持自动保存和手动保存</li>\n<li>自定义运算结果储存位置</li>\n<li>自定义字体大小</li>\n<li>可更换窗口风格（换肤）</li>\n<li>自动保存设置</li>\n</ol>\n<h1 id=\"任务分配\"><a href=\"#任务分配\" class=\"headerlink\" title=\"任务分配\"></a>任务分配</h1><ol>\n<li>：ui设计与qt框架</li>\n<li>：核心算法</li>\n<li>：文件读写</li>\n</ol>\n<h1 id=\"开源地址\"><a href=\"#开源地址\" class=\"headerlink\" title=\"开源地址\"></a>开源地址</h1><p><a href=\"https://github.com/kawhicurry/0xCalculator\">https://github.com/kawhicurry/0xCalculator</a></p>\n<h1 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h1><h2 id=\"Qt框架\"><a href=\"#Qt框架\" class=\"headerlink\" title=\"Qt框架\"></a>Qt框架</h2><p>qt文件将会以平铺的方式放置在同一工程目录下，其组织结构由<code>.pro</code>文件记录，该文件类似于makefile（可以看作是qmakefile？）。其标准目录如下：</p>\n<blockquote>\n<p>.pro：记录文件</p>\n<p>&#x2F;Headers：略</p>\n<p>&#x2F;Sources：略</p>\n<p>&#x2F;Forms：存放<code>.ui</code>文件，实际为<code>xml</code>格式，但不建议直接编辑，所有操作应当在设计模块中完成</p>\n<p>&#x2F;Resources：存放qt标准资源（可以qt方式引用的资源）</p>\n<p>&#x2F;Other files</p>\n</blockquote>\n<h2 id=\"UI设计\"><a href=\"#UI设计\" class=\"headerlink\" title=\"UI设计\"></a>UI设计</h2><p>直接在qt creator的设计界面中打开<code>设计</code>模块。从画面左侧拖动组件，摆放至设计框中即可。</p>\n<p><em>问题</em>：组件散乱</p>\n<ul>\n<li>左侧组件库中有<code>layout</code>组件,将其拖动至设计框中,再向layout中添加组件，即可使所有组件呈现一定规律。</li>\n</ul>\n<blockquote>\n<p>布局类型：</p>\n<p>垂直：略</p>\n<p>水平：略</p>\n<p>栅格（grid）：上面俩合起来</p>\n<p>窗口：？存疑，不是很能理解这是啥</p>\n</blockquote>\n<p><em>问题</em>：使用layout组件后无法布局固定，启动ui界面后拖动窗口改变其大小，layout组件位置不动。</p>\n<ul>\n<li>应当首先在右侧<code>对象</code>框中选中主窗口（mainwindow）中的中间部件（centralwidget），右键选择布局，为整个中间部分设定大的布局，（注：主窗口除了中间部件还初始化了一个菜单栏（menubar）），然后在该布局中嵌套布局或组件。本方案选择了栅格布局，虽然只需垂直布局即可，但为了可拓展性，还是选择栅格。接下来在整个中间部分的栅格布局中，嵌套了一个垂直布局（用于输入和输出）和一个栅格布局（用于存放按键）。</li>\n</ul>\n<p>接下来在主窗口中添加所需的组件，分别为输入框、输出框、5*6个按键。然后可以对其属性进行可视化的设计，以下是对<code>设计</code>界面中一些工具的解释：</p>\n<blockquote>\n<p>右侧下方为属性框，显示了所选定组件的属性，每个组件都是层层继承而来，因此要注意每一层的具体属性以及继承关系。</p>\n<p>右侧上方为对象框，显示了当前ui文件中所有文件属性。</p>\n<p>正中央下方的框实际上有两个可编辑区域，一个为action editor，即为组件添加动作（可方便设置快捷键）。另一个为信号与槽。</p>\n<p>注：信号与槽是最Qt制作ui界面中最重要的机制。</p>\n</blockquote>\n<p>创建槽函数：在信号与槽编辑框中点击加号创建信号与槽，然后选择信号的发送对象、发送信号量、槽、响应函数。此处的创建<strong>只支持内定的槽函数</strong>，想要自定义槽函数，需在右侧对象中找到对象，然后右键选择转到槽，接下来选择信号量之后，Qt会跳转该ui文件对应的cpp文件下，并自动创建一个该槽函数的实现（.h文件中也会自动添加声明）。接下来只需在此槽函数中编写发送信号后（触发信号发送条件），所需只需的步骤即可。</p>\n<blockquote>\n<p>信号量是Qt类自带的属性，某个类既有自己的属性，也有继承而来的属性。如pushButton组件继承自QAbstractButton，后者又继承自QWidget，后者又继承自QObject。对于QAbstractButton，其自带的信号有<code>clicked()</code>,<code>pressed()</code>等，对于QWidget，有<code>windowIconChanged</code>等。具体解释请参考官方文档。</p>\n</blockquote>\n<p><code>设计</code>界面支持大量的属性设置，如字体，背景等。并且可以直接在ui界面中即时显示，但并不推荐直接做修改。</p>\n<p>一种渲染方式：Qt提供了qss来进行类似css的样式渲染，只需选中对象然后右键改变样式表，修改某个组件的样式表即可。Qss还提供了选择器的功能，因此，只需在某个较大的组件中设置样式表，并对不同的渲染对象进行选择即可。本方案一开始的办法就是在centralwidget组件中设置样式表，完成了酷炫的按键风格。需要注意的是，改变样式表的方法在Qt中是存在一定问题的，并且，<strong>任何写死的方法都可能在以后要修改时造成麻烦</strong>。关于样式表后面还会再进一步设定。</p>\n<h2 id=\"模拟按键\"><a href=\"#模拟按键\" class=\"headerlink\" title=\"模拟按键\"></a>模拟按键</h2><p>一个计算器应当提供一系列的按键，因此要在栅格布局中拖入一定数量的按键。按键分为输入按键和功能按键。</p>\n<ul>\n<li>输入按键：0123456789ABCDEF+-*&#x2F;（）</li>\n<li>功能按键：&lt;- -&gt; DEL CE UP DOWN &#x3D;</li>\n</ul>\n<p>对于输入按键，按下按键后应当在输入框中显示对应的输入，同时这些按键应当有对应的键盘输入。</p>\n<p>对于输出按键，左移和右移是为了移动输入框中的光标。DEL清除一个字符，CE要同时清除输入和输出框。UP和DOWN提供了查看历史功能。等号是整个计算器的核心功能，按下等号后，应当读取输入框中的算式，进行计算后将结果字符串返回至输出框中。</p>\n<p>通过在组件上右键选择 转到槽 可以快捷创建槽函数。示例如图：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.h</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_left_bracket_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_left_bracket_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">insertPlainText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>手动创建几个后，就可以发现其规矩。一个槽函数的名称由<code>on_name_action</code>组成。<code>pushButton_left_bracket</code>是改按键的名称，这个名称需要在ui文件中指定，当拖动pushButton的时候，qt会按照12345依次给其一个默认名称，并且上面的默认文字都是pushButton。因此对于声明，可以用宏生成。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindwo.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">clicked_func</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> on_pushButton_</span><span class=\"token punctuation\">##</span><span class=\"token expression\">name</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token function\">_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n  <span class=\"token function\">clicked_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">clicked_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">clicked_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">clicked_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//...</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">triggered_func</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> on_action</span><span class=\"token punctuation\">##</span><span class=\"token expression\">name</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token function\">_triggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n\n  <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>Author<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>Save<span class=\"token punctuation\">)</span> <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>Read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>History_location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>Auto_Save<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于实现，部分直接输入的槽函数也可以用宏生成</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">set_insert_func</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>                         </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token keyword\">void</span> MainWindow<span class=\"token double-colon punctuation\">::</span>on_pushButton_</span><span class=\"token punctuation\">##</span><span class=\"token expression\">name</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token function\">_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\">ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\">ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">insertPlainText</span><span class=\"token punctuation\">(</span>#name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span>\n\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>剩下的就只能自己写咯。</p>\n<h2 id=\"输入输出框\"><a href=\"#输入输出框\" class=\"headerlink\" title=\"输入输出框\"></a>输入输出框</h2><p>qt为用户提供了<code>text Browser</code>,<code>text Edit</code>,<code>Plain text edit</code>,<code>line edit</code>等组件作为文本框。这里选择了text Browser，目的是屏蔽直接复制粘贴输入，防止非法字符进入。结果后面发现<code>text Browser</code>是由<code>text Edit</code>继承而来，因此browser也可以提供输入功能（离谱，read Only属性。</p>\n<p>所有的输入按键都将在输入框中插入一个对应的字符。这里只需要调用<code>text Browser</code>类中自带的public function member：<code>insertPlainText(QString)</code>。</p>\n<p><em>问题</em>：文本框中的光标只有在选中文本框时才会显示，如果使用鼠标点击按键进行输入，输入框中的光标实际仍然存在但不显示。</p>\n<ul>\n<li>为了使得光标时刻存在，这里使用了一个简单粗暴的方法，为所有按键功能加上<code>setFocus()</code>。从而保证焦点始终在输入框中。</li>\n</ul>\n<p>对于输出框，每次显示结果都是更新所有内容（而不是插入），因此需要<code>setPlainText</code>。</p>\n<h2 id=\"等号\"><a href=\"#等号\" class=\"headerlink\" title=\"等号\"></a>等号</h2><p>等号按键是计算器最核心的按键，以下为等号按键的槽函数</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_equal_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  Location<span class=\"token double-colon punctuation\">::</span>isRead <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  QString s <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">toPlainText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString rst <span class=\"token operator\">=</span> <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_output<span class=\"token operator\">-></span><span class=\"token function\">setPlainText</span><span class=\"token punctuation\">(</span>rst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>autoSave<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> rst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>按下等号后，程序首先保证焦点仍然在输入框口上，然后讲是否正在读取历史记录按键设置为0（这讲在后面的历史记录读取中说到），然后获取输入框中的内容，交给由竞赛大佬@龚程昊编写的parser函数进行处理（这将在后面数据处理中说到），然后将parser函数返回的字符串（QString）显示到输出框中，然后在自动保存功能开启的情况下，保存至本地文件中。</p>\n<h2 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a>数据处理</h2><p>等会儿copy大佬写的东西，大致思路是使用栈和转化为前缀表达式。</p>\n<p>但大佬使用的使用的是std库，并且是作为一个单独的cpp程序书写的（方便调试）。因此，这里将源文件复制到parser文件中，并将main函数改写成接受<code>QString</code>作为参数，返回<code>QString</code>的parser()函数。这里用到了<code>QString::toStdString</code>和<code>QString::fromStdString</code>。</p>\n<p>记录几个当时测试出来的bug：</p>\n<ol>\n<li>只写一个数后按等号，直接返回0</li>\n<li>没有考虑负数</li>\n<li>没有考虑溢出</li>\n</ol>\n<p>附上代码</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//parser.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"parser.h\"</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">pd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">57</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> i<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// priority</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token char\">'+'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> i<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//乱码</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">57</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token char\">'+'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span> <span class=\"token operator\">||</span>\n      i <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token char\">'/'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token char\">'('</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nQString <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>QString expression<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1007</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span> R <span class=\"token operator\">=</span> LONG_MAX<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stack1<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">long</span> read<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sta<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stack2<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stt<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">bool</span> f<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fff <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  string c<span class=\"token punctuation\">,</span> sc<span class=\"token punctuation\">;</span>\n  string str<span class=\"token punctuation\">,</span> as <span class=\"token operator\">=</span> expression<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  str <span class=\"token operator\">=</span> <span class=\"token string\">\"0+\"</span> <span class=\"token operator\">+</span> as<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">judge</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'('</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">')'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'+'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span> <span class=\"token operator\">||</span>\n                        s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>l <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> st <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//括号是否匹配</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span> st<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> st<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> l <span class=\"token operator\">&amp;&amp;</span> ff <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//数字</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">57</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        sta<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">48</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        sta<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">55</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//符号</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//前面的数字</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> h<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          cnt <span class=\"token operator\">+=</span> sta<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          k<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        read<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cnt<span class=\"token punctuation\">;</span>\n        m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        read<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//前面的符号</span>\n        <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        read<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//数字</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Detect Overflow\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> h<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      cnt <span class=\"token operator\">+=</span> sta<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">></span> R<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Detect Overflow\"</span><span class=\"token punctuation\">;</span>\n      k<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    read<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cnt<span class=\"token punctuation\">;</span>\n    m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span>\n          <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span>\n               <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//反缀表达式</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        stack1<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//+-</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          flag<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n          a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        stack1<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//*/</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          flag<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n          a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        stack1<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          flag<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n          a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    flag<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// calculation</span>\n  <span class=\"token keyword\">int</span> g <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> cn <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//数字</span>\n    <span class=\"token punctuation\">&#123;</span>\n      stt<span class=\"token punctuation\">[</span>g<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      g<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//符号</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>stack2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token char\">'+'</span><span class=\"token operator\">:</span>\n          cn <span class=\"token operator\">=</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">></span> R<span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token char\">'-'</span><span class=\"token operator\">:</span>\n          cn <span class=\"token operator\">=</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span>R<span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token char\">'*'</span><span class=\"token operator\">:</span>\n          cn <span class=\"token operator\">=</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">></span> R <span class=\"token operator\">||</span> cn <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span>R<span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token char\">'/'</span><span class=\"token operator\">:</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            cn <span class=\"token operator\">=</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      g <span class=\"token operator\">-=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n      stt<span class=\"token punctuation\">[</span>g<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cn<span class=\"token punctuation\">;</span>\n      g<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> cnn <span class=\"token operator\">=</span> cn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>ff<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//        cout&lt;&lt;str&lt;&lt;\"=\"&lt;&lt;cn&lt;&lt;endl;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n    fff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>ff<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//转十六进制</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      x <span class=\"token operator\">=</span> cn <span class=\"token operator\">%</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        c <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span>\n        c <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n      sc <span class=\"token operator\">=</span> c <span class=\"token operator\">+</span> sc<span class=\"token punctuation\">;</span>\n      cn <span class=\"token operator\">/=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      x <span class=\"token operator\">=</span> cn <span class=\"token operator\">%</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        c <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x <span class=\"token operator\">+</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span>\n        c <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x <span class=\"token operator\">+</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n      sc <span class=\"token operator\">=</span> c <span class=\"token operator\">+</span> sc<span class=\"token punctuation\">;</span>\n      cn <span class=\"token operator\">/=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnn <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    sc <span class=\"token operator\">=</span> <span class=\"token char\">'-'</span> <span class=\"token operator\">+</span> sc<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ff <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>fff<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//        cout&lt;&lt;as&lt;&lt;\"=\";</span>\n    <span class=\"token comment\">//        cout&lt;&lt;sc&lt;&lt;endl;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sc <span class=\"token operator\">==</span> <span class=\"token string\">\"-80000000\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Detect Overflow\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromStdString</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Formula Error\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>贴代码的时候才发现大佬写了一个pd（判断）和一个judge（还是判断）。算了算了，能用就行（</p>\n<h2 id=\"历史记录\"><a href=\"#历史记录\" class=\"headerlink\" title=\"历史记录\"></a>历史记录</h2><p>如果只是作为计算器，以上功能就已经可以算完成了。但大多数计算器都是有历史记录功能的，因此这个计算器也该有一个。</p>\n<p>这里将历史记录分为底层和顶层两部分来设计，顶层使用Qt框架，而底层使用c的基本库，从而实现更加原子化和方便的操作。</p>\n<p>顶层实现的用户接口功能：</p>\n<ul>\n<li>手动保存当前结果</li>\n<li>选择是否自动保存结果</li>\n<li>选择保存位置</li>\n<li>读取历史记录</li>\n</ul>\n<p>底层实现的文本的读写功能</p>\n<ul>\n<li>获取时间</li>\n<li>记录结果</li>\n<li>写入和读取</li>\n</ul>\n<h3 id=\"底层设计细节\"><a href=\"#底层设计细节\" class=\"headerlink\" title=\"底层设计细节\"></a>底层设计细节</h3><p>保存功能被设计为，获取当前时间和本次运算的算式和结果，以新行的方式追加到某文件的结尾。保存功能的底层设计都被保存在<code>saving</code>文件下。</p>\n<p>为此底层使用std库设计了<code>save()</code>函数。该函数还调用了<code>getCurrentTime()</code>来获取当前时间。当然，这个函数也是由<code>main()</code>函数修改而来，由std框架接入了qt框架。源码如下：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//saving.cpp</span>\n<span class=\"token keyword\">static</span> string <span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//输出当前时间</span>\n<span class=\"token punctuation\">&#123;</span>\n  time_t t <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">strftime</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%Y-%m-%d %H:%M:%S\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ch<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>QString location<span class=\"token punctuation\">,</span> QString fomula<span class=\"token punctuation\">,</span> QString data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  string addr <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  fstream f<span class=\"token punctuation\">;</span>\n  f<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>out <span class=\"token operator\">|</span> ios<span class=\"token double-colon punctuation\">::</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  f <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> fomula<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"=\"</span>\n    <span class=\"token operator\">&lt;&lt;</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//变量addr、以及gch的等式和输出结果变量还需加进去</span>\n  f<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>除了保存结果外，还需要读取结果，读取结果需要始终从最后一行开始往上读。经历了一系列讨论之后，本项目决定使用读取整个文件来获取所有的行数，并根据行数来获取内容。为此有了<code>CountLine()</code>和<code>readLine()</code>两个函数：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">CountLines</span><span class=\"token punctuation\">(</span>QString filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ifstream f<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  string tmp<span class=\"token punctuation\">;</span>\n  string stdfilename <span class=\"token operator\">=</span> filename<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ios::in 表示以只读的方式读取文件</span>\n  f<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>stdfilename<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//文件打开失败:返回0</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//文件存在</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">,</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nQString <span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span>QString filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//读取指定行文件</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// line行数限制 1 - lines</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>line <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> line <span class=\"token operator\">&lt;=</span> <span class=\"token function\">CountLines</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    ifstream f<span class=\"token punctuation\">;</span>\n    string stdfilename <span class=\"token operator\">=</span> filename<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>stdfilename<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> strVec<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//行0 - 行lines对应strvect[0] - strvect[lines]</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">eof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      string inbuf<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> inbuf<span class=\"token punctuation\">,</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      strVec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>inbuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromStdString</span><span class=\"token punctuation\">(</span>strVec<span class=\"token punctuation\">[</span>line <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>读取整个文件并计算行数并不是一个效率高的方式，但在文件不大和不追求高效率的条件下，这是最好的实践方式。因为考虑这里还需要考虑到连续读取历史文件。</p>\n<p>当用户按下<code>UP</code>按键时，表示用户开始读取历史文件。用户首先查看的应该是历史文件的最后一行，当用户再次按下<code>UP</code>时，读取倒数第二行，依次类推。为了实现该功能，这里使用了一个全局变量<code>line</code>表示当前正在读取的行数，该行数被初始化为历史记录的总行数。然后再次读取将会<code>--line</code>后读取。当用户按下<code>DOWN</code>按键时，++line后读取。</p>\n<p>这里就要考虑到另一个问题，读取一定历史记录后，用户重新进行计算，然后再次查看历史记录，这样行数应当从新的历史记录最后一行开始计算。为此，这里引入了<code>isRead</code>变量，该变量初始化为<code>0</code>，表示现在未在读取。首次按下<code>UP</code>按键时，该变量置<code>1</code>，同时将<code>line</code>变量初始化为当前历史记录行数。当用户按下<code>UP</code>或<code>DOWN</code>按键时，正常修改<code>line</code>变量的值并进行读取即可。当用户按下<code>=</code>或手动保存时，需要将<code>isRead</code>置零。这样下一次按下<code>UP</code>时，将重新读取历史文件行数并为<code>line</code>赋值。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token comment\">//等号的槽函数在上面</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_Up_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>isRead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">--</span>Location<span class=\"token double-colon punctuation\">::</span>line<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    Location<span class=\"token double-colon punctuation\">::</span>line <span class=\"token operator\">=</span> <span class=\"token function\">CountLines</span><span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Location<span class=\"token double-colon punctuation\">::</span>isRead <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_output<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">,</span> Location<span class=\"token double-colon punctuation\">::</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_Down_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>isRead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">++</span>Location<span class=\"token double-colon punctuation\">::</span>line<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_output<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">,</span> Location<span class=\"token double-colon punctuation\">::</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>保存和读取的路径将在<code>顶层设计细节</code>中进一步讨论。</p>\n<h3 id=\"顶层设计细节\"><a href=\"#顶层设计细节\" class=\"headerlink\" title=\"顶层设计细节\"></a>顶层设计细节</h3><p>这里在menubar中设置了一个<code>history location</code>按键，用于修改历史文件的存放位置。当按下此按键时，程序应当打开一个新的窗口，因此，需要首先在源文件中创建一个新的窗口。右键点击<code>项目</code>，选择<code>add new</code>，选择<code>qt设计师类</code>，然后会分别在三个文件夹中依次得到头文件、源文件、ui设计文件。然后需要在主窗口中设置点击<code>history location</code>按键打开新窗口。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_actionHistory_location_triggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  Location <span class=\"token operator\">*</span>new_win <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Location</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  new_win<span class=\"token operator\">-></span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注意</strong>：记得在<code>mainwindow.h</code>中include<code>location.h</code>，按下打开新窗口实际上就是创建一个新的Location窗口，然后展示。</p>\n<p>接下来就是在<code>location.ui</code>中修改和设计可视化窗口，此项目使用了栅格布局，在左侧设置了一个较大的<code>textBrowser</code>和较小的<code>lineEdit</code>（设为不可修改，用于给出提示），在右侧依次设置了<code>选择文件</code>，<code>选择文件夹</code>，<code>确定</code>，<code>取消</code> 四个按键。</p>\n<blockquote>\n<p>选择文件：调用Qt库，打开系统默认的文件选择框，设置必须选择.txt格式结尾的文件，将返回的结果输出至<code>textBrowser</code>。</p>\n<p>选择文件夹：同上，但是选择的是文件夹，并且返回的是存在的文件夹的路径，将返回的结果加上<code>/result.txt</code>后输入至<code>textBrowser</code>。</p>\n<p>确定：按下后，读取<code>textBrowser</code>中的路径，检查其合法性（因为一开始<code>textBrowser</code>设置了可以直接更改，因此可能会输入奇怪的路径），若不合法则在<code>lineEdit</code>中给出相应的报错（格式不合法或路径不合法）。若合法，则检查文件是否存在，不存在则创建。当一切都合理以后，将全局变量<code>filePath</code>设为文本框中的内容，并关闭<code>Location</code>窗口。</p>\n<p>取消：直接关闭，不做任何修改。</p>\n</blockquote>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//location.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_path_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QString file_name <span class=\"token operator\">=</span>\n      <span class=\"token class-name\">QFileDialog</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getOpenFileName</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"选择txt文件\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ui<span class=\"token operator\">-></span>textEdit<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_dir_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QString dir_name <span class=\"token operator\">=</span> <span class=\"token class-name\">QFileDialog</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getExistingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"选择文件夹\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ui<span class=\"token operator\">-></span>textEdit<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>dir_name <span class=\"token operator\">+</span> <span class=\"token string\">\"/result.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_cancel_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_sure_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QString new_path <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>textEdit<span class=\"token operator\">-></span><span class=\"token function\">toPlainText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QFileInfo <span class=\"token function\">info</span><span class=\"token punctuation\">(</span>new_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>new_path<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      QFile <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>new_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      f<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QIODevice<span class=\"token double-colon punctuation\">::</span>WriteOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      f<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      ui<span class=\"token operator\">-></span>prompt<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路径或格式不合法，请重新输入\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token operator\">=</span>new_path<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>自动保存功能被设计为主窗口中菜单栏中的一个按键，默认为开启状态，显示为<code>Auto Save On</code>，当点击该按键后，槽函数将该文本替换为<code>Auto Save Off</code>，并将全局变量<code>autoSave</code>置零。</p>\n<p><code>filePath</code>和<code>autoSave</code>以及底层中的<code>isRead</code>和<code>line</code>都设计为一个全局变量，便于主窗口调用。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//location.h</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Location</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QDialog</span></span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">static</span> QString filePath<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> isRead<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> autoSave<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//location.cpp</span>\nQString Location<span class=\"token double-colon punctuation\">::</span>filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"result.txt\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> Location<span class=\"token double-colon punctuation\">::</span>line <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> Location<span class=\"token double-colon punctuation\">::</span>isRead <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> Location<span class=\"token double-colon punctuation\">::</span>autoSave <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在主窗口中，只有用户按下等号（并且自动保存功能开启）或手动保存（在<code>menubar</code>中设置了一个保存按键并且设置了快捷键）时，才会保存。因此只需在这些地方加入<code>save()</code>函数即可。当然，也要有对<code>autoSave</code>的判断。</p>\n<h2 id=\"样式设定\"><a href=\"#样式设定\" class=\"headerlink\" title=\"样式设定\"></a>样式设定</h2><p>前面提到了可以在<code>ui</code>文件中直接修改样式，但这种方式并不利于后面的修改，因此我们选择直接调用函数的方式。如要为<code>centralWidget</code>设定样式，可以调用<code>setStyelSheet()</code>，后接一个QString，该字符串中直接书写qss内容。</p>\n<p>这里选择了另一种方式，使用qt的资源文件管理功能来存储单独的qss文件，然后以前缀引用的方式来调用这些文件。</p>\n<p>在<code>项目</code>中右键新建<code>qt resource file</code>，设定名称后打开管理界面，点击添加前缀<code>add prefix</code>。然后添加文件<code>add Files</code>。前缀决定了调用的方式（将会在源代码中演示）。文件可以新建一个<code>general file</code>后添加，也可以将其他方式创建的qss文件加入。</p>\n<p>引入的资源可以以<code>QFile</code>的方式引用。本项目在菜单栏中添加了一个黑色主题的选项，其槽函数如下</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_actionBlack_theme_triggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  globalQss <span class=\"token operator\">=</span> <span class=\"token string\">\":/Black.qss\"</span><span class=\"token punctuation\">;</span>\n  QFile <span class=\"token function\">defaultQss</span><span class=\"token punctuation\">(</span>globalQss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  defaultQss<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QFile<span class=\"token double-colon punctuation\">::</span>ReadOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString qssContent <span class=\"token operator\">=</span> defaultQss<span class=\"token punctuation\">.</span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">centralWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">setStyleSheet</span><span class=\"token punctuation\">(</span>qssContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>/</code>为我设定的前缀，只需以冒号开头，加上前缀和文件，即表明在应用qt指定好的资源文件。接下来就只需打开该文件并读取其内容，然后为需要的组件设定qss样式即可。</p>\n<p><strong>注意</strong>：使用qss的一些麻烦：后面我希望能设定字体的大小、样式等，但这时通过<code>setFont()</code>等函数并不起作用。原因估计是qss的优先级很高，直接设定将不起作用。这时我只能再写一个<code>changeStyle()</code>函数，通过qss样式表更新来进行样式更新</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">changeStyle</span><span class=\"token punctuation\">(</span>QString newStyle<span class=\"token punctuation\">,</span> QWidget <span class=\"token operator\">*</span>widget<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QString oldStyle <span class=\"token operator\">=</span> widget<span class=\"token operator\">-></span><span class=\"token function\">styleSheet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  oldStyle <span class=\"token operator\">+=</span> newStyle<span class=\"token punctuation\">;</span>\n  widget<span class=\"token operator\">-></span><span class=\"token function\">setStyleSheet</span><span class=\"token punctuation\">(</span>oldStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以这里我只写了改变字体的函数。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_actionLarge_font_size_triggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">changeStyle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*&#123;font:30px;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">centralWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"保存设置\"><a href=\"#保存设置\" class=\"headerlink\" title=\"保存设置\"></a>保存设置</h2><p>类似于文件的保存位置，是否自动保存等功能，每次重新启动程序后都会按照程序的设定重新初始化。为了使得这些设定能被保存下来，需要使用一个文件将这些配置保存下来。恰好最近见到了许多<code>ini</code>格式文件，qt也提供了<code>QSetting</code>及配套的<code>ini</code>配置文件读写。</p>\n<p>配置文件应当在主窗口创建时被读取，在主窗口被销毁时被存入。因此只需在<code>mainwindow</code>的构造函数和析构函数中加入读写<code>ini</code>文件的步骤即可。需要注意的是，要考虑<code>ini</code>文件不存在的情况，不存在时需要使用程序的内置设定。</p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>MainWindow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">grabKeyboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  QSettings <span class=\"token operator\">*</span>iniRead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QSettings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.ini\"</span><span class=\"token punctuation\">,</span> QSettings<span class=\"token double-colon punctuation\">::</span>IniFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString iniAuto <span class=\"token operator\">=</span> iniRead<span class=\"token operator\">-></span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"autoSave\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString iniPath <span class=\"token operator\">=</span> iniRead<span class=\"token operator\">-></span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filePath\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString iniQss <span class=\"token operator\">=</span> iniRead<span class=\"token operator\">-></span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"globalQss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> iniRead<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// init autoSave</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>iniAuto<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>iniAuto<span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Location<span class=\"token double-colon punctuation\">::</span>autoSave <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    ui<span class=\"token operator\">-></span>actionAuto_Save<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Auto Save Off\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// init filePath</span>\n  QFile <span class=\"token function\">iniPathFile</span><span class=\"token punctuation\">(</span>iniPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iniPathFile<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QFile<span class=\"token double-colon punctuation\">::</span>WriteOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Location<span class=\"token double-colon punctuation\">::</span>filePath <span class=\"token operator\">=</span> iniPath<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// init Qss file(theme)</span>\n  QFile <span class=\"token function\">iniQssFile</span><span class=\"token punctuation\">(</span>iniQss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString qssContent<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iniQssFile<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QFile<span class=\"token double-colon punctuation\">::</span>ReadOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    qssContent <span class=\"token operator\">=</span> iniQssFile<span class=\"token punctuation\">.</span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    globalQss <span class=\"token operator\">=</span> iniQss<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    QFile <span class=\"token function\">defaultQss</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":/Black.qss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    defaultQss<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QFile<span class=\"token double-colon punctuation\">::</span>ReadOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    qssContent <span class=\"token operator\">=</span> defaultQss<span class=\"token punctuation\">.</span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">centralWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">setStyleSheet</span><span class=\"token punctuation\">(</span>qssContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QSettings <span class=\"token operator\">*</span>IniWrite <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QSettings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.ini\"</span><span class=\"token punctuation\">,</span> QSettings<span class=\"token double-colon punctuation\">::</span>IniFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  IniWrite<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"autoSave\"</span><span class=\"token punctuation\">,</span> Location<span class=\"token double-colon punctuation\">::</span>autoSave<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  IniWrite<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filePath\"</span><span class=\"token punctuation\">,</span> Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  IniWrite<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"globalQss\"</span><span class=\"token punctuation\">,</span> globalQss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> IniWrite<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>在主函数中为整个窗口设置了透明度，让它看起来酷炫一点点。</li>\n<li>在主函数中为窗口设定名称。</li>\n<li>在<code>.pro</code>文件中加入图标文件，使得生成的程序有图标</li>\n</ul>\n<h1 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h1><h2 id=\"收获\"><a href=\"#收获\" class=\"headerlink\" title=\"收获\"></a>收获</h2><ul>\n<li>不再害怕qt框架了，反而觉得它好用。</li>\n<li>qt的窗口类很舒服，有清晰且层次分明的关系，有足够好用的成员函数。</li>\n<li>qt的基本库也有不少可以讨论的，如QString的设计，不仅提供了基本的可变长度和操作符重载，还考虑到了和std库之间的转换。</li>\n<li>qt的信号与槽机制是qt最精髓的东西之一，信号是一种非常不错的线程间通信方式，很遗憾我没有手动使用connect函数来创建信号与槽。但确实在写qt的过程中，qtcreator已经为我提供了足够的可视化信号与槽构建工具。</li>\n<li>qss基本等于css</li>\n<li>qt以易于制作ui界面出名，但用了之后发现，qt实际上是借鉴了很多现代浏览器（前端）的实现方式。我写的时候感觉自己像是在写js+css。对于一个web项目来说，前端工程师书写html，css，以及利用框架来写js。后端工程师则使用各种工具来构建web服务。但对于qt这样一种前后结合的一体化程序设计框架来说，前后的分离并不彻底（虽然对硬件工程师来说可能会很友好）。</li>\n<li>我还是支持“qt是一个平台而不只是一个ui框架”这种说法。qt在基本库中的内容一点也不比它在ui界面中的少。无论是基本库还是ui库，都有很多可以研究的东西。</li>\n<li>宏的自动扩展确实好用</li>\n<li>qt毕竟还是封装的比较高层了，要是需要一些简单的功能，还是老老实实写原生的c和std吧。</li>\n</ul>\n<h2 id=\"遗憾\"><a href=\"#遗憾\" class=\"headerlink\" title=\"遗憾\"></a>遗憾</h2><ul>\n<li>大佬说他使用了前缀表达式，求余和翻方功能不好实现，我懂的算法也不多，这两个功能没能实现。只能说算法能力有待提高了。</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/luren1.jpg","excerpt":"","more":"<h1 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h1><ol>\n<li>对十六进制数进行双目、表达式运算</li>\n<li>对运算结果进行保存和再读取，支持自动保存和手动保存</li>\n<li>自定义运算结果储存位置</li>\n<li>自定义字体大小</li>\n<li>可更换窗口风格（换肤）</li>\n<li>自动保存设置</li>\n</ol>\n<h1 id=\"任务分配\"><a href=\"#任务分配\" class=\"headerlink\" title=\"任务分配\"></a>任务分配</h1><ol>\n<li>：ui设计与qt框架</li>\n<li>：核心算法</li>\n<li>：文件读写</li>\n</ol>\n<h1 id=\"开源地址\"><a href=\"#开源地址\" class=\"headerlink\" title=\"开源地址\"></a>开源地址</h1><p><a href=\"https://github.com/kawhicurry/0xCalculator\">https://github.com/kawhicurry/0xCalculator</a></p>\n<h1 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h1><h2 id=\"Qt框架\"><a href=\"#Qt框架\" class=\"headerlink\" title=\"Qt框架\"></a>Qt框架</h2><p>qt文件将会以平铺的方式放置在同一工程目录下，其组织结构由<code>.pro</code>文件记录，该文件类似于makefile（可以看作是qmakefile？）。其标准目录如下：</p>\n<blockquote>\n<p>.pro：记录文件</p>\n<p>&#x2F;Headers：略</p>\n<p>&#x2F;Sources：略</p>\n<p>&#x2F;Forms：存放<code>.ui</code>文件，实际为<code>xml</code>格式，但不建议直接编辑，所有操作应当在设计模块中完成</p>\n<p>&#x2F;Resources：存放qt标准资源（可以qt方式引用的资源）</p>\n<p>&#x2F;Other files</p>\n</blockquote>\n<h2 id=\"UI设计\"><a href=\"#UI设计\" class=\"headerlink\" title=\"UI设计\"></a>UI设计</h2><p>直接在qt creator的设计界面中打开<code>设计</code>模块。从画面左侧拖动组件，摆放至设计框中即可。</p>\n<p><em>问题</em>：组件散乱</p>\n<ul>\n<li>左侧组件库中有<code>layout</code>组件,将其拖动至设计框中,再向layout中添加组件，即可使所有组件呈现一定规律。</li>\n</ul>\n<blockquote>\n<p>布局类型：</p>\n<p>垂直：略</p>\n<p>水平：略</p>\n<p>栅格（grid）：上面俩合起来</p>\n<p>窗口：？存疑，不是很能理解这是啥</p>\n</blockquote>\n<p><em>问题</em>：使用layout组件后无法布局固定，启动ui界面后拖动窗口改变其大小，layout组件位置不动。</p>\n<ul>\n<li>应当首先在右侧<code>对象</code>框中选中主窗口（mainwindow）中的中间部件（centralwidget），右键选择布局，为整个中间部分设定大的布局，（注：主窗口除了中间部件还初始化了一个菜单栏（menubar）），然后在该布局中嵌套布局或组件。本方案选择了栅格布局，虽然只需垂直布局即可，但为了可拓展性，还是选择栅格。接下来在整个中间部分的栅格布局中，嵌套了一个垂直布局（用于输入和输出）和一个栅格布局（用于存放按键）。</li>\n</ul>\n<p>接下来在主窗口中添加所需的组件，分别为输入框、输出框、5*6个按键。然后可以对其属性进行可视化的设计，以下是对<code>设计</code>界面中一些工具的解释：</p>\n<blockquote>\n<p>右侧下方为属性框，显示了所选定组件的属性，每个组件都是层层继承而来，因此要注意每一层的具体属性以及继承关系。</p>\n<p>右侧上方为对象框，显示了当前ui文件中所有文件属性。</p>\n<p>正中央下方的框实际上有两个可编辑区域，一个为action editor，即为组件添加动作（可方便设置快捷键）。另一个为信号与槽。</p>\n<p>注：信号与槽是最Qt制作ui界面中最重要的机制。</p>\n</blockquote>\n<p>创建槽函数：在信号与槽编辑框中点击加号创建信号与槽，然后选择信号的发送对象、发送信号量、槽、响应函数。此处的创建<strong>只支持内定的槽函数</strong>，想要自定义槽函数，需在右侧对象中找到对象，然后右键选择转到槽，接下来选择信号量之后，Qt会跳转该ui文件对应的cpp文件下，并自动创建一个该槽函数的实现（.h文件中也会自动添加声明）。接下来只需在此槽函数中编写发送信号后（触发信号发送条件），所需只需的步骤即可。</p>\n<blockquote>\n<p>信号量是Qt类自带的属性，某个类既有自己的属性，也有继承而来的属性。如pushButton组件继承自QAbstractButton，后者又继承自QWidget，后者又继承自QObject。对于QAbstractButton，其自带的信号有<code>clicked()</code>,<code>pressed()</code>等，对于QWidget，有<code>windowIconChanged</code>等。具体解释请参考官方文档。</p>\n</blockquote>\n<p><code>设计</code>界面支持大量的属性设置，如字体，背景等。并且可以直接在ui界面中即时显示，但并不推荐直接做修改。</p>\n<p>一种渲染方式：Qt提供了qss来进行类似css的样式渲染，只需选中对象然后右键改变样式表，修改某个组件的样式表即可。Qss还提供了选择器的功能，因此，只需在某个较大的组件中设置样式表，并对不同的渲染对象进行选择即可。本方案一开始的办法就是在centralwidget组件中设置样式表，完成了酷炫的按键风格。需要注意的是，改变样式表的方法在Qt中是存在一定问题的，并且，<strong>任何写死的方法都可能在以后要修改时造成麻烦</strong>。关于样式表后面还会再进一步设定。</p>\n<h2 id=\"模拟按键\"><a href=\"#模拟按键\" class=\"headerlink\" title=\"模拟按键\"></a>模拟按键</h2><p>一个计算器应当提供一系列的按键，因此要在栅格布局中拖入一定数量的按键。按键分为输入按键和功能按键。</p>\n<ul>\n<li>输入按键：0123456789ABCDEF+-*&#x2F;（）</li>\n<li>功能按键：&lt;- -&gt; DEL CE UP DOWN &#x3D;</li>\n</ul>\n<p>对于输入按键，按下按键后应当在输入框中显示对应的输入，同时这些按键应当有对应的键盘输入。</p>\n<p>对于输出按键，左移和右移是为了移动输入框中的光标。DEL清除一个字符，CE要同时清除输入和输出框。UP和DOWN提供了查看历史功能。等号是整个计算器的核心功能，按下等号后，应当读取输入框中的算式，进行计算后将结果字符串返回至输出框中。</p>\n<p>通过在组件上右键选择 转到槽 可以快捷创建槽函数。示例如图：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.h</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_left_bracket_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_left_bracket_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">insertPlainText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>手动创建几个后，就可以发现其规矩。一个槽函数的名称由<code>on_name_action</code>组成。<code>pushButton_left_bracket</code>是改按键的名称，这个名称需要在ui文件中指定，当拖动pushButton的时候，qt会按照12345依次给其一个默认名称，并且上面的默认文字都是pushButton。因此对于声明，可以用宏生成。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindwo.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">clicked_func</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> on_pushButton_</span><span class=\"token punctuation\">##</span><span class=\"token expression\">name</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token function\">_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n  <span class=\"token function\">clicked_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">clicked_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">clicked_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">clicked_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//...</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">triggered_func</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> on_action</span><span class=\"token punctuation\">##</span><span class=\"token expression\">name</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token function\">_triggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n\n  <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>Author<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>Save<span class=\"token punctuation\">)</span> <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>Read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>History_location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>Auto_Save<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于实现，部分直接输入的槽函数也可以用宏生成</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">set_insert_func</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>                         </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token keyword\">void</span> MainWindow<span class=\"token double-colon punctuation\">::</span>on_pushButton_</span><span class=\"token punctuation\">##</span><span class=\"token expression\">name</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token function\">_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\">ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\">ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">insertPlainText</span><span class=\"token punctuation\">(</span>#name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span>\n\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>剩下的就只能自己写咯。</p>\n<h2 id=\"输入输出框\"><a href=\"#输入输出框\" class=\"headerlink\" title=\"输入输出框\"></a>输入输出框</h2><p>qt为用户提供了<code>text Browser</code>,<code>text Edit</code>,<code>Plain text edit</code>,<code>line edit</code>等组件作为文本框。这里选择了text Browser，目的是屏蔽直接复制粘贴输入，防止非法字符进入。结果后面发现<code>text Browser</code>是由<code>text Edit</code>继承而来，因此browser也可以提供输入功能（离谱，read Only属性。</p>\n<p>所有的输入按键都将在输入框中插入一个对应的字符。这里只需要调用<code>text Browser</code>类中自带的public function member：<code>insertPlainText(QString)</code>。</p>\n<p><em>问题</em>：文本框中的光标只有在选中文本框时才会显示，如果使用鼠标点击按键进行输入，输入框中的光标实际仍然存在但不显示。</p>\n<ul>\n<li>为了使得光标时刻存在，这里使用了一个简单粗暴的方法，为所有按键功能加上<code>setFocus()</code>。从而保证焦点始终在输入框中。</li>\n</ul>\n<p>对于输出框，每次显示结果都是更新所有内容（而不是插入），因此需要<code>setPlainText</code>。</p>\n<h2 id=\"等号\"><a href=\"#等号\" class=\"headerlink\" title=\"等号\"></a>等号</h2><p>等号按键是计算器最核心的按键，以下为等号按键的槽函数</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_equal_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  Location<span class=\"token double-colon punctuation\">::</span>isRead <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  QString s <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">toPlainText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString rst <span class=\"token operator\">=</span> <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_output<span class=\"token operator\">-></span><span class=\"token function\">setPlainText</span><span class=\"token punctuation\">(</span>rst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>autoSave<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> rst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>按下等号后，程序首先保证焦点仍然在输入框口上，然后讲是否正在读取历史记录按键设置为0（这讲在后面的历史记录读取中说到），然后获取输入框中的内容，交给由竞赛大佬@龚程昊编写的parser函数进行处理（这将在后面数据处理中说到），然后将parser函数返回的字符串（QString）显示到输出框中，然后在自动保存功能开启的情况下，保存至本地文件中。</p>\n<h2 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a>数据处理</h2><p>等会儿copy大佬写的东西，大致思路是使用栈和转化为前缀表达式。</p>\n<p>但大佬使用的使用的是std库，并且是作为一个单独的cpp程序书写的（方便调试）。因此，这里将源文件复制到parser文件中，并将main函数改写成接受<code>QString</code>作为参数，返回<code>QString</code>的parser()函数。这里用到了<code>QString::toStdString</code>和<code>QString::fromStdString</code>。</p>\n<p>记录几个当时测试出来的bug：</p>\n<ol>\n<li>只写一个数后按等号，直接返回0</li>\n<li>没有考虑负数</li>\n<li>没有考虑溢出</li>\n</ol>\n<p>附上代码</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//parser.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"parser.h\"</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">pd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">57</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> i<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// priority</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token char\">'+'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> i<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//乱码</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">57</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token char\">'+'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span> <span class=\"token operator\">||</span>\n      i <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token char\">'/'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token char\">'('</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nQString <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>QString expression<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1007</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span> R <span class=\"token operator\">=</span> LONG_MAX<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stack1<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">long</span> read<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sta<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stack2<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stt<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">bool</span> f<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fff <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  string c<span class=\"token punctuation\">,</span> sc<span class=\"token punctuation\">;</span>\n  string str<span class=\"token punctuation\">,</span> as <span class=\"token operator\">=</span> expression<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  str <span class=\"token operator\">=</span> <span class=\"token string\">\"0+\"</span> <span class=\"token operator\">+</span> as<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">judge</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'('</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">')'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'+'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span> <span class=\"token operator\">||</span>\n                        s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>l <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> st <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//括号是否匹配</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span> st<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> st<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> l <span class=\"token operator\">&amp;&amp;</span> ff <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//数字</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">57</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        sta<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">48</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        sta<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">55</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//符号</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//前面的数字</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> h<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          cnt <span class=\"token operator\">+=</span> sta<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          k<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        read<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cnt<span class=\"token punctuation\">;</span>\n        m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        read<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//前面的符号</span>\n        <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        read<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//数字</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Detect Overflow\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> h<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      cnt <span class=\"token operator\">+=</span> sta<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">></span> R<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Detect Overflow\"</span><span class=\"token punctuation\">;</span>\n      k<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    read<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cnt<span class=\"token punctuation\">;</span>\n    m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span>\n          <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span>\n               <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//反缀表达式</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        stack1<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//+-</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          flag<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n          a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        stack1<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//*/</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          flag<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n          a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        stack1<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          flag<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n          a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    flag<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// calculation</span>\n  <span class=\"token keyword\">int</span> g <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> cn <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//数字</span>\n    <span class=\"token punctuation\">&#123;</span>\n      stt<span class=\"token punctuation\">[</span>g<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      g<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//符号</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>stack2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token char\">'+'</span><span class=\"token operator\">:</span>\n          cn <span class=\"token operator\">=</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">></span> R<span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token char\">'-'</span><span class=\"token operator\">:</span>\n          cn <span class=\"token operator\">=</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span>R<span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token char\">'*'</span><span class=\"token operator\">:</span>\n          cn <span class=\"token operator\">=</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">></span> R <span class=\"token operator\">||</span> cn <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span>R<span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token char\">'/'</span><span class=\"token operator\">:</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            cn <span class=\"token operator\">=</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      g <span class=\"token operator\">-=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n      stt<span class=\"token punctuation\">[</span>g<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cn<span class=\"token punctuation\">;</span>\n      g<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> cnn <span class=\"token operator\">=</span> cn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>ff<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//        cout&lt;&lt;str&lt;&lt;\"=\"&lt;&lt;cn&lt;&lt;endl;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n    fff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>ff<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//转十六进制</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      x <span class=\"token operator\">=</span> cn <span class=\"token operator\">%</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        c <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span>\n        c <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n      sc <span class=\"token operator\">=</span> c <span class=\"token operator\">+</span> sc<span class=\"token punctuation\">;</span>\n      cn <span class=\"token operator\">/=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      x <span class=\"token operator\">=</span> cn <span class=\"token operator\">%</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        c <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x <span class=\"token operator\">+</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span>\n        c <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x <span class=\"token operator\">+</span> <span class=\"token char\">'A'</span> <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n      sc <span class=\"token operator\">=</span> c <span class=\"token operator\">+</span> sc<span class=\"token punctuation\">;</span>\n      cn <span class=\"token operator\">/=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnn <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    sc <span class=\"token operator\">=</span> <span class=\"token char\">'-'</span> <span class=\"token operator\">+</span> sc<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ff <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>fff<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//        cout&lt;&lt;as&lt;&lt;\"=\";</span>\n    <span class=\"token comment\">//        cout&lt;&lt;sc&lt;&lt;endl;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sc <span class=\"token operator\">==</span> <span class=\"token string\">\"-80000000\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Detect Overflow\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromStdString</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Formula Error\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>贴代码的时候才发现大佬写了一个pd（判断）和一个judge（还是判断）。算了算了，能用就行（</p>\n<h2 id=\"历史记录\"><a href=\"#历史记录\" class=\"headerlink\" title=\"历史记录\"></a>历史记录</h2><p>如果只是作为计算器，以上功能就已经可以算完成了。但大多数计算器都是有历史记录功能的，因此这个计算器也该有一个。</p>\n<p>这里将历史记录分为底层和顶层两部分来设计，顶层使用Qt框架，而底层使用c的基本库，从而实现更加原子化和方便的操作。</p>\n<p>顶层实现的用户接口功能：</p>\n<ul>\n<li>手动保存当前结果</li>\n<li>选择是否自动保存结果</li>\n<li>选择保存位置</li>\n<li>读取历史记录</li>\n</ul>\n<p>底层实现的文本的读写功能</p>\n<ul>\n<li>获取时间</li>\n<li>记录结果</li>\n<li>写入和读取</li>\n</ul>\n<h3 id=\"底层设计细节\"><a href=\"#底层设计细节\" class=\"headerlink\" title=\"底层设计细节\"></a>底层设计细节</h3><p>保存功能被设计为，获取当前时间和本次运算的算式和结果，以新行的方式追加到某文件的结尾。保存功能的底层设计都被保存在<code>saving</code>文件下。</p>\n<p>为此底层使用std库设计了<code>save()</code>函数。该函数还调用了<code>getCurrentTime()</code>来获取当前时间。当然，这个函数也是由<code>main()</code>函数修改而来，由std框架接入了qt框架。源码如下：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//saving.cpp</span>\n<span class=\"token keyword\">static</span> string <span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//输出当前时间</span>\n<span class=\"token punctuation\">&#123;</span>\n  time_t t <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">strftime</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%Y-%m-%d %H:%M:%S\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ch<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>QString location<span class=\"token punctuation\">,</span> QString fomula<span class=\"token punctuation\">,</span> QString data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  string addr <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  fstream f<span class=\"token punctuation\">;</span>\n  f<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>out <span class=\"token operator\">|</span> ios<span class=\"token double-colon punctuation\">::</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  f <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> fomula<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"=\"</span>\n    <span class=\"token operator\">&lt;&lt;</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//变量addr、以及gch的等式和输出结果变量还需加进去</span>\n  f<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>除了保存结果外，还需要读取结果，读取结果需要始终从最后一行开始往上读。经历了一系列讨论之后，本项目决定使用读取整个文件来获取所有的行数，并根据行数来获取内容。为此有了<code>CountLine()</code>和<code>readLine()</code>两个函数：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">CountLines</span><span class=\"token punctuation\">(</span>QString filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ifstream f<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  string tmp<span class=\"token punctuation\">;</span>\n  string stdfilename <span class=\"token operator\">=</span> filename<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ios::in 表示以只读的方式读取文件</span>\n  f<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>stdfilename<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//文件打开失败:返回0</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//文件存在</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">,</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nQString <span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span>QString filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//读取指定行文件</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// line行数限制 1 - lines</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>line <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> line <span class=\"token operator\">&lt;=</span> <span class=\"token function\">CountLines</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    ifstream f<span class=\"token punctuation\">;</span>\n    string stdfilename <span class=\"token operator\">=</span> filename<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>stdfilename<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> strVec<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//行0 - 行lines对应strvect[0] - strvect[lines]</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">eof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      string inbuf<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> inbuf<span class=\"token punctuation\">,</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      strVec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>inbuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromStdString</span><span class=\"token punctuation\">(</span>strVec<span class=\"token punctuation\">[</span>line <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>读取整个文件并计算行数并不是一个效率高的方式，但在文件不大和不追求高效率的条件下，这是最好的实践方式。因为考虑这里还需要考虑到连续读取历史文件。</p>\n<p>当用户按下<code>UP</code>按键时，表示用户开始读取历史文件。用户首先查看的应该是历史文件的最后一行，当用户再次按下<code>UP</code>时，读取倒数第二行，依次类推。为了实现该功能，这里使用了一个全局变量<code>line</code>表示当前正在读取的行数，该行数被初始化为历史记录的总行数。然后再次读取将会<code>--line</code>后读取。当用户按下<code>DOWN</code>按键时，++line后读取。</p>\n<p>这里就要考虑到另一个问题，读取一定历史记录后，用户重新进行计算，然后再次查看历史记录，这样行数应当从新的历史记录最后一行开始计算。为此，这里引入了<code>isRead</code>变量，该变量初始化为<code>0</code>，表示现在未在读取。首次按下<code>UP</code>按键时，该变量置<code>1</code>，同时将<code>line</code>变量初始化为当前历史记录行数。当用户按下<code>UP</code>或<code>DOWN</code>按键时，正常修改<code>line</code>变量的值并进行读取即可。当用户按下<code>=</code>或手动保存时，需要将<code>isRead</code>置零。这样下一次按下<code>UP</code>时，将重新读取历史文件行数并为<code>line</code>赋值。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token comment\">//等号的槽函数在上面</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_Up_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>isRead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">--</span>Location<span class=\"token double-colon punctuation\">::</span>line<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    Location<span class=\"token double-colon punctuation\">::</span>line <span class=\"token operator\">=</span> <span class=\"token function\">CountLines</span><span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Location<span class=\"token double-colon punctuation\">::</span>isRead <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_output<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">,</span> Location<span class=\"token double-colon punctuation\">::</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_Down_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>isRead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">++</span>Location<span class=\"token double-colon punctuation\">::</span>line<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_output<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">,</span> Location<span class=\"token double-colon punctuation\">::</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>保存和读取的路径将在<code>顶层设计细节</code>中进一步讨论。</p>\n<h3 id=\"顶层设计细节\"><a href=\"#顶层设计细节\" class=\"headerlink\" title=\"顶层设计细节\"></a>顶层设计细节</h3><p>这里在menubar中设置了一个<code>history location</code>按键，用于修改历史文件的存放位置。当按下此按键时，程序应当打开一个新的窗口，因此，需要首先在源文件中创建一个新的窗口。右键点击<code>项目</code>，选择<code>add new</code>，选择<code>qt设计师类</code>，然后会分别在三个文件夹中依次得到头文件、源文件、ui设计文件。然后需要在主窗口中设置点击<code>history location</code>按键打开新窗口。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_actionHistory_location_triggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  Location <span class=\"token operator\">*</span>new_win <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Location</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  new_win<span class=\"token operator\">-></span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注意</strong>：记得在<code>mainwindow.h</code>中include<code>location.h</code>，按下打开新窗口实际上就是创建一个新的Location窗口，然后展示。</p>\n<p>接下来就是在<code>location.ui</code>中修改和设计可视化窗口，此项目使用了栅格布局，在左侧设置了一个较大的<code>textBrowser</code>和较小的<code>lineEdit</code>（设为不可修改，用于给出提示），在右侧依次设置了<code>选择文件</code>，<code>选择文件夹</code>，<code>确定</code>，<code>取消</code> 四个按键。</p>\n<blockquote>\n<p>选择文件：调用Qt库，打开系统默认的文件选择框，设置必须选择.txt格式结尾的文件，将返回的结果输出至<code>textBrowser</code>。</p>\n<p>选择文件夹：同上，但是选择的是文件夹，并且返回的是存在的文件夹的路径，将返回的结果加上<code>/result.txt</code>后输入至<code>textBrowser</code>。</p>\n<p>确定：按下后，读取<code>textBrowser</code>中的路径，检查其合法性（因为一开始<code>textBrowser</code>设置了可以直接更改，因此可能会输入奇怪的路径），若不合法则在<code>lineEdit</code>中给出相应的报错（格式不合法或路径不合法）。若合法，则检查文件是否存在，不存在则创建。当一切都合理以后，将全局变量<code>filePath</code>设为文本框中的内容，并关闭<code>Location</code>窗口。</p>\n<p>取消：直接关闭，不做任何修改。</p>\n</blockquote>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//location.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_path_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QString file_name <span class=\"token operator\">=</span>\n      <span class=\"token class-name\">QFileDialog</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getOpenFileName</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"选择txt文件\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ui<span class=\"token operator\">-></span>textEdit<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_dir_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QString dir_name <span class=\"token operator\">=</span> <span class=\"token class-name\">QFileDialog</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getExistingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"选择文件夹\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ui<span class=\"token operator\">-></span>textEdit<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>dir_name <span class=\"token operator\">+</span> <span class=\"token string\">\"/result.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_cancel_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_sure_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QString new_path <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>textEdit<span class=\"token operator\">-></span><span class=\"token function\">toPlainText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QFileInfo <span class=\"token function\">info</span><span class=\"token punctuation\">(</span>new_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>new_path<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      QFile <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>new_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      f<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QIODevice<span class=\"token double-colon punctuation\">::</span>WriteOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      f<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      ui<span class=\"token operator\">-></span>prompt<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路径或格式不合法，请重新输入\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token operator\">=</span>new_path<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>自动保存功能被设计为主窗口中菜单栏中的一个按键，默认为开启状态，显示为<code>Auto Save On</code>，当点击该按键后，槽函数将该文本替换为<code>Auto Save Off</code>，并将全局变量<code>autoSave</code>置零。</p>\n<p><code>filePath</code>和<code>autoSave</code>以及底层中的<code>isRead</code>和<code>line</code>都设计为一个全局变量，便于主窗口调用。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//location.h</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Location</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QDialog</span></span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">static</span> QString filePath<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> isRead<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> autoSave<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//location.cpp</span>\nQString Location<span class=\"token double-colon punctuation\">::</span>filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"result.txt\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> Location<span class=\"token double-colon punctuation\">::</span>line <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> Location<span class=\"token double-colon punctuation\">::</span>isRead <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> Location<span class=\"token double-colon punctuation\">::</span>autoSave <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在主窗口中，只有用户按下等号（并且自动保存功能开启）或手动保存（在<code>menubar</code>中设置了一个保存按键并且设置了快捷键）时，才会保存。因此只需在这些地方加入<code>save()</code>函数即可。当然，也要有对<code>autoSave</code>的判断。</p>\n<h2 id=\"样式设定\"><a href=\"#样式设定\" class=\"headerlink\" title=\"样式设定\"></a>样式设定</h2><p>前面提到了可以在<code>ui</code>文件中直接修改样式，但这种方式并不利于后面的修改，因此我们选择直接调用函数的方式。如要为<code>centralWidget</code>设定样式，可以调用<code>setStyelSheet()</code>，后接一个QString，该字符串中直接书写qss内容。</p>\n<p>这里选择了另一种方式，使用qt的资源文件管理功能来存储单独的qss文件，然后以前缀引用的方式来调用这些文件。</p>\n<p>在<code>项目</code>中右键新建<code>qt resource file</code>，设定名称后打开管理界面，点击添加前缀<code>add prefix</code>。然后添加文件<code>add Files</code>。前缀决定了调用的方式（将会在源代码中演示）。文件可以新建一个<code>general file</code>后添加，也可以将其他方式创建的qss文件加入。</p>\n<p>引入的资源可以以<code>QFile</code>的方式引用。本项目在菜单栏中添加了一个黑色主题的选项，其槽函数如下</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_actionBlack_theme_triggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  globalQss <span class=\"token operator\">=</span> <span class=\"token string\">\":/Black.qss\"</span><span class=\"token punctuation\">;</span>\n  QFile <span class=\"token function\">defaultQss</span><span class=\"token punctuation\">(</span>globalQss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  defaultQss<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QFile<span class=\"token double-colon punctuation\">::</span>ReadOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString qssContent <span class=\"token operator\">=</span> defaultQss<span class=\"token punctuation\">.</span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">centralWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">setStyleSheet</span><span class=\"token punctuation\">(</span>qssContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>/</code>为我设定的前缀，只需以冒号开头，加上前缀和文件，即表明在应用qt指定好的资源文件。接下来就只需打开该文件并读取其内容，然后为需要的组件设定qss样式即可。</p>\n<p><strong>注意</strong>：使用qss的一些麻烦：后面我希望能设定字体的大小、样式等，但这时通过<code>setFont()</code>等函数并不起作用。原因估计是qss的优先级很高，直接设定将不起作用。这时我只能再写一个<code>changeStyle()</code>函数，通过qss样式表更新来进行样式更新</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">changeStyle</span><span class=\"token punctuation\">(</span>QString newStyle<span class=\"token punctuation\">,</span> QWidget <span class=\"token operator\">*</span>widget<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QString oldStyle <span class=\"token operator\">=</span> widget<span class=\"token operator\">-></span><span class=\"token function\">styleSheet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  oldStyle <span class=\"token operator\">+=</span> newStyle<span class=\"token punctuation\">;</span>\n  widget<span class=\"token operator\">-></span><span class=\"token function\">setStyleSheet</span><span class=\"token punctuation\">(</span>oldStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以这里我只写了改变字体的函数。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_actionLarge_font_size_triggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">changeStyle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*&#123;font:30px;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">centralWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"保存设置\"><a href=\"#保存设置\" class=\"headerlink\" title=\"保存设置\"></a>保存设置</h2><p>类似于文件的保存位置，是否自动保存等功能，每次重新启动程序后都会按照程序的设定重新初始化。为了使得这些设定能被保存下来，需要使用一个文件将这些配置保存下来。恰好最近见到了许多<code>ini</code>格式文件，qt也提供了<code>QSetting</code>及配套的<code>ini</code>配置文件读写。</p>\n<p>配置文件应当在主窗口创建时被读取，在主窗口被销毁时被存入。因此只需在<code>mainwindow</code>的构造函数和析构函数中加入读写<code>ini</code>文件的步骤即可。需要注意的是，要考虑<code>ini</code>文件不存在的情况，不存在时需要使用程序的内置设定。</p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>MainWindow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">grabKeyboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  QSettings <span class=\"token operator\">*</span>iniRead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QSettings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.ini\"</span><span class=\"token punctuation\">,</span> QSettings<span class=\"token double-colon punctuation\">::</span>IniFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString iniAuto <span class=\"token operator\">=</span> iniRead<span class=\"token operator\">-></span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"autoSave\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString iniPath <span class=\"token operator\">=</span> iniRead<span class=\"token operator\">-></span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filePath\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString iniQss <span class=\"token operator\">=</span> iniRead<span class=\"token operator\">-></span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"globalQss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> iniRead<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// init autoSave</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>iniAuto<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>iniAuto<span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Location<span class=\"token double-colon punctuation\">::</span>autoSave <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    ui<span class=\"token operator\">-></span>actionAuto_Save<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Auto Save Off\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// init filePath</span>\n  QFile <span class=\"token function\">iniPathFile</span><span class=\"token punctuation\">(</span>iniPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iniPathFile<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QFile<span class=\"token double-colon punctuation\">::</span>WriteOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Location<span class=\"token double-colon punctuation\">::</span>filePath <span class=\"token operator\">=</span> iniPath<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// init Qss file(theme)</span>\n  QFile <span class=\"token function\">iniQssFile</span><span class=\"token punctuation\">(</span>iniQss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString qssContent<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iniQssFile<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QFile<span class=\"token double-colon punctuation\">::</span>ReadOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    qssContent <span class=\"token operator\">=</span> iniQssFile<span class=\"token punctuation\">.</span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    globalQss <span class=\"token operator\">=</span> iniQss<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    QFile <span class=\"token function\">defaultQss</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":/Black.qss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    defaultQss<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QFile<span class=\"token double-colon punctuation\">::</span>ReadOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    qssContent <span class=\"token operator\">=</span> defaultQss<span class=\"token punctuation\">.</span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">centralWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">setStyleSheet</span><span class=\"token punctuation\">(</span>qssContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QSettings <span class=\"token operator\">*</span>IniWrite <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QSettings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.ini\"</span><span class=\"token punctuation\">,</span> QSettings<span class=\"token double-colon punctuation\">::</span>IniFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  IniWrite<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"autoSave\"</span><span class=\"token punctuation\">,</span> Location<span class=\"token double-colon punctuation\">::</span>autoSave<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  IniWrite<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filePath\"</span><span class=\"token punctuation\">,</span> Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  IniWrite<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"globalQss\"</span><span class=\"token punctuation\">,</span> globalQss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> IniWrite<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>在主函数中为整个窗口设置了透明度，让它看起来酷炫一点点。</li>\n<li>在主函数中为窗口设定名称。</li>\n<li>在<code>.pro</code>文件中加入图标文件，使得生成的程序有图标</li>\n</ul>\n<h1 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h1><h2 id=\"收获\"><a href=\"#收获\" class=\"headerlink\" title=\"收获\"></a>收获</h2><ul>\n<li>不再害怕qt框架了，反而觉得它好用。</li>\n<li>qt的窗口类很舒服，有清晰且层次分明的关系，有足够好用的成员函数。</li>\n<li>qt的基本库也有不少可以讨论的，如QString的设计，不仅提供了基本的可变长度和操作符重载，还考虑到了和std库之间的转换。</li>\n<li>qt的信号与槽机制是qt最精髓的东西之一，信号是一种非常不错的线程间通信方式，很遗憾我没有手动使用connect函数来创建信号与槽。但确实在写qt的过程中，qtcreator已经为我提供了足够的可视化信号与槽构建工具。</li>\n<li>qss基本等于css</li>\n<li>qt以易于制作ui界面出名，但用了之后发现，qt实际上是借鉴了很多现代浏览器（前端）的实现方式。我写的时候感觉自己像是在写js+css。对于一个web项目来说，前端工程师书写html，css，以及利用框架来写js。后端工程师则使用各种工具来构建web服务。但对于qt这样一种前后结合的一体化程序设计框架来说，前后的分离并不彻底（虽然对硬件工程师来说可能会很友好）。</li>\n<li>我还是支持“qt是一个平台而不只是一个ui框架”这种说法。qt在基本库中的内容一点也不比它在ui界面中的少。无论是基本库还是ui库，都有很多可以研究的东西。</li>\n<li>宏的自动扩展确实好用</li>\n<li>qt毕竟还是封装的比较高层了，要是需要一些简单的功能，还是老老实实写原生的c和std吧。</li>\n</ul>\n<h2 id=\"遗憾\"><a href=\"#遗憾\" class=\"headerlink\" title=\"遗憾\"></a>遗憾</h2><ul>\n<li>大佬说他使用了前缀表达式，求余和翻方功能不好实现，我懂的算法也不多，这两个功能没能实现。只能说算法能力有待提高了。</li>\n</ul>\n"},{"title":"重学linux（10）","abbrlink":"a4d04884","date":"2022-03-02T06:45:24.000Z","_content":"\n# 磁盘配额（Quota）\n\n多人模式下的磁盘容量分配，感觉用不到，略了。\n\n# RAID\n\n`Redundant Arrays of Inexpensive Disks`\n\n已经熟悉这个话题了，稍微记一下\n\n- raid0\n- raid1\n- raid1+0，raid0+1\n- raid5，raid6\n- 热备份磁盘：该磁盘不包含在阵列中，当阵列中磁盘有任何损坏时，该磁盘会被拉入阵列\n\n## 硬件阵列\n\n贵\n\n## 软件阵列\n\n### mdadm\n\n| 参数              | 含义                               |\n| ----------------- | ---------------------------------- |\n| --create          | 建立raid                           |\n| --auto=yes        |                                    |\n| --chunk=Nk        | 决定设备的chunk大小                |\n| --raid-devices=N  | 使用几个磁盘分区作为磁盘阵列的设备 |\n| --spare-devices=N | 使用几个磁盘作为备用设备           |\n| --level=[0,1,5]   | 阵列级别                           |\n| --detail          | 显示磁盘阵列设备的详细信息         |\n| --manage          | 管理磁盘                           |\n\n# LVM\n\n好东西，已经用过一次了，复习下。\n\n- PV: Physical Volume\n- VG: Volume Group\n- PE: Physical Extent（会限制lvm的最大容量，现在不重要了）\n- LV: Logical Volume\n\n### 以下为建立流程\n\n#### Disk阶段\n\ngdisk分个区\n\n#### PV阶段\n\n```bash\npvcreate\npvscan\npvdisplay\npvremove\n```\n\n#### VG阶段\n\n```bash\nvgcreate\nvgscan\nvgdisplay\nvgextend\nvgreduce\nvgchange\nvgremote\n```\n\n#### LV阶段\n\n```bash\nlvcreate\nlvscan\nlvdisplay\nlvextend\nlvreduce\nlvremove\nlvresize\n```\n\n### 以下为放大流程\n\n- vg阶段需要剩余的容量：`pvcreate`，`vgextend`\n- LV阶段产生更多可用容量：`lvresize`\n- 文件系统阶段的放大：`xfs_growfs`（注意，xfs只能放大，不能缩小（但是ext4有））\n\n### LVM thin Volume\n\nLVM动态调整磁盘使用率，即先声明大小，然后使用时分配（当然，一定不要超过实际的容量，不然会损坏数据）\n\n### LV snapshot\n\n在`lvcreate`时加入`-s`选项表示这是一个快照分区，这是个很有用的功能，但鸟哥给的不够详细。用到的时候再来看看。\n\n","source":"_posts/Operation/重学linux（10）.md","raw":"---\ntitle: 重学linux（10）\ntags:\n  - 专栏：重学linux\n  - linux\ncategories: Operation\nabbrlink: a4d04884\ndate: 2022-03-02 14:45:24\n---\n\n# 磁盘配额（Quota）\n\n多人模式下的磁盘容量分配，感觉用不到，略了。\n\n# RAID\n\n`Redundant Arrays of Inexpensive Disks`\n\n已经熟悉这个话题了，稍微记一下\n\n- raid0\n- raid1\n- raid1+0，raid0+1\n- raid5，raid6\n- 热备份磁盘：该磁盘不包含在阵列中，当阵列中磁盘有任何损坏时，该磁盘会被拉入阵列\n\n## 硬件阵列\n\n贵\n\n## 软件阵列\n\n### mdadm\n\n| 参数              | 含义                               |\n| ----------------- | ---------------------------------- |\n| --create          | 建立raid                           |\n| --auto=yes        |                                    |\n| --chunk=Nk        | 决定设备的chunk大小                |\n| --raid-devices=N  | 使用几个磁盘分区作为磁盘阵列的设备 |\n| --spare-devices=N | 使用几个磁盘作为备用设备           |\n| --level=[0,1,5]   | 阵列级别                           |\n| --detail          | 显示磁盘阵列设备的详细信息         |\n| --manage          | 管理磁盘                           |\n\n# LVM\n\n好东西，已经用过一次了，复习下。\n\n- PV: Physical Volume\n- VG: Volume Group\n- PE: Physical Extent（会限制lvm的最大容量，现在不重要了）\n- LV: Logical Volume\n\n### 以下为建立流程\n\n#### Disk阶段\n\ngdisk分个区\n\n#### PV阶段\n\n```bash\npvcreate\npvscan\npvdisplay\npvremove\n```\n\n#### VG阶段\n\n```bash\nvgcreate\nvgscan\nvgdisplay\nvgextend\nvgreduce\nvgchange\nvgremote\n```\n\n#### LV阶段\n\n```bash\nlvcreate\nlvscan\nlvdisplay\nlvextend\nlvreduce\nlvremove\nlvresize\n```\n\n### 以下为放大流程\n\n- vg阶段需要剩余的容量：`pvcreate`，`vgextend`\n- LV阶段产生更多可用容量：`lvresize`\n- 文件系统阶段的放大：`xfs_growfs`（注意，xfs只能放大，不能缩小（但是ext4有））\n\n### LVM thin Volume\n\nLVM动态调整磁盘使用率，即先声明大小，然后使用时分配（当然，一定不要超过实际的容量，不然会损坏数据）\n\n### LV snapshot\n\n在`lvcreate`时加入`-s`选项表示这是一个快照分区，这是个很有用的功能，但鸟哥给的不够详细。用到的时候再来看看。\n\n","slug":"重学linux（10）","published":1,"category":"Operation","updated":"2022-03-02T09:23:49.028Z","_id":"cl09cqarn0000jsulfngggnp4","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"磁盘配额（Quota）\"><a href=\"#磁盘配额（Quota）\" class=\"headerlink\" title=\"磁盘配额（Quota）\"></a>磁盘配额（Quota）</h1><p>多人模式下的磁盘容量分配，感觉用不到，略了。</p>\n<h1 id=\"RAID\"><a href=\"#RAID\" class=\"headerlink\" title=\"RAID\"></a>RAID</h1><p><code>Redundant Arrays of Inexpensive Disks</code></p>\n<p>已经熟悉这个话题了，稍微记一下</p>\n<ul>\n<li>raid0</li>\n<li>raid1</li>\n<li>raid1+0，raid0+1</li>\n<li>raid5，raid6</li>\n<li>热备份磁盘：该磁盘不包含在阵列中，当阵列中磁盘有任何损坏时，该磁盘会被拉入阵列</li>\n</ul>\n<h2 id=\"硬件阵列\"><a href=\"#硬件阵列\" class=\"headerlink\" title=\"硬件阵列\"></a>硬件阵列</h2><p>贵</p>\n<h2 id=\"软件阵列\"><a href=\"#软件阵列\" class=\"headerlink\" title=\"软件阵列\"></a>软件阵列</h2><h3 id=\"mdadm\"><a href=\"#mdadm\" class=\"headerlink\" title=\"mdadm\"></a>mdadm</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–create</td>\n<td>建立raid</td>\n</tr>\n<tr>\n<td>–auto&#x3D;yes</td>\n<td></td>\n</tr>\n<tr>\n<td>–chunk&#x3D;Nk</td>\n<td>决定设备的chunk大小</td>\n</tr>\n<tr>\n<td>–raid-devices&#x3D;N</td>\n<td>使用几个磁盘分区作为磁盘阵列的设备</td>\n</tr>\n<tr>\n<td>–spare-devices&#x3D;N</td>\n<td>使用几个磁盘作为备用设备</td>\n</tr>\n<tr>\n<td>–level&#x3D;[0,1,5]</td>\n<td>阵列级别</td>\n</tr>\n<tr>\n<td>–detail</td>\n<td>显示磁盘阵列设备的详细信息</td>\n</tr>\n<tr>\n<td>–manage</td>\n<td>管理磁盘</td>\n</tr>\n</tbody></table>\n<h1 id=\"LVM\"><a href=\"#LVM\" class=\"headerlink\" title=\"LVM\"></a>LVM</h1><p>好东西，已经用过一次了，复习下。</p>\n<ul>\n<li>PV: Physical Volume</li>\n<li>VG: Volume Group</li>\n<li>PE: Physical Extent（会限制lvm的最大容量，现在不重要了）</li>\n<li>LV: Logical Volume</li>\n</ul>\n<h3 id=\"以下为建立流程\"><a href=\"#以下为建立流程\" class=\"headerlink\" title=\"以下为建立流程\"></a>以下为建立流程</h3><h4 id=\"Disk阶段\"><a href=\"#Disk阶段\" class=\"headerlink\" title=\"Disk阶段\"></a>Disk阶段</h4><p>gdisk分个区</p>\n<h4 id=\"PV阶段\"><a href=\"#PV阶段\" class=\"headerlink\" title=\"PV阶段\"></a>PV阶段</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pvcreate\npvscan\npvdisplay\npvremove<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"VG阶段\"><a href=\"#VG阶段\" class=\"headerlink\" title=\"VG阶段\"></a>VG阶段</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">vgcreate\nvgscan\nvgdisplay\nvgextend\nvgreduce\nvgchange\nvgremote<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"LV阶段\"><a href=\"#LV阶段\" class=\"headerlink\" title=\"LV阶段\"></a>LV阶段</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lvcreate\nlvscan\nlvdisplay\nlvextend\nlvreduce\nlvremove\nlvresize<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"以下为放大流程\"><a href=\"#以下为放大流程\" class=\"headerlink\" title=\"以下为放大流程\"></a>以下为放大流程</h3><ul>\n<li>vg阶段需要剩余的容量：<code>pvcreate</code>，<code>vgextend</code></li>\n<li>LV阶段产生更多可用容量：<code>lvresize</code></li>\n<li>文件系统阶段的放大：<code>xfs_growfs</code>（注意，xfs只能放大，不能缩小（但是ext4有））</li>\n</ul>\n<h3 id=\"LVM-thin-Volume\"><a href=\"#LVM-thin-Volume\" class=\"headerlink\" title=\"LVM thin Volume\"></a>LVM thin Volume</h3><p>LVM动态调整磁盘使用率，即先声明大小，然后使用时分配（当然，一定不要超过实际的容量，不然会损坏数据）</p>\n<h3 id=\"LV-snapshot\"><a href=\"#LV-snapshot\" class=\"headerlink\" title=\"LV snapshot\"></a>LV snapshot</h3><p>在<code>lvcreate</code>时加入<code>-s</code>选项表示这是一个快照分区，这是个很有用的功能，但鸟哥给的不够详细。用到的时候再来看看。</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/luren0.jpg","excerpt":"","more":"<h1 id=\"磁盘配额（Quota）\"><a href=\"#磁盘配额（Quota）\" class=\"headerlink\" title=\"磁盘配额（Quota）\"></a>磁盘配额（Quota）</h1><p>多人模式下的磁盘容量分配，感觉用不到，略了。</p>\n<h1 id=\"RAID\"><a href=\"#RAID\" class=\"headerlink\" title=\"RAID\"></a>RAID</h1><p><code>Redundant Arrays of Inexpensive Disks</code></p>\n<p>已经熟悉这个话题了，稍微记一下</p>\n<ul>\n<li>raid0</li>\n<li>raid1</li>\n<li>raid1+0，raid0+1</li>\n<li>raid5，raid6</li>\n<li>热备份磁盘：该磁盘不包含在阵列中，当阵列中磁盘有任何损坏时，该磁盘会被拉入阵列</li>\n</ul>\n<h2 id=\"硬件阵列\"><a href=\"#硬件阵列\" class=\"headerlink\" title=\"硬件阵列\"></a>硬件阵列</h2><p>贵</p>\n<h2 id=\"软件阵列\"><a href=\"#软件阵列\" class=\"headerlink\" title=\"软件阵列\"></a>软件阵列</h2><h3 id=\"mdadm\"><a href=\"#mdadm\" class=\"headerlink\" title=\"mdadm\"></a>mdadm</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–create</td>\n<td>建立raid</td>\n</tr>\n<tr>\n<td>–auto&#x3D;yes</td>\n<td></td>\n</tr>\n<tr>\n<td>–chunk&#x3D;Nk</td>\n<td>决定设备的chunk大小</td>\n</tr>\n<tr>\n<td>–raid-devices&#x3D;N</td>\n<td>使用几个磁盘分区作为磁盘阵列的设备</td>\n</tr>\n<tr>\n<td>–spare-devices&#x3D;N</td>\n<td>使用几个磁盘作为备用设备</td>\n</tr>\n<tr>\n<td>–level&#x3D;[0,1,5]</td>\n<td>阵列级别</td>\n</tr>\n<tr>\n<td>–detail</td>\n<td>显示磁盘阵列设备的详细信息</td>\n</tr>\n<tr>\n<td>–manage</td>\n<td>管理磁盘</td>\n</tr>\n</tbody></table>\n<h1 id=\"LVM\"><a href=\"#LVM\" class=\"headerlink\" title=\"LVM\"></a>LVM</h1><p>好东西，已经用过一次了，复习下。</p>\n<ul>\n<li>PV: Physical Volume</li>\n<li>VG: Volume Group</li>\n<li>PE: Physical Extent（会限制lvm的最大容量，现在不重要了）</li>\n<li>LV: Logical Volume</li>\n</ul>\n<h3 id=\"以下为建立流程\"><a href=\"#以下为建立流程\" class=\"headerlink\" title=\"以下为建立流程\"></a>以下为建立流程</h3><h4 id=\"Disk阶段\"><a href=\"#Disk阶段\" class=\"headerlink\" title=\"Disk阶段\"></a>Disk阶段</h4><p>gdisk分个区</p>\n<h4 id=\"PV阶段\"><a href=\"#PV阶段\" class=\"headerlink\" title=\"PV阶段\"></a>PV阶段</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pvcreate\npvscan\npvdisplay\npvremove<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"VG阶段\"><a href=\"#VG阶段\" class=\"headerlink\" title=\"VG阶段\"></a>VG阶段</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">vgcreate\nvgscan\nvgdisplay\nvgextend\nvgreduce\nvgchange\nvgremote<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"LV阶段\"><a href=\"#LV阶段\" class=\"headerlink\" title=\"LV阶段\"></a>LV阶段</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lvcreate\nlvscan\nlvdisplay\nlvextend\nlvreduce\nlvremove\nlvresize<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"以下为放大流程\"><a href=\"#以下为放大流程\" class=\"headerlink\" title=\"以下为放大流程\"></a>以下为放大流程</h3><ul>\n<li>vg阶段需要剩余的容量：<code>pvcreate</code>，<code>vgextend</code></li>\n<li>LV阶段产生更多可用容量：<code>lvresize</code></li>\n<li>文件系统阶段的放大：<code>xfs_growfs</code>（注意，xfs只能放大，不能缩小（但是ext4有））</li>\n</ul>\n<h3 id=\"LVM-thin-Volume\"><a href=\"#LVM-thin-Volume\" class=\"headerlink\" title=\"LVM thin Volume\"></a>LVM thin Volume</h3><p>LVM动态调整磁盘使用率，即先声明大小，然后使用时分配（当然，一定不要超过实际的容量，不然会损坏数据）</p>\n<h3 id=\"LV-snapshot\"><a href=\"#LV-snapshot\" class=\"headerlink\" title=\"LV snapshot\"></a>LV snapshot</h3><p>在<code>lvcreate</code>时加入<code>-s</code>选项表示这是一个快照分区，这是个很有用的功能，但鸟哥给的不够详细。用到的时候再来看看。</p>\n"},{"title":"重学linux（11）","abbrlink":"1c6c2fe1","date":"2022-03-02T07:33:22.000Z","_content":"\n# 计划任务\n\n## 只执行一次的任务\n\n### at和atd\n\n`at`的原理\n\n- 需要首先开启`atd`\n- 在`/var/spool/at/`下写入一个定时文件\n- 使用`/etc/at.allow`和`/etc/at.deny`来实现对at的使用限制\n\n### at\n\n```bash\nat [-mldv] TIME\n# -m 任务完成后发送email给使用者，没错，是email\n# -l 相当于atq，列出所有该使用者的at任务\n# -d 相当于atrm，取消某个at任务\n# -v 列出任务的详细时间\n# -c 列出任务的实际命令内容\n# TIME 时间格式\n# HH:MM\n# HH:MM YYYY-MM-DD # 22:22 2022-02-22\n# HH:MM[am|pm] [Month] [Date] # 22:22 2022-02-22\n# HH::MM + number [minutes|hour|days|weeks] now + 5 minutes\n```\n\n### batch\n\n当系统负载小于0.8时立即执行，本质上是at任务每隔一分钟的轮询。\n\n## 循环执行的计划任务\n\n- `/etc/cron.allow`优先级比下面这个高\n- `/etc/cron.deny`系统默认保留\n\n二者留一个，推荐下面这个。\n\ncrontab实际上是修改`/var/spool/cron/user`下的文件，但还是推荐使用`crontab -e`来修改\n\n### cron格式\n\n```bash\n0 12 * * * command\n# 分钟 小时 日期 月份 周 命令\n# 周与日月不可并存（据说新版没有这个问题了，不过鸟哥没有试过）\n```\n\n| 用于时间的参数 | 含义                                |\n| -------------- | ----------------------------------- |\n| *              | 任何时刻都行（相当于忽略）          |\n| ,              | 分割时间段，比如3,6表示3和6         |\n| -              | 表示一段时间以内，比如3-6表似乎3到6 |\n| /n             | 表示每隔一定时间                    |\n\n```bash\ncrontab -r # 删除所有crontab\n```\n\n### 系统的例行任务\n\n`/etc/crontab`\n\n看一眼就知道了，注意多了个执行人的字段\n\n`crond`服务读取的配置文件位置\n\n- /etc/crontab\n- /etc/cron.d/*\n- /var/spool/cron/*\n\n除此之外，/etc/crontab中还指定了每个小时都会由脚本`run-parts`执行一次`/etc/cron.hourly`下的内容，其中包括了`anacron`\n\n## 可唤醒停机期间的工作任务\n\n用于解决“时间到了，但机器未启动而无法执行任务”的问题。\n\ncrontab会调用`/etc/cron.hourly/0anacron`来执行anacron，它会执行以下文件夹中的内容\n\n- /etc/cron.daily\n- /etc/cron.weekly\n- /etc/cron.monthly\n\nanacron会对比其与0anacron的时间来判断crontab有无正常执行（所以要用文件名0anacron来确保anacron先更新时间戳）\n\n### anacron\n\n其配置文件位于`/etc/anacrontab`。\n\n```bash\n1\t5\tcron.daily\tnice run-parts /etc/cron.daily\n# 天数 延迟时间 工作名称的定义 实际要执行的字符串\n# 天数用于anacron执行时与/var/spool/anacron/内的时间记录文件对比，大于该日期时就执行\n# 延迟执行的时间\n```\n\n实际的执行流程\n\n- crontab 调用anacron\n- 读取/etc/anacrontab，读取到/etc/cron.daily\n- 从/var/spool/anacron/cron.daily取出时间戳并与当前时间对比\n- 若准备执行，则根据设置延迟N+START_HOURS_RANGE的时间\n- 延迟结束后开始执行\n\n## 总结\n\n- at：定时执行一次\n- crontab：定时执行\n- anacron：定期执行\n","source":"_posts/Operation/重学linux（11）.md","raw":"---\ntitle: 重学linux（11）\ntags:\n  - 专栏：重学linux\n  - linux\ncategories: Operation\nabbrlink: 1c6c2fe1\ndate: 2022-03-02 15:33:22\n---\n\n# 计划任务\n\n## 只执行一次的任务\n\n### at和atd\n\n`at`的原理\n\n- 需要首先开启`atd`\n- 在`/var/spool/at/`下写入一个定时文件\n- 使用`/etc/at.allow`和`/etc/at.deny`来实现对at的使用限制\n\n### at\n\n```bash\nat [-mldv] TIME\n# -m 任务完成后发送email给使用者，没错，是email\n# -l 相当于atq，列出所有该使用者的at任务\n# -d 相当于atrm，取消某个at任务\n# -v 列出任务的详细时间\n# -c 列出任务的实际命令内容\n# TIME 时间格式\n# HH:MM\n# HH:MM YYYY-MM-DD # 22:22 2022-02-22\n# HH:MM[am|pm] [Month] [Date] # 22:22 2022-02-22\n# HH::MM + number [minutes|hour|days|weeks] now + 5 minutes\n```\n\n### batch\n\n当系统负载小于0.8时立即执行，本质上是at任务每隔一分钟的轮询。\n\n## 循环执行的计划任务\n\n- `/etc/cron.allow`优先级比下面这个高\n- `/etc/cron.deny`系统默认保留\n\n二者留一个，推荐下面这个。\n\ncrontab实际上是修改`/var/spool/cron/user`下的文件，但还是推荐使用`crontab -e`来修改\n\n### cron格式\n\n```bash\n0 12 * * * command\n# 分钟 小时 日期 月份 周 命令\n# 周与日月不可并存（据说新版没有这个问题了，不过鸟哥没有试过）\n```\n\n| 用于时间的参数 | 含义                                |\n| -------------- | ----------------------------------- |\n| *              | 任何时刻都行（相当于忽略）          |\n| ,              | 分割时间段，比如3,6表示3和6         |\n| -              | 表示一段时间以内，比如3-6表似乎3到6 |\n| /n             | 表示每隔一定时间                    |\n\n```bash\ncrontab -r # 删除所有crontab\n```\n\n### 系统的例行任务\n\n`/etc/crontab`\n\n看一眼就知道了，注意多了个执行人的字段\n\n`crond`服务读取的配置文件位置\n\n- /etc/crontab\n- /etc/cron.d/*\n- /var/spool/cron/*\n\n除此之外，/etc/crontab中还指定了每个小时都会由脚本`run-parts`执行一次`/etc/cron.hourly`下的内容，其中包括了`anacron`\n\n## 可唤醒停机期间的工作任务\n\n用于解决“时间到了，但机器未启动而无法执行任务”的问题。\n\ncrontab会调用`/etc/cron.hourly/0anacron`来执行anacron，它会执行以下文件夹中的内容\n\n- /etc/cron.daily\n- /etc/cron.weekly\n- /etc/cron.monthly\n\nanacron会对比其与0anacron的时间来判断crontab有无正常执行（所以要用文件名0anacron来确保anacron先更新时间戳）\n\n### anacron\n\n其配置文件位于`/etc/anacrontab`。\n\n```bash\n1\t5\tcron.daily\tnice run-parts /etc/cron.daily\n# 天数 延迟时间 工作名称的定义 实际要执行的字符串\n# 天数用于anacron执行时与/var/spool/anacron/内的时间记录文件对比，大于该日期时就执行\n# 延迟执行的时间\n```\n\n实际的执行流程\n\n- crontab 调用anacron\n- 读取/etc/anacrontab，读取到/etc/cron.daily\n- 从/var/spool/anacron/cron.daily取出时间戳并与当前时间对比\n- 若准备执行，则根据设置延迟N+START_HOURS_RANGE的时间\n- 延迟结束后开始执行\n\n## 总结\n\n- at：定时执行一次\n- crontab：定时执行\n- anacron：定期执行\n","slug":"重学linux（11）","published":1,"category":"Operation","updated":"2022-03-02T09:23:49.031Z","_id":"cl09cqart0001jsul41vw79db","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"计划任务\"><a href=\"#计划任务\" class=\"headerlink\" title=\"计划任务\"></a>计划任务</h1><h2 id=\"只执行一次的任务\"><a href=\"#只执行一次的任务\" class=\"headerlink\" title=\"只执行一次的任务\"></a>只执行一次的任务</h2><h3 id=\"at和atd\"><a href=\"#at和atd\" class=\"headerlink\" title=\"at和atd\"></a>at和atd</h3><p><code>at</code>的原理</p>\n<ul>\n<li>需要首先开启<code>atd</code></li>\n<li>在<code>/var/spool/at/</code>下写入一个定时文件</li>\n<li>使用<code>/etc/at.allow</code>和<code>/etc/at.deny</code>来实现对at的使用限制</li>\n</ul>\n<h3 id=\"at\"><a href=\"#at\" class=\"headerlink\" title=\"at\"></a>at</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">at <span class=\"token punctuation\">[</span>-mldv<span class=\"token punctuation\">]</span> TIME\n<span class=\"token comment\"># -m 任务完成后发送email给使用者，没错，是email</span>\n<span class=\"token comment\"># -l 相当于atq，列出所有该使用者的at任务</span>\n<span class=\"token comment\"># -d 相当于atrm，取消某个at任务</span>\n<span class=\"token comment\"># -v 列出任务的详细时间</span>\n<span class=\"token comment\"># -c 列出任务的实际命令内容</span>\n<span class=\"token comment\"># TIME 时间格式</span>\n<span class=\"token comment\"># HH:MM</span>\n<span class=\"token comment\"># HH:MM YYYY-MM-DD # 22:22 2022-02-22</span>\n<span class=\"token comment\"># HH:MM[am|pm] [Month] [Date] # 22:22 2022-02-22</span>\n<span class=\"token comment\"># HH::MM + number [minutes|hour|days|weeks] now + 5 minutes</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"batch\"><a href=\"#batch\" class=\"headerlink\" title=\"batch\"></a>batch</h3><p>当系统负载小于0.8时立即执行，本质上是at任务每隔一分钟的轮询。</p>\n<h2 id=\"循环执行的计划任务\"><a href=\"#循环执行的计划任务\" class=\"headerlink\" title=\"循环执行的计划任务\"></a>循环执行的计划任务</h2><ul>\n<li><code>/etc/cron.allow</code>优先级比下面这个高</li>\n<li><code>/etc/cron.deny</code>系统默认保留</li>\n</ul>\n<p>二者留一个，推荐下面这个。</p>\n<p>crontab实际上是修改<code>/var/spool/cron/user</code>下的文件，但还是推荐使用<code>crontab -e</code>来修改</p>\n<h3 id=\"cron格式\"><a href=\"#cron格式\" class=\"headerlink\" title=\"cron格式\"></a>cron格式</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">12</span> * * * <span class=\"token builtin class-name\">command</span>\n<span class=\"token comment\"># 分钟 小时 日期 月份 周 命令</span>\n<span class=\"token comment\"># 周与日月不可并存（据说新版没有这个问题了，不过鸟哥没有试过）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>用于时间的参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>任何时刻都行（相当于忽略）</td>\n</tr>\n<tr>\n<td>,</td>\n<td>分割时间段，比如3,6表示3和6</td>\n</tr>\n<tr>\n<td>-</td>\n<td>表示一段时间以内，比如3-6表似乎3到6</td>\n</tr>\n<tr>\n<td>&#x2F;n</td>\n<td>表示每隔一定时间</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">crontab</span> -r <span class=\"token comment\"># 删除所有crontab</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"系统的例行任务\"><a href=\"#系统的例行任务\" class=\"headerlink\" title=\"系统的例行任务\"></a>系统的例行任务</h3><p><code>/etc/crontab</code></p>\n<p>看一眼就知道了，注意多了个执行人的字段</p>\n<p><code>crond</code>服务读取的配置文件位置</p>\n<ul>\n<li>&#x2F;etc&#x2F;crontab</li>\n<li>&#x2F;etc&#x2F;cron.d&#x2F;*</li>\n<li>&#x2F;var&#x2F;spool&#x2F;cron&#x2F;*</li>\n</ul>\n<p>除此之外，&#x2F;etc&#x2F;crontab中还指定了每个小时都会由脚本<code>run-parts</code>执行一次<code>/etc/cron.hourly</code>下的内容，其中包括了<code>anacron</code></p>\n<h2 id=\"可唤醒停机期间的工作任务\"><a href=\"#可唤醒停机期间的工作任务\" class=\"headerlink\" title=\"可唤醒停机期间的工作任务\"></a>可唤醒停机期间的工作任务</h2><p>用于解决“时间到了，但机器未启动而无法执行任务”的问题。</p>\n<p>crontab会调用<code>/etc/cron.hourly/0anacron</code>来执行anacron，它会执行以下文件夹中的内容</p>\n<ul>\n<li>&#x2F;etc&#x2F;cron.daily</li>\n<li>&#x2F;etc&#x2F;cron.weekly</li>\n<li>&#x2F;etc&#x2F;cron.monthly</li>\n</ul>\n<p>anacron会对比其与0anacron的时间来判断crontab有无正常执行（所以要用文件名0anacron来确保anacron先更新时间戳）</p>\n<h3 id=\"anacron\"><a href=\"#anacron\" class=\"headerlink\" title=\"anacron\"></a>anacron</h3><p>其配置文件位于<code>/etc/anacrontab</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>\t<span class=\"token number\">5</span>\tcron.daily\t<span class=\"token function\">nice</span> run-parts /etc/cron.daily\n<span class=\"token comment\"># 天数 延迟时间 工作名称的定义 实际要执行的字符串</span>\n<span class=\"token comment\"># 天数用于anacron执行时与/var/spool/anacron/内的时间记录文件对比，大于该日期时就执行</span>\n<span class=\"token comment\"># 延迟执行的时间</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>实际的执行流程</p>\n<ul>\n<li>crontab 调用anacron</li>\n<li>读取&#x2F;etc&#x2F;anacrontab，读取到&#x2F;etc&#x2F;cron.daily</li>\n<li>从&#x2F;var&#x2F;spool&#x2F;anacron&#x2F;cron.daily取出时间戳并与当前时间对比</li>\n<li>若准备执行，则根据设置延迟N+START_HOURS_RANGE的时间</li>\n<li>延迟结束后开始执行</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>at：定时执行一次</li>\n<li>crontab：定时执行</li>\n<li>anacron：定期执行</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/re05.jpg","excerpt":"","more":"<h1 id=\"计划任务\"><a href=\"#计划任务\" class=\"headerlink\" title=\"计划任务\"></a>计划任务</h1><h2 id=\"只执行一次的任务\"><a href=\"#只执行一次的任务\" class=\"headerlink\" title=\"只执行一次的任务\"></a>只执行一次的任务</h2><h3 id=\"at和atd\"><a href=\"#at和atd\" class=\"headerlink\" title=\"at和atd\"></a>at和atd</h3><p><code>at</code>的原理</p>\n<ul>\n<li>需要首先开启<code>atd</code></li>\n<li>在<code>/var/spool/at/</code>下写入一个定时文件</li>\n<li>使用<code>/etc/at.allow</code>和<code>/etc/at.deny</code>来实现对at的使用限制</li>\n</ul>\n<h3 id=\"at\"><a href=\"#at\" class=\"headerlink\" title=\"at\"></a>at</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">at <span class=\"token punctuation\">[</span>-mldv<span class=\"token punctuation\">]</span> TIME\n<span class=\"token comment\"># -m 任务完成后发送email给使用者，没错，是email</span>\n<span class=\"token comment\"># -l 相当于atq，列出所有该使用者的at任务</span>\n<span class=\"token comment\"># -d 相当于atrm，取消某个at任务</span>\n<span class=\"token comment\"># -v 列出任务的详细时间</span>\n<span class=\"token comment\"># -c 列出任务的实际命令内容</span>\n<span class=\"token comment\"># TIME 时间格式</span>\n<span class=\"token comment\"># HH:MM</span>\n<span class=\"token comment\"># HH:MM YYYY-MM-DD # 22:22 2022-02-22</span>\n<span class=\"token comment\"># HH:MM[am|pm] [Month] [Date] # 22:22 2022-02-22</span>\n<span class=\"token comment\"># HH::MM + number [minutes|hour|days|weeks] now + 5 minutes</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"batch\"><a href=\"#batch\" class=\"headerlink\" title=\"batch\"></a>batch</h3><p>当系统负载小于0.8时立即执行，本质上是at任务每隔一分钟的轮询。</p>\n<h2 id=\"循环执行的计划任务\"><a href=\"#循环执行的计划任务\" class=\"headerlink\" title=\"循环执行的计划任务\"></a>循环执行的计划任务</h2><ul>\n<li><code>/etc/cron.allow</code>优先级比下面这个高</li>\n<li><code>/etc/cron.deny</code>系统默认保留</li>\n</ul>\n<p>二者留一个，推荐下面这个。</p>\n<p>crontab实际上是修改<code>/var/spool/cron/user</code>下的文件，但还是推荐使用<code>crontab -e</code>来修改</p>\n<h3 id=\"cron格式\"><a href=\"#cron格式\" class=\"headerlink\" title=\"cron格式\"></a>cron格式</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> <span class=\"token number\">12</span> * * * <span class=\"token builtin class-name\">command</span>\n<span class=\"token comment\"># 分钟 小时 日期 月份 周 命令</span>\n<span class=\"token comment\"># 周与日月不可并存（据说新版没有这个问题了，不过鸟哥没有试过）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>用于时间的参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>任何时刻都行（相当于忽略）</td>\n</tr>\n<tr>\n<td>,</td>\n<td>分割时间段，比如3,6表示3和6</td>\n</tr>\n<tr>\n<td>-</td>\n<td>表示一段时间以内，比如3-6表似乎3到6</td>\n</tr>\n<tr>\n<td>&#x2F;n</td>\n<td>表示每隔一定时间</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">crontab</span> -r <span class=\"token comment\"># 删除所有crontab</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"系统的例行任务\"><a href=\"#系统的例行任务\" class=\"headerlink\" title=\"系统的例行任务\"></a>系统的例行任务</h3><p><code>/etc/crontab</code></p>\n<p>看一眼就知道了，注意多了个执行人的字段</p>\n<p><code>crond</code>服务读取的配置文件位置</p>\n<ul>\n<li>&#x2F;etc&#x2F;crontab</li>\n<li>&#x2F;etc&#x2F;cron.d&#x2F;*</li>\n<li>&#x2F;var&#x2F;spool&#x2F;cron&#x2F;*</li>\n</ul>\n<p>除此之外，&#x2F;etc&#x2F;crontab中还指定了每个小时都会由脚本<code>run-parts</code>执行一次<code>/etc/cron.hourly</code>下的内容，其中包括了<code>anacron</code></p>\n<h2 id=\"可唤醒停机期间的工作任务\"><a href=\"#可唤醒停机期间的工作任务\" class=\"headerlink\" title=\"可唤醒停机期间的工作任务\"></a>可唤醒停机期间的工作任务</h2><p>用于解决“时间到了，但机器未启动而无法执行任务”的问题。</p>\n<p>crontab会调用<code>/etc/cron.hourly/0anacron</code>来执行anacron，它会执行以下文件夹中的内容</p>\n<ul>\n<li>&#x2F;etc&#x2F;cron.daily</li>\n<li>&#x2F;etc&#x2F;cron.weekly</li>\n<li>&#x2F;etc&#x2F;cron.monthly</li>\n</ul>\n<p>anacron会对比其与0anacron的时间来判断crontab有无正常执行（所以要用文件名0anacron来确保anacron先更新时间戳）</p>\n<h3 id=\"anacron\"><a href=\"#anacron\" class=\"headerlink\" title=\"anacron\"></a>anacron</h3><p>其配置文件位于<code>/etc/anacrontab</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>\t<span class=\"token number\">5</span>\tcron.daily\t<span class=\"token function\">nice</span> run-parts /etc/cron.daily\n<span class=\"token comment\"># 天数 延迟时间 工作名称的定义 实际要执行的字符串</span>\n<span class=\"token comment\"># 天数用于anacron执行时与/var/spool/anacron/内的时间记录文件对比，大于该日期时就执行</span>\n<span class=\"token comment\"># 延迟执行的时间</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>实际的执行流程</p>\n<ul>\n<li>crontab 调用anacron</li>\n<li>读取&#x2F;etc&#x2F;anacrontab，读取到&#x2F;etc&#x2F;cron.daily</li>\n<li>从&#x2F;var&#x2F;spool&#x2F;anacron&#x2F;cron.daily取出时间戳并与当前时间对比</li>\n<li>若准备执行，则根据设置延迟N+START_HOURS_RANGE的时间</li>\n<li>延迟结束后开始执行</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>at：定时执行一次</li>\n<li>crontab：定时执行</li>\n<li>anacron：定期执行</li>\n</ul>\n"},{"title":"重学linux（12）","abbrlink":"ed9800f","date":"2022-03-03T04:44:24.000Z","_content":"\n# 什么是进程\n\nPID由UID/GID获取而来\n\n子进程的有PPID\n\n学OS的时候再来深入探究一下\n\n# 任务管理（Job control）\n\n已经很熟悉了，稍微记一下\n\n- &\n- ctrl+z\n- jobs\n- fg\n- bg\n- kill\n\n如果是脱机任务，还可以这样\n\n- at\n- nohup\n\n# 进程管理\n\n## 查看进程\n\n### ps\n\n```bash\nps aux\nps -lA # 同上\n# 只需记住两个\nps aux # 输出所有系统运行的进程\nps -l # 输出当前bash的进程\n\nkawhicurry@ubuntu:~$ ps -l\nF S   UID    PID   PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD\n0 S  1000  10100  10099  0  80   0 -  7480 wait   pts/1    00:00:00 bash\n0 R  1000  27188  10100  0  80   0 -  9006 -      pts/1    00:00:00 ps\n```\n\n| 参数          | 含义                                                         |\n| ------------- | ------------------------------------------------------------ |\n| F             | 进程标识（process flag）                                     |\n| S             | Stat，有R（running），S（sleep），D（不可唤醒的sleep，如等待io），T（stop or trace），Z（zombie） |\n| UID/PID/PPID  | 略了                                                         |\n| C             | cpu使用率                                                    |\n| PRI/NI        | Priority/Nice                                                |\n| ADDR/SZ/WCHAN | 都与内存相关，ADDR指kernel function，指出进程在内存的哪个部分，SZ代表用掉了多少内存，WCHAN表示目前进程是否运行，`-`表示正在运行 |\n| TTY           | 登陆者的终端                                                 |\n| TIME          | 实际使用cpu的时间                                            |\n| CMD           | 实际触发该进程的命令                                         |\n\n`ps aux`的解释就免了，大概就这么多东西。\n\n### top\n\n```bash\ntop [-d number]\ntop [-bnp]\n# -d 后面接刷新时间\n# -b 以批量方式执行top\n# -n 和-b配合，执行n次top输出结果\n# -p 指定pid\n```\n\ntop执行过程中可以使用的按键命令\n\n| 命令 | 含义                |\n| ---- | ------------------- |\n| ？   | 帮助                |\n| P    | 以cpu使用排序       |\n| M    | 以memory排序        |\n| N    | 以PID排序           |\n| T    | 以TIME排序          |\n| k    | 给某个pid一个signal |\n| r    | 给某个pid一个nice值 |\n| q    | 退出                |\n\n### pstree\n\n太大了，感觉用不上，不过还是很帅的\n\n## 进程管理\n\n使用信号，信号量可用`kill -l`查看\n\n## 进程执行顺序\n\nPriority由系统决定，无法改变\n\n- priority越小越先被执行\n- PRI（new）=PRI（old）+nice\n\nNice可由用户指定，间接影响Priority\n\n- nice可调整的范围为-20~19\n- root可随意调整\n- user只能调整自己进程的nice值，且范围为0~19（这是为了防止一般用户抢占系统资源）\n\n### nice\n\n用于给新执行的命令一个优先级\n\n```bash\nnice [-n number] command\n```\n\n### renice\n\n```bash\nrenice [number] PID\n```\n\n## 查看系统资源信息\n\n### free\n\n内存使用\n\n用过不少了，记得`-h`（human）和`-s`（不断刷新）就行了\n\n### uname\n\n系统与内核信息\n\n要啥有啥，直接看`--help`\n\n### uptime\n\n用`w`吧\n\n### netstat\n\n高级话题了，先几个`-tunlp`\n\n### dmesg\n\n分析内核产生的信息\n\n包括**启动时一闪而过的**，以及后面生成的\n\n### vmstat\n\n检测系统资源变化，好东西\n\n```bash\nvmstat [-a]\n```\n\n| 参数       | 含义     |\n| ---------- | -------- |\n| -a         | all      |\n| -fs        | 内存相关 |\n| -S         | 单位     |\n| -d         | 磁盘相关 |\n| -p partion | 分区相关 |\n\n- procs字段说明\n\n  | 参数 | 含义                 |\n  | ---- | -------------------- |\n  | r    | 等待运行中的进程数量 |\n  | b    | 不可唤醒的进程数量   |\n\n- memory\n\n  | 参数  | 含义     |\n  | ----- | -------- |\n  | swpd  | swap分区 |\n  | free  | 未被使用 |\n  | buff  | 缓冲区   |\n  | cache | 告诉缓存 |\n\n- swap\n\n  | 参数 | 含义                                         |\n  | ---- | -------------------------------------------- |\n  | si   | 磁盘中进程取出的容量                         |\n  | so   | 内存不足而将没用的进程写入到磁盘中的swap容量 |\n\n- io\n\n  | 参数 | 含义                 |\n  | ---- | -------------------- |\n  | bi   | 读入的区块数量       |\n  | bo   | 写入到磁盘的区块数量 |\n\n- system\n\n  | 参数 | 含义                   |\n  | ---- | ---------------------- |\n  | in   | 每秒被中断的进程数量   |\n  | cs   | 每秒执行的事件切换次数 |\n\n- cpu\n\n  | 参数 | 含义                    |\n  | ---- | ----------------------- |\n  | us   | 非内核层cpu的使用状态   |\n  | sy   | 内核层cpu的使用状态     |\n  | id   | 闲置的状态              |\n  | wa   | 等待IO所耗费的cpu状态   |\n  | st   | 被虚拟机所使用的cpu状态 |\n\n# 特殊文件与进程\n\n## /proc/*下的内容\n\n| 文件        | 内容                           |\n| ----------- | ------------------------------ |\n| cmdline     | 加载内核时所执行相关命令与参数 |\n| cpuinfo     | cpu                            |\n| devices     | 主要设备的设备id               |\n| filesystems | 系统已加载的文件系统           |\n| interrupts  | 系统上面的IRQ分配状态          |\n| ioports     | 各个io所配置的地址             |\n| kcore       | 就是内存大小（不要读这个）     |\n| loadavg     | w，uptime，top的负载值         |\n| meminfo     | free的内存信息                 |\n| modules     | 内核加载的模块，即驱动         |\n| mounts      | 挂载数据                       |\n| swaps       | 系统挂载的内存                 |\n| partitions  | fdisk -l的记录                 |\n| uptime      | 。。。                         |\n| version     | 内核版本呢，uname -a的记录值   |\n| bus/*       | 总线设备，USB设备              |\n\n## 查询已使用文件或已执行进程使用的文件\n\n### fuser\n\n列出在使用当前文件的进程\n\n```bash\nfuser [-umv] [-k[i]] [-signal] dir/file\n```\n\n| 参数 | 含义                                      |\n| ---- | ----------------------------------------- |\n| -u   | 列出owner                                 |\n| -v   | verbose                                   |\n| -k   | 找出使用该文件/目录的PID并向其发送SIGKILL |\n| -i   | 与k使用，发送前询问                       |\n\nfuser结果中ACCESS字段的参数\n\n| 参数 | 含义                           |\n| ---- | ------------------------------ |\n| c    | 此进程在当前目录下             |\n| e    | 可被触发为执行状态             |\n| f    | 是一个开启状态的文件           |\n| r    | 表示顶层目录                   |\n| F    | 该文件被使用了，不过在等待响应 |\n| m    | 可能为共享的动态库             |\n\n### lsof\n\n列出被进程使用的文件名称\n\n```bash\nlsof [-aUu] [+d]\n```\n\n| 参数        | 含义                                |\n| ----------- | ----------------------------------- |\n| -a          | 多项条件同时成立时才列出            |\n| -U          | 仅列出UNIK-like系统的socket文件类型 |\n| -u username | 列出使用者相关进程的文件            |\n| +d dir      | 找出某个目录下被使用的文件          |\n\n### pidof\n\n找出某个正在执行的进程的pid\n\n```bash\npidof [-sx] program_name\n# -s 仅列出一个pid，而不是所有\n# -x 同时列出program name可能的PPIDn\n```\n\n","source":"_posts/Operation/重学linux（12）.md","raw":"---\ntitle: 重学linux（12）\ntags:\n  - 专栏：重学linux\n  - linux\ncategories: Operation\nabbrlink: ed9800f\ndate: 2022-03-03 12:44:24\n---\n\n# 什么是进程\n\nPID由UID/GID获取而来\n\n子进程的有PPID\n\n学OS的时候再来深入探究一下\n\n# 任务管理（Job control）\n\n已经很熟悉了，稍微记一下\n\n- &\n- ctrl+z\n- jobs\n- fg\n- bg\n- kill\n\n如果是脱机任务，还可以这样\n\n- at\n- nohup\n\n# 进程管理\n\n## 查看进程\n\n### ps\n\n```bash\nps aux\nps -lA # 同上\n# 只需记住两个\nps aux # 输出所有系统运行的进程\nps -l # 输出当前bash的进程\n\nkawhicurry@ubuntu:~$ ps -l\nF S   UID    PID   PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD\n0 S  1000  10100  10099  0  80   0 -  7480 wait   pts/1    00:00:00 bash\n0 R  1000  27188  10100  0  80   0 -  9006 -      pts/1    00:00:00 ps\n```\n\n| 参数          | 含义                                                         |\n| ------------- | ------------------------------------------------------------ |\n| F             | 进程标识（process flag）                                     |\n| S             | Stat，有R（running），S（sleep），D（不可唤醒的sleep，如等待io），T（stop or trace），Z（zombie） |\n| UID/PID/PPID  | 略了                                                         |\n| C             | cpu使用率                                                    |\n| PRI/NI        | Priority/Nice                                                |\n| ADDR/SZ/WCHAN | 都与内存相关，ADDR指kernel function，指出进程在内存的哪个部分，SZ代表用掉了多少内存，WCHAN表示目前进程是否运行，`-`表示正在运行 |\n| TTY           | 登陆者的终端                                                 |\n| TIME          | 实际使用cpu的时间                                            |\n| CMD           | 实际触发该进程的命令                                         |\n\n`ps aux`的解释就免了，大概就这么多东西。\n\n### top\n\n```bash\ntop [-d number]\ntop [-bnp]\n# -d 后面接刷新时间\n# -b 以批量方式执行top\n# -n 和-b配合，执行n次top输出结果\n# -p 指定pid\n```\n\ntop执行过程中可以使用的按键命令\n\n| 命令 | 含义                |\n| ---- | ------------------- |\n| ？   | 帮助                |\n| P    | 以cpu使用排序       |\n| M    | 以memory排序        |\n| N    | 以PID排序           |\n| T    | 以TIME排序          |\n| k    | 给某个pid一个signal |\n| r    | 给某个pid一个nice值 |\n| q    | 退出                |\n\n### pstree\n\n太大了，感觉用不上，不过还是很帅的\n\n## 进程管理\n\n使用信号，信号量可用`kill -l`查看\n\n## 进程执行顺序\n\nPriority由系统决定，无法改变\n\n- priority越小越先被执行\n- PRI（new）=PRI（old）+nice\n\nNice可由用户指定，间接影响Priority\n\n- nice可调整的范围为-20~19\n- root可随意调整\n- user只能调整自己进程的nice值，且范围为0~19（这是为了防止一般用户抢占系统资源）\n\n### nice\n\n用于给新执行的命令一个优先级\n\n```bash\nnice [-n number] command\n```\n\n### renice\n\n```bash\nrenice [number] PID\n```\n\n## 查看系统资源信息\n\n### free\n\n内存使用\n\n用过不少了，记得`-h`（human）和`-s`（不断刷新）就行了\n\n### uname\n\n系统与内核信息\n\n要啥有啥，直接看`--help`\n\n### uptime\n\n用`w`吧\n\n### netstat\n\n高级话题了，先几个`-tunlp`\n\n### dmesg\n\n分析内核产生的信息\n\n包括**启动时一闪而过的**，以及后面生成的\n\n### vmstat\n\n检测系统资源变化，好东西\n\n```bash\nvmstat [-a]\n```\n\n| 参数       | 含义     |\n| ---------- | -------- |\n| -a         | all      |\n| -fs        | 内存相关 |\n| -S         | 单位     |\n| -d         | 磁盘相关 |\n| -p partion | 分区相关 |\n\n- procs字段说明\n\n  | 参数 | 含义                 |\n  | ---- | -------------------- |\n  | r    | 等待运行中的进程数量 |\n  | b    | 不可唤醒的进程数量   |\n\n- memory\n\n  | 参数  | 含义     |\n  | ----- | -------- |\n  | swpd  | swap分区 |\n  | free  | 未被使用 |\n  | buff  | 缓冲区   |\n  | cache | 告诉缓存 |\n\n- swap\n\n  | 参数 | 含义                                         |\n  | ---- | -------------------------------------------- |\n  | si   | 磁盘中进程取出的容量                         |\n  | so   | 内存不足而将没用的进程写入到磁盘中的swap容量 |\n\n- io\n\n  | 参数 | 含义                 |\n  | ---- | -------------------- |\n  | bi   | 读入的区块数量       |\n  | bo   | 写入到磁盘的区块数量 |\n\n- system\n\n  | 参数 | 含义                   |\n  | ---- | ---------------------- |\n  | in   | 每秒被中断的进程数量   |\n  | cs   | 每秒执行的事件切换次数 |\n\n- cpu\n\n  | 参数 | 含义                    |\n  | ---- | ----------------------- |\n  | us   | 非内核层cpu的使用状态   |\n  | sy   | 内核层cpu的使用状态     |\n  | id   | 闲置的状态              |\n  | wa   | 等待IO所耗费的cpu状态   |\n  | st   | 被虚拟机所使用的cpu状态 |\n\n# 特殊文件与进程\n\n## /proc/*下的内容\n\n| 文件        | 内容                           |\n| ----------- | ------------------------------ |\n| cmdline     | 加载内核时所执行相关命令与参数 |\n| cpuinfo     | cpu                            |\n| devices     | 主要设备的设备id               |\n| filesystems | 系统已加载的文件系统           |\n| interrupts  | 系统上面的IRQ分配状态          |\n| ioports     | 各个io所配置的地址             |\n| kcore       | 就是内存大小（不要读这个）     |\n| loadavg     | w，uptime，top的负载值         |\n| meminfo     | free的内存信息                 |\n| modules     | 内核加载的模块，即驱动         |\n| mounts      | 挂载数据                       |\n| swaps       | 系统挂载的内存                 |\n| partitions  | fdisk -l的记录                 |\n| uptime      | 。。。                         |\n| version     | 内核版本呢，uname -a的记录值   |\n| bus/*       | 总线设备，USB设备              |\n\n## 查询已使用文件或已执行进程使用的文件\n\n### fuser\n\n列出在使用当前文件的进程\n\n```bash\nfuser [-umv] [-k[i]] [-signal] dir/file\n```\n\n| 参数 | 含义                                      |\n| ---- | ----------------------------------------- |\n| -u   | 列出owner                                 |\n| -v   | verbose                                   |\n| -k   | 找出使用该文件/目录的PID并向其发送SIGKILL |\n| -i   | 与k使用，发送前询问                       |\n\nfuser结果中ACCESS字段的参数\n\n| 参数 | 含义                           |\n| ---- | ------------------------------ |\n| c    | 此进程在当前目录下             |\n| e    | 可被触发为执行状态             |\n| f    | 是一个开启状态的文件           |\n| r    | 表示顶层目录                   |\n| F    | 该文件被使用了，不过在等待响应 |\n| m    | 可能为共享的动态库             |\n\n### lsof\n\n列出被进程使用的文件名称\n\n```bash\nlsof [-aUu] [+d]\n```\n\n| 参数        | 含义                                |\n| ----------- | ----------------------------------- |\n| -a          | 多项条件同时成立时才列出            |\n| -U          | 仅列出UNIK-like系统的socket文件类型 |\n| -u username | 列出使用者相关进程的文件            |\n| +d dir      | 找出某个目录下被使用的文件          |\n\n### pidof\n\n找出某个正在执行的进程的pid\n\n```bash\npidof [-sx] program_name\n# -s 仅列出一个pid，而不是所有\n# -x 同时列出program name可能的PPIDn\n```\n\n","slug":"重学linux（12）","published":1,"category":"Operation","updated":"2022-03-03T07:29:00.110Z","_id":"cl0ao2j8g000000ul14oe1jmm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"什么是进程\"><a href=\"#什么是进程\" class=\"headerlink\" title=\"什么是进程\"></a>什么是进程</h1><p>PID由UID&#x2F;GID获取而来</p>\n<p>子进程的有PPID</p>\n<p>学OS的时候再来深入探究一下</p>\n<h1 id=\"任务管理（Job-control）\"><a href=\"#任务管理（Job-control）\" class=\"headerlink\" title=\"任务管理（Job control）\"></a>任务管理（Job control）</h1><p>已经很熟悉了，稍微记一下</p>\n<ul>\n<li>&amp;</li>\n<li>ctrl+z</li>\n<li>jobs</li>\n<li>fg</li>\n<li>bg</li>\n<li>kill</li>\n</ul>\n<p>如果是脱机任务，还可以这样</p>\n<ul>\n<li>at</li>\n<li>nohup</li>\n</ul>\n<h1 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h1><h2 id=\"查看进程\"><a href=\"#查看进程\" class=\"headerlink\" title=\"查看进程\"></a>查看进程</h2><h3 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> aux\n<span class=\"token function\">ps</span> -lA <span class=\"token comment\"># 同上</span>\n<span class=\"token comment\"># 只需记住两个</span>\n<span class=\"token function\">ps</span> aux <span class=\"token comment\"># 输出所有系统运行的进程</span>\n<span class=\"token function\">ps</span> -l <span class=\"token comment\"># 输出当前bash的进程</span>\n\nkawhicurry@ubuntu:~$ <span class=\"token function\">ps</span> -l\nF S   <span class=\"token environment constant\">UID</span>    PID   <span class=\"token environment constant\">PPID</span>  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD\n<span class=\"token number\">0</span> S  <span class=\"token number\">1000</span>  <span class=\"token number\">10100</span>  <span class=\"token number\">10099</span>  <span class=\"token number\">0</span>  <span class=\"token number\">80</span>   <span class=\"token number\">0</span> -  <span class=\"token number\">7480</span> <span class=\"token function\">wait</span>   pts/1    00:00:00 <span class=\"token function\">bash</span>\n<span class=\"token number\">0</span> R  <span class=\"token number\">1000</span>  <span class=\"token number\">27188</span>  <span class=\"token number\">10100</span>  <span class=\"token number\">0</span>  <span class=\"token number\">80</span>   <span class=\"token number\">0</span> -  <span class=\"token number\">9006</span> -      pts/1    00:00:00 <span class=\"token function\">ps</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>F</td>\n<td>进程标识（process flag）</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Stat，有R（running），S（sleep），D（不可唤醒的sleep，如等待io），T（stop or trace），Z（zombie）</td>\n</tr>\n<tr>\n<td>UID&#x2F;PID&#x2F;PPID</td>\n<td>略了</td>\n</tr>\n<tr>\n<td>C</td>\n<td>cpu使用率</td>\n</tr>\n<tr>\n<td>PRI&#x2F;NI</td>\n<td>Priority&#x2F;Nice</td>\n</tr>\n<tr>\n<td>ADDR&#x2F;SZ&#x2F;WCHAN</td>\n<td>都与内存相关，ADDR指kernel function，指出进程在内存的哪个部分，SZ代表用掉了多少内存，WCHAN表示目前进程是否运行，<code>-</code>表示正在运行</td>\n</tr>\n<tr>\n<td>TTY</td>\n<td>登陆者的终端</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>实际使用cpu的时间</td>\n</tr>\n<tr>\n<td>CMD</td>\n<td>实际触发该进程的命令</td>\n</tr>\n</tbody></table>\n<p><code>ps aux</code>的解释就免了，大概就这么多东西。</p>\n<h3 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">top</span> <span class=\"token punctuation\">[</span>-d number<span class=\"token punctuation\">]</span>\n<span class=\"token function\">top</span> <span class=\"token punctuation\">[</span>-bnp<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># -d 后面接刷新时间</span>\n<span class=\"token comment\"># -b 以批量方式执行top</span>\n<span class=\"token comment\"># -n 和-b配合，执行n次top输出结果</span>\n<span class=\"token comment\"># -p 指定pid</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>top执行过程中可以使用的按键命令</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>？</td>\n<td>帮助</td>\n</tr>\n<tr>\n<td>P</td>\n<td>以cpu使用排序</td>\n</tr>\n<tr>\n<td>M</td>\n<td>以memory排序</td>\n</tr>\n<tr>\n<td>N</td>\n<td>以PID排序</td>\n</tr>\n<tr>\n<td>T</td>\n<td>以TIME排序</td>\n</tr>\n<tr>\n<td>k</td>\n<td>给某个pid一个signal</td>\n</tr>\n<tr>\n<td>r</td>\n<td>给某个pid一个nice值</td>\n</tr>\n<tr>\n<td>q</td>\n<td>退出</td>\n</tr>\n</tbody></table>\n<h3 id=\"pstree\"><a href=\"#pstree\" class=\"headerlink\" title=\"pstree\"></a>pstree</h3><p>太大了，感觉用不上，不过还是很帅的</p>\n<h2 id=\"进程管理-1\"><a href=\"#进程管理-1\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h2><p>使用信号，信号量可用<code>kill -l</code>查看</p>\n<h2 id=\"进程执行顺序\"><a href=\"#进程执行顺序\" class=\"headerlink\" title=\"进程执行顺序\"></a>进程执行顺序</h2><p>Priority由系统决定，无法改变</p>\n<ul>\n<li>priority越小越先被执行</li>\n<li>PRI（new）&#x3D;PRI（old）+nice</li>\n</ul>\n<p>Nice可由用户指定，间接影响Priority</p>\n<ul>\n<li>nice可调整的范围为-20~19</li>\n<li>root可随意调整</li>\n<li>user只能调整自己进程的nice值，且范围为0~19（这是为了防止一般用户抢占系统资源）</li>\n</ul>\n<h3 id=\"nice\"><a href=\"#nice\" class=\"headerlink\" title=\"nice\"></a>nice</h3><p>用于给新执行的命令一个优先级</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nice</span> <span class=\"token punctuation\">[</span>-n number<span class=\"token punctuation\">]</span> <span class=\"token builtin class-name\">command</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"renice\"><a href=\"#renice\" class=\"headerlink\" title=\"renice\"></a>renice</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">renice</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">]</span> PID<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"查看系统资源信息\"><a href=\"#查看系统资源信息\" class=\"headerlink\" title=\"查看系统资源信息\"></a>查看系统资源信息</h2><h3 id=\"free\"><a href=\"#free\" class=\"headerlink\" title=\"free\"></a>free</h3><p>内存使用</p>\n<p>用过不少了，记得<code>-h</code>（human）和<code>-s</code>（不断刷新）就行了</p>\n<h3 id=\"uname\"><a href=\"#uname\" class=\"headerlink\" title=\"uname\"></a>uname</h3><p>系统与内核信息</p>\n<p>要啥有啥，直接看<code>--help</code></p>\n<h3 id=\"uptime\"><a href=\"#uptime\" class=\"headerlink\" title=\"uptime\"></a>uptime</h3><p>用<code>w</code>吧</p>\n<h3 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h3><p>高级话题了，先几个<code>-tunlp</code></p>\n<h3 id=\"dmesg\"><a href=\"#dmesg\" class=\"headerlink\" title=\"dmesg\"></a>dmesg</h3><p>分析内核产生的信息</p>\n<p>包括<strong>启动时一闪而过的</strong>，以及后面生成的</p>\n<h3 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h3><p>检测系统资源变化，好东西</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vmstat</span> <span class=\"token punctuation\">[</span>-a<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a</td>\n<td>all</td>\n</tr>\n<tr>\n<td>-fs</td>\n<td>内存相关</td>\n</tr>\n<tr>\n<td>-S</td>\n<td>单位</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>磁盘相关</td>\n</tr>\n<tr>\n<td>-p partion</td>\n<td>分区相关</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>procs字段说明</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>r</td>\n<td>等待运行中的进程数量</td>\n</tr>\n<tr>\n<td>b</td>\n<td>不可唤醒的进程数量</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>memory</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>swpd</td>\n<td>swap分区</td>\n</tr>\n<tr>\n<td>free</td>\n<td>未被使用</td>\n</tr>\n<tr>\n<td>buff</td>\n<td>缓冲区</td>\n</tr>\n<tr>\n<td>cache</td>\n<td>告诉缓存</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>swap</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>si</td>\n<td>磁盘中进程取出的容量</td>\n</tr>\n<tr>\n<td>so</td>\n<td>内存不足而将没用的进程写入到磁盘中的swap容量</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>io</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bi</td>\n<td>读入的区块数量</td>\n</tr>\n<tr>\n<td>bo</td>\n<td>写入到磁盘的区块数量</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>system</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>in</td>\n<td>每秒被中断的进程数量</td>\n</tr>\n<tr>\n<td>cs</td>\n<td>每秒执行的事件切换次数</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>cpu</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>us</td>\n<td>非内核层cpu的使用状态</td>\n</tr>\n<tr>\n<td>sy</td>\n<td>内核层cpu的使用状态</td>\n</tr>\n<tr>\n<td>id</td>\n<td>闲置的状态</td>\n</tr>\n<tr>\n<td>wa</td>\n<td>等待IO所耗费的cpu状态</td>\n</tr>\n<tr>\n<td>st</td>\n<td>被虚拟机所使用的cpu状态</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h1 id=\"特殊文件与进程\"><a href=\"#特殊文件与进程\" class=\"headerlink\" title=\"特殊文件与进程\"></a>特殊文件与进程</h1><h2 id=\"x2F-proc-x2F-下的内容\"><a href=\"#x2F-proc-x2F-下的内容\" class=\"headerlink\" title=\"&#x2F;proc&#x2F;*下的内容\"></a>&#x2F;proc&#x2F;*下的内容</h2><table>\n<thead>\n<tr>\n<th>文件</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cmdline</td>\n<td>加载内核时所执行相关命令与参数</td>\n</tr>\n<tr>\n<td>cpuinfo</td>\n<td>cpu</td>\n</tr>\n<tr>\n<td>devices</td>\n<td>主要设备的设备id</td>\n</tr>\n<tr>\n<td>filesystems</td>\n<td>系统已加载的文件系统</td>\n</tr>\n<tr>\n<td>interrupts</td>\n<td>系统上面的IRQ分配状态</td>\n</tr>\n<tr>\n<td>ioports</td>\n<td>各个io所配置的地址</td>\n</tr>\n<tr>\n<td>kcore</td>\n<td>就是内存大小（不要读这个）</td>\n</tr>\n<tr>\n<td>loadavg</td>\n<td>w，uptime，top的负载值</td>\n</tr>\n<tr>\n<td>meminfo</td>\n<td>free的内存信息</td>\n</tr>\n<tr>\n<td>modules</td>\n<td>内核加载的模块，即驱动</td>\n</tr>\n<tr>\n<td>mounts</td>\n<td>挂载数据</td>\n</tr>\n<tr>\n<td>swaps</td>\n<td>系统挂载的内存</td>\n</tr>\n<tr>\n<td>partitions</td>\n<td>fdisk -l的记录</td>\n</tr>\n<tr>\n<td>uptime</td>\n<td>。。。</td>\n</tr>\n<tr>\n<td>version</td>\n<td>内核版本呢，uname -a的记录值</td>\n</tr>\n<tr>\n<td>bus&#x2F;*</td>\n<td>总线设备，USB设备</td>\n</tr>\n</tbody></table>\n<h2 id=\"查询已使用文件或已执行进程使用的文件\"><a href=\"#查询已使用文件或已执行进程使用的文件\" class=\"headerlink\" title=\"查询已使用文件或已执行进程使用的文件\"></a>查询已使用文件或已执行进程使用的文件</h2><h3 id=\"fuser\"><a href=\"#fuser\" class=\"headerlink\" title=\"fuser\"></a>fuser</h3><p>列出在使用当前文件的进程</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">fuser</span> <span class=\"token punctuation\">[</span>-umv<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-k<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-signal<span class=\"token punctuation\">]</span> dir/file<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-u</td>\n<td>列出owner</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>verbose</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>找出使用该文件&#x2F;目录的PID并向其发送SIGKILL</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>与k使用，发送前询问</td>\n</tr>\n</tbody></table>\n<p>fuser结果中ACCESS字段的参数</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>c</td>\n<td>此进程在当前目录下</td>\n</tr>\n<tr>\n<td>e</td>\n<td>可被触发为执行状态</td>\n</tr>\n<tr>\n<td>f</td>\n<td>是一个开启状态的文件</td>\n</tr>\n<tr>\n<td>r</td>\n<td>表示顶层目录</td>\n</tr>\n<tr>\n<td>F</td>\n<td>该文件被使用了，不过在等待响应</td>\n</tr>\n<tr>\n<td>m</td>\n<td>可能为共享的动态库</td>\n</tr>\n</tbody></table>\n<h3 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h3><p>列出被进程使用的文件名称</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">lsof</span> <span class=\"token punctuation\">[</span>-aUu<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>+d<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a</td>\n<td>多项条件同时成立时才列出</td>\n</tr>\n<tr>\n<td>-U</td>\n<td>仅列出UNIK-like系统的socket文件类型</td>\n</tr>\n<tr>\n<td>-u username</td>\n<td>列出使用者相关进程的文件</td>\n</tr>\n<tr>\n<td>+d dir</td>\n<td>找出某个目录下被使用的文件</td>\n</tr>\n</tbody></table>\n<h3 id=\"pidof\"><a href=\"#pidof\" class=\"headerlink\" title=\"pidof\"></a>pidof</h3><p>找出某个正在执行的进程的pid</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pidof <span class=\"token punctuation\">[</span>-sx<span class=\"token punctuation\">]</span> program_name\n<span class=\"token comment\"># -s 仅列出一个pid，而不是所有</span>\n<span class=\"token comment\"># -x 同时列出program name可能的PPIDn</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/re00.jpg","excerpt":"","more":"<h1 id=\"什么是进程\"><a href=\"#什么是进程\" class=\"headerlink\" title=\"什么是进程\"></a>什么是进程</h1><p>PID由UID&#x2F;GID获取而来</p>\n<p>子进程的有PPID</p>\n<p>学OS的时候再来深入探究一下</p>\n<h1 id=\"任务管理（Job-control）\"><a href=\"#任务管理（Job-control）\" class=\"headerlink\" title=\"任务管理（Job control）\"></a>任务管理（Job control）</h1><p>已经很熟悉了，稍微记一下</p>\n<ul>\n<li>&amp;</li>\n<li>ctrl+z</li>\n<li>jobs</li>\n<li>fg</li>\n<li>bg</li>\n<li>kill</li>\n</ul>\n<p>如果是脱机任务，还可以这样</p>\n<ul>\n<li>at</li>\n<li>nohup</li>\n</ul>\n<h1 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h1><h2 id=\"查看进程\"><a href=\"#查看进程\" class=\"headerlink\" title=\"查看进程\"></a>查看进程</h2><h3 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> aux\n<span class=\"token function\">ps</span> -lA <span class=\"token comment\"># 同上</span>\n<span class=\"token comment\"># 只需记住两个</span>\n<span class=\"token function\">ps</span> aux <span class=\"token comment\"># 输出所有系统运行的进程</span>\n<span class=\"token function\">ps</span> -l <span class=\"token comment\"># 输出当前bash的进程</span>\n\nkawhicurry@ubuntu:~$ <span class=\"token function\">ps</span> -l\nF S   <span class=\"token environment constant\">UID</span>    PID   <span class=\"token environment constant\">PPID</span>  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD\n<span class=\"token number\">0</span> S  <span class=\"token number\">1000</span>  <span class=\"token number\">10100</span>  <span class=\"token number\">10099</span>  <span class=\"token number\">0</span>  <span class=\"token number\">80</span>   <span class=\"token number\">0</span> -  <span class=\"token number\">7480</span> <span class=\"token function\">wait</span>   pts/1    00:00:00 <span class=\"token function\">bash</span>\n<span class=\"token number\">0</span> R  <span class=\"token number\">1000</span>  <span class=\"token number\">27188</span>  <span class=\"token number\">10100</span>  <span class=\"token number\">0</span>  <span class=\"token number\">80</span>   <span class=\"token number\">0</span> -  <span class=\"token number\">9006</span> -      pts/1    00:00:00 <span class=\"token function\">ps</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>F</td>\n<td>进程标识（process flag）</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Stat，有R（running），S（sleep），D（不可唤醒的sleep，如等待io），T（stop or trace），Z（zombie）</td>\n</tr>\n<tr>\n<td>UID&#x2F;PID&#x2F;PPID</td>\n<td>略了</td>\n</tr>\n<tr>\n<td>C</td>\n<td>cpu使用率</td>\n</tr>\n<tr>\n<td>PRI&#x2F;NI</td>\n<td>Priority&#x2F;Nice</td>\n</tr>\n<tr>\n<td>ADDR&#x2F;SZ&#x2F;WCHAN</td>\n<td>都与内存相关，ADDR指kernel function，指出进程在内存的哪个部分，SZ代表用掉了多少内存，WCHAN表示目前进程是否运行，<code>-</code>表示正在运行</td>\n</tr>\n<tr>\n<td>TTY</td>\n<td>登陆者的终端</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>实际使用cpu的时间</td>\n</tr>\n<tr>\n<td>CMD</td>\n<td>实际触发该进程的命令</td>\n</tr>\n</tbody></table>\n<p><code>ps aux</code>的解释就免了，大概就这么多东西。</p>\n<h3 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">top</span> <span class=\"token punctuation\">[</span>-d number<span class=\"token punctuation\">]</span>\n<span class=\"token function\">top</span> <span class=\"token punctuation\">[</span>-bnp<span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># -d 后面接刷新时间</span>\n<span class=\"token comment\"># -b 以批量方式执行top</span>\n<span class=\"token comment\"># -n 和-b配合，执行n次top输出结果</span>\n<span class=\"token comment\"># -p 指定pid</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>top执行过程中可以使用的按键命令</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>？</td>\n<td>帮助</td>\n</tr>\n<tr>\n<td>P</td>\n<td>以cpu使用排序</td>\n</tr>\n<tr>\n<td>M</td>\n<td>以memory排序</td>\n</tr>\n<tr>\n<td>N</td>\n<td>以PID排序</td>\n</tr>\n<tr>\n<td>T</td>\n<td>以TIME排序</td>\n</tr>\n<tr>\n<td>k</td>\n<td>给某个pid一个signal</td>\n</tr>\n<tr>\n<td>r</td>\n<td>给某个pid一个nice值</td>\n</tr>\n<tr>\n<td>q</td>\n<td>退出</td>\n</tr>\n</tbody></table>\n<h3 id=\"pstree\"><a href=\"#pstree\" class=\"headerlink\" title=\"pstree\"></a>pstree</h3><p>太大了，感觉用不上，不过还是很帅的</p>\n<h2 id=\"进程管理-1\"><a href=\"#进程管理-1\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h2><p>使用信号，信号量可用<code>kill -l</code>查看</p>\n<h2 id=\"进程执行顺序\"><a href=\"#进程执行顺序\" class=\"headerlink\" title=\"进程执行顺序\"></a>进程执行顺序</h2><p>Priority由系统决定，无法改变</p>\n<ul>\n<li>priority越小越先被执行</li>\n<li>PRI（new）&#x3D;PRI（old）+nice</li>\n</ul>\n<p>Nice可由用户指定，间接影响Priority</p>\n<ul>\n<li>nice可调整的范围为-20~19</li>\n<li>root可随意调整</li>\n<li>user只能调整自己进程的nice值，且范围为0~19（这是为了防止一般用户抢占系统资源）</li>\n</ul>\n<h3 id=\"nice\"><a href=\"#nice\" class=\"headerlink\" title=\"nice\"></a>nice</h3><p>用于给新执行的命令一个优先级</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nice</span> <span class=\"token punctuation\">[</span>-n number<span class=\"token punctuation\">]</span> <span class=\"token builtin class-name\">command</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"renice\"><a href=\"#renice\" class=\"headerlink\" title=\"renice\"></a>renice</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">renice</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">]</span> PID<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"查看系统资源信息\"><a href=\"#查看系统资源信息\" class=\"headerlink\" title=\"查看系统资源信息\"></a>查看系统资源信息</h2><h3 id=\"free\"><a href=\"#free\" class=\"headerlink\" title=\"free\"></a>free</h3><p>内存使用</p>\n<p>用过不少了，记得<code>-h</code>（human）和<code>-s</code>（不断刷新）就行了</p>\n<h3 id=\"uname\"><a href=\"#uname\" class=\"headerlink\" title=\"uname\"></a>uname</h3><p>系统与内核信息</p>\n<p>要啥有啥，直接看<code>--help</code></p>\n<h3 id=\"uptime\"><a href=\"#uptime\" class=\"headerlink\" title=\"uptime\"></a>uptime</h3><p>用<code>w</code>吧</p>\n<h3 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h3><p>高级话题了，先几个<code>-tunlp</code></p>\n<h3 id=\"dmesg\"><a href=\"#dmesg\" class=\"headerlink\" title=\"dmesg\"></a>dmesg</h3><p>分析内核产生的信息</p>\n<p>包括<strong>启动时一闪而过的</strong>，以及后面生成的</p>\n<h3 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h3><p>检测系统资源变化，好东西</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vmstat</span> <span class=\"token punctuation\">[</span>-a<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a</td>\n<td>all</td>\n</tr>\n<tr>\n<td>-fs</td>\n<td>内存相关</td>\n</tr>\n<tr>\n<td>-S</td>\n<td>单位</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>磁盘相关</td>\n</tr>\n<tr>\n<td>-p partion</td>\n<td>分区相关</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>procs字段说明</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>r</td>\n<td>等待运行中的进程数量</td>\n</tr>\n<tr>\n<td>b</td>\n<td>不可唤醒的进程数量</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>memory</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>swpd</td>\n<td>swap分区</td>\n</tr>\n<tr>\n<td>free</td>\n<td>未被使用</td>\n</tr>\n<tr>\n<td>buff</td>\n<td>缓冲区</td>\n</tr>\n<tr>\n<td>cache</td>\n<td>告诉缓存</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>swap</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>si</td>\n<td>磁盘中进程取出的容量</td>\n</tr>\n<tr>\n<td>so</td>\n<td>内存不足而将没用的进程写入到磁盘中的swap容量</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>io</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bi</td>\n<td>读入的区块数量</td>\n</tr>\n<tr>\n<td>bo</td>\n<td>写入到磁盘的区块数量</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>system</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>in</td>\n<td>每秒被中断的进程数量</td>\n</tr>\n<tr>\n<td>cs</td>\n<td>每秒执行的事件切换次数</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>cpu</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>us</td>\n<td>非内核层cpu的使用状态</td>\n</tr>\n<tr>\n<td>sy</td>\n<td>内核层cpu的使用状态</td>\n</tr>\n<tr>\n<td>id</td>\n<td>闲置的状态</td>\n</tr>\n<tr>\n<td>wa</td>\n<td>等待IO所耗费的cpu状态</td>\n</tr>\n<tr>\n<td>st</td>\n<td>被虚拟机所使用的cpu状态</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h1 id=\"特殊文件与进程\"><a href=\"#特殊文件与进程\" class=\"headerlink\" title=\"特殊文件与进程\"></a>特殊文件与进程</h1><h2 id=\"x2F-proc-x2F-下的内容\"><a href=\"#x2F-proc-x2F-下的内容\" class=\"headerlink\" title=\"&#x2F;proc&#x2F;*下的内容\"></a>&#x2F;proc&#x2F;*下的内容</h2><table>\n<thead>\n<tr>\n<th>文件</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cmdline</td>\n<td>加载内核时所执行相关命令与参数</td>\n</tr>\n<tr>\n<td>cpuinfo</td>\n<td>cpu</td>\n</tr>\n<tr>\n<td>devices</td>\n<td>主要设备的设备id</td>\n</tr>\n<tr>\n<td>filesystems</td>\n<td>系统已加载的文件系统</td>\n</tr>\n<tr>\n<td>interrupts</td>\n<td>系统上面的IRQ分配状态</td>\n</tr>\n<tr>\n<td>ioports</td>\n<td>各个io所配置的地址</td>\n</tr>\n<tr>\n<td>kcore</td>\n<td>就是内存大小（不要读这个）</td>\n</tr>\n<tr>\n<td>loadavg</td>\n<td>w，uptime，top的负载值</td>\n</tr>\n<tr>\n<td>meminfo</td>\n<td>free的内存信息</td>\n</tr>\n<tr>\n<td>modules</td>\n<td>内核加载的模块，即驱动</td>\n</tr>\n<tr>\n<td>mounts</td>\n<td>挂载数据</td>\n</tr>\n<tr>\n<td>swaps</td>\n<td>系统挂载的内存</td>\n</tr>\n<tr>\n<td>partitions</td>\n<td>fdisk -l的记录</td>\n</tr>\n<tr>\n<td>uptime</td>\n<td>。。。</td>\n</tr>\n<tr>\n<td>version</td>\n<td>内核版本呢，uname -a的记录值</td>\n</tr>\n<tr>\n<td>bus&#x2F;*</td>\n<td>总线设备，USB设备</td>\n</tr>\n</tbody></table>\n<h2 id=\"查询已使用文件或已执行进程使用的文件\"><a href=\"#查询已使用文件或已执行进程使用的文件\" class=\"headerlink\" title=\"查询已使用文件或已执行进程使用的文件\"></a>查询已使用文件或已执行进程使用的文件</h2><h3 id=\"fuser\"><a href=\"#fuser\" class=\"headerlink\" title=\"fuser\"></a>fuser</h3><p>列出在使用当前文件的进程</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">fuser</span> <span class=\"token punctuation\">[</span>-umv<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-k<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-signal<span class=\"token punctuation\">]</span> dir/file<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-u</td>\n<td>列出owner</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>verbose</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>找出使用该文件&#x2F;目录的PID并向其发送SIGKILL</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>与k使用，发送前询问</td>\n</tr>\n</tbody></table>\n<p>fuser结果中ACCESS字段的参数</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>c</td>\n<td>此进程在当前目录下</td>\n</tr>\n<tr>\n<td>e</td>\n<td>可被触发为执行状态</td>\n</tr>\n<tr>\n<td>f</td>\n<td>是一个开启状态的文件</td>\n</tr>\n<tr>\n<td>r</td>\n<td>表示顶层目录</td>\n</tr>\n<tr>\n<td>F</td>\n<td>该文件被使用了，不过在等待响应</td>\n</tr>\n<tr>\n<td>m</td>\n<td>可能为共享的动态库</td>\n</tr>\n</tbody></table>\n<h3 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h3><p>列出被进程使用的文件名称</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">lsof</span> <span class=\"token punctuation\">[</span>-aUu<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>+d<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a</td>\n<td>多项条件同时成立时才列出</td>\n</tr>\n<tr>\n<td>-U</td>\n<td>仅列出UNIK-like系统的socket文件类型</td>\n</tr>\n<tr>\n<td>-u username</td>\n<td>列出使用者相关进程的文件</td>\n</tr>\n<tr>\n<td>+d dir</td>\n<td>找出某个目录下被使用的文件</td>\n</tr>\n</tbody></table>\n<h3 id=\"pidof\"><a href=\"#pidof\" class=\"headerlink\" title=\"pidof\"></a>pidof</h3><p>找出某个正在执行的进程的pid</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pidof <span class=\"token punctuation\">[</span>-sx<span class=\"token punctuation\">]</span> program_name\n<span class=\"token comment\"># -s 仅列出一个pid，而不是所有</span>\n<span class=\"token comment\"># -x 同时列出program name可能的PPIDn</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"重学linux（13）","abbrlink":"b665e76a","date":"2022-03-06T07:36:38.000Z","_content":"\ndaemon与service\n\n## init.d\n\n早期的系统服务，就是一大堆脚本，在内核启动时第一个程序就是init，然后用init去运行所有需要的服务。\n\n### 使用\n\n| 用法     | command                    |\n| -------- | -------------------------- |\n| 启动     | /etc/init.d/daemon start   |\n| 关闭     | /etc/init.d/daemon stop    |\n| 重启     | /etc/init.d/daemon restart |\n| 查看状态 | /etc/init.d/daemon status  |\n\n### 分类\n\n- stand alone: 服务独立启动，常驻于内存中，提供本机或用户的服务操作，反应速度快\n- super daemon: 由xinetd或inetd两个总管程序提供socket对应的管理\n\n### 依赖\n\n没有任何依赖的保证\n\n### 运行级别\n\ninit可以根据用户定义的runlevel来唤醒不同的服务，位于/etc/rc.d/rc[0-6]/S[num]daemon，0~6含义如下\n\n0. halt system\n1. 单人维护\n2. multi-user\n3. same as 2\n4. same as 2\n5. gui\n6. Reboot\n\nnum为启动顺序，用于解决依赖问题。\n\ndaemon文件可以被链接至相应文件夹下。但不需要手动链接，只需使用\n\n- 启动：chkconfig daemon on\n- 不启动：chkconfig deamon off\n\n## systemd\n\n### systemd 相比init的优势\n\n- systemd常驻内存，响应快，并且有systemctl作为专门的交互工具\n- 可自定义服务的依赖检查\n- 按照daemon的功能进行分类，先分为unit然后归到type中\n- 讲多个deamons集合为一个群组\n- 向下兼容init脚本\n\n一些没有完全替换的部分\n\n- runlevel并未完全对应\n- 受systemctl语法限制\n- 手动启动的服务不受systemd管控\n- systemd启动过程中不接受stdin和stdout\n\n### 目录\n\n- /usr/lib/systemd/system/: 每个服务最主要的启动脚本设置，类似/etc/init.d/下的文件\n- /run/systemd/system/: \n- /etc/systemd/system/: \n\n### unit分类\n\n使用后缀名\n\n| 拓展名            | 功能                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| .service          | 一般的服务类型（service unit）                               |\n| .socket           | 内部程序数据交换的socket服务（socket unit）                  |\n| .target           | 执行环境类型（target unit），一群unit的集合，就是执行一堆service和socket |\n| .mount/.automount | 文件系统挂载的相关服务                                       |\n| .path             | 检测特定文件或目录类型                                       |\n| .timer            | 循环执行的服务（timer unit），比aanacrontab更有弹性          |\n\n# systemctl\n\n## 管理单一服务\n\n```bash\nsystemct [command] [unit]\n```\n\ncommand 主要有：\n\n- start\n- stop\n- restart\n- reload\n- enable\n- disable\n- status\n- is-active\n- is-enable\n\nstatus运行状态：\n\n- active(running)\n- active(exited)\n- active(waiting)\n- inactive\n\n开机的默认状态：\n\n- enabled\n- disabled\n- static\n- mask\n\n如果只是关闭某个service，若启动某个关联service时可能会重启该服务。如果要停用某个service，正确的做法是将相关的service全部关闭。当然，也可以强制注销该服务，使用`systemctl mask `来将该service链接至`/dev/null`，这样相关service试图拉起时，也拉不起来。\n\n## 查看系统上的服务\n\n```bash\nsystemctl [command] [--type==TYPE] [--all]\n```\n\ncommand:\n\n- list-units：依据unit显示启动的unit，加上--all来列出没启动的\n- list-unit-files：依据/usr/lib/systemd/system内的文件，将所有文件列表说明\n\ntype: 上面有，略\n\n## 管理不同的操作环境（target unit）\n\n```bash\n# 查看所有target unit\nsystemctl list-units --type=target --all\n```\n\n一些target\n\n- graphical.target\n- multi-user.target\n- rescue.target\n- emergency.target\n- shutdown.target\n- getty.target\n\n```bash\nsystemctl [command] [unit.target]\n```\n\ncommand:\n\n- get-default\n- set-default：改变默认target\n- isolate：切换到后面接的target（**重点**：isolate而不是start，而且isolate超好用）\n\n一些快捷指令\n\n- systemctl poweroff\n- reboot\n- suspend\n- hibernate\n- rescue\n- emergency\n\n## 分析各服务的依赖关系\n\n```bash]\nsystemctl list-dependencies [unit] [--reverse]\n# --reverse 反向追踪谁在使用这个unit\n```\n\n## systemd的daemon相关目录介绍\n\n| 目录                     | 用途                                                         |\n| ------------------------ | ------------------------------------------------------------ |\n| /usr/lib/systemd/system/ | 官方提供的软件（默认）安装后默认的启动脚本配置文件等，这里尽量不要改，要改也是改/etc/systemd/system/下 |\n| /run/systemd/system/     | 系统执行过程中产生的服务脚本，这些脚本优先级比上面这个高     |\n| /etc/systemd/system/     | 管理员根据需要建立的服务脚本，类似/etc/rc.d/rc5.d/Sxx，实际上是一堆从第一条链接过来的链接文件 |\n| /etc/sysconfig/*         | 所有的服务都会将初始化的一些选项设置写入到这个目录           |\n| /var/lib/                | 产生数据的服务会将它的数据写入到/var/lib中                   |\n| /run/                    | daemon的缓存，包括lock和pid文件等                            |\n\n# service类型的配置文件\n\n## 相关目录\n\n- /usr/lib/systemd/*.service\n- /etc/systemd/system/*.service.d/\\*.conf\n- /etc/systemd/system/\\*.service.wants/\\*，下面放链接，意思是启动service之后建议加上的服务\n- /etc/systemd/system/\\*.service.required/\\*，下面放链接，意思是启动service之前需要事先启动的服务\n\n## 配置文件的设置项目\n\n示例：\n\n```bash\nkawhicurry@ubuntu:~$ cat /etc/systemd/system/sshd.service\n[Unit]\nDescription=OpenBSD Secure Shell server\nAfter=network.target auditd.service\nConditionPathExists=!/etc/ssh/sshd_not_to_be_run\n\n[Service]\nEnvironmentFile=-/etc/default/ssh\nExecStartPre=/usr/sbin/sshd -t\nExecStart=/usr/sbin/sshd -D $SSHD_OPTS\nExecReload=/usr/sbin/sshd -t\nExecReload=/bin/kill -HUP $MAINPID\nKillMode=process\nRestart=on-failure\nRestartPreventExitStatus=255\nType=notify\nRuntimeDirectory=sshd\nRuntimeDirectoryMode=0755\n\n[Install]\nWantedBy=multi-user.target\nAlias=sshd.service\n```\n\n配置文件可以分为三个部分：\n\n1. [Unit] : unit本身的说明和依赖的daemon的设置\n2. [Service] [Socket] [Timer] [Mount] [Path] : 不同的unit类型使用不同的配置，包括启动的脚本、环境配置文件名、重启的方式等\n3. [Install] : 这个项目就是将此unit安装到某个target里去的意思\n\n一些规则：\n\n- 项目设置可以重复，遵循后面覆盖前面的原则\n- 设置参数为whether or not的项目，可以使用1\\0\\yes\\true\\……等\n- 空白行，#，；开头的行均为注释\n\n对于每个部分下的设置：\n\n1. unit\n\n   | 参数          | 说明                                                         |\n   | ------------- | ------------------------------------------------------------ |\n   | Description   | 使用`systemctl list-units`时展示的说明                       |\n   | Documentation | 指定说明文件，包括网页（http://...），man page（man:sshd(8)），file（file:/etc/ssh/sshd_config） |\n   | After         | 说明此unit在哪个daemon启动之后才启动的意思，仅仅是说明顺序，并没有强制。这里和requires有差异 |\n   | Before        | 和After相反，其他一样                                        |\n   | Requires      | 明确定义此unit在哪个daemon启动后启动                         |\n   | Wants         | 和Requires相反，定义这个unit之后启动哪个服务                 |\n   | Conflicts     | 代表冲突的服务                                               |\n\n2. service\n\n   | 参数            | 说明                                                         |\n   | --------------- | ------------------------------------------------------------ |\n   | Type            | 说明这个daemon的启动方式，包括simple、forking、oneshot、idle |\n   | EnvironmentFile | 指定启动脚本的环境配置文件                                   |\n   | ExecStart       | 实际执行daemon的命令或脚本，也可以加上ExecStartPre和ExecStartPost来细化设置，注意：不能使用bash特有的语法，如管道和重定向，若要使用，只能将TYPE设置为oneshot |\n   | ExecStop        | 用于systemctl stop                                           |\n   | ExecReload      | 用于systemctl reload                                         |\n   | Restart         | 当为1时，daemon服务终止后会再次启动此服务                    |\n   | RemainAfterExit | 当为1时，daemon所属的所有进程终止后，会尝试再次启动，和TYPE=oneshot配合使用 |\n   | TimeoutSec      | 用于启动或关闭失败时的等待时间                               |\n   | KillMode        | process、control-group、none中的一种                         |\n   | RestartSec      | 被关闭后等待多久重启                                         |\n\n3. install\n\n   | 参数     | 说明                                                         |\n   | -------- | ------------------------------------------------------------ |\n   | WantedBy | 这个设置后面接的大部分时*.target unit。意思是这个unit本身依附于哪个target |\n   | Also     | 当这个unit被enable时，哪些unit也要enable                     |\n   | Alias    | 运行一个链接的别名，比如将multi-user.target设为default.target，其实就是进行了链接 |\n\n## 多重service的重复设置方式\n\n以getty为例，众所周知，有6个默认的tty，但只有一个`/usr/lib/systemd/system/getty@.service`\n\n```bash\nkawhicurry@ubuntu:~$ systemctl show getty.target\nId=getty.target\nNames=getty.target\nWants=getty-static.service getty@tty1.service\nWantedBy=multi-user.target\nConflicts=shutdown.target\nBefore=shutdown.target multi-user.target\nAfter=getty@tty1.service getty@tty2.service getty-static.service\n```\n\n只有一个service文件，但这里after后面却有多个。执行完getty.target之后，实际的执行顺序应当是：\n\n1. 先看/usr/lib/systemd/system/,/etc/systemd/system/下有没有getty@tty1.service的设置（然后找不到）\n2. 然后找getty@.service，然后将原来@后面的值作为变量传入getty@.service中的`%I`或`%i`变量\n\n这样就可以~~少写很多文件了~~实现复用了。\n\n除此之外，可以在`/etc/systemd/logind.conf`中将默认的6个终端关掉几个。\n\n# 针对timer的配置文件\n\n## systemd.timer的优势\n\n1. 所有systemd服务产生的信息都会被log，因此比cron在debug上面更清楚和方便\n2. 各项timer的任务可以跟systemd的服务结合\n3. 可以跟control group（cgroup）结合，限制任务的资源利用\n4. 时间可以精确到毫秒\n\n当然，也有弱点\n\n1. 比如没有email通知功能\n2. 没有anacron的一定时间内随机取样功能（不知道这是啥玩意）\n\n## 使用timer.target的前提\n\n- time.target要启动\n- sname.service的服务存在（sname是自己指定的）\n- sname.timer的服务存在\n\n## Timer部分的参数\n\n在`/etc/systemd/system`下建立`*.timer`文件，然后在[Timer]块中指定相关信息\n\n| 参数              | 说明                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| OnActiveSec       | timer.target启动多久之后才执行unit                           |\n| OnBootSec         | 启动完成多久之后才执行                                       |\n| OnStartupSec      | systemd第一次启动多久后执行                                  |\n| OnUnitActiveSec   | 这个timer配置文件所管理的那个unit服务在最后一次启动后，隔多久再执行 |\n| OnUnitInactiveSec | 这个timer配置文件所管理的那个unit服务在最后一次停止后，隔多久再执行 |\n| OnCalender        | 使用实际的时间（而非循环时间）的方式来启动服务               |\n| Unit              | .service和.timer名称相同就可以了，名称不同才在这里指定       |\n| Persistent        | 使用OnCalender时，指定该功能是否要持续进行                   |\n\nOnCalender的时间\n\n```bash\n# 基本语法\n# week YYYY-MM-DD HH:MM:SS\nThu 2022-02-22 22:22:22\n\n# 指定间隔\n# s\\sec\\second\n# m\\min\\minutes\n# h\\hr\\hour\n# d\\day\\days\n# w\\week\\weeks\n# month\\mouths\n# y\\year\\years\n3h\n10s 300m\n100m 5day\n\n# 英语口语\nnow\ntoday\ntomorrow\nhourly\ndaily\nweekly\nmonthly\n+3h10m\n2015-08-16\n```\n\n注：OnCalender所展示的下一次任务开始时间为UNIX标准时间，而不是当前时区的时间\n\n# Linux默认的启动项\n\n略了，需要再查\n","source":"_posts/Operation/重学linux（13）.md","raw":"---\ntitle: 重学linux（13）\ntags:\n  - 专栏：重学linux\n  - linux\ncategories: Operation\nabbrlink: b665e76a\ndate: 2022-03-06 15:36:38\n---\n\ndaemon与service\n\n## init.d\n\n早期的系统服务，就是一大堆脚本，在内核启动时第一个程序就是init，然后用init去运行所有需要的服务。\n\n### 使用\n\n| 用法     | command                    |\n| -------- | -------------------------- |\n| 启动     | /etc/init.d/daemon start   |\n| 关闭     | /etc/init.d/daemon stop    |\n| 重启     | /etc/init.d/daemon restart |\n| 查看状态 | /etc/init.d/daemon status  |\n\n### 分类\n\n- stand alone: 服务独立启动，常驻于内存中，提供本机或用户的服务操作，反应速度快\n- super daemon: 由xinetd或inetd两个总管程序提供socket对应的管理\n\n### 依赖\n\n没有任何依赖的保证\n\n### 运行级别\n\ninit可以根据用户定义的runlevel来唤醒不同的服务，位于/etc/rc.d/rc[0-6]/S[num]daemon，0~6含义如下\n\n0. halt system\n1. 单人维护\n2. multi-user\n3. same as 2\n4. same as 2\n5. gui\n6. Reboot\n\nnum为启动顺序，用于解决依赖问题。\n\ndaemon文件可以被链接至相应文件夹下。但不需要手动链接，只需使用\n\n- 启动：chkconfig daemon on\n- 不启动：chkconfig deamon off\n\n## systemd\n\n### systemd 相比init的优势\n\n- systemd常驻内存，响应快，并且有systemctl作为专门的交互工具\n- 可自定义服务的依赖检查\n- 按照daemon的功能进行分类，先分为unit然后归到type中\n- 讲多个deamons集合为一个群组\n- 向下兼容init脚本\n\n一些没有完全替换的部分\n\n- runlevel并未完全对应\n- 受systemctl语法限制\n- 手动启动的服务不受systemd管控\n- systemd启动过程中不接受stdin和stdout\n\n### 目录\n\n- /usr/lib/systemd/system/: 每个服务最主要的启动脚本设置，类似/etc/init.d/下的文件\n- /run/systemd/system/: \n- /etc/systemd/system/: \n\n### unit分类\n\n使用后缀名\n\n| 拓展名            | 功能                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| .service          | 一般的服务类型（service unit）                               |\n| .socket           | 内部程序数据交换的socket服务（socket unit）                  |\n| .target           | 执行环境类型（target unit），一群unit的集合，就是执行一堆service和socket |\n| .mount/.automount | 文件系统挂载的相关服务                                       |\n| .path             | 检测特定文件或目录类型                                       |\n| .timer            | 循环执行的服务（timer unit），比aanacrontab更有弹性          |\n\n# systemctl\n\n## 管理单一服务\n\n```bash\nsystemct [command] [unit]\n```\n\ncommand 主要有：\n\n- start\n- stop\n- restart\n- reload\n- enable\n- disable\n- status\n- is-active\n- is-enable\n\nstatus运行状态：\n\n- active(running)\n- active(exited)\n- active(waiting)\n- inactive\n\n开机的默认状态：\n\n- enabled\n- disabled\n- static\n- mask\n\n如果只是关闭某个service，若启动某个关联service时可能会重启该服务。如果要停用某个service，正确的做法是将相关的service全部关闭。当然，也可以强制注销该服务，使用`systemctl mask `来将该service链接至`/dev/null`，这样相关service试图拉起时，也拉不起来。\n\n## 查看系统上的服务\n\n```bash\nsystemctl [command] [--type==TYPE] [--all]\n```\n\ncommand:\n\n- list-units：依据unit显示启动的unit，加上--all来列出没启动的\n- list-unit-files：依据/usr/lib/systemd/system内的文件，将所有文件列表说明\n\ntype: 上面有，略\n\n## 管理不同的操作环境（target unit）\n\n```bash\n# 查看所有target unit\nsystemctl list-units --type=target --all\n```\n\n一些target\n\n- graphical.target\n- multi-user.target\n- rescue.target\n- emergency.target\n- shutdown.target\n- getty.target\n\n```bash\nsystemctl [command] [unit.target]\n```\n\ncommand:\n\n- get-default\n- set-default：改变默认target\n- isolate：切换到后面接的target（**重点**：isolate而不是start，而且isolate超好用）\n\n一些快捷指令\n\n- systemctl poweroff\n- reboot\n- suspend\n- hibernate\n- rescue\n- emergency\n\n## 分析各服务的依赖关系\n\n```bash]\nsystemctl list-dependencies [unit] [--reverse]\n# --reverse 反向追踪谁在使用这个unit\n```\n\n## systemd的daemon相关目录介绍\n\n| 目录                     | 用途                                                         |\n| ------------------------ | ------------------------------------------------------------ |\n| /usr/lib/systemd/system/ | 官方提供的软件（默认）安装后默认的启动脚本配置文件等，这里尽量不要改，要改也是改/etc/systemd/system/下 |\n| /run/systemd/system/     | 系统执行过程中产生的服务脚本，这些脚本优先级比上面这个高     |\n| /etc/systemd/system/     | 管理员根据需要建立的服务脚本，类似/etc/rc.d/rc5.d/Sxx，实际上是一堆从第一条链接过来的链接文件 |\n| /etc/sysconfig/*         | 所有的服务都会将初始化的一些选项设置写入到这个目录           |\n| /var/lib/                | 产生数据的服务会将它的数据写入到/var/lib中                   |\n| /run/                    | daemon的缓存，包括lock和pid文件等                            |\n\n# service类型的配置文件\n\n## 相关目录\n\n- /usr/lib/systemd/*.service\n- /etc/systemd/system/*.service.d/\\*.conf\n- /etc/systemd/system/\\*.service.wants/\\*，下面放链接，意思是启动service之后建议加上的服务\n- /etc/systemd/system/\\*.service.required/\\*，下面放链接，意思是启动service之前需要事先启动的服务\n\n## 配置文件的设置项目\n\n示例：\n\n```bash\nkawhicurry@ubuntu:~$ cat /etc/systemd/system/sshd.service\n[Unit]\nDescription=OpenBSD Secure Shell server\nAfter=network.target auditd.service\nConditionPathExists=!/etc/ssh/sshd_not_to_be_run\n\n[Service]\nEnvironmentFile=-/etc/default/ssh\nExecStartPre=/usr/sbin/sshd -t\nExecStart=/usr/sbin/sshd -D $SSHD_OPTS\nExecReload=/usr/sbin/sshd -t\nExecReload=/bin/kill -HUP $MAINPID\nKillMode=process\nRestart=on-failure\nRestartPreventExitStatus=255\nType=notify\nRuntimeDirectory=sshd\nRuntimeDirectoryMode=0755\n\n[Install]\nWantedBy=multi-user.target\nAlias=sshd.service\n```\n\n配置文件可以分为三个部分：\n\n1. [Unit] : unit本身的说明和依赖的daemon的设置\n2. [Service] [Socket] [Timer] [Mount] [Path] : 不同的unit类型使用不同的配置，包括启动的脚本、环境配置文件名、重启的方式等\n3. [Install] : 这个项目就是将此unit安装到某个target里去的意思\n\n一些规则：\n\n- 项目设置可以重复，遵循后面覆盖前面的原则\n- 设置参数为whether or not的项目，可以使用1\\0\\yes\\true\\……等\n- 空白行，#，；开头的行均为注释\n\n对于每个部分下的设置：\n\n1. unit\n\n   | 参数          | 说明                                                         |\n   | ------------- | ------------------------------------------------------------ |\n   | Description   | 使用`systemctl list-units`时展示的说明                       |\n   | Documentation | 指定说明文件，包括网页（http://...），man page（man:sshd(8)），file（file:/etc/ssh/sshd_config） |\n   | After         | 说明此unit在哪个daemon启动之后才启动的意思，仅仅是说明顺序，并没有强制。这里和requires有差异 |\n   | Before        | 和After相反，其他一样                                        |\n   | Requires      | 明确定义此unit在哪个daemon启动后启动                         |\n   | Wants         | 和Requires相反，定义这个unit之后启动哪个服务                 |\n   | Conflicts     | 代表冲突的服务                                               |\n\n2. service\n\n   | 参数            | 说明                                                         |\n   | --------------- | ------------------------------------------------------------ |\n   | Type            | 说明这个daemon的启动方式，包括simple、forking、oneshot、idle |\n   | EnvironmentFile | 指定启动脚本的环境配置文件                                   |\n   | ExecStart       | 实际执行daemon的命令或脚本，也可以加上ExecStartPre和ExecStartPost来细化设置，注意：不能使用bash特有的语法，如管道和重定向，若要使用，只能将TYPE设置为oneshot |\n   | ExecStop        | 用于systemctl stop                                           |\n   | ExecReload      | 用于systemctl reload                                         |\n   | Restart         | 当为1时，daemon服务终止后会再次启动此服务                    |\n   | RemainAfterExit | 当为1时，daemon所属的所有进程终止后，会尝试再次启动，和TYPE=oneshot配合使用 |\n   | TimeoutSec      | 用于启动或关闭失败时的等待时间                               |\n   | KillMode        | process、control-group、none中的一种                         |\n   | RestartSec      | 被关闭后等待多久重启                                         |\n\n3. install\n\n   | 参数     | 说明                                                         |\n   | -------- | ------------------------------------------------------------ |\n   | WantedBy | 这个设置后面接的大部分时*.target unit。意思是这个unit本身依附于哪个target |\n   | Also     | 当这个unit被enable时，哪些unit也要enable                     |\n   | Alias    | 运行一个链接的别名，比如将multi-user.target设为default.target，其实就是进行了链接 |\n\n## 多重service的重复设置方式\n\n以getty为例，众所周知，有6个默认的tty，但只有一个`/usr/lib/systemd/system/getty@.service`\n\n```bash\nkawhicurry@ubuntu:~$ systemctl show getty.target\nId=getty.target\nNames=getty.target\nWants=getty-static.service getty@tty1.service\nWantedBy=multi-user.target\nConflicts=shutdown.target\nBefore=shutdown.target multi-user.target\nAfter=getty@tty1.service getty@tty2.service getty-static.service\n```\n\n只有一个service文件，但这里after后面却有多个。执行完getty.target之后，实际的执行顺序应当是：\n\n1. 先看/usr/lib/systemd/system/,/etc/systemd/system/下有没有getty@tty1.service的设置（然后找不到）\n2. 然后找getty@.service，然后将原来@后面的值作为变量传入getty@.service中的`%I`或`%i`变量\n\n这样就可以~~少写很多文件了~~实现复用了。\n\n除此之外，可以在`/etc/systemd/logind.conf`中将默认的6个终端关掉几个。\n\n# 针对timer的配置文件\n\n## systemd.timer的优势\n\n1. 所有systemd服务产生的信息都会被log，因此比cron在debug上面更清楚和方便\n2. 各项timer的任务可以跟systemd的服务结合\n3. 可以跟control group（cgroup）结合，限制任务的资源利用\n4. 时间可以精确到毫秒\n\n当然，也有弱点\n\n1. 比如没有email通知功能\n2. 没有anacron的一定时间内随机取样功能（不知道这是啥玩意）\n\n## 使用timer.target的前提\n\n- time.target要启动\n- sname.service的服务存在（sname是自己指定的）\n- sname.timer的服务存在\n\n## Timer部分的参数\n\n在`/etc/systemd/system`下建立`*.timer`文件，然后在[Timer]块中指定相关信息\n\n| 参数              | 说明                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| OnActiveSec       | timer.target启动多久之后才执行unit                           |\n| OnBootSec         | 启动完成多久之后才执行                                       |\n| OnStartupSec      | systemd第一次启动多久后执行                                  |\n| OnUnitActiveSec   | 这个timer配置文件所管理的那个unit服务在最后一次启动后，隔多久再执行 |\n| OnUnitInactiveSec | 这个timer配置文件所管理的那个unit服务在最后一次停止后，隔多久再执行 |\n| OnCalender        | 使用实际的时间（而非循环时间）的方式来启动服务               |\n| Unit              | .service和.timer名称相同就可以了，名称不同才在这里指定       |\n| Persistent        | 使用OnCalender时，指定该功能是否要持续进行                   |\n\nOnCalender的时间\n\n```bash\n# 基本语法\n# week YYYY-MM-DD HH:MM:SS\nThu 2022-02-22 22:22:22\n\n# 指定间隔\n# s\\sec\\second\n# m\\min\\minutes\n# h\\hr\\hour\n# d\\day\\days\n# w\\week\\weeks\n# month\\mouths\n# y\\year\\years\n3h\n10s 300m\n100m 5day\n\n# 英语口语\nnow\ntoday\ntomorrow\nhourly\ndaily\nweekly\nmonthly\n+3h10m\n2015-08-16\n```\n\n注：OnCalender所展示的下一次任务开始时间为UNIX标准时间，而不是当前时区的时间\n\n# Linux默认的启动项\n\n略了，需要再查\n","slug":"重学linux（13）","published":1,"category":"Operation","updated":"2022-03-06T15:03:59.028Z","_id":"cl0fen7fo00006sul2xtoaalp","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"daemon与service\"><a href=\"#daemon与service\" class=\"headerlink\" title=\"daemon与service\"></a>daemon与service</h1><h2 id=\"init-d\"><a href=\"#init-d\" class=\"headerlink\" title=\"init.d\"></a>init.d</h2><p>早期的系统服务，就是一大堆脚本，在内核启动时第一个程序就是init，然后用init去运行所有需要的服务。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><table>\n<thead>\n<tr>\n<th>用法</th>\n<th>command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>启动</td>\n<td>&#x2F;etc&#x2F;init.d&#x2F;daemon start</td>\n</tr>\n<tr>\n<td>关闭</td>\n<td>&#x2F;etc&#x2F;init.d&#x2F;daemon stop</td>\n</tr>\n<tr>\n<td>重启</td>\n<td>&#x2F;etc&#x2F;init.d&#x2F;daemon restart</td>\n</tr>\n<tr>\n<td>查看状态</td>\n<td>&#x2F;etc&#x2F;init.d&#x2F;daemon status</td>\n</tr>\n</tbody></table>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>stand alone: 服务独立启动，常驻于内存中，提供本机或用户的服务操作，反应速度快</li>\n<li>super daemon: 由xinetd或inetd两个总管程序提供socket对应的管理</li>\n</ul>\n<h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><p>没有任何依赖的保证</p>\n<h3 id=\"运行级别\"><a href=\"#运行级别\" class=\"headerlink\" title=\"运行级别\"></a>运行级别</h3><p>init可以根据用户定义的runlevel来唤醒不同的服务，位于&#x2F;etc&#x2F;rc.d&#x2F;rc[0-6]&#x2F;S[num]daemon，0~6含义如下</p>\n<ol start=\"0\">\n<li>halt system</li>\n<li>单人维护</li>\n<li>multi-user</li>\n<li>same as 2</li>\n<li>same as 2</li>\n<li>gui</li>\n<li>Reboot</li>\n</ol>\n<p>num为启动顺序，用于解决依赖问题。</p>\n<p>daemon文件可以被链接至相应文件夹下。但不需要手动链接，只需使用</p>\n<ul>\n<li>启动：chkconfig daemon on</li>\n<li>不启动：chkconfig deamon off</li>\n</ul>\n<h2 id=\"systemd\"><a href=\"#systemd\" class=\"headerlink\" title=\"systemd\"></a>systemd</h2><h3 id=\"systemd-相比init的优势\"><a href=\"#systemd-相比init的优势\" class=\"headerlink\" title=\"systemd 相比init的优势\"></a>systemd 相比init的优势</h3><ul>\n<li>systemd常驻内存，响应快，并且有systemctl作为专门的交互工具</li>\n<li>可自定义服务的依赖检查</li>\n<li>按照daemon的功能进行分类，先分为unit然后归到type中</li>\n<li>讲多个deamons集合为一个群组</li>\n<li>向下兼容init脚本</li>\n</ul>\n<p>一些没有完全替换的部分</p>\n<ul>\n<li>runlevel并未完全对应</li>\n<li>受systemctl语法限制</li>\n<li>手动启动的服务不受systemd管控</li>\n<li>systemd启动过程中不接受stdin和stdout</li>\n</ul>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;: 每个服务最主要的启动脚本设置，类似&#x2F;etc&#x2F;init.d&#x2F;下的文件</li>\n<li>&#x2F;run&#x2F;systemd&#x2F;system&#x2F;: </li>\n<li>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;:</li>\n</ul>\n<h3 id=\"unit分类\"><a href=\"#unit分类\" class=\"headerlink\" title=\"unit分类\"></a>unit分类</h3><p>使用后缀名</p>\n<table>\n<thead>\n<tr>\n<th>拓展名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.service</td>\n<td>一般的服务类型（service unit）</td>\n</tr>\n<tr>\n<td>.socket</td>\n<td>内部程序数据交换的socket服务（socket unit）</td>\n</tr>\n<tr>\n<td>.target</td>\n<td>执行环境类型（target unit），一群unit的集合，就是执行一堆service和socket</td>\n</tr>\n<tr>\n<td>.mount&#x2F;.automount</td>\n<td>文件系统挂载的相关服务</td>\n</tr>\n<tr>\n<td>.path</td>\n<td>检测特定文件或目录类型</td>\n</tr>\n<tr>\n<td>.timer</td>\n<td>循环执行的服务（timer unit），比aanacrontab更有弹性</td>\n</tr>\n</tbody></table>\n<h1 id=\"systemctl\"><a href=\"#systemctl\" class=\"headerlink\" title=\"systemctl\"></a>systemctl</h1><h2 id=\"管理单一服务\"><a href=\"#管理单一服务\" class=\"headerlink\" title=\"管理单一服务\"></a>管理单一服务</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemct <span class=\"token punctuation\">[</span>command<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>unit<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>command 主要有：</p>\n<ul>\n<li>start</li>\n<li>stop</li>\n<li>restart</li>\n<li>reload</li>\n<li>enable</li>\n<li>disable</li>\n<li>status</li>\n<li>is-active</li>\n<li>is-enable</li>\n</ul>\n<p>status运行状态：</p>\n<ul>\n<li>active(running)</li>\n<li>active(exited)</li>\n<li>active(waiting)</li>\n<li>inactive</li>\n</ul>\n<p>开机的默认状态：</p>\n<ul>\n<li>enabled</li>\n<li>disabled</li>\n<li>static</li>\n<li>mask</li>\n</ul>\n<p>如果只是关闭某个service，若启动某个关联service时可能会重启该服务。如果要停用某个service，正确的做法是将相关的service全部关闭。当然，也可以强制注销该服务，使用<code>systemctl mask </code>来将该service链接至<code>/dev/null</code>，这样相关service试图拉起时，也拉不起来。</p>\n<h2 id=\"查看系统上的服务\"><a href=\"#查看系统上的服务\" class=\"headerlink\" title=\"查看系统上的服务\"></a>查看系统上的服务</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl <span class=\"token punctuation\">[</span>command<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--type<span class=\"token operator\">==</span>TYPE<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--all<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>command:</p>\n<ul>\n<li>list-units：依据unit显示启动的unit，加上–all来列出没启动的</li>\n<li>list-unit-files：依据&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system内的文件，将所有文件列表说明</li>\n</ul>\n<p>type: 上面有，略</p>\n<h2 id=\"管理不同的操作环境（target-unit）\"><a href=\"#管理不同的操作环境（target-unit）\" class=\"headerlink\" title=\"管理不同的操作环境（target unit）\"></a>管理不同的操作环境（target unit）</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看所有target unit</span>\nsystemctl list-units --type<span class=\"token operator\">=</span>target --all<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>一些target</p>\n<ul>\n<li>graphical.target</li>\n<li>multi-user.target</li>\n<li>rescue.target</li>\n<li>emergency.target</li>\n<li>shutdown.target</li>\n<li>getty.target</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl <span class=\"token punctuation\">[</span>command<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>unit.target<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>command:</p>\n<ul>\n<li>get-default</li>\n<li>set-default：改变默认target</li>\n<li>isolate：切换到后面接的target（<strong>重点</strong>：isolate而不是start，而且isolate超好用）</li>\n</ul>\n<p>一些快捷指令</p>\n<ul>\n<li>systemctl poweroff</li>\n<li>reboot</li>\n<li>suspend</li>\n<li>hibernate</li>\n<li>rescue</li>\n<li>emergency</li>\n</ul>\n<h2 id=\"分析各服务的依赖关系\"><a href=\"#分析各服务的依赖关系\" class=\"headerlink\" title=\"分析各服务的依赖关系\"></a>分析各服务的依赖关系</h2><pre class=\"line-numbers language-bash]\" data-language=\"bash]\"><code class=\"language-bash]\">systemctl list-dependencies [unit] [--reverse]\n# --reverse 反向追踪谁在使用这个unit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"systemd的daemon相关目录介绍\"><a href=\"#systemd的daemon相关目录介绍\" class=\"headerlink\" title=\"systemd的daemon相关目录介绍\"></a>systemd的daemon相关目录介绍</h2><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;</td>\n<td>官方提供的软件（默认）安装后默认的启动脚本配置文件等，这里尽量不要改，要改也是改&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;下</td>\n</tr>\n<tr>\n<td>&#x2F;run&#x2F;systemd&#x2F;system&#x2F;</td>\n<td>系统执行过程中产生的服务脚本，这些脚本优先级比上面这个高</td>\n</tr>\n<tr>\n<td>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;</td>\n<td>管理员根据需要建立的服务脚本，类似&#x2F;etc&#x2F;rc.d&#x2F;rc5.d&#x2F;Sxx，实际上是一堆从第一条链接过来的链接文件</td>\n</tr>\n<tr>\n<td>&#x2F;etc&#x2F;sysconfig&#x2F;*</td>\n<td>所有的服务都会将初始化的一些选项设置写入到这个目录</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;lib&#x2F;</td>\n<td>产生数据的服务会将它的数据写入到&#x2F;var&#x2F;lib中</td>\n</tr>\n<tr>\n<td>&#x2F;run&#x2F;</td>\n<td>daemon的缓存，包括lock和pid文件等</td>\n</tr>\n</tbody></table>\n<h1 id=\"service类型的配置文件\"><a href=\"#service类型的配置文件\" class=\"headerlink\" title=\"service类型的配置文件\"></a>service类型的配置文件</h1><h2 id=\"相关目录\"><a href=\"#相关目录\" class=\"headerlink\" title=\"相关目录\"></a>相关目录</h2><ul>\n<li>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;*.service</li>\n<li>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;*.service.d&#x2F;*.conf</li>\n<li>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;*.service.wants&#x2F;*，下面放链接，意思是启动service之后建议加上的服务</li>\n<li>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;*.service.required&#x2F;*，下面放链接，意思是启动service之前需要事先启动的服务</li>\n</ul>\n<h2 id=\"配置文件的设置项目\"><a href=\"#配置文件的设置项目\" class=\"headerlink\" title=\"配置文件的设置项目\"></a>配置文件的设置项目</h2><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kawhicurry@ubuntu:~$ <span class=\"token function\">cat</span> /etc/systemd/system/sshd.service\n<span class=\"token punctuation\">[</span>Unit<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">Description</span><span class=\"token operator\">=</span>OpenBSD Secure Shell server\n<span class=\"token assign-left variable\">After</span><span class=\"token operator\">=</span>network.target auditd.service\n<span class=\"token assign-left variable\">ConditionPathExists</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>/etc/ssh/sshd_not_to_be_run\n\n<span class=\"token punctuation\">[</span>Service<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">EnvironmentFile</span><span class=\"token operator\">=</span>-/etc/default/ssh\n<span class=\"token assign-left variable\">ExecStartPre</span><span class=\"token operator\">=</span>/usr/sbin/sshd -t\n<span class=\"token assign-left variable\">ExecStart</span><span class=\"token operator\">=</span>/usr/sbin/sshd -D <span class=\"token variable\">$SSHD_OPTS</span>\n<span class=\"token assign-left variable\">ExecReload</span><span class=\"token operator\">=</span>/usr/sbin/sshd -t\n<span class=\"token assign-left variable\">ExecReload</span><span class=\"token operator\">=</span>/bin/kill -HUP <span class=\"token variable\">$MAINPID</span>\n<span class=\"token assign-left variable\">KillMode</span><span class=\"token operator\">=</span>process\n<span class=\"token assign-left variable\">Restart</span><span class=\"token operator\">=</span>on-failure\n<span class=\"token assign-left variable\">RestartPreventExitStatus</span><span class=\"token operator\">=</span><span class=\"token number\">255</span>\n<span class=\"token assign-left variable\">Type</span><span class=\"token operator\">=</span>notify\n<span class=\"token assign-left variable\">RuntimeDirectory</span><span class=\"token operator\">=</span>sshd\n<span class=\"token assign-left variable\">RuntimeDirectoryMode</span><span class=\"token operator\">=</span>0755\n\n<span class=\"token punctuation\">[</span>Install<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">WantedBy</span><span class=\"token operator\">=</span>multi-user.target\n<span class=\"token assign-left variable\">Alias</span><span class=\"token operator\">=</span>sshd.service<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>配置文件可以分为三个部分：</p>\n<ol>\n<li>[Unit] : unit本身的说明和依赖的daemon的设置</li>\n<li>[Service] [Socket] [Timer] [Mount] [Path] : 不同的unit类型使用不同的配置，包括启动的脚本、环境配置文件名、重启的方式等</li>\n<li>[Install] : 这个项目就是将此unit安装到某个target里去的意思</li>\n</ol>\n<p>一些规则：</p>\n<ul>\n<li>项目设置可以重复，遵循后面覆盖前面的原则</li>\n<li>设置参数为whether or not的项目，可以使用1\\0\\yes\\true\\……等</li>\n<li>空白行，#，；开头的行均为注释</li>\n</ul>\n<p>对于每个部分下的设置：</p>\n<ol>\n<li><p>unit</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Description</td>\n<td>使用<code>systemctl list-units</code>时展示的说明</td>\n</tr>\n<tr>\n<td>Documentation</td>\n<td>指定说明文件，包括网页（http:&#x2F;&#x2F;…），man page（man:sshd(8)），file（file:&#x2F;etc&#x2F;ssh&#x2F;sshd_config）</td>\n</tr>\n<tr>\n<td>After</td>\n<td>说明此unit在哪个daemon启动之后才启动的意思，仅仅是说明顺序，并没有强制。这里和requires有差异</td>\n</tr>\n<tr>\n<td>Before</td>\n<td>和After相反，其他一样</td>\n</tr>\n<tr>\n<td>Requires</td>\n<td>明确定义此unit在哪个daemon启动后启动</td>\n</tr>\n<tr>\n<td>Wants</td>\n<td>和Requires相反，定义这个unit之后启动哪个服务</td>\n</tr>\n<tr>\n<td>Conflicts</td>\n<td>代表冲突的服务</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>service</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Type</td>\n<td>说明这个daemon的启动方式，包括simple、forking、oneshot、idle</td>\n</tr>\n<tr>\n<td>EnvironmentFile</td>\n<td>指定启动脚本的环境配置文件</td>\n</tr>\n<tr>\n<td>ExecStart</td>\n<td>实际执行daemon的命令或脚本，也可以加上ExecStartPre和ExecStartPost来细化设置，注意：不能使用bash特有的语法，如管道和重定向，若要使用，只能将TYPE设置为oneshot</td>\n</tr>\n<tr>\n<td>ExecStop</td>\n<td>用于systemctl stop</td>\n</tr>\n<tr>\n<td>ExecReload</td>\n<td>用于systemctl reload</td>\n</tr>\n<tr>\n<td>Restart</td>\n<td>当为1时，daemon服务终止后会再次启动此服务</td>\n</tr>\n<tr>\n<td>RemainAfterExit</td>\n<td>当为1时，daemon所属的所有进程终止后，会尝试再次启动，和TYPE&#x3D;oneshot配合使用</td>\n</tr>\n<tr>\n<td>TimeoutSec</td>\n<td>用于启动或关闭失败时的等待时间</td>\n</tr>\n<tr>\n<td>KillMode</td>\n<td>process、control-group、none中的一种</td>\n</tr>\n<tr>\n<td>RestartSec</td>\n<td>被关闭后等待多久重启</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>install</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WantedBy</td>\n<td>这个设置后面接的大部分时*.target unit。意思是这个unit本身依附于哪个target</td>\n</tr>\n<tr>\n<td>Also</td>\n<td>当这个unit被enable时，哪些unit也要enable</td>\n</tr>\n<tr>\n<td>Alias</td>\n<td>运行一个链接的别名，比如将multi-user.target设为default.target，其实就是进行了链接</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<h2 id=\"多重service的重复设置方式\"><a href=\"#多重service的重复设置方式\" class=\"headerlink\" title=\"多重service的重复设置方式\"></a>多重service的重复设置方式</h2><p>以getty为例，众所周知，有6个默认的tty，但只有一个<code>/usr/lib/systemd/system/getty@.service</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kawhicurry@ubuntu:~$ systemctl show getty.target\n<span class=\"token assign-left variable\">Id</span><span class=\"token operator\">=</span>getty.target\n<span class=\"token assign-left variable\">Names</span><span class=\"token operator\">=</span>getty.target\n<span class=\"token assign-left variable\">Wants</span><span class=\"token operator\">=</span>getty-static.service getty@tty1.service\n<span class=\"token assign-left variable\">WantedBy</span><span class=\"token operator\">=</span>multi-user.target\n<span class=\"token assign-left variable\">Conflicts</span><span class=\"token operator\">=</span>shutdown.target\n<span class=\"token assign-left variable\">Before</span><span class=\"token operator\">=</span>shutdown.target multi-user.target\n<span class=\"token assign-left variable\">After</span><span class=\"token operator\">=</span>getty@tty1.service getty@tty2.service getty-static.service<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>只有一个service文件，但这里after后面却有多个。执行完getty.target之后，实际的执行顺序应当是：</p>\n<ol>\n<li>先看&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;,&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;下有没有<a href=\"mailto:&#x67;&#x65;&#116;&#x74;&#121;&#64;&#x74;&#x74;&#x79;&#49;&#x2e;&#x73;&#x65;&#x72;&#118;&#105;&#x63;&#x65;\">&#x67;&#x65;&#116;&#x74;&#121;&#64;&#x74;&#x74;&#x79;&#49;&#x2e;&#x73;&#x65;&#x72;&#118;&#105;&#x63;&#x65;</a>的设置（然后找不到）</li>\n<li>然后找getty@.service，然后将原来@后面的值作为变量传入getty@.service中的<code>%I</code>或<code>%i</code>变量</li>\n</ol>\n<p>这样就可以<del>少写很多文件了</del>实现复用了。</p>\n<p>除此之外，可以在<code>/etc/systemd/logind.conf</code>中将默认的6个终端关掉几个。</p>\n<h1 id=\"针对timer的配置文件\"><a href=\"#针对timer的配置文件\" class=\"headerlink\" title=\"针对timer的配置文件\"></a>针对timer的配置文件</h1><h2 id=\"systemd-timer的优势\"><a href=\"#systemd-timer的优势\" class=\"headerlink\" title=\"systemd.timer的优势\"></a>systemd.timer的优势</h2><ol>\n<li>所有systemd服务产生的信息都会被log，因此比cron在debug上面更清楚和方便</li>\n<li>各项timer的任务可以跟systemd的服务结合</li>\n<li>可以跟control group（cgroup）结合，限制任务的资源利用</li>\n<li>时间可以精确到毫秒</li>\n</ol>\n<p>当然，也有弱点</p>\n<ol>\n<li>比如没有email通知功能</li>\n<li>没有anacron的一定时间内随机取样功能（不知道这是啥玩意）</li>\n</ol>\n<h2 id=\"使用timer-target的前提\"><a href=\"#使用timer-target的前提\" class=\"headerlink\" title=\"使用timer.target的前提\"></a>使用timer.target的前提</h2><ul>\n<li>time.target要启动</li>\n<li>sname.service的服务存在（sname是自己指定的）</li>\n<li>sname.timer的服务存在</li>\n</ul>\n<h2 id=\"Timer部分的参数\"><a href=\"#Timer部分的参数\" class=\"headerlink\" title=\"Timer部分的参数\"></a>Timer部分的参数</h2><p>在<code>/etc/systemd/system</code>下建立<code>*.timer</code>文件，然后在[Timer]块中指定相关信息</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OnActiveSec</td>\n<td>timer.target启动多久之后才执行unit</td>\n</tr>\n<tr>\n<td>OnBootSec</td>\n<td>启动完成多久之后才执行</td>\n</tr>\n<tr>\n<td>OnStartupSec</td>\n<td>systemd第一次启动多久后执行</td>\n</tr>\n<tr>\n<td>OnUnitActiveSec</td>\n<td>这个timer配置文件所管理的那个unit服务在最后一次启动后，隔多久再执行</td>\n</tr>\n<tr>\n<td>OnUnitInactiveSec</td>\n<td>这个timer配置文件所管理的那个unit服务在最后一次停止后，隔多久再执行</td>\n</tr>\n<tr>\n<td>OnCalender</td>\n<td>使用实际的时间（而非循环时间）的方式来启动服务</td>\n</tr>\n<tr>\n<td>Unit</td>\n<td>.service和.timer名称相同就可以了，名称不同才在这里指定</td>\n</tr>\n<tr>\n<td>Persistent</td>\n<td>使用OnCalender时，指定该功能是否要持续进行</td>\n</tr>\n</tbody></table>\n<p>OnCalender的时间</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 基本语法</span>\n<span class=\"token comment\"># week YYYY-MM-DD HH:MM:SS</span>\nThu <span class=\"token number\">2022</span>-02-22 <span class=\"token number\">22</span>:22:22\n\n<span class=\"token comment\"># 指定间隔</span>\n<span class=\"token comment\"># s\\sec\\second</span>\n<span class=\"token comment\"># m\\min\\minutes</span>\n<span class=\"token comment\"># h\\hr\\hour</span>\n<span class=\"token comment\"># d\\day\\days</span>\n<span class=\"token comment\"># w\\week\\weeks</span>\n<span class=\"token comment\"># month\\mouths</span>\n<span class=\"token comment\"># y\\year\\years</span>\n3h\n10s 300m\n100m 5day\n\n<span class=\"token comment\"># 英语口语</span>\nnow\ntoday\ntomorrow\nhourly\ndaily\nweekly\nmonthly\n+3h10m\n<span class=\"token number\">2015</span>-08-16<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注：OnCalender所展示的下一次任务开始时间为UNIX标准时间，而不是当前时区的时间</p>\n<h1 id=\"Linux默认的启动项\"><a href=\"#Linux默认的启动项\" class=\"headerlink\" title=\"Linux默认的启动项\"></a>Linux默认的启动项</h1><p>略了，需要再查</p>\n","site":{"data":{"link":[{"class_name":"收藏","class_desc":"好东西要拿来分享","link_list":[{"name":"Github520","link":"https://gitee.com/doshengl/GitHub520","avatar":"https://gitee.com/doshengl/GitHub520","descr":"爱上github"}]},{"class_name":"友情链接","class_desc":"感谢陪伴！","link_list":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","descr":"来自青柚的前端大佬","link":"https://sun482.github.io/"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","descr":"来自自动化科协的大佬","link":"https://polo-0831.github.io/"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","descr":"来自南邮apollo的大佬","link":"https://nymrli.top"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","descr":"记录2d组的重建过程","link":"http://apollo2d.shuihua.top"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","descr":"来自青柚的运营大佬","link":"https://cfy73.github.io/"},{"avatar":"https://carrynotkarry.com/wp-content/uploads/2022/01/cropped-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220119162746.jpg","name":"竞赛大佬Carry的blog","descr":"总之就是非常大佬","link":"https://carrynotkarry.com"}]}]}},"cover":"https://cdn.jsdelivr.net/gh/kawhicurry/picgo/anime/chaopao3.jpg","excerpt":"","more":"<h1 id=\"daemon与service\"><a href=\"#daemon与service\" class=\"headerlink\" title=\"daemon与service\"></a>daemon与service</h1><h2 id=\"init-d\"><a href=\"#init-d\" class=\"headerlink\" title=\"init.d\"></a>init.d</h2><p>早期的系统服务，就是一大堆脚本，在内核启动时第一个程序就是init，然后用init去运行所有需要的服务。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><table>\n<thead>\n<tr>\n<th>用法</th>\n<th>command</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>启动</td>\n<td>&#x2F;etc&#x2F;init.d&#x2F;daemon start</td>\n</tr>\n<tr>\n<td>关闭</td>\n<td>&#x2F;etc&#x2F;init.d&#x2F;daemon stop</td>\n</tr>\n<tr>\n<td>重启</td>\n<td>&#x2F;etc&#x2F;init.d&#x2F;daemon restart</td>\n</tr>\n<tr>\n<td>查看状态</td>\n<td>&#x2F;etc&#x2F;init.d&#x2F;daemon status</td>\n</tr>\n</tbody></table>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ul>\n<li>stand alone: 服务独立启动，常驻于内存中，提供本机或用户的服务操作，反应速度快</li>\n<li>super daemon: 由xinetd或inetd两个总管程序提供socket对应的管理</li>\n</ul>\n<h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><p>没有任何依赖的保证</p>\n<h3 id=\"运行级别\"><a href=\"#运行级别\" class=\"headerlink\" title=\"运行级别\"></a>运行级别</h3><p>init可以根据用户定义的runlevel来唤醒不同的服务，位于&#x2F;etc&#x2F;rc.d&#x2F;rc[0-6]&#x2F;S[num]daemon，0~6含义如下</p>\n<ol start=\"0\">\n<li>halt system</li>\n<li>单人维护</li>\n<li>multi-user</li>\n<li>same as 2</li>\n<li>same as 2</li>\n<li>gui</li>\n<li>Reboot</li>\n</ol>\n<p>num为启动顺序，用于解决依赖问题。</p>\n<p>daemon文件可以被链接至相应文件夹下。但不需要手动链接，只需使用</p>\n<ul>\n<li>启动：chkconfig daemon on</li>\n<li>不启动：chkconfig deamon off</li>\n</ul>\n<h2 id=\"systemd\"><a href=\"#systemd\" class=\"headerlink\" title=\"systemd\"></a>systemd</h2><h3 id=\"systemd-相比init的优势\"><a href=\"#systemd-相比init的优势\" class=\"headerlink\" title=\"systemd 相比init的优势\"></a>systemd 相比init的优势</h3><ul>\n<li>systemd常驻内存，响应快，并且有systemctl作为专门的交互工具</li>\n<li>可自定义服务的依赖检查</li>\n<li>按照daemon的功能进行分类，先分为unit然后归到type中</li>\n<li>讲多个deamons集合为一个群组</li>\n<li>向下兼容init脚本</li>\n</ul>\n<p>一些没有完全替换的部分</p>\n<ul>\n<li>runlevel并未完全对应</li>\n<li>受systemctl语法限制</li>\n<li>手动启动的服务不受systemd管控</li>\n<li>systemd启动过程中不接受stdin和stdout</li>\n</ul>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;: 每个服务最主要的启动脚本设置，类似&#x2F;etc&#x2F;init.d&#x2F;下的文件</li>\n<li>&#x2F;run&#x2F;systemd&#x2F;system&#x2F;: </li>\n<li>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;:</li>\n</ul>\n<h3 id=\"unit分类\"><a href=\"#unit分类\" class=\"headerlink\" title=\"unit分类\"></a>unit分类</h3><p>使用后缀名</p>\n<table>\n<thead>\n<tr>\n<th>拓展名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.service</td>\n<td>一般的服务类型（service unit）</td>\n</tr>\n<tr>\n<td>.socket</td>\n<td>内部程序数据交换的socket服务（socket unit）</td>\n</tr>\n<tr>\n<td>.target</td>\n<td>执行环境类型（target unit），一群unit的集合，就是执行一堆service和socket</td>\n</tr>\n<tr>\n<td>.mount&#x2F;.automount</td>\n<td>文件系统挂载的相关服务</td>\n</tr>\n<tr>\n<td>.path</td>\n<td>检测特定文件或目录类型</td>\n</tr>\n<tr>\n<td>.timer</td>\n<td>循环执行的服务（timer unit），比aanacrontab更有弹性</td>\n</tr>\n</tbody></table>\n<h1 id=\"systemctl\"><a href=\"#systemctl\" class=\"headerlink\" title=\"systemctl\"></a>systemctl</h1><h2 id=\"管理单一服务\"><a href=\"#管理单一服务\" class=\"headerlink\" title=\"管理单一服务\"></a>管理单一服务</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemct <span class=\"token punctuation\">[</span>command<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>unit<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>command 主要有：</p>\n<ul>\n<li>start</li>\n<li>stop</li>\n<li>restart</li>\n<li>reload</li>\n<li>enable</li>\n<li>disable</li>\n<li>status</li>\n<li>is-active</li>\n<li>is-enable</li>\n</ul>\n<p>status运行状态：</p>\n<ul>\n<li>active(running)</li>\n<li>active(exited)</li>\n<li>active(waiting)</li>\n<li>inactive</li>\n</ul>\n<p>开机的默认状态：</p>\n<ul>\n<li>enabled</li>\n<li>disabled</li>\n<li>static</li>\n<li>mask</li>\n</ul>\n<p>如果只是关闭某个service，若启动某个关联service时可能会重启该服务。如果要停用某个service，正确的做法是将相关的service全部关闭。当然，也可以强制注销该服务，使用<code>systemctl mask </code>来将该service链接至<code>/dev/null</code>，这样相关service试图拉起时，也拉不起来。</p>\n<h2 id=\"查看系统上的服务\"><a href=\"#查看系统上的服务\" class=\"headerlink\" title=\"查看系统上的服务\"></a>查看系统上的服务</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl <span class=\"token punctuation\">[</span>command<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--type<span class=\"token operator\">==</span>TYPE<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--all<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>command:</p>\n<ul>\n<li>list-units：依据unit显示启动的unit，加上–all来列出没启动的</li>\n<li>list-unit-files：依据&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system内的文件，将所有文件列表说明</li>\n</ul>\n<p>type: 上面有，略</p>\n<h2 id=\"管理不同的操作环境（target-unit）\"><a href=\"#管理不同的操作环境（target-unit）\" class=\"headerlink\" title=\"管理不同的操作环境（target unit）\"></a>管理不同的操作环境（target unit）</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看所有target unit</span>\nsystemctl list-units --type<span class=\"token operator\">=</span>target --all<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>一些target</p>\n<ul>\n<li>graphical.target</li>\n<li>multi-user.target</li>\n<li>rescue.target</li>\n<li>emergency.target</li>\n<li>shutdown.target</li>\n<li>getty.target</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl <span class=\"token punctuation\">[</span>command<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>unit.target<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>command:</p>\n<ul>\n<li>get-default</li>\n<li>set-default：改变默认target</li>\n<li>isolate：切换到后面接的target（<strong>重点</strong>：isolate而不是start，而且isolate超好用）</li>\n</ul>\n<p>一些快捷指令</p>\n<ul>\n<li>systemctl poweroff</li>\n<li>reboot</li>\n<li>suspend</li>\n<li>hibernate</li>\n<li>rescue</li>\n<li>emergency</li>\n</ul>\n<h2 id=\"分析各服务的依赖关系\"><a href=\"#分析各服务的依赖关系\" class=\"headerlink\" title=\"分析各服务的依赖关系\"></a>分析各服务的依赖关系</h2><pre class=\"line-numbers language-bash]\" data-language=\"bash]\"><code class=\"language-bash]\">systemctl list-dependencies [unit] [--reverse]\n# --reverse 反向追踪谁在使用这个unit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"systemd的daemon相关目录介绍\"><a href=\"#systemd的daemon相关目录介绍\" class=\"headerlink\" title=\"systemd的daemon相关目录介绍\"></a>systemd的daemon相关目录介绍</h2><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;</td>\n<td>官方提供的软件（默认）安装后默认的启动脚本配置文件等，这里尽量不要改，要改也是改&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;下</td>\n</tr>\n<tr>\n<td>&#x2F;run&#x2F;systemd&#x2F;system&#x2F;</td>\n<td>系统执行过程中产生的服务脚本，这些脚本优先级比上面这个高</td>\n</tr>\n<tr>\n<td>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;</td>\n<td>管理员根据需要建立的服务脚本，类似&#x2F;etc&#x2F;rc.d&#x2F;rc5.d&#x2F;Sxx，实际上是一堆从第一条链接过来的链接文件</td>\n</tr>\n<tr>\n<td>&#x2F;etc&#x2F;sysconfig&#x2F;*</td>\n<td>所有的服务都会将初始化的一些选项设置写入到这个目录</td>\n</tr>\n<tr>\n<td>&#x2F;var&#x2F;lib&#x2F;</td>\n<td>产生数据的服务会将它的数据写入到&#x2F;var&#x2F;lib中</td>\n</tr>\n<tr>\n<td>&#x2F;run&#x2F;</td>\n<td>daemon的缓存，包括lock和pid文件等</td>\n</tr>\n</tbody></table>\n<h1 id=\"service类型的配置文件\"><a href=\"#service类型的配置文件\" class=\"headerlink\" title=\"service类型的配置文件\"></a>service类型的配置文件</h1><h2 id=\"相关目录\"><a href=\"#相关目录\" class=\"headerlink\" title=\"相关目录\"></a>相关目录</h2><ul>\n<li>&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;*.service</li>\n<li>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;*.service.d&#x2F;*.conf</li>\n<li>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;*.service.wants&#x2F;*，下面放链接，意思是启动service之后建议加上的服务</li>\n<li>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;*.service.required&#x2F;*，下面放链接，意思是启动service之前需要事先启动的服务</li>\n</ul>\n<h2 id=\"配置文件的设置项目\"><a href=\"#配置文件的设置项目\" class=\"headerlink\" title=\"配置文件的设置项目\"></a>配置文件的设置项目</h2><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kawhicurry@ubuntu:~$ <span class=\"token function\">cat</span> /etc/systemd/system/sshd.service\n<span class=\"token punctuation\">[</span>Unit<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">Description</span><span class=\"token operator\">=</span>OpenBSD Secure Shell server\n<span class=\"token assign-left variable\">After</span><span class=\"token operator\">=</span>network.target auditd.service\n<span class=\"token assign-left variable\">ConditionPathExists</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>/etc/ssh/sshd_not_to_be_run\n\n<span class=\"token punctuation\">[</span>Service<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">EnvironmentFile</span><span class=\"token operator\">=</span>-/etc/default/ssh\n<span class=\"token assign-left variable\">ExecStartPre</span><span class=\"token operator\">=</span>/usr/sbin/sshd -t\n<span class=\"token assign-left variable\">ExecStart</span><span class=\"token operator\">=</span>/usr/sbin/sshd -D <span class=\"token variable\">$SSHD_OPTS</span>\n<span class=\"token assign-left variable\">ExecReload</span><span class=\"token operator\">=</span>/usr/sbin/sshd -t\n<span class=\"token assign-left variable\">ExecReload</span><span class=\"token operator\">=</span>/bin/kill -HUP <span class=\"token variable\">$MAINPID</span>\n<span class=\"token assign-left variable\">KillMode</span><span class=\"token operator\">=</span>process\n<span class=\"token assign-left variable\">Restart</span><span class=\"token operator\">=</span>on-failure\n<span class=\"token assign-left variable\">RestartPreventExitStatus</span><span class=\"token operator\">=</span><span class=\"token number\">255</span>\n<span class=\"token assign-left variable\">Type</span><span class=\"token operator\">=</span>notify\n<span class=\"token assign-left variable\">RuntimeDirectory</span><span class=\"token operator\">=</span>sshd\n<span class=\"token assign-left variable\">RuntimeDirectoryMode</span><span class=\"token operator\">=</span>0755\n\n<span class=\"token punctuation\">[</span>Install<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">WantedBy</span><span class=\"token operator\">=</span>multi-user.target\n<span class=\"token assign-left variable\">Alias</span><span class=\"token operator\">=</span>sshd.service<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>配置文件可以分为三个部分：</p>\n<ol>\n<li>[Unit] : unit本身的说明和依赖的daemon的设置</li>\n<li>[Service] [Socket] [Timer] [Mount] [Path] : 不同的unit类型使用不同的配置，包括启动的脚本、环境配置文件名、重启的方式等</li>\n<li>[Install] : 这个项目就是将此unit安装到某个target里去的意思</li>\n</ol>\n<p>一些规则：</p>\n<ul>\n<li>项目设置可以重复，遵循后面覆盖前面的原则</li>\n<li>设置参数为whether or not的项目，可以使用1\\0\\yes\\true\\……等</li>\n<li>空白行，#，；开头的行均为注释</li>\n</ul>\n<p>对于每个部分下的设置：</p>\n<ol>\n<li><p>unit</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Description</td>\n<td>使用<code>systemctl list-units</code>时展示的说明</td>\n</tr>\n<tr>\n<td>Documentation</td>\n<td>指定说明文件，包括网页（http:&#x2F;&#x2F;…），man page（man:sshd(8)），file（file:&#x2F;etc&#x2F;ssh&#x2F;sshd_config）</td>\n</tr>\n<tr>\n<td>After</td>\n<td>说明此unit在哪个daemon启动之后才启动的意思，仅仅是说明顺序，并没有强制。这里和requires有差异</td>\n</tr>\n<tr>\n<td>Before</td>\n<td>和After相反，其他一样</td>\n</tr>\n<tr>\n<td>Requires</td>\n<td>明确定义此unit在哪个daemon启动后启动</td>\n</tr>\n<tr>\n<td>Wants</td>\n<td>和Requires相反，定义这个unit之后启动哪个服务</td>\n</tr>\n<tr>\n<td>Conflicts</td>\n<td>代表冲突的服务</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>service</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Type</td>\n<td>说明这个daemon的启动方式，包括simple、forking、oneshot、idle</td>\n</tr>\n<tr>\n<td>EnvironmentFile</td>\n<td>指定启动脚本的环境配置文件</td>\n</tr>\n<tr>\n<td>ExecStart</td>\n<td>实际执行daemon的命令或脚本，也可以加上ExecStartPre和ExecStartPost来细化设置，注意：不能使用bash特有的语法，如管道和重定向，若要使用，只能将TYPE设置为oneshot</td>\n</tr>\n<tr>\n<td>ExecStop</td>\n<td>用于systemctl stop</td>\n</tr>\n<tr>\n<td>ExecReload</td>\n<td>用于systemctl reload</td>\n</tr>\n<tr>\n<td>Restart</td>\n<td>当为1时，daemon服务终止后会再次启动此服务</td>\n</tr>\n<tr>\n<td>RemainAfterExit</td>\n<td>当为1时，daemon所属的所有进程终止后，会尝试再次启动，和TYPE&#x3D;oneshot配合使用</td>\n</tr>\n<tr>\n<td>TimeoutSec</td>\n<td>用于启动或关闭失败时的等待时间</td>\n</tr>\n<tr>\n<td>KillMode</td>\n<td>process、control-group、none中的一种</td>\n</tr>\n<tr>\n<td>RestartSec</td>\n<td>被关闭后等待多久重启</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>install</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WantedBy</td>\n<td>这个设置后面接的大部分时*.target unit。意思是这个unit本身依附于哪个target</td>\n</tr>\n<tr>\n<td>Also</td>\n<td>当这个unit被enable时，哪些unit也要enable</td>\n</tr>\n<tr>\n<td>Alias</td>\n<td>运行一个链接的别名，比如将multi-user.target设为default.target，其实就是进行了链接</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<h2 id=\"多重service的重复设置方式\"><a href=\"#多重service的重复设置方式\" class=\"headerlink\" title=\"多重service的重复设置方式\"></a>多重service的重复设置方式</h2><p>以getty为例，众所周知，有6个默认的tty，但只有一个<code>/usr/lib/systemd/system/getty@.service</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kawhicurry@ubuntu:~$ systemctl show getty.target\n<span class=\"token assign-left variable\">Id</span><span class=\"token operator\">=</span>getty.target\n<span class=\"token assign-left variable\">Names</span><span class=\"token operator\">=</span>getty.target\n<span class=\"token assign-left variable\">Wants</span><span class=\"token operator\">=</span>getty-static.service getty@tty1.service\n<span class=\"token assign-left variable\">WantedBy</span><span class=\"token operator\">=</span>multi-user.target\n<span class=\"token assign-left variable\">Conflicts</span><span class=\"token operator\">=</span>shutdown.target\n<span class=\"token assign-left variable\">Before</span><span class=\"token operator\">=</span>shutdown.target multi-user.target\n<span class=\"token assign-left variable\">After</span><span class=\"token operator\">=</span>getty@tty1.service getty@tty2.service getty-static.service<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>只有一个service文件，但这里after后面却有多个。执行完getty.target之后，实际的执行顺序应当是：</p>\n<ol>\n<li>先看&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;,&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;下有没有<a href=\"mailto:&#x67;&#x65;&#116;&#x74;&#121;&#64;&#x74;&#x74;&#x79;&#49;&#x2e;&#x73;&#x65;&#x72;&#118;&#105;&#x63;&#x65;\">&#x67;&#x65;&#116;&#x74;&#121;&#64;&#x74;&#x74;&#x79;&#49;&#x2e;&#x73;&#x65;&#x72;&#118;&#105;&#x63;&#x65;</a>的设置（然后找不到）</li>\n<li>然后找getty@.service，然后将原来@后面的值作为变量传入getty@.service中的<code>%I</code>或<code>%i</code>变量</li>\n</ol>\n<p>这样就可以<del>少写很多文件了</del>实现复用了。</p>\n<p>除此之外，可以在<code>/etc/systemd/logind.conf</code>中将默认的6个终端关掉几个。</p>\n<h1 id=\"针对timer的配置文件\"><a href=\"#针对timer的配置文件\" class=\"headerlink\" title=\"针对timer的配置文件\"></a>针对timer的配置文件</h1><h2 id=\"systemd-timer的优势\"><a href=\"#systemd-timer的优势\" class=\"headerlink\" title=\"systemd.timer的优势\"></a>systemd.timer的优势</h2><ol>\n<li>所有systemd服务产生的信息都会被log，因此比cron在debug上面更清楚和方便</li>\n<li>各项timer的任务可以跟systemd的服务结合</li>\n<li>可以跟control group（cgroup）结合，限制任务的资源利用</li>\n<li>时间可以精确到毫秒</li>\n</ol>\n<p>当然，也有弱点</p>\n<ol>\n<li>比如没有email通知功能</li>\n<li>没有anacron的一定时间内随机取样功能（不知道这是啥玩意）</li>\n</ol>\n<h2 id=\"使用timer-target的前提\"><a href=\"#使用timer-target的前提\" class=\"headerlink\" title=\"使用timer.target的前提\"></a>使用timer.target的前提</h2><ul>\n<li>time.target要启动</li>\n<li>sname.service的服务存在（sname是自己指定的）</li>\n<li>sname.timer的服务存在</li>\n</ul>\n<h2 id=\"Timer部分的参数\"><a href=\"#Timer部分的参数\" class=\"headerlink\" title=\"Timer部分的参数\"></a>Timer部分的参数</h2><p>在<code>/etc/systemd/system</code>下建立<code>*.timer</code>文件，然后在[Timer]块中指定相关信息</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OnActiveSec</td>\n<td>timer.target启动多久之后才执行unit</td>\n</tr>\n<tr>\n<td>OnBootSec</td>\n<td>启动完成多久之后才执行</td>\n</tr>\n<tr>\n<td>OnStartupSec</td>\n<td>systemd第一次启动多久后执行</td>\n</tr>\n<tr>\n<td>OnUnitActiveSec</td>\n<td>这个timer配置文件所管理的那个unit服务在最后一次启动后，隔多久再执行</td>\n</tr>\n<tr>\n<td>OnUnitInactiveSec</td>\n<td>这个timer配置文件所管理的那个unit服务在最后一次停止后，隔多久再执行</td>\n</tr>\n<tr>\n<td>OnCalender</td>\n<td>使用实际的时间（而非循环时间）的方式来启动服务</td>\n</tr>\n<tr>\n<td>Unit</td>\n<td>.service和.timer名称相同就可以了，名称不同才在这里指定</td>\n</tr>\n<tr>\n<td>Persistent</td>\n<td>使用OnCalender时，指定该功能是否要持续进行</td>\n</tr>\n</tbody></table>\n<p>OnCalender的时间</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 基本语法</span>\n<span class=\"token comment\"># week YYYY-MM-DD HH:MM:SS</span>\nThu <span class=\"token number\">2022</span>-02-22 <span class=\"token number\">22</span>:22:22\n\n<span class=\"token comment\"># 指定间隔</span>\n<span class=\"token comment\"># s\\sec\\second</span>\n<span class=\"token comment\"># m\\min\\minutes</span>\n<span class=\"token comment\"># h\\hr\\hour</span>\n<span class=\"token comment\"># d\\day\\days</span>\n<span class=\"token comment\"># w\\week\\weeks</span>\n<span class=\"token comment\"># month\\mouths</span>\n<span class=\"token comment\"># y\\year\\years</span>\n3h\n10s 300m\n100m 5day\n\n<span class=\"token comment\"># 英语口语</span>\nnow\ntoday\ntomorrow\nhourly\ndaily\nweekly\nmonthly\n+3h10m\n<span class=\"token number\">2015</span>-08-16<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注：OnCalender所展示的下一次任务开始时间为UNIX标准时间，而不是当前时区的时间</p>\n<h1 id=\"Linux默认的启动项\"><a href=\"#Linux默认的启动项\" class=\"headerlink\" title=\"Linux默认的启动项\"></a>Linux默认的启动项</h1><p>略了，需要再查</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckzs3irwu000a8wul70kphd2z","category_id":"ckzs3irwr00068wul69j4fgc9","_id":"ckzs3irwz000g8wulamk34u2x"},{"post_id":"ckzs3irwo00038wul4755den3","category_id":"ckzs3irwr00068wul69j4fgc9","_id":"ckzs3irx1000k8wulflg20w8w"},{"post_id":"ckzs3irwv000b8wuldrgt0udi","category_id":"ckzs3irwr00068wul69j4fgc9","_id":"ckzs3irx2000n8wul2mn4hh90"},{"post_id":"ckzs3irwx000e8wulapmk01it","category_id":"ckzs3irwr00068wul69j4fgc9","_id":"ckzs3irx3000s8wul2phqg42k"},{"post_id":"ckzs3irwq00058wul9c5w0e64","category_id":"ckzs3irwr00068wul69j4fgc9","_id":"ckzs3irx5000v8wul6gi8c3un"},{"post_id":"ckzs3irx0000j8wul2unihe31","category_id":"ckzs3irwr00068wul69j4fgc9","_id":"ckzs3irx6000z8wul5hul99ys"},{"post_id":"ckzs3irwt00098wulg5uuhjun","category_id":"ckzs3irwr00068wul69j4fgc9","_id":"ckzs3irx700128wul336i0i9x"},{"post_id":"ckzs3irx3000r8wul766nbmyg","category_id":"ckzs3irx2000o8wule7mm5136","_id":"ckzs3irx800168wul41k665b0"},{"post_id":"ckzs3irwy000f8wul9m00dr3u","category_id":"ckzs3irx2000o8wule7mm5136","_id":"ckzs3irx900198wula68f5e8q"},{"post_id":"ckzs3irx4000u8wul2krw0g4e","category_id":"ckzs3irx2000o8wule7mm5136","_id":"ckzs3irxa001c8wul3pth71xk"},{"post_id":"ckzs3irx1000m8wul3as7fngj","category_id":"ckzs3irx2000o8wule7mm5136","_id":"ckzs3irxb001f8wuleg6p5i3x"},{"post_id":"ckzs3irx6000y8wul1nrc0m3l","category_id":"ckzs3irx800148wul5pxjf2xa","_id":"ckzs3irxc001h8wulemo3gays"},{"post_id":"ckzs3irx700118wulggz6aijo","category_id":"ckzs3irxa001b8wul8bc213j7","_id":"ckzs3irxe001n8wul8qxy9ite"},{"post_id":"ckzs3irxc001k8wul0kpqfe7s","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"ckzs3irxg001u8wul20hbb1ok"},{"post_id":"ckzs3irx800158wulamxv2sd2","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"ckzs3irxh001z8wulbxpf4bto"},{"post_id":"ckzs3irxd001m8wuleh7580mw","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"ckzs3irxi00218wul23l7ghcj"},{"post_id":"ckzs3irxe001r8wulhrrxbbvi","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"ckzs3irxl00258wul5rwzflfr"},{"post_id":"ckzs3irx900188wulehkrfop8","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"ckzs3irxm00288wula49hf8t6"},{"post_id":"ckzs3irxf001t8wulgfqr12fh","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"ckzs3irxo002d8wuldtk67qbh"},{"post_id":"ckzs3irxh001y8wul36v24x0z","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"ckzs3irxp002g8wulfj8xaidq"},{"post_id":"ckzs3irx9001a8wulg44tfl3k","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"ckzs3irxq002j8wul288v92sd"},{"post_id":"ckzs3irxh00208wul1y4fggws","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"ckzs3irxr002l8wul5ii16cie"},{"post_id":"ckzs3irxj00248wulavp91zsb","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"ckzs3irxs002o8wul6qaube2m"},{"post_id":"ckzs3irxa001e8wul0a63cibb","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"ckzs3irxt002r8wulem21f957"},{"post_id":"ckzs3irxl00278wulaz1rbkoe","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"ckzs3irxu002w8wulb6zh3nuk"},{"post_id":"ckzs3irxo002c8wul2syy1vdb","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"ckzs3irxv002z8wul90l97kaw"},{"post_id":"ckzs3irxb001g8wul5u7v99op","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"ckzs3irxw00338wul4tkxazzw"},{"post_id":"ckzs3irxp002f8wulcwpp3cz8","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"ckzs3irxx00378wul2x46efcp"},{"post_id":"ckzs3irxq002i8wulbh6s7fch","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"ckzs3irxx00398wul97e6btum"},{"post_id":"ckzs3irxq002k8wulabvvg263","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"ckzs3irxz003e8wulbagwg99l"},{"post_id":"ckzs3irxs002q8wul4yknasu7","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"ckzs3irxz003g8wul2zqmhn23"},{"post_id":"ckzs3irxs002n8wul32531cnm","category_id":"ckzs3irxt002t8wulag4e0gu6","_id":"ckzs3iry0003j8wulbu91ejcl"},{"post_id":"ckzs3irxt002v8wul41y8hu4m","category_id":"ckzs3irxw00328wul1ngf14iq","_id":"ckzs3iry0003k8wulcjypexxv"},{"post_id":"ckzs3irxv002y8wul6cxify3k","category_id":"ckzs3irxw00328wul1ngf14iq","_id":"ckzs3iry1003n8wulc9m1d6ew"},{"post_id":"ckzs3irxv00318wul4waz7lw6","category_id":"ckzs3irxw00328wul1ngf14iq","_id":"ckzs3iry2003q8wulb2fih8lj"},{"post_id":"ckzs3irxw00368wul5nya8545","category_id":"ckzs3iry1003l8wulh4bdd0e8","_id":"ckzs3iry2003v8wulhv7fe3nd"},{"post_id":"ckzs3irxx00388wul0qrw03mr","category_id":"ckzs3iry1003l8wulh4bdd0e8","_id":"ckzs3iry3003y8wul91t720cr"},{"post_id":"ckzs3irxy003d8wul5oz7bduu","category_id":"ckzs3iry2003u8wul0m7cbjth","_id":"ckzs3iry300428wulaid993kk"},{"post_id":"ckzs3irxz003f8wul0npcd0w5","category_id":"ckzs3iry2003u8wul0m7cbjth","_id":"ckzs3iry400448wulbfa5d65m"},{"post_id":"ckzs3itx000628wul5eqb01sy","category_id":"ckzs3iry2003u8wul0m7cbjth","_id":"ckzs3itx600648wul4z6f2j1k"},{"post_id":"cl09cqarn0000jsulfngggnp4","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"cl09cqarw0004jsuldosmhjlj"},{"post_id":"cl09cqart0001jsul41vw79db","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"cl09cqarw0006jsul28kc5lbd"},{"post_id":"cl0ao2j8g000000ul14oe1jmm","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"cl0ao2j8k000300ul8n5bdyxq"},{"post_id":"cl0fen7fo00006sul2xtoaalp","category_id":"ckzs3irxc001i8wuldljl3vi5","_id":"cl0fen7fr00036sulhagtdtor"}],"PostTag":[{"post_id":"ckzs3irwo00038wul4755den3","tag_id":"ckzs3irws00078wulh0rbfe7r","_id":"ckzs3irx1000l8wulcrqfag9c"},{"post_id":"ckzs3irwo00038wul4755den3","tag_id":"ckzs3irwv000d8wulbtjnh3y3","_id":"ckzs3irx2000p8wul8ajd4qur"},{"post_id":"ckzs3irx0000j8wul2unihe31","tag_id":"ckzs3irwv000d8wulbtjnh3y3","_id":"ckzs3irx3000t8wulg42c2pnk"},{"post_id":"ckzs3irwq00058wul9c5w0e64","tag_id":"ckzs3irx0000i8wuld6qrh57b","_id":"ckzs3irx700108wulcc9j6aw8"},{"post_id":"ckzs3irwq00058wul9c5w0e64","tag_id":"ckzs3irx2000q8wul5kpw28x9","_id":"ckzs3irx800138wule5x77s3b"},{"post_id":"ckzs3irwt00098wulg5uuhjun","tag_id":"ckzs3irx5000x8wul5fte3tki","_id":"ckzs3irxd001l8wul4j2kaof8"},{"post_id":"ckzs3irwt00098wulg5uuhjun","tag_id":"ckzs3irx800178wulf96hde0w","_id":"ckzs3irxe001o8wul1va69iwb"},{"post_id":"ckzs3irwt00098wulg5uuhjun","tag_id":"ckzs3irxa001d8wul8lom98mm","_id":"ckzs3irxf001s8wul30fx1d02"},{"post_id":"ckzs3irxc001k8wul0kpqfe7s","tag_id":"ckzs3irx5000x8wul5fte3tki","_id":"ckzs3irxg001v8wulcjuv2bh1"},{"post_id":"ckzs3irwu000a8wul70kphd2z","tag_id":"ckzs3irx5000x8wul5fte3tki","_id":"ckzs3irxl00268wul1m90dvyi"},{"post_id":"ckzs3irwu000a8wul70kphd2z","tag_id":"ckzs3irx800178wulf96hde0w","_id":"ckzs3irxm00298wul79or1fnu"},{"post_id":"ckzs3irwu000a8wul70kphd2z","tag_id":"ckzs3irxa001d8wul8lom98mm","_id":"ckzs3irxo002e8wulggt7ct45"},{"post_id":"ckzs3irwv000b8wuldrgt0udi","tag_id":"ckzs3irx5000x8wul5fte3tki","_id":"ckzs3irxs002p8wul7thsfbon"},{"post_id":"ckzs3irwv000b8wuldrgt0udi","tag_id":"ckzs3irx800178wulf96hde0w","_id":"ckzs3irxt002s8wulc4pcguk9"},{"post_id":"ckzs3irwv000b8wuldrgt0udi","tag_id":"ckzs3irxa001d8wul8lom98mm","_id":"ckzs3irxu002x8wul47t57zdd"},{"post_id":"ckzs3irwx000e8wulapmk01it","tag_id":"ckzs3irxr002m8wul900he0ui","_id":"ckzs3irxv00308wul81ae5fbi"},{"post_id":"ckzs3irwy000f8wul9m00dr3u","tag_id":"ckzs3irxt002u8wul0m4xhuif","_id":"ckzs3irxw00358wulfffr8lmq"},{"post_id":"ckzs3irx1000m8wul3as7fngj","tag_id":"ckzs3irxt002u8wul0m4xhuif","_id":"ckzs3irxy003c8wulb0wb49vw"},{"post_id":"ckzs3irx3000r8wul766nbmyg","tag_id":"ckzs3irxt002u8wul0m4xhuif","_id":"ckzs3iry1003o8wul567pcmsp"},{"post_id":"ckzs3irx3000r8wul766nbmyg","tag_id":"ckzs3irxz003h8wuledqp83h1","_id":"ckzs3iry1003p8wulg8809an2"},{"post_id":"ckzs3irx4000u8wul2krw0g4e","tag_id":"ckzs3iry1003m8wulcn0f0gyo","_id":"ckzs3iry2003t8wul1rzl840s"},{"post_id":"ckzs3irx6000y8wul1nrc0m3l","tag_id":"ckzs3iry2003s8wul7bft1hfy","_id":"ckzs3iry3003x8wul34k9au58"},{"post_id":"ckzs3irx700118wulggz6aijo","tag_id":"ckzs3iry3003w8wul8cas5j9u","_id":"ckzs3iry300418wula0y9dgqc"},{"post_id":"ckzs3irx800158wulamxv2sd2","tag_id":"ckzs3iry300408wul3e1vgp2x","_id":"ckzs3iry400468wulc450081m"},{"post_id":"ckzs3irx800158wulamxv2sd2","tag_id":"ckzs3iry400438wul3glwag1y","_id":"ckzs3iry400478wul7nbt46lk"},{"post_id":"ckzs3irx900188wulehkrfop8","tag_id":"ckzs3iry400458wuldhps9859","_id":"ckzs3iry5004a8wuldd893tsi"},{"post_id":"ckzs3irx900188wulehkrfop8","tag_id":"ckzs3iry400438wul3glwag1y","_id":"ckzs3iry5004b8wulaxgyflvi"},{"post_id":"ckzs3irx9001a8wulg44tfl3k","tag_id":"ckzs3iry400498wul19xmck2p","_id":"ckzs3iry5004d8wulaqpr47mg"},{"post_id":"ckzs3irxa001e8wul0a63cibb","tag_id":"ckzs3iry5004c8wulh1u56z1d","_id":"ckzs3iry5004f8wul5wgi3v36"},{"post_id":"ckzs3irxb001g8wul5u7v99op","tag_id":"ckzs3iry5004e8wulc4mt4oqc","_id":"ckzs3iry5004h8wul221o9c0e"},{"post_id":"ckzs3irxd001m8wuleh7580mw","tag_id":"ckzs3iry5004g8wul5vxxa5tq","_id":"ckzs3iry6004k8wulgou3b7nu"},{"post_id":"ckzs3irxd001m8wuleh7580mw","tag_id":"ckzs3iry6004i8wul64bu96if","_id":"ckzs3iry6004l8wule2az6oo7"},{"post_id":"ckzs3irxe001r8wulhrrxbbvi","tag_id":"ckzs3iry6004j8wul0pn7bscp","_id":"ckzs3iry6004n8wulb1nygyk5"},{"post_id":"ckzs3irxf001t8wulgfqr12fh","tag_id":"ckzs3iry6004m8wul3dp0dwlz","_id":"ckzs3iry7004p8wul7ajb2c40"},{"post_id":"ckzs3irxf001t8wulgfqr12fh","tag_id":"ckzs3irx5000x8wul5fte3tki","_id":"ckzs3iry7004q8wul7d605r5s"},{"post_id":"ckzs3irxh001y8wul36v24x0z","tag_id":"ckzs3iry6004m8wul3dp0dwlz","_id":"ckzs3iry8004s8wulhb9qcday"},{"post_id":"ckzs3irxh001y8wul36v24x0z","tag_id":"ckzs3irx5000x8wul5fte3tki","_id":"ckzs3iry8004t8wul4odw1l42"},{"post_id":"ckzs3irxh00208wul1y4fggws","tag_id":"ckzs3iry6004m8wul3dp0dwlz","_id":"ckzs3iry8004v8wul25dp5yss"},{"post_id":"ckzs3irxh00208wul1y4fggws","tag_id":"ckzs3irx5000x8wul5fte3tki","_id":"ckzs3iry8004w8wulc31i4rp7"},{"post_id":"ckzs3irxj00248wulavp91zsb","tag_id":"ckzs3iry6004m8wul3dp0dwlz","_id":"ckzs3iry8004y8wule6feaneg"},{"post_id":"ckzs3irxj00248wulavp91zsb","tag_id":"ckzs3irx5000x8wul5fte3tki","_id":"ckzs3iry9004z8wul0jydhzah"},{"post_id":"ckzs3irxl00278wulaz1rbkoe","tag_id":"ckzs3iry6004m8wul3dp0dwlz","_id":"ckzs3iry900518wul2a4q5c5w"},{"post_id":"ckzs3irxl00278wulaz1rbkoe","tag_id":"ckzs3irx5000x8wul5fte3tki","_id":"ckzs3iry900528wulaqrwcp3l"},{"post_id":"ckzs3irxo002c8wul2syy1vdb","tag_id":"ckzs3iry6004m8wul3dp0dwlz","_id":"ckzs3irya00548wul41aj0ps9"},{"post_id":"ckzs3irxo002c8wul2syy1vdb","tag_id":"ckzs3irx5000x8wul5fte3tki","_id":"ckzs3irya00558wulejo2cimk"},{"post_id":"ckzs3irxp002f8wulcwpp3cz8","tag_id":"ckzs3iry6004m8wul3dp0dwlz","_id":"ckzs3irya00578wule3rug6x5"},{"post_id":"ckzs3irxp002f8wulcwpp3cz8","tag_id":"ckzs3irx5000x8wul5fte3tki","_id":"ckzs3irya00588wulamj4b7wz"},{"post_id":"ckzs3irxq002i8wulbh6s7fch","tag_id":"ckzs3iry6004m8wul3dp0dwlz","_id":"ckzs3iryb005a8wule2r45kvo"},{"post_id":"ckzs3irxq002i8wulbh6s7fch","tag_id":"ckzs3irx5000x8wul5fte3tki","_id":"ckzs3iryb005b8wul1b42629t"},{"post_id":"ckzs3irxq002k8wulabvvg263","tag_id":"ckzs3iry6004m8wul3dp0dwlz","_id":"ckzs3iryb005d8wul7i5b1mkj"},{"post_id":"ckzs3irxq002k8wulabvvg263","tag_id":"ckzs3irx5000x8wul5fte3tki","_id":"ckzs3iryb005e8wul0mb89rc8"},{"post_id":"ckzs3irxs002q8wul4yknasu7","tag_id":"ckzs3iry6004m8wul3dp0dwlz","_id":"ckzs3iryc005g8wule14195ud"},{"post_id":"ckzs3irxs002q8wul4yknasu7","tag_id":"ckzs3irx5000x8wul5fte3tki","_id":"ckzs3iryc005h8wul0e4y15vd"},{"post_id":"ckzs3irxt002v8wul41y8hu4m","tag_id":"ckzs3iryb005f8wul2lanb28x","_id":"ckzs3iryc005j8wul0tzc05dt"},{"post_id":"ckzs3irxv002y8wul6cxify3k","tag_id":"ckzs3iryc005i8wul8w9hdyda","_id":"ckzs3iryc005l8wul9wbu7c7y"},{"post_id":"ckzs3irxv00318wul4waz7lw6","tag_id":"ckzs3iryc005k8wul0nlx9hny","_id":"ckzs3irye005q8wul85jxc03v"},{"post_id":"ckzs3irxv00318wul4waz7lw6","tag_id":"ckzs3iryb005f8wul2lanb28x","_id":"ckzs3irye005r8wulglcra7ee"},{"post_id":"ckzs3irxv00318wul4waz7lw6","tag_id":"ckzs3iryd005n8wul28mng7q0","_id":"ckzs3irye005t8wulbi11bztr"},{"post_id":"ckzs3irxv00318wul4waz7lw6","tag_id":"ckzs3iryd005o8wul30q34z8w","_id":"ckzs3irye005u8wul4aucbx95"},{"post_id":"ckzs3irxw00368wul5nya8545","tag_id":"ckzs3iryd005p8wul3rro7o9s","_id":"ckzs3irye005w8wulfk1r7j1d"},{"post_id":"ckzs3irxx00388wul0qrw03mr","tag_id":"ckzs3iryd005p8wul3rro7o9s","_id":"ckzs3iryf005x8wul4guuhb8z"},{"post_id":"ckzs3irxy003d8wul5oz7bduu","tag_id":"ckzs3irwv000d8wulbtjnh3y3","_id":"ckzs3iryf005z8wulhj702xxz"},{"post_id":"ckzs3irxy003d8wul5oz7bduu","tag_id":"ckzs3irye005v8wul5rvz9u03","_id":"ckzs3iryf00608wulf73c1za6"},{"post_id":"ckzs3irxz003f8wul0npcd0w5","tag_id":"ckzs3iryf005y8wul6l8i8hfd","_id":"ckzs3iryf00618wul6vi8a0za"},{"post_id":"ckzs3itx000628wul5eqb01sy","tag_id":"ckzs3iryb005f8wul2lanb28x","_id":"ckzs3itx500638wul5q757jyp"},{"post_id":"cl09cqarn0000jsulfngggnp4","tag_id":"ckzs3iry6004m8wul3dp0dwlz","_id":"cl09cqarv0002jsulcxwydajc"},{"post_id":"cl09cqarn0000jsulfngggnp4","tag_id":"ckzs3irx5000x8wul5fte3tki","_id":"cl09cqarw0003jsul7hy77vzi"},{"post_id":"cl09cqart0001jsul41vw79db","tag_id":"ckzs3iry6004m8wul3dp0dwlz","_id":"cl09cqarw0005jsulg8a9a1s0"},{"post_id":"cl09cqart0001jsul41vw79db","tag_id":"ckzs3irx5000x8wul5fte3tki","_id":"cl09cqarw0007jsul2q1tf9cz"},{"post_id":"cl0ao2j8g000000ul14oe1jmm","tag_id":"ckzs3iry6004m8wul3dp0dwlz","_id":"cl0ao2j8i000100uldmyl2ia3"},{"post_id":"cl0ao2j8g000000ul14oe1jmm","tag_id":"ckzs3irx5000x8wul5fte3tki","_id":"cl0ao2j8k000200ulhzvm39a6"},{"post_id":"cl0fen7fo00006sul2xtoaalp","tag_id":"ckzs3iry6004m8wul3dp0dwlz","_id":"cl0fen7fq00016sul97ybclt6"},{"post_id":"cl0fen7fo00006sul2xtoaalp","tag_id":"ckzs3irx5000x8wul5fte3tki","_id":"cl0fen7fr00026sul5k5wdsld"}],"Tag":[{"name":"gitbook","_id":"ckzs3irws00078wulh0rbfe7r"},{"name":"apollo","_id":"ckzs3irwv000d8wulbtjnh3y3"},{"name":"tag1","_id":"ckzs3irx0000i8wuld6qrh57b"},{"name":"tag2","_id":"ckzs3irx2000q8wul5kpw28x9"},{"name":"linux","_id":"ckzs3irx5000x8wul5fte3tki"},{"name":"ros","_id":"ckzs3irx800178wulf96hde0w"},{"name":"专栏：ros学习笔记","_id":"ckzs3irxa001d8wul8lom98mm"},{"name":"auto","_id":"ckzs3irxr002m8wul900he0ui"},{"name":"daily","_id":"ckzs3irxt002u8wul0m4xhuif"},{"name":"summary","_id":"ckzs3irxz003h8wuledqp83h1"},{"name":"qingyou","_id":"ckzs3iry1003m8wulcn0f0gyo"},{"name":"hexo","_id":"ckzs3iry2003s8wul7bft1hfy"},{"name":"mongodb","_id":"ckzs3iry3003w8wul8cas5j9u"},{"name":"专栏：k8s权威指南学习笔记","_id":"ckzs3iry300408wul3e1vgp2x"},{"name":"k8s","_id":"ckzs3iry400438wul3glwag1y"},{"name":"k8s权威指南学习笔记","_id":"ckzs3iry400458wuldhps9859"},{"name":"rsync","_id":"ckzs3iry400498wul19xmck2p"},{"name":"git","_id":"ckzs3iry5004c8wulh1u56z1d"},{"name":"cloud","_id":"ckzs3iry5004e8wulc4mt4oqc"},{"name":"docker","_id":"ckzs3iry5004g8wul5vxxa5tq"},{"name":"mirror","_id":"ckzs3iry6004i8wul64bu96if"},{"name":"ssh","_id":"ckzs3iry6004j8wul0pn7bscp"},{"name":"专栏：重学linux","_id":"ckzs3iry6004m8wul3dp0dwlz"},{"name":"cpp","_id":"ckzs3iryb005f8wul2lanb28x"},{"name":"C","_id":"ckzs3iryc005i8wul8w9hdyda"},{"name":"c","_id":"ckzs3iryc005k8wul0nlx9hny"},{"name":"cmake","_id":"ckzs3iryd005n8wul28mng7q0"},{"name":"makefile","_id":"ckzs3iryd005o8wul30q34z8w"},{"name":"test","_id":"ckzs3iryd005p8wul3rro7o9s"},{"name":"robucup","_id":"ckzs3irye005v8wul5rvz9u03"},{"name":"rss","_id":"ckzs3iryf005y8wul6l8i8hfd"}]}}