{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"35fa7012b8245505ac7f9f9685ad7a2a9e561404","modified":1639911470284},{"_id":"source/_posts/0xCalculator.md","hash":"d7b4809be0a18528b3074166ca91c466cca73c0f","modified":1638519252206},{"_id":"source/_posts/Daily-10-27.md","hash":"75cb01384c62a4758f32c009d4b53d45439006ef","modified":1635335425587},{"_id":"source/_posts/Magic-Macro.md","hash":"8e5507170c3d9d429faa0ba328332931e764e4b0","modified":1636290868751},{"_id":"source/_posts/Qingyou-1.md","hash":"ac0e451439bf336b632bfbb970dfa6f7d170bc9f","modified":1635311580307},{"_id":"source/_posts/New-Start.md","hash":"ab9f6ae435bee0a8afaa6277d72154ade48d1d5c","modified":1635311491990},{"_id":"source/_posts/UAV.md","hash":"63575de9d79b57c2d886de15b87b7e85d9887fc4","modified":1639911434443},{"_id":"source/_posts/formation-md.md","hash":"0c8c9596cec22aa4fe2659f5c6c340fb19c7b61a","modified":1639384049318},{"_id":"source/_posts/hello-world.md","hash":"35d90c7899006361c0ef17642a2d69daa06fc7b6","modified":1635336855419},{"_id":"source/_posts/log-a-rsync-mistake.md","hash":"647285efb5672552edf61cbb7a3e24a66b181e61","modified":1638519901651},{"_id":"source/_posts/log-a-git-error.md","hash":"34dd9bd705c9139997ca37ffbf2aeef094a11d93","modified":1636546305333},{"_id":"source/_posts/net-server-0.md","hash":"68f04b323ff2f60e0d078bbe5df5bd802784edf5","modified":1636855016035},{"_id":"source/_posts/oop-for-apollo.md","hash":"f6b6c9c866667fe65d157c9427186ea9dfe4a0ff","modified":1639907381021},{"_id":"source/_posts/可以用来阅读源码的工具.md","hash":"7864429429d09a564df6038fe6a08631af57b5cb","modified":1639556361741},{"_id":"source/_data/covers.json","hash":"6b45a1a5be867d972a8661bbb3005c94a2a40919","modified":1639913788514},{"_id":"source/_data/friends.json","hash":"fcdf2c25ae758a8c115c7595a596f61fa9f13c2d","modified":1639903495365},{"_id":"source/_data/recommends.json","hash":"7d40834eda49c0c33ed02b8f64ea6e92171033ea","modified":1639978016896},{"_id":"source/_scraft/LearnMermaid.md","hash":"5edbdffb5a12659edef6f7a7b32bf3366ae38d8c","modified":1638096758442},{"_id":"source/about/index.md","hash":"427bfdd8211cb0a96ecd6bd3311a20392a47085a","modified":1639903409812},{"_id":"source/_scraft/SkillTree.md","hash":"86719f8212f3defc5cc1824b7b4c70b1d5dd2b8a","modified":1638262330681},{"_id":"source/_scraft/qyauto.md","hash":"3cf9969d118568c53c4143536829259599c241b3","modified":1638519358352},{"_id":"source/categories/index.md","hash":"346938311c9ea108ec8d04c447fd930cc9c8ff68","modified":1639903351719},{"_id":"source/contact/index.md","hash":"6d0f116d16f34683ac016ceb4abc17989511e20b","modified":1639903429529},{"_id":"source/tags/index.md","hash":"5772e4a26ecbde1fadefe2f899163522be8318bc","modified":1639903371631},{"_id":"source/friends/index.md","hash":"cae3d09447c89f476f2f1fec319cba3f3c19a2f1","modified":1639913772867},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"484a703733b839bd98e016ddb015f028c2593fef","modified":1639902654727},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1639902654728},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1639902654726},{"_id":"themes/hexo-theme-matery/README.md","hash":"d8ddcc0b3c6e30255faba941bb7dbcbb7213d650","modified":1639902654729},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"840d5a3275f37125a67cf7e82bbc6556f3bc5cbd","modified":1639902654730},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"539092cafa2d7f94c588f6bfa64464bcc7c851e3","modified":1639921049002},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"f5c69f3e107474da19630e136abed5d87609e59f","modified":1639902654733},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"c6de0de68bdc75a8a905787a0526b70ee9821da8","modified":1639902654734},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1639902654798},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1639902654736},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"4d2bb286d9903f770344e11898bd3f13444760bf","modified":1639902654737},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"626d28dbc7fa2e0fb6601e324dcad08993bcf002","modified":1639902654777},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"6deb819e47fe11edd2fc87a6296cae725a0275f9","modified":1639902654779},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1639902654781},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"a777733e03d954ac265a3d0523245bd191732130","modified":1639902654783},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1639902654782},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1639902654778},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"1291eed5cc91a27607beffc8118c19493512f28f","modified":1639902654784},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1639902654785},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"eb3875f997767bc6c500a158535cfadcbca96f8f","modified":1639902654787},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1639902654786},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"444ecca1cb35bad81b063f1d7cb9fd80ead195dd","modified":1639902654789},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"7303bdf204599dad469ce3908c5d09faf7c6a36a","modified":1639902654788},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1639902654790},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1639902654789},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"328a49b26ce663d9824c53aced118db4d55f2ac7","modified":1639902654793},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1639902654793},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"f59b2f1351d7977b676a4d51634b7dad648d3e99","modified":1639902654792},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"52b3b36a0ed3db3bdf8bf1f999e37731078c485b","modified":1639902654796},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"103eabd5c9ac5c63647aef4dd0a366991a5ab987","modified":1639916873939},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1639902654794},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1639902654797},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"8db5b764f940614a209a332a4a11a53e5ea52fbc","modified":1639902654802},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1639902654801},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"ddfef10e80a09b8efb48c52ede773e71d5890c78","modified":1639902654803},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"72fac8fd3671f3525a574423985ee522958989d3","modified":1639902654803},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1639902654959},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1639902654978},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1639902655021},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1639902655011},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1639902654738},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1639902654740},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"0415b240b90083576274e83e28044aa9c0dd0f67","modified":1639902654739},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1639902654741},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1639902654743},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1639902654744},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"2febeb9b824a9f5c6aa81e5c3864cb13df4965f2","modified":1639902654742},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1639902654745},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1639902654746},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"efbc689d2b466ba4666b0cea2084a263d7f271d1","modified":1639902654747},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1639902654749},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1639902654748},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"3b482a6c737702cf32e2fe061d39f0652d8e877e","modified":1639902654750},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1639902654748},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1639902654750},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"8cf6c23c2685d6261f688a32fbb5e64c1f4e7ccb","modified":1639902654752},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1639902654751},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"f3d6b20ac07f1b096c5cf0b091523867fd4fd0b5","modified":1639902654754},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"2d1aff1cb54f47478564b48d046371ed73048562","modified":1639902654755},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"d0c1ebccbf0869678233aa46d2a61c6112926b2f","modified":1639902654754},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1639902654756},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1639902654757},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"905f05088a1933f7f4122fe7c0bac5ff8469bbff","modified":1639902654758},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1639902654753},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"4c552a47ed5abda4f3f28fc55899e6008007a996","modified":1639902654757},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1639902654759},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"1fb43f421de58aa24458f7d4a4cda44b8a3d62cc","modified":1639902654760},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"90c2ab31492f8226454537d6b987e9399119047d","modified":1639902654762},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1639902654764},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1639902654763},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1639902654761},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"d1d7c4da3d56f42541eea965a6ebf1f8e2fff0f4","modified":1639902654765},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"4218ed406c43ed781fe78ad8bf1834fa4b76b049","modified":1639902654763},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"5eea5e6da0cbfd3d93ae7e9193fa59997b467426","modified":1639902654766},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1639902654769},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1639902654767},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1639902654767},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"d84f2f464209f02f49917423ac5accf1c548f38c","modified":1639902654770},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1639902654771},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1639902654768},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1639902654772},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1639902654773},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1639902654771},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1639902654774},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"5f64edd00d0a7c3b5e90d5ff99c9ebba61482d75","modified":1639902654774},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1639902654775},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1639902654776},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"c2f785f4986d6ed1da0d1f2cd339f33754625004","modified":1639902654777},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1639902654807},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1639902654806},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1639902654808},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1639902654805},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1639902654809},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","hash":"ff60e62a9486505283582e8ad9226b35ba93d5c5","modified":1639902654810},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1639902654848},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1639902654850},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1639902654849},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1639902654850},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1639902654856},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1639902654852},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1639902654854},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1639902654853},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1639902654853},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1639902654857},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"4c0d5510ea487b0fe63e96464ab0b381565cc273","modified":1639902654869},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1639902654875},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1639902654879},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1639902654879},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1639902654868},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1639902654878},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1639902654882},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1639902654884},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"137e1c0f71e472fb7004c1832972287fb2dfc343","modified":1639902654895},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1639902654919},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1639902654928},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1639902654930},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1639902654930},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1639902654932},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1639902654933},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1639902654934},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"1ddc9448fbba8915f9452b4f0a970f33635e46a7","modified":1639902654937},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1639902654934},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"07b1e7932403b38aebb1c024ef3c3f5bb0c6aa2e","modified":1639902654936},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1639902654927},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"84dae6b6b5528ee872be8d8fce66c0e1f1cd28a7","modified":1639902654938},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1639902654939},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1639902654955},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1639902654949},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1639902654950},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1639902654975},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1639902654977},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1639902654976},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1639902654977},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1639902654985},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1639902654991},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1639902654988},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1639902654992},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1639902654996},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1639902655000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1639902655001},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1639902655002},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1639902655003},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1639902655006},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1639902655008},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1639902655010},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1639902655023},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1639902655022},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","hash":"8bd508bb2f120487671bce49267f7ac8a2eff154","modified":1639902654814},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"c34acd6818df6db6be41a2e331886765d601f2eb","modified":1639902654831},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"670fb01e4930ae46fe8d6d2b75ead288f54e8e61","modified":1639902654827},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"3ad4f4e4b1fb3edee3d4ba25e6cdfed2f0b88a54","modified":1639902654832},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"13517529affa39e2585c591acae6dc336b6aa917","modified":1639902654833},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1639902654885},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"94c83160bddccf08bd7424de40d738716f1eeb3a","modified":1639902654886},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1639902654887},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1639902654888},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1639902654890},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"c55278b00976c96e1df949ca5afee79b8ab385b2","modified":1639902654894},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1639902654891},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1639902654891},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1639902654892},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1639902654941},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1639902654947},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1639902654948},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1639902654942},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1639902654943},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1639902654944},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1639902654945},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1639902654876},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1639902654867},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"4cd5ddc413b3024d7b56331c0d0d0b2bd933f27f","modified":1639902654881},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d6c03e8c3e547b5f48878081d10559b80f626948","modified":1639902654956},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1639902654961},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1639902654965},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1639902654967},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1639902654982},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1639902654983},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1639902654987},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1639902654986},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1639902654990},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1639902654994},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1639902654993},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1639902654995},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1639902654998},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1639902655005},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1639902655007},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1639902655011},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"af83425d4a008e11110634e9aed99e8f91424a99","modified":1639902654812},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"1e1f02bfa89e179fe2dd1383273b8812aa873418","modified":1639902654824},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"0613c7ebba55ee47ef302c0f7766324692f899a7","modified":1639902654825},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"0ccb2c814a7e4ca12c4778821633809cb0361eaa","modified":1639902654847},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"a22acd7697f36e7d4cc31a853c70e776eac54bb1","modified":1639902654845},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1639902654980},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"104613de917a8576ff26aaa36d1c0c7bb4730f4e","modified":1639902654860},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1639902654897},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1639902654898},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"9cb4babc20eb8fb5a86c4b0cc894fdb0f3cd9534","modified":1639902654958},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1639902654963},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1639902654972},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1639902654974},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1639902655017},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"d1ffd6340cdbf72890ccb67f32015eafc5df51a7","modified":1639902654816},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"8ab907083fecaaa2a9ec93b27f884ad74573705c","modified":1639902654823},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"229deca2465fa9efc8c03d0ebeb9a01c1559822e","modified":1639902654830},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1639902654800},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"ea845c59bee4a5c6db774b8d8060f5641b789ae9","modified":1639902654836},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"eb8914f6b1797b45ee0883e6089d92695d9f9441","modified":1639902654844},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1639902654970},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1639902655020},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"d1ec95821873a81eddf4e5698698b39d54d2a8cc","modified":1639902654953},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1639902655015},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1639902654865},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"b7fd3035e83c23c720c9f5957af31d7e288fb4eb","modified":1639902654821},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"1df59d7e5481ac2917c7043b28883393675dcaf9","modified":1639902654874},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"023bb481b65dd8cdeb8c424ca900f3866292bfb0","modified":1639902654842},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","hash":"70ff25d5bb1e7f3339a55b691d69402ba4831fba","modified":1639902654925},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","hash":"3889e37cafaaace5e745ccd3e10c9255e32cae3a","modified":1639902654918},{"_id":"public/search.xml","hash":"05687b5b24631ba6df21a126f98468fb87ab5365","modified":1640236344666},{"_id":"public/404/index.html","hash":"b54a0814677f70fc79aed87f23d0524db7fb534b","modified":1640236344666},{"_id":"public/categories/index.html","hash":"4f1790277dec5f32437d84b9f4d69fed769edb8f","modified":1640236344666},{"_id":"public/tags/index.html","hash":"4fb352ce4563b3dab1340ad9f1b6433878f35278","modified":1640236344666},{"_id":"public/contact/index.html","hash":"234958ea73f67f9ec7a4160424f1ac0dec1d0f8a","modified":1640236344666},{"_id":"public/friends/index.html","hash":"3827ef2fa5b4183d82af84c74c8186c092f2e105","modified":1640236344666},{"_id":"public/about/index.html","hash":"925caff34c3884d074960526acfc31f3fd256b84","modified":1640236344666},{"_id":"public/tools/ke-yi-yong-lai-yue-du-yuan-ma-de-gong-ju/index.html","hash":"6c760e9cfa8e1e6e070c80a0be50ce587abe930a","modified":1640236344666},{"_id":"public/robocup/formation-md/index.html","hash":"c2f60185d873a735f2417ced824a0f0dd0538e6a","modified":1640236344666},{"_id":"public/linux/log-a-rsync-mistake/index.html","hash":"bdb7f64fa927bcff490cfb6b933a4f2f9032da2f","modified":1640236344666},{"_id":"public/cpp/0xcalculator/index.html","hash":"ff8e009adba73a62c17c76b709a060c130958108","modified":1640236344666},{"_id":"public/uncategorized/oop-for-apollo/index.html","hash":"6c4245c2cdb442ce966b5970a9c3a89473076218","modified":1640236344666},{"_id":"public/auto/uav/index.html","hash":"6808c03b0c9610228f97f5e0cac89a426316ef49","modified":1640236344666},{"_id":"public/operation/net-server-0/index.html","hash":"9215b3f6b2cc7f56b541cea34b4f0650cebb7f46","modified":1640236344666},{"_id":"public/tool/log-a-git-error/index.html","hash":"8849b4cb58ffccd8ca87053aedff222c27272a69","modified":1640236344666},{"_id":"public/language/magic-macro/index.html","hash":"b807af22e0c121dc36e2dff3c43cc81f761a23b4","modified":1640236344666},{"_id":"public/uncategorized/daily-10-27/index.html","hash":"ccb61ea0fba77fdd50844a66d8cf38f20988b0c6","modified":1640236344666},{"_id":"public/life/qingyou-1/index.html","hash":"2499adee1902ab81d66b966509eabc627510bd24","modified":1640236344666},{"_id":"public/uncategorized/new-start/index.html","hash":"2b97203357e4fe07d6ec63f1e1815b26a2177955","modified":1640236344666},{"_id":"public/uncategorized/hello-world/index.html","hash":"4d1fdf907b933e02718e834f77d4752462c4e695","modified":1640236344666},{"_id":"public/archives/page/2/index.html","hash":"267f88ee9ff1918538d7708f71c2f44f668ee0fb","modified":1640236344666},{"_id":"public/archives/index.html","hash":"ca788f938a00e20793ca311b5ad28cd9408466e3","modified":1640236344666},{"_id":"public/archives/2021/index.html","hash":"96aa7dac78dcb1cc93b16afc8ad3d6d4bd478d71","modified":1640236344666},{"_id":"public/archives/2021/page/2/index.html","hash":"3004158579f2befb074693a64316f4a8382998c1","modified":1640236344666},{"_id":"public/archives/2021/10/index.html","hash":"c5451e1c6b739d2212baa059fc27f95be34a4d2d","modified":1640236344666},{"_id":"public/archives/2021/11/index.html","hash":"d543365e5ab36f01210a7c98440dd830ec9906c1","modified":1640236344666},{"_id":"public/archives/2021/12/index.html","hash":"9a10bf2ca475a80cedf27d78baa92215ad7d74d2","modified":1640236344666},{"_id":"public/categories/Language/index.html","hash":"aa27da6fefc44d56b786d0439a8353dff5b4e7e5","modified":1640236344666},{"_id":"public/categories/life/index.html","hash":"da3356afb925dcc3da3a281b8cc5593bbb3bc940","modified":1640236344666},{"_id":"public/categories/auto/index.html","hash":"684ca3a19533ee2366c0568bf9df36528733b995","modified":1640236344666},{"_id":"public/categories/robocup/index.html","hash":"4f62f6364fb7e7745d59e0b627467095a2b0dbd3","modified":1640236344666},{"_id":"public/categories/tool/index.html","hash":"ffdd4cd2565b17c1e6b9857011fcfd9a66025d40","modified":1640236344666},{"_id":"public/categories/linux/index.html","hash":"34aa84d4e343bb0ca91d947153365e1a6d40b378","modified":1640236344666},{"_id":"public/categories/uncategorized/index.html","hash":"32ba963a723c879e299a75d082682a689fcdab63","modified":1640236344666},{"_id":"public/categories/tools/index.html","hash":"c09082dd35fac215f29f453891740d11ad3b954f","modified":1640236344666},{"_id":"public/categories/operation/index.html","hash":"199dc6eabec5d1b9dced62f2e008d8836f1ec2d1","modified":1640236344666},{"_id":"public/index.html","hash":"12f799f177053d09df2c614a2c2428a9a4d81961","modified":1640236344666},{"_id":"public/categories/cpp/index.html","hash":"2f057998683bcc4c6f581571a9cfbdca52bb687c","modified":1640236344666},{"_id":"public/page/2/index.html","hash":"a0da7cb8688ab291d64598d7f63b8c344291e155","modified":1640236344666},{"_id":"public/tags/C/index.html","hash":"c65c1c4a00e9a27124ba94861b22321e0fb4f668","modified":1640236344666},{"_id":"public/tags/Daily/index.html","hash":"d29a86517447018d2fdc63a4705e2b81e59db895","modified":1640236344666},{"_id":"public/tags/auto/index.html","hash":"ec64732eb902ae26033e54042aa496be599a1e5c","modified":1640236344666},{"_id":"public/tags/apollo/index.html","hash":"2eed853ac7e3982c15025c8cb4d7a93a55b58cc0","modified":1640236344666},{"_id":"public/tags/git/index.html","hash":"0e41a813ad0c9b4db7c5043e40a3bc2bf7cab4e5","modified":1640236344666},{"_id":"public/tags/rsync/index.html","hash":"7d5ec9eea4119082ee6ce6dc3c547ad84e03e1ef","modified":1640236344666},{"_id":"public/tags/cpp/index.html","hash":"c41c6a90e0badda16f76bcb95bb63356eb8a9e13","modified":1640236344666},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1639911548536},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1639911548536},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1639911548536},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1639911548536},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1639911548536},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1639911548536},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1639911548536},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1639911548536},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1639911548536},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1639911548536},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1639911548536},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1639911548536},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1639911548536},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1639911548536},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1639911548536},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1639911548536},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1639911548536},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1639911548536},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1639911548536},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1639911548536},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1639911548536},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1639911548536},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1639911548536},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1639911548536},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"670fb01e4930ae46fe8d6d2b75ead288f54e8e61","modified":1639911548536},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"3ad4f4e4b1fb3edee3d4ba25e6cdfed2f0b88a54","modified":1639911548536},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"13517529affa39e2585c591acae6dc336b6aa917","modified":1639911548536},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"c34acd6818df6db6be41a2e331886765d601f2eb","modified":1639911548536},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"94c83160bddccf08bd7424de40d738716f1eeb3a","modified":1639911548536},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1639911548536},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1639911548536},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1639911548536},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1639911548536},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1639911548536},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1639911548536},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1639911548536},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1639911548536},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1639911548536},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1639911548536},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1639911548536},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1639911548536},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1639911548536},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1639911548536},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1639911548536},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1639911548536},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1639911548536},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1639911548536},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1639911548536},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1639911548536},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1639911548536},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1639911548536},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1639911548536},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1639911548536},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1639911548536},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"1e1f02bfa89e179fe2dd1383273b8812aa873418","modified":1639911548536},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"0613c7ebba55ee47ef302c0f7766324692f899a7","modified":1639911548536},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"0ccb2c814a7e4ca12c4778821633809cb0361eaa","modified":1639911548536},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"a22acd7697f36e7d4cc31a853c70e776eac54bb1","modified":1639911548536},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1639911548536},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1639911548536},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1639911548536},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1639911548536},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1639911548536},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"d1ffd6340cdbf72890ccb67f32015eafc5df51a7","modified":1639911548536},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"229deca2465fa9efc8c03d0ebeb9a01c1559822e","modified":1639911548536},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"8ab907083fecaaa2a9ec93b27f884ad74573705c","modified":1639911548536},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1639911548536},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1639911548536},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1639911548536},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1639911548536},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1639911548536},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1639911548536},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1639911548536},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1639911548536},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1639911548536},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1639911548536},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1639911548536},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1639911548536},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1639911548536},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1639911548536},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1639911548536},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1639911548536},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1639911548536},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1639911548536},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1639911548536},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1639911548536},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1639911548536},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1639911548536},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1639911548536},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1639911548536},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1639911548536},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1639911548536},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1639911548536},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1639911548536},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1639911548536},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1639911548536},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1639911548536},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1639911548536},{"_id":"public/libs/prism/prism.css","hash":"f1a273e896538fa4e11cb70acc5ec7e88d8b6c4c","modified":1639911548536},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1639911548536},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1639911548536},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1639911548536},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1639911548536},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1639911548536},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"ea845c59bee4a5c6db774b8d8060f5641b789ae9","modified":1639911548536},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"eb8914f6b1797b45ee0883e6089d92695d9f9441","modified":1639911548536},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1639911548536},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1639911548536},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1639911548536},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1639911548536},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1639911548536},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1639911548536},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1639911548536},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1639911548536},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1639911548536},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1639911548536},{"_id":"public/css/matery.css","hash":"e363e88164c249a9ef2d6b60a7ecfbc503047d40","modified":1639916126363},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1639911548536},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1639911548536},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1639911548536},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1639911548536},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1639911548536},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1639911548536},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1639911548536},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1639911548536},{"_id":"public/libs/awesome/css/all.min.css","hash":"a57ee68d11601b0fd8e5037fc241ff65a754473c","modified":1639911548536},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1639911548536},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1639911548536},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1639911548536},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1639911548536},{"_id":"public/libs/awesome/css/all.css","hash":"8a4a55db46c5dbfef9c6703fa2d04e89cbfcf633","modified":1639911548536},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1639911548536},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1639911548536},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1639911548536},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"b7fd3035e83c23c720c9f5957af31d7e288fb4eb","modified":1639911548536},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1639911548536},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1639911548536},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1639911548536},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"023bb481b65dd8cdeb8c424ca900f3866292bfb0","modified":1639911548536},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1639911548536},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1639911548536},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1639911548536},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1639911548536},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"be7f26d6f063cfec5440517848ae5943adae1f54","modified":1639911548536},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1639911548536},{"_id":"themes/hexo-theme-matery/languages/zh-Hans.yml","hash":"c6de0de68bdc75a8a905787a0526b70ee9821da8","modified":1639913903136},{"_id":"source/_posts/introduction-to-matery.md","hash":"37fd684bf949a841f9869804961d0668d308f536","modified":1639915536345},{"_id":"public/front/introduction-to-matery/index.html","hash":"eb9ff789b799d470c6e4bb1bb14bd2f4af130d3e","modified":1640236344666},{"_id":"public/tags/hexo/index.html","hash":"cc3f5f935d4686b64e9b216964066c0f391eb9a9","modified":1640236344666},{"_id":"public/categories/front/index.html","hash":"455c8083c523082dab1f580cedd6a999d58c1b97","modified":1640236344666},{"_id":"public/atom.xml","hash":"b15cafce16dc66bfa9b3ffab3c30fefbf924f056","modified":1640236344666},{"_id":"source/_scraft/1.md","hash":"555ea18287f843d1790593c2a3579ec4de880f1f","modified":1639982841526},{"_id":"source/_posts/自制Rss阅读器.md","hash":"4639549229c84b52bcc5dacc4e9f711dbcc63855","modified":1640008185370},{"_id":"public/uncategorized/zi-zhi-rss-yue-du-qi/index.html","hash":"55ce2b2095e8b91c0cb018ae0c1bd7048c678454","modified":1640236344666},{"_id":"public/tags/rss/index.html","hash":"6660d381d810b497a0b71fe69845c0b1b4f8304d","modified":1640236344666},{"_id":"source/_posts/起一个mongodb.md","hash":"a04379681104d3524de1a559ebc824e88bff0795","modified":1640236312839},{"_id":"public/database/qi-yi-ge-mongodb/index.html","hash":"8c0ef46bcb7dbad9dfc9b44919fbd284eb17e906","modified":1640236344666},{"_id":"public/categories/database/index.html","hash":"c287be6b1d00d35863e595c6a31077a32a681bb9","modified":1640236344666},{"_id":"public/tags/mongodb/index.html","hash":"0453bd7ee4730c51c1e42d654e151997e60762fe","modified":1640236344666}],"Category":[{"name":"Language","_id":"ckxd4ztkn0004w8ulbj1nc9bu"},{"name":"life","_id":"ckxd4ztkv000dw8ul9owlbu04"},{"name":"auto","_id":"ckxd4ztkz000lw8ul6n4565ge"},{"name":"robocup","_id":"ckxd4ztl2000rw8ul3r5odb4x"},{"name":"tool","_id":"ckxd4ztl4000ww8ulbxr99vas"},{"name":"linux","_id":"ckxd4ztl50010w8ul9giwbncd"},{"name":"uncategorized","_id":"ckxd4ztl50014w8ul4dzwbsl2"},{"name":"tools","_id":"ckxd4ztl60017w8ul2o5z7qfn"},{"name":"operation","_id":"ckxd4ztlp001dw8ul5y2s10xf"},{"name":"cpp","_id":"ckxd4ztlq001gw8ul8ad7ax9g"},{"name":"front","_id":"ckxd7pxwu0001d0ul2l8360gy"},{"name":"database","_id":"ckxiidbxh0001awulfnmpadl0"}],"Data":[{"_id":"covers","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"}]},{"_id":"recommends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/uav"}]},{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}],"Page":[{"title":"404","date":"2021-12-19T10:55:41.000Z","type":"404","layout":"404","description":"Ops~，我找不到你想要的页面。这里的ops是错误，不是运维哦~","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2021-12-19 18:55:41\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Ops~，我找不到你想要的页面。这里的ops是错误，不是运维哦~\"\n---\n","updated":"2021-12-19T10:57:50.284Z","path":"404/index.html","comments":1,"_id":"ckxd4ztkf0000w8ulf4sygj2i","content":"","site":{"data":{"covers":[{"heleo":"_posts/hello-world.md"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"categories","date":"2021-12-19T08:41:07.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-12-19 16:41:07\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2021-12-19T08:42:31.719Z","path":"categories/index.html","comments":1,"_id":"ckxd4ztkl0002w8ul3r6od1mf","content":"","site":{"data":{"covers":[{"heleo":"_posts/hello-world.md"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"tags","date":"2021-12-19T08:42:40.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-12-19 16:42:40\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2021-12-19T08:42:51.631Z","path":"tags/index.html","comments":1,"_id":"ckxd4ztkp0006w8ul21n3dvxp","content":"","site":{"data":{"covers":[{"heleo":"_posts/hello-world.md"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"contact","date":"2021-12-19T08:43:40.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2021-12-19 16:43:40\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2021-12-19T08:43:49.529Z","path":"contact/index.html","comments":1,"_id":"ckxd4ztkr0008w8ul5ns77a5r","content":"","site":{"data":{"covers":[{"heleo":"_posts/hello-world.md"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"friends","date":"2021-12-19T08:44:04.000Z","type":"friends","layout":"friends","_content":"\n其实我没啥朋友，真的","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2021-12-19 16:44:04\ntype: \"friends\"\nlayout: \"friends\"\n---\n\n其实我没啥朋友，真的","updated":"2021-12-19T11:36:12.867Z","path":"friends/index.html","_id":"ckxd4ztks000aw8ul2be7b88z","comments":1,"content":"<p>其实我没啥朋友，真的</p>\n","site":{"data":{"covers":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>其实我没啥朋友，真的</p>\n"},{"title":"about","date":"2021-12-19T08:43:19.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-12-19 16:43:19\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2021-12-19T08:43:29.812Z","path":"about/index.html","comments":1,"_id":"ckxd4ztkv000fw8uldfaugkgp","content":"","site":{"data":{"covers":[{"heleo":"_posts/hello-world.md"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""}],"Post":[{"author":"kawhicurry","title":"Magic-Macro","date":"2021-11-07T12:28:58.000Z","_content":"\n# The magic of macro\n最近在写c，遇到了这样一段逻辑，要根据接受的字符串\n```\n# The magic of macro\n\n最近在写c，遇到了这样一段逻辑，根据要接受的字符串，比如`name=ubuntu`来在结构体mirror中找到对应的mirror.name进行赋值，一开始是这样设计的：\n\n```c\nstatic const char* PARA_LIST[MAX_ARG_NUM] = {\"name\", \"cmd\", \"arg\", \"url\", \"timeout\"};\n//然后对'='前的值与上述值匹配，得到一个id，如name的id为0\nswitch(i){\n    case 0:\n      if (para_len > MAX_NAME_LEN) {\n        printf(\"name too long!\");\n        return;\n      }\n      memcpy(mirror->name, parameter + 1, MAX_NAME_LEN);\n      break;\n    case 1:\n      //...\n    case 4:\n      //...  \n}\n//然后switch进行匹配，在switch中都需要先做长度判断，再给结构体mirror赋值\n```\n\n对于每个case来说，这样的事情都要做一遍，而其中除了struct中的元素不同之外，其他基本都完全一致（除了最后一个timeout），于是我就想简化这个过程。一开始，我想到了写n个不同的函数，这样我就可以在每个case中用一个函数替换，但仔细一想，这样还不是要给每个case写一个函数。这时候我想起了宏，上网查找一番后发现的宏的拼接功能。于是我写出了这个：\n\n```c\n#define set_mirror(the_mirror, element, parameter)            \\\n  {                                                           \\\n    if (!strcmp(#element, \"timeout\")) {                       \\\n      the_mirror.timeout_len = strlen(parameter);             \\\n    }                                                         \\\n    memset(the_mirror.element, 0, strlen(parameter) + 1);     \\\n    memcpy(the_mirror.element, parameter, sizeof(parameter)); \\\n  }\n```\n\n其中的`#element`,会讲element替换成字符串，而`##`可以将set_mirror的参数和后面的内容进行拼接（在后面的版本有示范）。上面这个版本已经可以替换赋值的功能了，但还没对长度进行考察。然后我脑子一抽，写了个`#define len_set_mirror` 其实就是上面`set_mirror`加一个参数，然后再调用`set_mirror`的宏。当时是记住了宏的一种“延迟”的机制，可以在有限次数内对宏进行一个嵌套。后面发现length可以直接从parameter获取，于是就将两个宏合并成了一个：\n\n```c\n#define set_mirror(p_mirror, element, parameter, id)               \\\n  do {                                                             \\\n    if (length(parameter) > MAX_##element##_LEN) {                 \\\n      printf(\"##element too long!\");                               \\\n      return 0;                                                    \\\n    }                                                              \\\n    if (!strcmp(#element, \"timeout\")) {                            \\\n      (p_mirror)->timeout_len = length(parameter);                 \\\n    }                                                              \\\n    memset((p_mirror)->element, '\\0', length(parameter) + 1);      \\\n    memcpy((p_mirror)->element, parameter, length(parameter) - 1); \\\n    ((p_mirror)->available) << id;                                 \\\n  } while (0)\n\n```\n\n这次成功将所有功能合并了，并且学到了用do...while(0)来提高宏的安全性（其实我也想到了用大括号的方法来避免，但确实do...while(0)是一个更好的方案。这种写法之后我只需在case中写两行：\n\n```c\n    case 0:\n      set_mirror(p_mirror, name, parameter, id);\n      break;//break还是老老实实写吧，方便set_mirror复用\n```\n\n其实在第一个宏之前，我还写了个在宏中构造变量来接受值的做法，但我发现完全没有必要，毕竟传递进来的值都应该可以被直接操作的（宏展开后直接获得变量）。由此也引出一条经验，大可不必在宏中定义新变量来处理数据。\n\n我对宏最大的印象就是文本替换，关于上面这段逻辑，switch还可以进一步优化。而对于整个c来说，宏是底层库的基础，我后面试图去实现一个strlen函数时，发现这玩意就是靠宏和汇编来实现的，而像c中的attribute，__VA_ARGS__(可变参数)，更有一片天地。甚至可以做逻辑运算，过于离谱了。\n\n结论：宏是魔法，这是我第一次真正近距离接触它，它真的是c的魔法。","source":"_posts/Magic-Macro.md","raw":"---\nauthor: kawhicurry\ntitle: Magic-Macro\ncategories:\n- Language\ndate: 2021-11-07 20:28:58\ntags: C\n---\n\n# The magic of macro\n最近在写c，遇到了这样一段逻辑，要根据接受的字符串\n```\n# The magic of macro\n\n最近在写c，遇到了这样一段逻辑，根据要接受的字符串，比如`name=ubuntu`来在结构体mirror中找到对应的mirror.name进行赋值，一开始是这样设计的：\n\n```c\nstatic const char* PARA_LIST[MAX_ARG_NUM] = {\"name\", \"cmd\", \"arg\", \"url\", \"timeout\"};\n//然后对'='前的值与上述值匹配，得到一个id，如name的id为0\nswitch(i){\n    case 0:\n      if (para_len > MAX_NAME_LEN) {\n        printf(\"name too long!\");\n        return;\n      }\n      memcpy(mirror->name, parameter + 1, MAX_NAME_LEN);\n      break;\n    case 1:\n      //...\n    case 4:\n      //...  \n}\n//然后switch进行匹配，在switch中都需要先做长度判断，再给结构体mirror赋值\n```\n\n对于每个case来说，这样的事情都要做一遍，而其中除了struct中的元素不同之外，其他基本都完全一致（除了最后一个timeout），于是我就想简化这个过程。一开始，我想到了写n个不同的函数，这样我就可以在每个case中用一个函数替换，但仔细一想，这样还不是要给每个case写一个函数。这时候我想起了宏，上网查找一番后发现的宏的拼接功能。于是我写出了这个：\n\n```c\n#define set_mirror(the_mirror, element, parameter)            \\\n  {                                                           \\\n    if (!strcmp(#element, \"timeout\")) {                       \\\n      the_mirror.timeout_len = strlen(parameter);             \\\n    }                                                         \\\n    memset(the_mirror.element, 0, strlen(parameter) + 1);     \\\n    memcpy(the_mirror.element, parameter, sizeof(parameter)); \\\n  }\n```\n\n其中的`#element`,会讲element替换成字符串，而`##`可以将set_mirror的参数和后面的内容进行拼接（在后面的版本有示范）。上面这个版本已经可以替换赋值的功能了，但还没对长度进行考察。然后我脑子一抽，写了个`#define len_set_mirror` 其实就是上面`set_mirror`加一个参数，然后再调用`set_mirror`的宏。当时是记住了宏的一种“延迟”的机制，可以在有限次数内对宏进行一个嵌套。后面发现length可以直接从parameter获取，于是就将两个宏合并成了一个：\n\n```c\n#define set_mirror(p_mirror, element, parameter, id)               \\\n  do {                                                             \\\n    if (length(parameter) > MAX_##element##_LEN) {                 \\\n      printf(\"##element too long!\");                               \\\n      return 0;                                                    \\\n    }                                                              \\\n    if (!strcmp(#element, \"timeout\")) {                            \\\n      (p_mirror)->timeout_len = length(parameter);                 \\\n    }                                                              \\\n    memset((p_mirror)->element, '\\0', length(parameter) + 1);      \\\n    memcpy((p_mirror)->element, parameter, length(parameter) - 1); \\\n    ((p_mirror)->available) << id;                                 \\\n  } while (0)\n\n```\n\n这次成功将所有功能合并了，并且学到了用do...while(0)来提高宏的安全性（其实我也想到了用大括号的方法来避免，但确实do...while(0)是一个更好的方案。这种写法之后我只需在case中写两行：\n\n```c\n    case 0:\n      set_mirror(p_mirror, name, parameter, id);\n      break;//break还是老老实实写吧，方便set_mirror复用\n```\n\n其实在第一个宏之前，我还写了个在宏中构造变量来接受值的做法，但我发现完全没有必要，毕竟传递进来的值都应该可以被直接操作的（宏展开后直接获得变量）。由此也引出一条经验，大可不必在宏中定义新变量来处理数据。\n\n我对宏最大的印象就是文本替换，关于上面这段逻辑，switch还可以进一步优化。而对于整个c来说，宏是底层库的基础，我后面试图去实现一个strlen函数时，发现这玩意就是靠宏和汇编来实现的，而像c中的attribute，__VA_ARGS__(可变参数)，更有一片天地。甚至可以做逻辑运算，过于离谱了。\n\n结论：宏是魔法，这是我第一次真正近距离接触它，它真的是c的魔法。","slug":"Magic-Macro","published":1,"updated":"2021-11-07T13:14:28.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxd4ztkh0001w8ul38j81p9s","content":"<h1 id=\"The-magic-of-macro\"><a href=\"#The-magic-of-macro\" class=\"headerlink\" title=\"The magic of macro\"></a>The magic of macro</h1><p>最近在写c，遇到了这样一段逻辑，要根据接受的字符串</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># The magic of macro</span><br><span class=\"line\"></span><br><span class=\"line\">最近在写c，遇到了这样一段逻辑，根据要接受的字符串，比如`name=ubuntu`来在结构体mirror中找到对应的mirror.name进行赋值，一开始是这样设计的：</span><br><span class=\"line\"></span><br><span class=\"line\">```c</span><br><span class=\"line\">static const char* PARA_LIST[MAX_ARG_NUM] = &#123;&quot;name&quot;, &quot;cmd&quot;, &quot;arg&quot;, &quot;url&quot;, &quot;timeout&quot;&#125;;</span><br><span class=\"line\">//然后对&#x27;=&#x27;前的值与上述值匹配，得到一个id，如name的id为0</span><br><span class=\"line\">switch(i)&#123;</span><br><span class=\"line\">    case 0:</span><br><span class=\"line\">      if (para_len &gt; MAX_NAME_LEN) &#123;</span><br><span class=\"line\">        printf(&quot;name too long!&quot;);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      memcpy(mirror-&gt;name, parameter + 1, MAX_NAME_LEN);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case 1:</span><br><span class=\"line\">      //...</span><br><span class=\"line\">    case 4:</span><br><span class=\"line\">      //...  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//然后switch进行匹配，在switch中都需要先做长度判断，再给结构体mirror赋值</span><br></pre></td></tr></table></figure>\n\n<p>对于每个case来说，这样的事情都要做一遍，而其中除了struct中的元素不同之外，其他基本都完全一致（除了最后一个timeout），于是我就想简化这个过程。一开始，我想到了写n个不同的函数，这样我就可以在每个case中用一个函数替换，但仔细一想，这样还不是要给每个case写一个函数。这时候我想起了宏，上网查找一番后发现的宏的拼接功能。于是我写出了这个：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> set_mirror(the_mirror, element, parameter)            \\</span></span><br><span class=\"line\"><span class=\"meta\">  &#123;                                                           \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-keyword\">if</span> (!strcmp(#element, <span class=\"meta-string\">&quot;timeout&quot;</span>)) &#123;                       \\</span></span><br><span class=\"line\"><span class=\"meta\">      the_mirror.timeout_len = strlen(parameter);             \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;                                                         \\</span></span><br><span class=\"line\"><span class=\"meta\">    memset(the_mirror.element, 0, strlen(parameter) + 1);     \\</span></span><br><span class=\"line\"><span class=\"meta\">    memcpy(the_mirror.element, parameter, sizeof(parameter)); \\</span></span><br><span class=\"line\"><span class=\"meta\">  &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中的<code>#element</code>,会讲element替换成字符串，而<code>##</code>可以将set_mirror的参数和后面的内容进行拼接（在后面的版本有示范）。上面这个版本已经可以替换赋值的功能了，但还没对长度进行考察。然后我脑子一抽，写了个<code>#define len_set_mirror</code> 其实就是上面<code>set_mirror</code>加一个参数，然后再调用<code>set_mirror</code>的宏。当时是记住了宏的一种“延迟”的机制，可以在有限次数内对宏进行一个嵌套。后面发现length可以直接从parameter获取，于是就将两个宏合并成了一个：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> set_mirror(p_mirror, element, parameter, id)               \\</span></span><br><span class=\"line\"><span class=\"meta\">  do &#123;                                                             \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-keyword\">if</span> (length(parameter) &gt; MAX_##element##_LEN) &#123;                 \\</span></span><br><span class=\"line\"><span class=\"meta\">      printf(<span class=\"meta-string\">&quot;##element too long!&quot;</span>);                               \\</span></span><br><span class=\"line\"><span class=\"meta\">      return 0;                                                    \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;                                                              \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-keyword\">if</span> (!strcmp(#element, <span class=\"meta-string\">&quot;timeout&quot;</span>)) &#123;                            \\</span></span><br><span class=\"line\"><span class=\"meta\">      (p_mirror)-&gt;timeout_len = length(parameter);                 \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;                                                              \\</span></span><br><span class=\"line\"><span class=\"meta\">    memset((p_mirror)-&gt;element, <span class=\"meta-string\">&#x27;\\0&#x27;</span>, length(parameter) + 1);      \\</span></span><br><span class=\"line\"><span class=\"meta\">    memcpy((p_mirror)-&gt;element, parameter, length(parameter) - 1); \\</span></span><br><span class=\"line\"><span class=\"meta\">    ((p_mirror)-&gt;available) &lt;&lt; id;                                 \\</span></span><br><span class=\"line\"><span class=\"meta\">  &#125; while (0)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这次成功将所有功能合并了，并且学到了用do…while(0)来提高宏的安全性（其实我也想到了用大括号的方法来避免，但确实do…while(0)是一个更好的方案。这种写法之后我只需在case中写两行：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">  set_mirror(p_mirror, name, parameter, id);</span><br><span class=\"line\">  <span class=\"keyword\">break</span>;<span class=\"comment\">//break还是老老实实写吧，方便set_mirror复用</span></span><br></pre></td></tr></table></figure>\n\n<p>其实在第一个宏之前，我还写了个在宏中构造变量来接受值的做法，但我发现完全没有必要，毕竟传递进来的值都应该可以被直接操作的（宏展开后直接获得变量）。由此也引出一条经验，大可不必在宏中定义新变量来处理数据。</p>\n<p>我对宏最大的印象就是文本替换，关于上面这段逻辑，switch还可以进一步优化。而对于整个c来说，宏是底层库的基础，我后面试图去实现一个strlen函数时，发现这玩意就是靠宏和汇编来实现的，而像c中的attribute，<strong>VA_ARGS</strong>(可变参数)，更有一片天地。甚至可以做逻辑运算，过于离谱了。</p>\n<p>结论：宏是魔法，这是我第一次真正近距离接触它，它真的是c的魔法。</p>\n","site":{"data":{"covers":[{"heleo":"_posts/hello-world.md"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"The-magic-of-macro\"><a href=\"#The-magic-of-macro\" class=\"headerlink\" title=\"The magic of macro\"></a>The magic of macro</h1><p>最近在写c，遇到了这样一段逻辑，要根据接受的字符串</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># The magic of macro</span><br><span class=\"line\"></span><br><span class=\"line\">最近在写c，遇到了这样一段逻辑，根据要接受的字符串，比如`name=ubuntu`来在结构体mirror中找到对应的mirror.name进行赋值，一开始是这样设计的：</span><br><span class=\"line\"></span><br><span class=\"line\">```c</span><br><span class=\"line\">static const char* PARA_LIST[MAX_ARG_NUM] = &#123;&quot;name&quot;, &quot;cmd&quot;, &quot;arg&quot;, &quot;url&quot;, &quot;timeout&quot;&#125;;</span><br><span class=\"line\">//然后对&#x27;=&#x27;前的值与上述值匹配，得到一个id，如name的id为0</span><br><span class=\"line\">switch(i)&#123;</span><br><span class=\"line\">    case 0:</span><br><span class=\"line\">      if (para_len &gt; MAX_NAME_LEN) &#123;</span><br><span class=\"line\">        printf(&quot;name too long!&quot;);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      memcpy(mirror-&gt;name, parameter + 1, MAX_NAME_LEN);</span><br><span class=\"line\">      break;</span><br><span class=\"line\">    case 1:</span><br><span class=\"line\">      //...</span><br><span class=\"line\">    case 4:</span><br><span class=\"line\">      //...  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//然后switch进行匹配，在switch中都需要先做长度判断，再给结构体mirror赋值</span><br></pre></td></tr></table></figure>\n\n<p>对于每个case来说，这样的事情都要做一遍，而其中除了struct中的元素不同之外，其他基本都完全一致（除了最后一个timeout），于是我就想简化这个过程。一开始，我想到了写n个不同的函数，这样我就可以在每个case中用一个函数替换，但仔细一想，这样还不是要给每个case写一个函数。这时候我想起了宏，上网查找一番后发现的宏的拼接功能。于是我写出了这个：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> set_mirror(the_mirror, element, parameter)            \\</span></span><br><span class=\"line\"><span class=\"meta\">  &#123;                                                           \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-keyword\">if</span> (!strcmp(#element, <span class=\"meta-string\">&quot;timeout&quot;</span>)) &#123;                       \\</span></span><br><span class=\"line\"><span class=\"meta\">      the_mirror.timeout_len = strlen(parameter);             \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;                                                         \\</span></span><br><span class=\"line\"><span class=\"meta\">    memset(the_mirror.element, 0, strlen(parameter) + 1);     \\</span></span><br><span class=\"line\"><span class=\"meta\">    memcpy(the_mirror.element, parameter, sizeof(parameter)); \\</span></span><br><span class=\"line\"><span class=\"meta\">  &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中的<code>#element</code>,会讲element替换成字符串，而<code>##</code>可以将set_mirror的参数和后面的内容进行拼接（在后面的版本有示范）。上面这个版本已经可以替换赋值的功能了，但还没对长度进行考察。然后我脑子一抽，写了个<code>#define len_set_mirror</code> 其实就是上面<code>set_mirror</code>加一个参数，然后再调用<code>set_mirror</code>的宏。当时是记住了宏的一种“延迟”的机制，可以在有限次数内对宏进行一个嵌套。后面发现length可以直接从parameter获取，于是就将两个宏合并成了一个：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> set_mirror(p_mirror, element, parameter, id)               \\</span></span><br><span class=\"line\"><span class=\"meta\">  do &#123;                                                             \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-keyword\">if</span> (length(parameter) &gt; MAX_##element##_LEN) &#123;                 \\</span></span><br><span class=\"line\"><span class=\"meta\">      printf(<span class=\"meta-string\">&quot;##element too long!&quot;</span>);                               \\</span></span><br><span class=\"line\"><span class=\"meta\">      return 0;                                                    \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;                                                              \\</span></span><br><span class=\"line\"><span class=\"meta\">    <span class=\"meta-keyword\">if</span> (!strcmp(#element, <span class=\"meta-string\">&quot;timeout&quot;</span>)) &#123;                            \\</span></span><br><span class=\"line\"><span class=\"meta\">      (p_mirror)-&gt;timeout_len = length(parameter);                 \\</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;                                                              \\</span></span><br><span class=\"line\"><span class=\"meta\">    memset((p_mirror)-&gt;element, <span class=\"meta-string\">&#x27;\\0&#x27;</span>, length(parameter) + 1);      \\</span></span><br><span class=\"line\"><span class=\"meta\">    memcpy((p_mirror)-&gt;element, parameter, length(parameter) - 1); \\</span></span><br><span class=\"line\"><span class=\"meta\">    ((p_mirror)-&gt;available) &lt;&lt; id;                                 \\</span></span><br><span class=\"line\"><span class=\"meta\">  &#125; while (0)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这次成功将所有功能合并了，并且学到了用do…while(0)来提高宏的安全性（其实我也想到了用大括号的方法来避免，但确实do…while(0)是一个更好的方案。这种写法之后我只需在case中写两行：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">  set_mirror(p_mirror, name, parameter, id);</span><br><span class=\"line\">  <span class=\"keyword\">break</span>;<span class=\"comment\">//break还是老老实实写吧，方便set_mirror复用</span></span><br></pre></td></tr></table></figure>\n\n<p>其实在第一个宏之前，我还写了个在宏中构造变量来接受值的做法，但我发现完全没有必要，毕竟传递进来的值都应该可以被直接操作的（宏展开后直接获得变量）。由此也引出一条经验，大可不必在宏中定义新变量来处理数据。</p>\n<p>我对宏最大的印象就是文本替换，关于上面这段逻辑，switch还可以进一步优化。而对于整个c来说，宏是底层库的基础，我后面试图去实现一个strlen函数时，发现这玩意就是靠宏和汇编来实现的，而像c中的attribute，<strong>VA_ARGS</strong>(可变参数)，更有一片天地。甚至可以做逻辑运算，过于离谱了。</p>\n<p>结论：宏是魔法，这是我第一次真正近距离接触它，它真的是c的魔法。</p>\n"},{"title":"Daily-10-27","date":"2021-10-27T10:57:04.000Z","_content":"\n# Daily-10-27\n\n谁都想不到第一次挑战会来的这么快，前两天还在悠哉游哉的看镜像站，今天就遇到了空前绝后大危机。学校的服务器似乎遇上了arp广播风暴，信息办和青柚几乎所有的服务都down了。两位后端学长带着我去了信息办，用了一下午来试着恢复所有service，顺便还参观了一下信息办的机房。\n\n今天早上才写了{% post_link Qingyou-1 %}这篇文章，说到同时加班我摸鱼。这个摸鱼确实没得办法，毕竟是业务处理方面的事情，但今天这个服务器down了，可就是彻彻底底要运维干活了（然后我还是在摸鱼）。早上本来在开开心心的在github上搭自己的blog，本来很开心的发现hexo的源代码和deploy用的现成文件可以直接用`git branch`分开来。结果到了中午，突然说学校的内部网络出了超级大问题，连食堂都刷不上卡。中午两位后端学长都到了，然后带着我去了信息办，坐在某个开会的桌子边重启服务。主要是两位学长在做，我最多起一个记录的作用。下面是一些印象深刻的记录。\n\n1. 最主要的两台服务器，理论是完全一样的，但一台可以正常运行，另一台卡死，reboot都卡死。并且tomcat父进程为1，无法kill，同时其log文件夹无法打开，无法ls、du，free显示内存占满，swap分区16g全满。最后只能物理重启，重启后可以正常使用了，从另一台服务器上copy过来了配置。\n2. 搭载某部门服务的服务器，80+443端口都无法使用，但ssh连接正常，redis没有设置登录密码，但是手动登录时要求密码了，reboot之后可以正常使用了，但是证书似乎还有问题，两个学长也没解决。\n3. 搭载另一部门服务的服务器，服务down了，重启服务后可正常使用。\n\n除此之外还有各种容器需要重启，有的是学长搭建的，如果不及时记录的话，还真不一定记得住他们的作用。\n\n本来下午约了去飞无人机，果断推到明天了，不过无人机的代码倒是早就写好了。本以为明天没课的，约时间调试无人机的时候才想起来明天还有个实验课。又是不想上课的一天。\n\n不管怎么说，今天下午还是多多少少学到了点nouns，也深刻意识到一个了解服务的运维的重要性，此前的服务都是后端同学手动搭的，幸好他们还记得相关信息，不然我现在的能力可做不到完美恢复。除此之外，我对网络、数据库的了解还是差的太多。\n\n对于未来的话，希望能早点上云吧，服务也希望能够系统化一点，文档可以多写一点。\n\n以上。\n\n","source":"_posts/Daily-10-27.md","raw":"---\ntitle: Daily-10-27\ndate: 2021-10-27 18:57:04\ntags: Daily\n---\n\n# Daily-10-27\n\n谁都想不到第一次挑战会来的这么快，前两天还在悠哉游哉的看镜像站，今天就遇到了空前绝后大危机。学校的服务器似乎遇上了arp广播风暴，信息办和青柚几乎所有的服务都down了。两位后端学长带着我去了信息办，用了一下午来试着恢复所有service，顺便还参观了一下信息办的机房。\n\n今天早上才写了{% post_link Qingyou-1 %}这篇文章，说到同时加班我摸鱼。这个摸鱼确实没得办法，毕竟是业务处理方面的事情，但今天这个服务器down了，可就是彻彻底底要运维干活了（然后我还是在摸鱼）。早上本来在开开心心的在github上搭自己的blog，本来很开心的发现hexo的源代码和deploy用的现成文件可以直接用`git branch`分开来。结果到了中午，突然说学校的内部网络出了超级大问题，连食堂都刷不上卡。中午两位后端学长都到了，然后带着我去了信息办，坐在某个开会的桌子边重启服务。主要是两位学长在做，我最多起一个记录的作用。下面是一些印象深刻的记录。\n\n1. 最主要的两台服务器，理论是完全一样的，但一台可以正常运行，另一台卡死，reboot都卡死。并且tomcat父进程为1，无法kill，同时其log文件夹无法打开，无法ls、du，free显示内存占满，swap分区16g全满。最后只能物理重启，重启后可以正常使用了，从另一台服务器上copy过来了配置。\n2. 搭载某部门服务的服务器，80+443端口都无法使用，但ssh连接正常，redis没有设置登录密码，但是手动登录时要求密码了，reboot之后可以正常使用了，但是证书似乎还有问题，两个学长也没解决。\n3. 搭载另一部门服务的服务器，服务down了，重启服务后可正常使用。\n\n除此之外还有各种容器需要重启，有的是学长搭建的，如果不及时记录的话，还真不一定记得住他们的作用。\n\n本来下午约了去飞无人机，果断推到明天了，不过无人机的代码倒是早就写好了。本以为明天没课的，约时间调试无人机的时候才想起来明天还有个实验课。又是不想上课的一天。\n\n不管怎么说，今天下午还是多多少少学到了点nouns，也深刻意识到一个了解服务的运维的重要性，此前的服务都是后端同学手动搭的，幸好他们还记得相关信息，不然我现在的能力可做不到完美恢复。除此之外，我对网络、数据库的了解还是差的太多。\n\n对于未来的话，希望能早点上云吧，服务也希望能够系统化一点，文档可以多写一点。\n\n以上。\n\n","slug":"Daily-10-27","published":1,"updated":"2021-10-27T11:50:25.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxd4ztkm0003w8ul1njx1l6f","content":"<h1 id=\"Daily-10-27\"><a href=\"#Daily-10-27\" class=\"headerlink\" title=\"Daily-10-27\"></a>Daily-10-27</h1><p>谁都想不到第一次挑战会来的这么快，前两天还在悠哉游哉的看镜像站，今天就遇到了空前绝后大危机。学校的服务器似乎遇上了arp广播风暴，信息办和青柚几乎所有的服务都down了。两位后端学长带着我去了信息办，用了一下午来试着恢复所有service，顺便还参观了一下信息办的机房。</p>\n<p>今天早上才写了<a href=\"/life/qingyou-1/\" title=\"Qingyou_1\">Qingyou_1</a>这篇文章，说到同时加班我摸鱼。这个摸鱼确实没得办法，毕竟是业务处理方面的事情，但今天这个服务器down了，可就是彻彻底底要运维干活了（然后我还是在摸鱼）。早上本来在开开心心的在github上搭自己的blog，本来很开心的发现hexo的源代码和deploy用的现成文件可以直接用<code>git branch</code>分开来。结果到了中午，突然说学校的内部网络出了超级大问题，连食堂都刷不上卡。中午两位后端学长都到了，然后带着我去了信息办，坐在某个开会的桌子边重启服务。主要是两位学长在做，我最多起一个记录的作用。下面是一些印象深刻的记录。</p>\n<ol>\n<li>最主要的两台服务器，理论是完全一样的，但一台可以正常运行，另一台卡死，reboot都卡死。并且tomcat父进程为1，无法kill，同时其log文件夹无法打开，无法ls、du，free显示内存占满，swap分区16g全满。最后只能物理重启，重启后可以正常使用了，从另一台服务器上copy过来了配置。</li>\n<li>搭载某部门服务的服务器，80+443端口都无法使用，但ssh连接正常，redis没有设置登录密码，但是手动登录时要求密码了，reboot之后可以正常使用了，但是证书似乎还有问题，两个学长也没解决。</li>\n<li>搭载另一部门服务的服务器，服务down了，重启服务后可正常使用。</li>\n</ol>\n<p>除此之外还有各种容器需要重启，有的是学长搭建的，如果不及时记录的话，还真不一定记得住他们的作用。</p>\n<p>本来下午约了去飞无人机，果断推到明天了，不过无人机的代码倒是早就写好了。本以为明天没课的，约时间调试无人机的时候才想起来明天还有个实验课。又是不想上课的一天。</p>\n<p>不管怎么说，今天下午还是多多少少学到了点nouns，也深刻意识到一个了解服务的运维的重要性，此前的服务都是后端同学手动搭的，幸好他们还记得相关信息，不然我现在的能力可做不到完美恢复。除此之外，我对网络、数据库的了解还是差的太多。</p>\n<p>对于未来的话，希望能早点上云吧，服务也希望能够系统化一点，文档可以多写一点。</p>\n<p>以上。</p>\n","site":{"data":{"covers":[{"heleo":"_posts/hello-world.md"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"Daily-10-27\"><a href=\"#Daily-10-27\" class=\"headerlink\" title=\"Daily-10-27\"></a>Daily-10-27</h1><p>谁都想不到第一次挑战会来的这么快，前两天还在悠哉游哉的看镜像站，今天就遇到了空前绝后大危机。学校的服务器似乎遇上了arp广播风暴，信息办和青柚几乎所有的服务都down了。两位后端学长带着我去了信息办，用了一下午来试着恢复所有service，顺便还参观了一下信息办的机房。</p>\n<p>今天早上才写了<a href=\"/life/qingyou-1/\" title=\"Qingyou_1\">Qingyou_1</a>这篇文章，说到同时加班我摸鱼。这个摸鱼确实没得办法，毕竟是业务处理方面的事情，但今天这个服务器down了，可就是彻彻底底要运维干活了（然后我还是在摸鱼）。早上本来在开开心心的在github上搭自己的blog，本来很开心的发现hexo的源代码和deploy用的现成文件可以直接用<code>git branch</code>分开来。结果到了中午，突然说学校的内部网络出了超级大问题，连食堂都刷不上卡。中午两位后端学长都到了，然后带着我去了信息办，坐在某个开会的桌子边重启服务。主要是两位学长在做，我最多起一个记录的作用。下面是一些印象深刻的记录。</p>\n<ol>\n<li>最主要的两台服务器，理论是完全一样的，但一台可以正常运行，另一台卡死，reboot都卡死。并且tomcat父进程为1，无法kill，同时其log文件夹无法打开，无法ls、du，free显示内存占满，swap分区16g全满。最后只能物理重启，重启后可以正常使用了，从另一台服务器上copy过来了配置。</li>\n<li>搭载某部门服务的服务器，80+443端口都无法使用，但ssh连接正常，redis没有设置登录密码，但是手动登录时要求密码了，reboot之后可以正常使用了，但是证书似乎还有问题，两个学长也没解决。</li>\n<li>搭载另一部门服务的服务器，服务down了，重启服务后可正常使用。</li>\n</ol>\n<p>除此之外还有各种容器需要重启，有的是学长搭建的，如果不及时记录的话，还真不一定记得住他们的作用。</p>\n<p>本来下午约了去飞无人机，果断推到明天了，不过无人机的代码倒是早就写好了。本以为明天没课的，约时间调试无人机的时候才想起来明天还有个实验课。又是不想上课的一天。</p>\n<p>不管怎么说，今天下午还是多多少少学到了点nouns，也深刻意识到一个了解服务的运维的重要性，此前的服务都是后端同学手动搭的，幸好他们还记得相关信息，不然我现在的能力可做不到完美恢复。除此之外，我对网络、数据库的了解还是差的太多。</p>\n<p>对于未来的话，希望能早点上云吧，服务也希望能够系统化一点，文档可以多写一点。</p>\n<p>以上。</p>\n"},{"title":"New-Start","date":"2021-10-25T09:45:59.000Z","_content":"\n# New Start\n\nToday I start a new blog with domain: [kawhicurry.shuihua.top](kawhicurry.shuihua.top).\n\nI hope I can keep the anything I meet after now.\n\nRecord the things that refresh, happy, knowledgeable or miserable, sad, terrible.","source":"_posts/New-Start.md","raw":"---\ntitle: New-Start\ndate: 2021-10-25 17:45:59\ntags:\n---\n\n# New Start\n\nToday I start a new blog with domain: [kawhicurry.shuihua.top](kawhicurry.shuihua.top).\n\nI hope I can keep the anything I meet after now.\n\nRecord the things that refresh, happy, knowledgeable or miserable, sad, terrible.","slug":"New-Start","published":1,"updated":"2021-10-27T05:11:31.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxd4ztkq0007w8ul09hg61fh","content":"<h1 id=\"New-Start\"><a href=\"#New-Start\" class=\"headerlink\" title=\"New Start\"></a>New Start</h1><p>Today I start a new blog with domain: <a href=\"kawhicurry.shuihua.top\">kawhicurry.shuihua.top</a>.</p>\n<p>I hope I can keep the anything I meet after now.</p>\n<p>Record the things that refresh, happy, knowledgeable or miserable, sad, terrible.</p>\n","site":{"data":{"covers":[{"heleo":"_posts/hello-world.md"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"New-Start\"><a href=\"#New-Start\" class=\"headerlink\" title=\"New Start\"></a>New Start</h1><p>Today I start a new blog with domain: <a href=\"kawhicurry.shuihua.top\">kawhicurry.shuihua.top</a>.</p>\n<p>I hope I can keep the anything I meet after now.</p>\n<p>Record the things that refresh, happy, knowledgeable or miserable, sad, terrible.</p>\n"},{"title":"Qingyou_1","date":"2021-10-27T01:01:06.000Z","_content":"# 青柚的这点事（1）\n\n大一开学的时候被学校拉去听优秀学生讲座。然后青柚的指导老师上去宣传了一波，我就记得两件事：\n\n1. 学校的小程序是青柚管的\n2. 不招零基础\n\n说是不招，还是抱着试一试的心态，去投了个ui岗，毕竟当时恰好在学原型。结果石沉大海，冒得回应。\n\n大一上死命学会c之后，大一下堕落了起来，直到有天看到阿里云服务器打折，心血来潮，和好基友Roc买了一台49一年的小服务器，搭博客玩。\n\n没服务器的时候就在折腾jekyll和各种pages了，有了服务器之后终于上了心心念的wordpress，然后就是折腾wp各种奇奇怪怪的东西，然后发现有个好东西叫docker，于是又拿docker部署各种各样的服务。我记得最多的时候，部署了博客，gitee，一个ftp服务器，还连了163邮箱发报警。对于一个1核心2m带宽的服务器来说，压力还是很大了哈哈哈。对了，一开始是用宝塔面板，开始还觉得挺方便的，后来lnmp的p就开始出各种各样的问题。这时候就发现了自动部署忽视细节是个多么难搞的问题。从此决定手动搭各种环境。然后又经历了几次服务器重置之后，我和Roc决定还是把网页部署到gitlab page上，毕竟写好md文档然后直接push，确实比wp舒服多了。\n\n接下来在大一结束的那个暑假，我又一次想起了青柚的招新，这次我决定报个运维岗位试试。本想着会遇到各种可能的高难度问题，还提心吊胆地做了各种准备，结果似乎没有遇到太大困难就进来了。进来之后才发现青柚已经很久没有运维了。上一届的运维是一位后端，再往前是一位运营。也确实，运维这份活在小公司本就是可有可无的，更何况这么个工作室呢？不过我还是很喜欢这份活的，毕竟能看着各种软件稳稳的运行，不用想破脑袋实现各种奇奇怪怪的需求，其实也不错（手动狗头）。\n\n就在今天，学校的出入校小程序上线了。这个项目一个月前就开始了，当时我也被拉进了这个项目的群里，然后被告知学校找了外面的运维，用了大公司的serverless。这一个月以来都是平稳推进，直到前天，突然改了需求，又要求昨天就要上线，整个工作室的人都被拉了进来，并且核心人员从前天晚上七点一直加班到昨天中午十一二点。当所有人都在加班的时候，一个运维坐在工作室的正中间，写着自己满是bug的minishell（狗头）。\n\n好吧，其实几天前我几天前刚接到了要管理学校镜像站的任务，一个python+nginx的小组合，拉取镜像用了python写的mirrord工具，好像是北京外国语还是北京交大的（我估计再往上查一下会发现是清华的，此时，清华用的go），然后再在nginx里面配置下转发就行。但是仔细考虑下自己吧，好像python不咋熟练（那必然），go吧肯定不会，最要命的是线程相关的问题，基本是只知道概念（甚至不清楚），略知一二那种。所以想写出点什么，一时半会恐怕没办法，所以现在抓紧学操作系统，把线程方面搞清楚了，再找个趁手的工具，把镜像站的任务系统化一点，争取做成一个平台。\n\n我又想起前天晚上加班的场景，虽然我啥都没干，但我还是挺喜欢这种氛围的。希望能在这里写点什么，写点什么，最后再写点什么。（老谜语人了）\n\n","source":"_posts/Qingyou-1.md","raw":"---\ntitle: Qingyou_1\ndate: 2021-10-27 09:01:06\ncategories: life\ntags:\n---\n# 青柚的这点事（1）\n\n大一开学的时候被学校拉去听优秀学生讲座。然后青柚的指导老师上去宣传了一波，我就记得两件事：\n\n1. 学校的小程序是青柚管的\n2. 不招零基础\n\n说是不招，还是抱着试一试的心态，去投了个ui岗，毕竟当时恰好在学原型。结果石沉大海，冒得回应。\n\n大一上死命学会c之后，大一下堕落了起来，直到有天看到阿里云服务器打折，心血来潮，和好基友Roc买了一台49一年的小服务器，搭博客玩。\n\n没服务器的时候就在折腾jekyll和各种pages了，有了服务器之后终于上了心心念的wordpress，然后就是折腾wp各种奇奇怪怪的东西，然后发现有个好东西叫docker，于是又拿docker部署各种各样的服务。我记得最多的时候，部署了博客，gitee，一个ftp服务器，还连了163邮箱发报警。对于一个1核心2m带宽的服务器来说，压力还是很大了哈哈哈。对了，一开始是用宝塔面板，开始还觉得挺方便的，后来lnmp的p就开始出各种各样的问题。这时候就发现了自动部署忽视细节是个多么难搞的问题。从此决定手动搭各种环境。然后又经历了几次服务器重置之后，我和Roc决定还是把网页部署到gitlab page上，毕竟写好md文档然后直接push，确实比wp舒服多了。\n\n接下来在大一结束的那个暑假，我又一次想起了青柚的招新，这次我决定报个运维岗位试试。本想着会遇到各种可能的高难度问题，还提心吊胆地做了各种准备，结果似乎没有遇到太大困难就进来了。进来之后才发现青柚已经很久没有运维了。上一届的运维是一位后端，再往前是一位运营。也确实，运维这份活在小公司本就是可有可无的，更何况这么个工作室呢？不过我还是很喜欢这份活的，毕竟能看着各种软件稳稳的运行，不用想破脑袋实现各种奇奇怪怪的需求，其实也不错（手动狗头）。\n\n就在今天，学校的出入校小程序上线了。这个项目一个月前就开始了，当时我也被拉进了这个项目的群里，然后被告知学校找了外面的运维，用了大公司的serverless。这一个月以来都是平稳推进，直到前天，突然改了需求，又要求昨天就要上线，整个工作室的人都被拉了进来，并且核心人员从前天晚上七点一直加班到昨天中午十一二点。当所有人都在加班的时候，一个运维坐在工作室的正中间，写着自己满是bug的minishell（狗头）。\n\n好吧，其实几天前我几天前刚接到了要管理学校镜像站的任务，一个python+nginx的小组合，拉取镜像用了python写的mirrord工具，好像是北京外国语还是北京交大的（我估计再往上查一下会发现是清华的，此时，清华用的go），然后再在nginx里面配置下转发就行。但是仔细考虑下自己吧，好像python不咋熟练（那必然），go吧肯定不会，最要命的是线程相关的问题，基本是只知道概念（甚至不清楚），略知一二那种。所以想写出点什么，一时半会恐怕没办法，所以现在抓紧学操作系统，把线程方面搞清楚了，再找个趁手的工具，把镜像站的任务系统化一点，争取做成一个平台。\n\n我又想起前天晚上加班的场景，虽然我啥都没干，但我还是挺喜欢这种氛围的。希望能在这里写点什么，写点什么，最后再写点什么。（老谜语人了）\n\n","slug":"Qingyou-1","published":1,"updated":"2021-10-27T05:13:00.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxd4ztkr0009w8ulfk4q3kl2","content":"<h1 id=\"青柚的这点事（1）\"><a href=\"#青柚的这点事（1）\" class=\"headerlink\" title=\"青柚的这点事（1）\"></a>青柚的这点事（1）</h1><p>大一开学的时候被学校拉去听优秀学生讲座。然后青柚的指导老师上去宣传了一波，我就记得两件事：</p>\n<ol>\n<li>学校的小程序是青柚管的</li>\n<li>不招零基础</li>\n</ol>\n<p>说是不招，还是抱着试一试的心态，去投了个ui岗，毕竟当时恰好在学原型。结果石沉大海，冒得回应。</p>\n<p>大一上死命学会c之后，大一下堕落了起来，直到有天看到阿里云服务器打折，心血来潮，和好基友Roc买了一台49一年的小服务器，搭博客玩。</p>\n<p>没服务器的时候就在折腾jekyll和各种pages了，有了服务器之后终于上了心心念的wordpress，然后就是折腾wp各种奇奇怪怪的东西，然后发现有个好东西叫docker，于是又拿docker部署各种各样的服务。我记得最多的时候，部署了博客，gitee，一个ftp服务器，还连了163邮箱发报警。对于一个1核心2m带宽的服务器来说，压力还是很大了哈哈哈。对了，一开始是用宝塔面板，开始还觉得挺方便的，后来lnmp的p就开始出各种各样的问题。这时候就发现了自动部署忽视细节是个多么难搞的问题。从此决定手动搭各种环境。然后又经历了几次服务器重置之后，我和Roc决定还是把网页部署到gitlab page上，毕竟写好md文档然后直接push，确实比wp舒服多了。</p>\n<p>接下来在大一结束的那个暑假，我又一次想起了青柚的招新，这次我决定报个运维岗位试试。本想着会遇到各种可能的高难度问题，还提心吊胆地做了各种准备，结果似乎没有遇到太大困难就进来了。进来之后才发现青柚已经很久没有运维了。上一届的运维是一位后端，再往前是一位运营。也确实，运维这份活在小公司本就是可有可无的，更何况这么个工作室呢？不过我还是很喜欢这份活的，毕竟能看着各种软件稳稳的运行，不用想破脑袋实现各种奇奇怪怪的需求，其实也不错（手动狗头）。</p>\n<p>就在今天，学校的出入校小程序上线了。这个项目一个月前就开始了，当时我也被拉进了这个项目的群里，然后被告知学校找了外面的运维，用了大公司的serverless。这一个月以来都是平稳推进，直到前天，突然改了需求，又要求昨天就要上线，整个工作室的人都被拉了进来，并且核心人员从前天晚上七点一直加班到昨天中午十一二点。当所有人都在加班的时候，一个运维坐在工作室的正中间，写着自己满是bug的minishell（狗头）。</p>\n<p>好吧，其实几天前我几天前刚接到了要管理学校镜像站的任务，一个python+nginx的小组合，拉取镜像用了python写的mirrord工具，好像是北京外国语还是北京交大的（我估计再往上查一下会发现是清华的，此时，清华用的go），然后再在nginx里面配置下转发就行。但是仔细考虑下自己吧，好像python不咋熟练（那必然），go吧肯定不会，最要命的是线程相关的问题，基本是只知道概念（甚至不清楚），略知一二那种。所以想写出点什么，一时半会恐怕没办法，所以现在抓紧学操作系统，把线程方面搞清楚了，再找个趁手的工具，把镜像站的任务系统化一点，争取做成一个平台。</p>\n<p>我又想起前天晚上加班的场景，虽然我啥都没干，但我还是挺喜欢这种氛围的。希望能在这里写点什么，写点什么，最后再写点什么。（老谜语人了）</p>\n","site":{"data":{"covers":[{"heleo":"_posts/hello-world.md"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"青柚的这点事（1）\"><a href=\"#青柚的这点事（1）\" class=\"headerlink\" title=\"青柚的这点事（1）\"></a>青柚的这点事（1）</h1><p>大一开学的时候被学校拉去听优秀学生讲座。然后青柚的指导老师上去宣传了一波，我就记得两件事：</p>\n<ol>\n<li>学校的小程序是青柚管的</li>\n<li>不招零基础</li>\n</ol>\n<p>说是不招，还是抱着试一试的心态，去投了个ui岗，毕竟当时恰好在学原型。结果石沉大海，冒得回应。</p>\n<p>大一上死命学会c之后，大一下堕落了起来，直到有天看到阿里云服务器打折，心血来潮，和好基友Roc买了一台49一年的小服务器，搭博客玩。</p>\n<p>没服务器的时候就在折腾jekyll和各种pages了，有了服务器之后终于上了心心念的wordpress，然后就是折腾wp各种奇奇怪怪的东西，然后发现有个好东西叫docker，于是又拿docker部署各种各样的服务。我记得最多的时候，部署了博客，gitee，一个ftp服务器，还连了163邮箱发报警。对于一个1核心2m带宽的服务器来说，压力还是很大了哈哈哈。对了，一开始是用宝塔面板，开始还觉得挺方便的，后来lnmp的p就开始出各种各样的问题。这时候就发现了自动部署忽视细节是个多么难搞的问题。从此决定手动搭各种环境。然后又经历了几次服务器重置之后，我和Roc决定还是把网页部署到gitlab page上，毕竟写好md文档然后直接push，确实比wp舒服多了。</p>\n<p>接下来在大一结束的那个暑假，我又一次想起了青柚的招新，这次我决定报个运维岗位试试。本想着会遇到各种可能的高难度问题，还提心吊胆地做了各种准备，结果似乎没有遇到太大困难就进来了。进来之后才发现青柚已经很久没有运维了。上一届的运维是一位后端，再往前是一位运营。也确实，运维这份活在小公司本就是可有可无的，更何况这么个工作室呢？不过我还是很喜欢这份活的，毕竟能看着各种软件稳稳的运行，不用想破脑袋实现各种奇奇怪怪的需求，其实也不错（手动狗头）。</p>\n<p>就在今天，学校的出入校小程序上线了。这个项目一个月前就开始了，当时我也被拉进了这个项目的群里，然后被告知学校找了外面的运维，用了大公司的serverless。这一个月以来都是平稳推进，直到前天，突然改了需求，又要求昨天就要上线，整个工作室的人都被拉了进来，并且核心人员从前天晚上七点一直加班到昨天中午十一二点。当所有人都在加班的时候，一个运维坐在工作室的正中间，写着自己满是bug的minishell（狗头）。</p>\n<p>好吧，其实几天前我几天前刚接到了要管理学校镜像站的任务，一个python+nginx的小组合，拉取镜像用了python写的mirrord工具，好像是北京外国语还是北京交大的（我估计再往上查一下会发现是清华的，此时，清华用的go），然后再在nginx里面配置下转发就行。但是仔细考虑下自己吧，好像python不咋熟练（那必然），go吧肯定不会，最要命的是线程相关的问题，基本是只知道概念（甚至不清楚），略知一二那种。所以想写出点什么，一时半会恐怕没办法，所以现在抓紧学操作系统，把线程方面搞清楚了，再找个趁手的工具，把镜像站的任务系统化一点，争取做成一个平台。</p>\n<p>我又想起前天晚上加班的场景，虽然我啥都没干，但我还是挺喜欢这种氛围的。希望能在这里写点什么，写点什么，最后再写点什么。（老谜语人了）</p>\n"},{"author":"kawhicurry","title":"记录从无人机上学到的东西","date":"2021-11-16T12:54:45.000Z","cover":true,"_content":"\n# 记录从无人机上学到的东西\n\n*UAV*: Unmanned Aerial Vehicle\n\n## 项目的目的\n\n分为森林救火和森林巡逻，我被分在森林巡逻部分。主要是让飞机按一定轨迹在操场上飞行，以z形路线飞过一个操场。森姐救火则是在上述基础上加上使用视觉识别找到一个红色的正方形。我在该小组中负责通信部分。\n\n## 数传通信\n\n主要的任务是将无人机的xyz及三个偏转角通过数传发到地面站，地面站方面会有同学根据数据进行3d绘图。\n\n一开始读代码思路不对，一心想着找gps的数据，于是找到了Sensor，通过将整个sensor的数据取出来，然后获取其中的数据。后来发现库里有个MeasureSystem，可以直接获取xyz及偏转角。于是改写为直接调取。\n\n获取数据后就是发送，发送是利用飞控的Uart与数传进行连接。库中提供了Uart_Send函数，接受一个数组和一个长度作为参数，但是该数组只接受字符，因此要将实际数据转为字符后再发送，思路是将 原始数据%10+‘0’ 从而得到其ascii码值，同时用switch来遍历xyz和三个偏转角。每6个数据作为一组，一组中的数据之间使用‘，’分割，不同组之间使用‘@’分割。期间对原数据进行处理时要记得将得到的某个数据进行数组反转（再看一眼上面对原始数据处理的思路），因为这个问题还出过bug……。\n\n再具体一点，原始数据都是double 或者 float类型，单位都为厘米。一开始我在将获取的数据传到中间的handler时，将其转为（int），然后再直接处理，后面我在转为（int）前，让原始数据的右值*PRESION，设定一个精度，精度取100，从而获得了0.1mm级别的精度。但后面发现这个精度的意义不大了，于是又改回了1。\n\n再记录一下硬件的问题：\n\n1. 电调插反了，折磨了搞硬件的兄弟一下午\n2. 图传始终没有图像，一直以为是电源线的问题，后面发现是插在电脑上的输入线没有插稳\n3. 飞到一半炸机了，排查半天发现是当时调试的太久，没有注意到电量。\n4. 几乎相同的坐标发送代码（除了版本问题外，对数据处理的方式相同）在A9上正常运行，在TI上发出的数据是乱码，改用发送固定值之后，电脑端收到了稳定的乱码。更换数传和数传连接线之后问题仍然存在。直到写下此文时依然未解决。\n","source":"_posts/UAV.md","raw":"---\nauthor: kawhicurry\ntitle: 记录从无人机上学到的东西\ncategories: auto\ndate: 2021-11-16 20:54:45\ntags: auto\ncover: true\n---\n\n# 记录从无人机上学到的东西\n\n*UAV*: Unmanned Aerial Vehicle\n\n## 项目的目的\n\n分为森林救火和森林巡逻，我被分在森林巡逻部分。主要是让飞机按一定轨迹在操场上飞行，以z形路线飞过一个操场。森姐救火则是在上述基础上加上使用视觉识别找到一个红色的正方形。我在该小组中负责通信部分。\n\n## 数传通信\n\n主要的任务是将无人机的xyz及三个偏转角通过数传发到地面站，地面站方面会有同学根据数据进行3d绘图。\n\n一开始读代码思路不对，一心想着找gps的数据，于是找到了Sensor，通过将整个sensor的数据取出来，然后获取其中的数据。后来发现库里有个MeasureSystem，可以直接获取xyz及偏转角。于是改写为直接调取。\n\n获取数据后就是发送，发送是利用飞控的Uart与数传进行连接。库中提供了Uart_Send函数，接受一个数组和一个长度作为参数，但是该数组只接受字符，因此要将实际数据转为字符后再发送，思路是将 原始数据%10+‘0’ 从而得到其ascii码值，同时用switch来遍历xyz和三个偏转角。每6个数据作为一组，一组中的数据之间使用‘，’分割，不同组之间使用‘@’分割。期间对原数据进行处理时要记得将得到的某个数据进行数组反转（再看一眼上面对原始数据处理的思路），因为这个问题还出过bug……。\n\n再具体一点，原始数据都是double 或者 float类型，单位都为厘米。一开始我在将获取的数据传到中间的handler时，将其转为（int），然后再直接处理，后面我在转为（int）前，让原始数据的右值*PRESION，设定一个精度，精度取100，从而获得了0.1mm级别的精度。但后面发现这个精度的意义不大了，于是又改回了1。\n\n再记录一下硬件的问题：\n\n1. 电调插反了，折磨了搞硬件的兄弟一下午\n2. 图传始终没有图像，一直以为是电源线的问题，后面发现是插在电脑上的输入线没有插稳\n3. 飞到一半炸机了，排查半天发现是当时调试的太久，没有注意到电量。\n4. 几乎相同的坐标发送代码（除了版本问题外，对数据处理的方式相同）在A9上正常运行，在TI上发出的数据是乱码，改用发送固定值之后，电脑端收到了稳定的乱码。更换数传和数传连接线之后问题仍然存在。直到写下此文时依然未解决。\n","slug":"UAV","published":1,"updated":"2021-12-19T10:57:14.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxd4ztkt000bw8ul19ne6ugd","content":"<h1 id=\"记录从无人机上学到的东西\"><a href=\"#记录从无人机上学到的东西\" class=\"headerlink\" title=\"记录从无人机上学到的东西\"></a>记录从无人机上学到的东西</h1><p><em>UAV</em>: Unmanned Aerial Vehicle</p>\n<h2 id=\"项目的目的\"><a href=\"#项目的目的\" class=\"headerlink\" title=\"项目的目的\"></a>项目的目的</h2><p>分为森林救火和森林巡逻，我被分在森林巡逻部分。主要是让飞机按一定轨迹在操场上飞行，以z形路线飞过一个操场。森姐救火则是在上述基础上加上使用视觉识别找到一个红色的正方形。我在该小组中负责通信部分。</p>\n<h2 id=\"数传通信\"><a href=\"#数传通信\" class=\"headerlink\" title=\"数传通信\"></a>数传通信</h2><p>主要的任务是将无人机的xyz及三个偏转角通过数传发到地面站，地面站方面会有同学根据数据进行3d绘图。</p>\n<p>一开始读代码思路不对，一心想着找gps的数据，于是找到了Sensor，通过将整个sensor的数据取出来，然后获取其中的数据。后来发现库里有个MeasureSystem，可以直接获取xyz及偏转角。于是改写为直接调取。</p>\n<p>获取数据后就是发送，发送是利用飞控的Uart与数传进行连接。库中提供了Uart_Send函数，接受一个数组和一个长度作为参数，但是该数组只接受字符，因此要将实际数据转为字符后再发送，思路是将 原始数据%10+‘0’ 从而得到其ascii码值，同时用switch来遍历xyz和三个偏转角。每6个数据作为一组，一组中的数据之间使用‘，’分割，不同组之间使用‘@’分割。期间对原数据进行处理时要记得将得到的某个数据进行数组反转（再看一眼上面对原始数据处理的思路），因为这个问题还出过bug……。</p>\n<p>再具体一点，原始数据都是double 或者 float类型，单位都为厘米。一开始我在将获取的数据传到中间的handler时，将其转为（int），然后再直接处理，后面我在转为（int）前，让原始数据的右值*PRESION，设定一个精度，精度取100，从而获得了0.1mm级别的精度。但后面发现这个精度的意义不大了，于是又改回了1。</p>\n<p>再记录一下硬件的问题：</p>\n<ol>\n<li>电调插反了，折磨了搞硬件的兄弟一下午</li>\n<li>图传始终没有图像，一直以为是电源线的问题，后面发现是插在电脑上的输入线没有插稳</li>\n<li>飞到一半炸机了，排查半天发现是当时调试的太久，没有注意到电量。</li>\n<li>几乎相同的坐标发送代码（除了版本问题外，对数据处理的方式相同）在A9上正常运行，在TI上发出的数据是乱码，改用发送固定值之后，电脑端收到了稳定的乱码。更换数传和数传连接线之后问题仍然存在。直到写下此文时依然未解决。</li>\n</ol>\n","site":{"data":{"covers":[{"heleo":"_posts/hello-world.md"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"记录从无人机上学到的东西\"><a href=\"#记录从无人机上学到的东西\" class=\"headerlink\" title=\"记录从无人机上学到的东西\"></a>记录从无人机上学到的东西</h1><p><em>UAV</em>: Unmanned Aerial Vehicle</p>\n<h2 id=\"项目的目的\"><a href=\"#项目的目的\" class=\"headerlink\" title=\"项目的目的\"></a>项目的目的</h2><p>分为森林救火和森林巡逻，我被分在森林巡逻部分。主要是让飞机按一定轨迹在操场上飞行，以z形路线飞过一个操场。森姐救火则是在上述基础上加上使用视觉识别找到一个红色的正方形。我在该小组中负责通信部分。</p>\n<h2 id=\"数传通信\"><a href=\"#数传通信\" class=\"headerlink\" title=\"数传通信\"></a>数传通信</h2><p>主要的任务是将无人机的xyz及三个偏转角通过数传发到地面站，地面站方面会有同学根据数据进行3d绘图。</p>\n<p>一开始读代码思路不对，一心想着找gps的数据，于是找到了Sensor，通过将整个sensor的数据取出来，然后获取其中的数据。后来发现库里有个MeasureSystem，可以直接获取xyz及偏转角。于是改写为直接调取。</p>\n<p>获取数据后就是发送，发送是利用飞控的Uart与数传进行连接。库中提供了Uart_Send函数，接受一个数组和一个长度作为参数，但是该数组只接受字符，因此要将实际数据转为字符后再发送，思路是将 原始数据%10+‘0’ 从而得到其ascii码值，同时用switch来遍历xyz和三个偏转角。每6个数据作为一组，一组中的数据之间使用‘，’分割，不同组之间使用‘@’分割。期间对原数据进行处理时要记得将得到的某个数据进行数组反转（再看一眼上面对原始数据处理的思路），因为这个问题还出过bug……。</p>\n<p>再具体一点，原始数据都是double 或者 float类型，单位都为厘米。一开始我在将获取的数据传到中间的handler时，将其转为（int），然后再直接处理，后面我在转为（int）前，让原始数据的右值*PRESION，设定一个精度，精度取100，从而获得了0.1mm级别的精度。但后面发现这个精度的意义不大了，于是又改回了1。</p>\n<p>再记录一下硬件的问题：</p>\n<ol>\n<li>电调插反了，折磨了搞硬件的兄弟一下午</li>\n<li>图传始终没有图像，一直以为是电源线的问题，后面发现是插在电脑上的输入线没有插稳</li>\n<li>飞到一半炸机了，排查半天发现是当时调试的太久，没有注意到电量。</li>\n<li>几乎相同的坐标发送代码（除了版本问题外，对数据处理的方式相同）在A9上正常运行，在TI上发出的数据是乱码，改用发送固定值之后，电脑端收到了稳定的乱码。更换数传和数传连接线之后问题仍然存在。直到写下此文时依然未解决。</li>\n</ol>\n"},{"author":"kawhicurry","title":"修改2d球队的阵型","date":"2021-12-13T08:26:21.000Z","_content":"其实是很久之前写的了，现在拿过来发布一下\n\n# Formation after score.\n\n## Principle\n\nFormation files are saved in a separate folder with surfix .conf.\nIts form is like below:\n```\nFormation Static\n# move positions when playmode is BeforeKickOff or AfterGoal.\n1 Goalie     -49.0   0.0\n2 CenterBack -25.0  -7.0\n3 CenterBack -25.0   7.0\n4 SideBack   -25.0 -15.0\n5 SideBack   -25.0  15.0\n6 DefensiveHalf -20.0   0.0\n7 OffensiveHalf -10.0 -7.0\n8 OffensiveHalf -10.0  7.0\n9  SideForward  -5.0 -10.0\n10 SideForward -5.0  10.0\n11 CenterForward -2.0   0.0\n```\nThis is a static one,a dynamic one is like this:\n```\nFormation DelaunayTriangulation 2\nBegin Roles\n1 Goalie 0\n2 CenterBack -1\n3 CenterBack 2\n4 SideBack -1\n5 SideBack 4\n6 DefensiveHalf 0\n7 OffensiveHalf -1\n8 OffensiveHalf 7\n9 SideForward -1\n10 SideForward 9\n11 CenterForward 0\nEnd Roles\nBegin Samples 2 45\n----- 0 -----\nBall 0 0\n1 -50 0\n2 -13.63 -5.6\n3 -13.9 5.6\n4 -13.09 -16.13\n5 -13.01 14.51\n6 -11.18 -0.36\n7 -6.58 -8.2\n8 -7.57 8.29\n9 -1.26 -11.99\n10 -1.8 12.17\n11 11.72 0\n----- 1 -----\nBall -54.44 -20.73\n1 -50 0\n2 -47.41 -10.72\n3 -45.24 -5.14\n4 -50.02 -17.21\n5 -45.6 3.88\n6 -39.73 -9.8\n7 -40.83 -15.77\n8 -31.82 3.85\n9 -40.78 -29.47\n10 -27.69 21.98\n11 -14.9 -5.27\n```\nYou can figure out exact coordinate through a location picture in the user-manual.\n\nIn the `strategy.cpp` ,formation files was first read like this:\n```c++\nconst std::string Strategy::BEFORE_KICK_OFF_CONF = \"before-kick-off.conf\";\nconst std::string Strategy::NORMAL_FORMATION_CONF = \"normal-formation.conf\";\n```\n\nThen,a function named `read()` will check whether formation files is available:\n```c++\nbool\nStrategy::read( const std::string & formation_dir )\n{\n    static bool s_initialized = false;\n\n    if ( s_initialized )\n    {\n        std::cerr << __FILE__ << ' ' << __LINE__ << \": already initialized.\"\n                  << std::endl;\n        return false;\n    }\n    std::string configpath = formation_dir;\n    if ( ! configpath.empty()\n         && configpath[ configpath.length() - 1 ] != '/' )\n    {\n        configpath += '/';\n    }\n\n    // before kick off\n    M_before_kick_off_formation = readFormation( configpath + BEFORE_KICK_OFF_CONF );\n    if ( ! M_before_kick_off_formation )\n    {\n        std::cerr << \"Failed to read before_kick_off formation\" << std::endl;\n        return false;\n    }\n\n    //...\n\n    s_initialized = true;\n    return true;\n```\n\nAfter that,`getFormation()` will determine which formation to apply according to the worldmode.Mainly the `wm.gameMode().type()` and `wm.gameMode().side()`\n```c++\n    //\n    // opponent indirect free kick\n    //\n    if ( ( wm.gameMode().type() == GameMode::BackPass_\n           && wm.gameMode().side() == wm.ourSide() )\n         || ( wm.gameMode().type() == GameMode::IndFreeKick_\n              && wm.gameMode().side() == wm.theirSide() ) )\n    {\n        return M_indirect_freekick_opp_formation;\n    }\n```\n\n## Operation\n\n1. add formation file `celebrate-1-L.conf` and `celebrate-1-R.conf`\n```\nFormation Static\n# ---------------------------------------------------------\n# move positions when playmode is AfterGoal.\n1 Goalie     -50.0   0.0\n2 CenterBack -45.0  0.0\n3 CenterBack -40.0   0.0\n4 SideBack   -35.0  0.0\n5 SideBack   -30.0  0.0\n6 DefensiveHalf -25.0   0.0\n7 OffensiveHalf -20.0  0.0\n8 OffensiveHalf -15.0  0.0\n9  SideForward  -10.0  0.0\n10 SideForward -5.0  0.0\n11 CenterForward -1.0   0.0\n# ---------------------------------------------------------\n```\n\n2. add formation object in `strategy.cpp` and `strategy.h`\n```c++\n    //celebrate formation\n    static const std::string CELEBRATE_1_L_FORMATION_CONF;\n\n    //celebrate formation\n    rcsc::Formation::Ptr M_Celebrate_1_L_formation;\n```\n\n3. add logistic judge in functions\n```c++\n//in read()\n    M_Celebrate_1_L_formation = readFormation( configpath + CELEBRATE_1_L_FORMATION_CONF);\n    if ( ! M_indirect_freekick_our_formation )\n    {\n        std::cerr << \"Failed to read celebrate-1-L-formation\" << std::endl;\n        return false;\n    }\n//in getFormation()\n    if (wm.gameMode().type() == GameMode::AfterGoal_ && wm.gameMode().side() == wm.ourSide())\n    {\n        if (wm.time().stopped() <= 20)\n        {\n            if (wm.ourSide() == LEFT)\n                return M_Celebrate_1_L_formation;\n            else\n                return M_Celebrate_1_R_formation;\n        }\n        if (wm.time().stopped() <= 40)\n        {\n        }\n    }\n```\nYou can change your formation at most twice according to rules.So a empty if is left.\nNotice: use wm.time().stopped() to make sure formation get normally in time\n\n\n\n\n\n\n","source":"_posts/formation-md.md","raw":"---\nauthor: kawhicurry\ntitle: 修改2d球队的阵型\ncategories: robocup\ndate: 2021-12-13 16:26:21\ntags: apollo\n---\n其实是很久之前写的了，现在拿过来发布一下\n\n# Formation after score.\n\n## Principle\n\nFormation files are saved in a separate folder with surfix .conf.\nIts form is like below:\n```\nFormation Static\n# move positions when playmode is BeforeKickOff or AfterGoal.\n1 Goalie     -49.0   0.0\n2 CenterBack -25.0  -7.0\n3 CenterBack -25.0   7.0\n4 SideBack   -25.0 -15.0\n5 SideBack   -25.0  15.0\n6 DefensiveHalf -20.0   0.0\n7 OffensiveHalf -10.0 -7.0\n8 OffensiveHalf -10.0  7.0\n9  SideForward  -5.0 -10.0\n10 SideForward -5.0  10.0\n11 CenterForward -2.0   0.0\n```\nThis is a static one,a dynamic one is like this:\n```\nFormation DelaunayTriangulation 2\nBegin Roles\n1 Goalie 0\n2 CenterBack -1\n3 CenterBack 2\n4 SideBack -1\n5 SideBack 4\n6 DefensiveHalf 0\n7 OffensiveHalf -1\n8 OffensiveHalf 7\n9 SideForward -1\n10 SideForward 9\n11 CenterForward 0\nEnd Roles\nBegin Samples 2 45\n----- 0 -----\nBall 0 0\n1 -50 0\n2 -13.63 -5.6\n3 -13.9 5.6\n4 -13.09 -16.13\n5 -13.01 14.51\n6 -11.18 -0.36\n7 -6.58 -8.2\n8 -7.57 8.29\n9 -1.26 -11.99\n10 -1.8 12.17\n11 11.72 0\n----- 1 -----\nBall -54.44 -20.73\n1 -50 0\n2 -47.41 -10.72\n3 -45.24 -5.14\n4 -50.02 -17.21\n5 -45.6 3.88\n6 -39.73 -9.8\n7 -40.83 -15.77\n8 -31.82 3.85\n9 -40.78 -29.47\n10 -27.69 21.98\n11 -14.9 -5.27\n```\nYou can figure out exact coordinate through a location picture in the user-manual.\n\nIn the `strategy.cpp` ,formation files was first read like this:\n```c++\nconst std::string Strategy::BEFORE_KICK_OFF_CONF = \"before-kick-off.conf\";\nconst std::string Strategy::NORMAL_FORMATION_CONF = \"normal-formation.conf\";\n```\n\nThen,a function named `read()` will check whether formation files is available:\n```c++\nbool\nStrategy::read( const std::string & formation_dir )\n{\n    static bool s_initialized = false;\n\n    if ( s_initialized )\n    {\n        std::cerr << __FILE__ << ' ' << __LINE__ << \": already initialized.\"\n                  << std::endl;\n        return false;\n    }\n    std::string configpath = formation_dir;\n    if ( ! configpath.empty()\n         && configpath[ configpath.length() - 1 ] != '/' )\n    {\n        configpath += '/';\n    }\n\n    // before kick off\n    M_before_kick_off_formation = readFormation( configpath + BEFORE_KICK_OFF_CONF );\n    if ( ! M_before_kick_off_formation )\n    {\n        std::cerr << \"Failed to read before_kick_off formation\" << std::endl;\n        return false;\n    }\n\n    //...\n\n    s_initialized = true;\n    return true;\n```\n\nAfter that,`getFormation()` will determine which formation to apply according to the worldmode.Mainly the `wm.gameMode().type()` and `wm.gameMode().side()`\n```c++\n    //\n    // opponent indirect free kick\n    //\n    if ( ( wm.gameMode().type() == GameMode::BackPass_\n           && wm.gameMode().side() == wm.ourSide() )\n         || ( wm.gameMode().type() == GameMode::IndFreeKick_\n              && wm.gameMode().side() == wm.theirSide() ) )\n    {\n        return M_indirect_freekick_opp_formation;\n    }\n```\n\n## Operation\n\n1. add formation file `celebrate-1-L.conf` and `celebrate-1-R.conf`\n```\nFormation Static\n# ---------------------------------------------------------\n# move positions when playmode is AfterGoal.\n1 Goalie     -50.0   0.0\n2 CenterBack -45.0  0.0\n3 CenterBack -40.0   0.0\n4 SideBack   -35.0  0.0\n5 SideBack   -30.0  0.0\n6 DefensiveHalf -25.0   0.0\n7 OffensiveHalf -20.0  0.0\n8 OffensiveHalf -15.0  0.0\n9  SideForward  -10.0  0.0\n10 SideForward -5.0  0.0\n11 CenterForward -1.0   0.0\n# ---------------------------------------------------------\n```\n\n2. add formation object in `strategy.cpp` and `strategy.h`\n```c++\n    //celebrate formation\n    static const std::string CELEBRATE_1_L_FORMATION_CONF;\n\n    //celebrate formation\n    rcsc::Formation::Ptr M_Celebrate_1_L_formation;\n```\n\n3. add logistic judge in functions\n```c++\n//in read()\n    M_Celebrate_1_L_formation = readFormation( configpath + CELEBRATE_1_L_FORMATION_CONF);\n    if ( ! M_indirect_freekick_our_formation )\n    {\n        std::cerr << \"Failed to read celebrate-1-L-formation\" << std::endl;\n        return false;\n    }\n//in getFormation()\n    if (wm.gameMode().type() == GameMode::AfterGoal_ && wm.gameMode().side() == wm.ourSide())\n    {\n        if (wm.time().stopped() <= 20)\n        {\n            if (wm.ourSide() == LEFT)\n                return M_Celebrate_1_L_formation;\n            else\n                return M_Celebrate_1_R_formation;\n        }\n        if (wm.time().stopped() <= 40)\n        {\n        }\n    }\n```\nYou can change your formation at most twice according to rules.So a empty if is left.\nNotice: use wm.time().stopped() to make sure formation get normally in time\n\n\n\n\n\n\n","slug":"formation-md","published":1,"updated":"2021-12-13T08:27:29.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxd4ztkv000gw8ul51hyhbxw","content":"<p>其实是很久之前写的了，现在拿过来发布一下</p>\n<h1 id=\"Formation-after-score\"><a href=\"#Formation-after-score\" class=\"headerlink\" title=\"Formation after score.\"></a>Formation after score.</h1><h2 id=\"Principle\"><a href=\"#Principle\" class=\"headerlink\" title=\"Principle\"></a>Principle</h2><p>Formation files are saved in a separate folder with surfix .conf.<br>Its form is like below:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Formation Static</span><br><span class=\"line\"># move positions when playmode is BeforeKickOff or AfterGoal.</span><br><span class=\"line\">1 Goalie     -49.0   0.0</span><br><span class=\"line\">2 CenterBack -25.0  -7.0</span><br><span class=\"line\">3 CenterBack -25.0   7.0</span><br><span class=\"line\">4 SideBack   -25.0 -15.0</span><br><span class=\"line\">5 SideBack   -25.0  15.0</span><br><span class=\"line\">6 DefensiveHalf -20.0   0.0</span><br><span class=\"line\">7 OffensiveHalf -10.0 -7.0</span><br><span class=\"line\">8 OffensiveHalf -10.0  7.0</span><br><span class=\"line\">9  SideForward  -5.0 -10.0</span><br><span class=\"line\">10 SideForward -5.0  10.0</span><br><span class=\"line\">11 CenterForward -2.0   0.0</span><br></pre></td></tr></table></figure>\n<p>This is a static one,a dynamic one is like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Formation DelaunayTriangulation 2</span><br><span class=\"line\">Begin Roles</span><br><span class=\"line\">1 Goalie 0</span><br><span class=\"line\">2 CenterBack -1</span><br><span class=\"line\">3 CenterBack 2</span><br><span class=\"line\">4 SideBack -1</span><br><span class=\"line\">5 SideBack 4</span><br><span class=\"line\">6 DefensiveHalf 0</span><br><span class=\"line\">7 OffensiveHalf -1</span><br><span class=\"line\">8 OffensiveHalf 7</span><br><span class=\"line\">9 SideForward -1</span><br><span class=\"line\">10 SideForward 9</span><br><span class=\"line\">11 CenterForward 0</span><br><span class=\"line\">End Roles</span><br><span class=\"line\">Begin Samples 2 45</span><br><span class=\"line\">----- 0 -----</span><br><span class=\"line\">Ball 0 0</span><br><span class=\"line\">1 -50 0</span><br><span class=\"line\">2 -13.63 -5.6</span><br><span class=\"line\">3 -13.9 5.6</span><br><span class=\"line\">4 -13.09 -16.13</span><br><span class=\"line\">5 -13.01 14.51</span><br><span class=\"line\">6 -11.18 -0.36</span><br><span class=\"line\">7 -6.58 -8.2</span><br><span class=\"line\">8 -7.57 8.29</span><br><span class=\"line\">9 -1.26 -11.99</span><br><span class=\"line\">10 -1.8 12.17</span><br><span class=\"line\">11 11.72 0</span><br><span class=\"line\">----- 1 -----</span><br><span class=\"line\">Ball -54.44 -20.73</span><br><span class=\"line\">1 -50 0</span><br><span class=\"line\">2 -47.41 -10.72</span><br><span class=\"line\">3 -45.24 -5.14</span><br><span class=\"line\">4 -50.02 -17.21</span><br><span class=\"line\">5 -45.6 3.88</span><br><span class=\"line\">6 -39.73 -9.8</span><br><span class=\"line\">7 -40.83 -15.77</span><br><span class=\"line\">8 -31.82 3.85</span><br><span class=\"line\">9 -40.78 -29.47</span><br><span class=\"line\">10 -27.69 21.98</span><br><span class=\"line\">11 -14.9 -5.27</span><br></pre></td></tr></table></figure>\n<p>You can figure out exact coordinate through a location picture in the user-manual.</p>\n<p>In the <code>strategy.cpp</code> ,formation files was first read like this:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> std::string Strategy::BEFORE_KICK_OFF_CONF = <span class=\"string\">&quot;before-kick-off.conf&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> std::string Strategy::NORMAL_FORMATION_CONF = <span class=\"string\">&quot;normal-formation.conf&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Then,a function named <code>read()</code> will check whether formation files is available:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Strategy::read</span><span class=\"params\">( <span class=\"keyword\">const</span> std::string &amp; formation_dir )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> s_initialized = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( s_initialized )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; __FILE__ &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; __LINE__ &lt;&lt; <span class=\"string\">&quot;: already initialized.&quot;</span></span><br><span class=\"line\">                  &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::string configpath = formation_dir;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ! configpath.<span class=\"built_in\">empty</span>()</span><br><span class=\"line\">         &amp;&amp; configpath[ configpath.<span class=\"built_in\">length</span>() - <span class=\"number\">1</span> ] != <span class=\"string\">&#x27;/&#x27;</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        configpath += <span class=\"string\">&#x27;/&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// before kick off</span></span><br><span class=\"line\">    M_before_kick_off_formation = <span class=\"built_in\">readFormation</span>( configpath + BEFORE_KICK_OFF_CONF );</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ! M_before_kick_off_formation )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;Failed to read before_kick_off formation&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    s_initialized = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>After that,<code>getFormation()</code> will determine which formation to apply according to the worldmode.Mainly the <code>wm.gameMode().type()</code> and <code>wm.gameMode().side()</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// opponent indirect free kick</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( ( wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">type</span>() == GameMode::BackPass_</span><br><span class=\"line\">       &amp;&amp; wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">side</span>() == wm.<span class=\"built_in\">ourSide</span>() )</span><br><span class=\"line\">     || ( wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">type</span>() == GameMode::IndFreeKick_</span><br><span class=\"line\">          &amp;&amp; wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">side</span>() == wm.<span class=\"built_in\">theirSide</span>() ) )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> M_indirect_freekick_opp_formation;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Operation\"><a href=\"#Operation\" class=\"headerlink\" title=\"Operation\"></a>Operation</h2><ol>\n<li><p>add formation file <code>celebrate-1-L.conf</code> and <code>celebrate-1-R.conf</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Formation Static</span><br><span class=\"line\"># ---------------------------------------------------------</span><br><span class=\"line\"># move positions when playmode is AfterGoal.</span><br><span class=\"line\">1 Goalie     -50.0   0.0</span><br><span class=\"line\">2 CenterBack -45.0  0.0</span><br><span class=\"line\">3 CenterBack -40.0   0.0</span><br><span class=\"line\">4 SideBack   -35.0  0.0</span><br><span class=\"line\">5 SideBack   -30.0  0.0</span><br><span class=\"line\">6 DefensiveHalf -25.0   0.0</span><br><span class=\"line\">7 OffensiveHalf -20.0  0.0</span><br><span class=\"line\">8 OffensiveHalf -15.0  0.0</span><br><span class=\"line\">9  SideForward  -10.0  0.0</span><br><span class=\"line\">10 SideForward -5.0  0.0</span><br><span class=\"line\">11 CenterForward -1.0   0.0</span><br><span class=\"line\"># ---------------------------------------------------------</span><br></pre></td></tr></table></figure></li>\n<li><p>add formation object in <code>strategy.cpp</code> and <code>strategy.h</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//celebrate formation</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> std::string CELEBRATE_1_L_FORMATION_CONF;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//celebrate formation</span></span><br><span class=\"line\">rcsc::Formation::Ptr M_Celebrate_1_L_formation;</span><br></pre></td></tr></table></figure></li>\n<li><p>add logistic judge in functions</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//in read()</span></span><br><span class=\"line\">    M_Celebrate_1_L_formation = <span class=\"built_in\">readFormation</span>( configpath + CELEBRATE_1_L_FORMATION_CONF);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ! M_indirect_freekick_our_formation )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;Failed to read celebrate-1-L-formation&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//in getFormation()</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">type</span>() == GameMode::AfterGoal_ &amp;&amp; wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">side</span>() == wm.<span class=\"built_in\">ourSide</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wm.<span class=\"built_in\">time</span>().<span class=\"built_in\">stopped</span>() &lt;= <span class=\"number\">20</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wm.<span class=\"built_in\">ourSide</span>() == LEFT)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> M_Celebrate_1_L_formation;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> M_Celebrate_1_R_formation;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wm.<span class=\"built_in\">time</span>().<span class=\"built_in\">stopped</span>() &lt;= <span class=\"number\">40</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>You can change your formation at most twice according to rules.So a empty if is left.<br>Notice: use wm.time().stopped() to make sure formation get normally in time</p>\n</li>\n</ol>\n","site":{"data":{"covers":[{"heleo":"_posts/hello-world.md"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>其实是很久之前写的了，现在拿过来发布一下</p>\n<h1 id=\"Formation-after-score\"><a href=\"#Formation-after-score\" class=\"headerlink\" title=\"Formation after score.\"></a>Formation after score.</h1><h2 id=\"Principle\"><a href=\"#Principle\" class=\"headerlink\" title=\"Principle\"></a>Principle</h2><p>Formation files are saved in a separate folder with surfix .conf.<br>Its form is like below:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Formation Static</span><br><span class=\"line\"># move positions when playmode is BeforeKickOff or AfterGoal.</span><br><span class=\"line\">1 Goalie     -49.0   0.0</span><br><span class=\"line\">2 CenterBack -25.0  -7.0</span><br><span class=\"line\">3 CenterBack -25.0   7.0</span><br><span class=\"line\">4 SideBack   -25.0 -15.0</span><br><span class=\"line\">5 SideBack   -25.0  15.0</span><br><span class=\"line\">6 DefensiveHalf -20.0   0.0</span><br><span class=\"line\">7 OffensiveHalf -10.0 -7.0</span><br><span class=\"line\">8 OffensiveHalf -10.0  7.0</span><br><span class=\"line\">9  SideForward  -5.0 -10.0</span><br><span class=\"line\">10 SideForward -5.0  10.0</span><br><span class=\"line\">11 CenterForward -2.0   0.0</span><br></pre></td></tr></table></figure>\n<p>This is a static one,a dynamic one is like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Formation DelaunayTriangulation 2</span><br><span class=\"line\">Begin Roles</span><br><span class=\"line\">1 Goalie 0</span><br><span class=\"line\">2 CenterBack -1</span><br><span class=\"line\">3 CenterBack 2</span><br><span class=\"line\">4 SideBack -1</span><br><span class=\"line\">5 SideBack 4</span><br><span class=\"line\">6 DefensiveHalf 0</span><br><span class=\"line\">7 OffensiveHalf -1</span><br><span class=\"line\">8 OffensiveHalf 7</span><br><span class=\"line\">9 SideForward -1</span><br><span class=\"line\">10 SideForward 9</span><br><span class=\"line\">11 CenterForward 0</span><br><span class=\"line\">End Roles</span><br><span class=\"line\">Begin Samples 2 45</span><br><span class=\"line\">----- 0 -----</span><br><span class=\"line\">Ball 0 0</span><br><span class=\"line\">1 -50 0</span><br><span class=\"line\">2 -13.63 -5.6</span><br><span class=\"line\">3 -13.9 5.6</span><br><span class=\"line\">4 -13.09 -16.13</span><br><span class=\"line\">5 -13.01 14.51</span><br><span class=\"line\">6 -11.18 -0.36</span><br><span class=\"line\">7 -6.58 -8.2</span><br><span class=\"line\">8 -7.57 8.29</span><br><span class=\"line\">9 -1.26 -11.99</span><br><span class=\"line\">10 -1.8 12.17</span><br><span class=\"line\">11 11.72 0</span><br><span class=\"line\">----- 1 -----</span><br><span class=\"line\">Ball -54.44 -20.73</span><br><span class=\"line\">1 -50 0</span><br><span class=\"line\">2 -47.41 -10.72</span><br><span class=\"line\">3 -45.24 -5.14</span><br><span class=\"line\">4 -50.02 -17.21</span><br><span class=\"line\">5 -45.6 3.88</span><br><span class=\"line\">6 -39.73 -9.8</span><br><span class=\"line\">7 -40.83 -15.77</span><br><span class=\"line\">8 -31.82 3.85</span><br><span class=\"line\">9 -40.78 -29.47</span><br><span class=\"line\">10 -27.69 21.98</span><br><span class=\"line\">11 -14.9 -5.27</span><br></pre></td></tr></table></figure>\n<p>You can figure out exact coordinate through a location picture in the user-manual.</p>\n<p>In the <code>strategy.cpp</code> ,formation files was first read like this:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> std::string Strategy::BEFORE_KICK_OFF_CONF = <span class=\"string\">&quot;before-kick-off.conf&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> std::string Strategy::NORMAL_FORMATION_CONF = <span class=\"string\">&quot;normal-formation.conf&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Then,a function named <code>read()</code> will check whether formation files is available:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Strategy::read</span><span class=\"params\">( <span class=\"keyword\">const</span> std::string &amp; formation_dir )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> s_initialized = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( s_initialized )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; __FILE__ &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; __LINE__ &lt;&lt; <span class=\"string\">&quot;: already initialized.&quot;</span></span><br><span class=\"line\">                  &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    std::string configpath = formation_dir;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ! configpath.<span class=\"built_in\">empty</span>()</span><br><span class=\"line\">         &amp;&amp; configpath[ configpath.<span class=\"built_in\">length</span>() - <span class=\"number\">1</span> ] != <span class=\"string\">&#x27;/&#x27;</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        configpath += <span class=\"string\">&#x27;/&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// before kick off</span></span><br><span class=\"line\">    M_before_kick_off_formation = <span class=\"built_in\">readFormation</span>( configpath + BEFORE_KICK_OFF_CONF );</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ! M_before_kick_off_formation )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;Failed to read before_kick_off formation&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    s_initialized = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>After that,<code>getFormation()</code> will determine which formation to apply according to the worldmode.Mainly the <code>wm.gameMode().type()</code> and <code>wm.gameMode().side()</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// opponent indirect free kick</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( ( wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">type</span>() == GameMode::BackPass_</span><br><span class=\"line\">       &amp;&amp; wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">side</span>() == wm.<span class=\"built_in\">ourSide</span>() )</span><br><span class=\"line\">     || ( wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">type</span>() == GameMode::IndFreeKick_</span><br><span class=\"line\">          &amp;&amp; wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">side</span>() == wm.<span class=\"built_in\">theirSide</span>() ) )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> M_indirect_freekick_opp_formation;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Operation\"><a href=\"#Operation\" class=\"headerlink\" title=\"Operation\"></a>Operation</h2><ol>\n<li><p>add formation file <code>celebrate-1-L.conf</code> and <code>celebrate-1-R.conf</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Formation Static</span><br><span class=\"line\"># ---------------------------------------------------------</span><br><span class=\"line\"># move positions when playmode is AfterGoal.</span><br><span class=\"line\">1 Goalie     -50.0   0.0</span><br><span class=\"line\">2 CenterBack -45.0  0.0</span><br><span class=\"line\">3 CenterBack -40.0   0.0</span><br><span class=\"line\">4 SideBack   -35.0  0.0</span><br><span class=\"line\">5 SideBack   -30.0  0.0</span><br><span class=\"line\">6 DefensiveHalf -25.0   0.0</span><br><span class=\"line\">7 OffensiveHalf -20.0  0.0</span><br><span class=\"line\">8 OffensiveHalf -15.0  0.0</span><br><span class=\"line\">9  SideForward  -10.0  0.0</span><br><span class=\"line\">10 SideForward -5.0  0.0</span><br><span class=\"line\">11 CenterForward -1.0   0.0</span><br><span class=\"line\"># ---------------------------------------------------------</span><br></pre></td></tr></table></figure></li>\n<li><p>add formation object in <code>strategy.cpp</code> and <code>strategy.h</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//celebrate formation</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> std::string CELEBRATE_1_L_FORMATION_CONF;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//celebrate formation</span></span><br><span class=\"line\">rcsc::Formation::Ptr M_Celebrate_1_L_formation;</span><br></pre></td></tr></table></figure></li>\n<li><p>add logistic judge in functions</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//in read()</span></span><br><span class=\"line\">    M_Celebrate_1_L_formation = <span class=\"built_in\">readFormation</span>( configpath + CELEBRATE_1_L_FORMATION_CONF);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ! M_indirect_freekick_our_formation )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;Failed to read celebrate-1-L-formation&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//in getFormation()</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">type</span>() == GameMode::AfterGoal_ &amp;&amp; wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">side</span>() == wm.<span class=\"built_in\">ourSide</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wm.<span class=\"built_in\">time</span>().<span class=\"built_in\">stopped</span>() &lt;= <span class=\"number\">20</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wm.<span class=\"built_in\">ourSide</span>() == LEFT)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> M_Celebrate_1_L_formation;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> M_Celebrate_1_R_formation;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wm.<span class=\"built_in\">time</span>().<span class=\"built_in\">stopped</span>() &lt;= <span class=\"number\">40</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>You can change your formation at most twice according to rules.So a empty if is left.<br>Notice: use wm.time().stopped() to make sure formation get normally in time</p>\n</li>\n</ol>\n"},{"title":"Hello World","date":"2021-10-25T01:01:06.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2021-10-25 09:01:06\ncategories:\ntags:\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2021-10-27T12:14:15.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxd4ztkx000hw8ula5s12fal","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"covers":[{"heleo":"_posts/hello-world.md"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"author":"kawhicurry","title":"log-a-git-error","date":"2021-11-10T12:01:01.000Z","_content":"\nWhen I tried to clone a repo from self-built gitlab. I met a error like this：\n\n```bash\n$> git clone https://git.qingyou.ren/KawhiCurry/ansible.git  Cloning into 'ansible'...\nfatal: unable to access 'https://git.qingyou.ren/KawhiCurry/ansible.git/': Failed to connect to 127.0.0.1 port 7890: Connection refused\n```\n\nAnyway, 7890 refuse me. Finally, I got this: [cnblogs](https://www.cnblogs.com/lfri/p/15377383.html)\n\nSeems my proxy(or vpn?)ruin it. It leads my git somewhere strange.\n\nrecord the operation here.\n\n```bash\ngit config --global -l\ngit config --global -e\n//delete or comment on the lines about port\n```\n\n","source":"_posts/log-a-git-error.md","raw":"---\nauthor: kawhicurry\ntitle: log-a-git-error\ncategories: tool\ndate: 2021-11-10 20:01:01\ntags: git\n---\n\nWhen I tried to clone a repo from self-built gitlab. I met a error like this：\n\n```bash\n$> git clone https://git.qingyou.ren/KawhiCurry/ansible.git  Cloning into 'ansible'...\nfatal: unable to access 'https://git.qingyou.ren/KawhiCurry/ansible.git/': Failed to connect to 127.0.0.1 port 7890: Connection refused\n```\n\nAnyway, 7890 refuse me. Finally, I got this: [cnblogs](https://www.cnblogs.com/lfri/p/15377383.html)\n\nSeems my proxy(or vpn?)ruin it. It leads my git somewhere strange.\n\nrecord the operation here.\n\n```bash\ngit config --global -l\ngit config --global -e\n//delete or comment on the lines about port\n```\n\n","slug":"log-a-git-error","published":1,"updated":"2021-11-10T12:11:45.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxd4ztkz000kw8ulhr5q5n6g","content":"<p>When I tried to clone a repo from self-built gitlab. I met a error like this：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; git <span class=\"built_in\">clone</span> https://git.qingyou.ren/KawhiCurry/ansible.git  Cloning into <span class=\"string\">&#x27;ansible&#x27;</span>...</span><br><span class=\"line\">fatal: unable to access <span class=\"string\">&#x27;https://git.qingyou.ren/KawhiCurry/ansible.git/&#x27;</span>: Failed to connect to 127.0.0.1 port 7890: Connection refused</span><br></pre></td></tr></table></figure>\n\n<p>Anyway, 7890 refuse me. Finally, I got this: <a href=\"https://www.cnblogs.com/lfri/p/15377383.html\">cnblogs</a></p>\n<p>Seems my proxy(or vpn?)ruin it. It leads my git somewhere strange.</p>\n<p>record the operation here.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global -l</span><br><span class=\"line\">git config --global -e</span><br><span class=\"line\">//delete or comment on the lines about port</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"covers":[{"heleo":"_posts/hello-world.md"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>When I tried to clone a repo from self-built gitlab. I met a error like this：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; git <span class=\"built_in\">clone</span> https://git.qingyou.ren/KawhiCurry/ansible.git  Cloning into <span class=\"string\">&#x27;ansible&#x27;</span>...</span><br><span class=\"line\">fatal: unable to access <span class=\"string\">&#x27;https://git.qingyou.ren/KawhiCurry/ansible.git/&#x27;</span>: Failed to connect to 127.0.0.1 port 7890: Connection refused</span><br></pre></td></tr></table></figure>\n\n<p>Anyway, 7890 refuse me. Finally, I got this: <a href=\"https://www.cnblogs.com/lfri/p/15377383.html\">cnblogs</a></p>\n<p>Seems my proxy(or vpn?)ruin it. It leads my git somewhere strange.</p>\n<p>record the operation here.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global -l</span><br><span class=\"line\">git config --global -e</span><br><span class=\"line\">//delete or comment on the lines about port</span><br></pre></td></tr></table></figure>\n\n"},{"author":"kawhicurry","title":"log-a-rsync-mistake","date":"2021-12-03T08:16:26.000Z","_content":"\n# log a rsync mistake\n\nI want to sync some files from 2 directories `mirror1` and`mirror2`.So I run:\n\n```bash\nnohup rsync <src>/mirror1 ./tmp -a --delete &\nnohup rsync <src>/mirror2 ./tmp -a --delete &\n```\n\nthe argument `--delete` would delete all the file not exist in source directories. So only second command make effect.\n\nAvoid abusing of `--delete` when using `rsync`. \n","source":"_posts/log-a-rsync-mistake.md","raw":"---\nauthor: kawhicurry\ntitle: log-a-rsync-mistake\ncategories: linux\ndate: 2021-12-03 16:16:26\ntags: rsync\n---\n\n# log a rsync mistake\n\nI want to sync some files from 2 directories `mirror1` and`mirror2`.So I run:\n\n```bash\nnohup rsync <src>/mirror1 ./tmp -a --delete &\nnohup rsync <src>/mirror2 ./tmp -a --delete &\n```\n\nthe argument `--delete` would delete all the file not exist in source directories. So only second command make effect.\n\nAvoid abusing of `--delete` when using `rsync`. \n","slug":"log-a-rsync-mistake","published":1,"updated":"2021-12-03T08:25:01.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxd4ztl0000nw8ulglyt30k3","content":"<h1 id=\"log-a-rsync-mistake\"><a href=\"#log-a-rsync-mistake\" class=\"headerlink\" title=\"log a rsync mistake\"></a>log a rsync mistake</h1><p>I want to sync some files from 2 directories <code>mirror1</code> and<code>mirror2</code>.So I run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup rsync &lt;src&gt;/mirror1 ./tmp -a --delete &amp;</span><br><span class=\"line\">nohup rsync &lt;src&gt;/mirror2 ./tmp -a --delete &amp;</span><br></pre></td></tr></table></figure>\n\n<p>the argument <code>--delete</code> would delete all the file not exist in source directories. So only second command make effect.</p>\n<p>Avoid abusing of <code>--delete</code> when using <code>rsync</code>. </p>\n","site":{"data":{"covers":[{"heleo":"_posts/hello-world.md"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"log-a-rsync-mistake\"><a href=\"#log-a-rsync-mistake\" class=\"headerlink\" title=\"log a rsync mistake\"></a>log a rsync mistake</h1><p>I want to sync some files from 2 directories <code>mirror1</code> and<code>mirror2</code>.So I run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup rsync &lt;src&gt;/mirror1 ./tmp -a --delete &amp;</span><br><span class=\"line\">nohup rsync &lt;src&gt;/mirror2 ./tmp -a --delete &amp;</span><br></pre></td></tr></table></figure>\n\n<p>the argument <code>--delete</code> would delete all the file not exist in source directories. So only second command make effect.</p>\n<p>Avoid abusing of <code>--delete</code> when using <code>rsync</code>. </p>\n"},{"author":"kawhicurry","title":"给Apollo的面对对象课","date":"2021-11-21T11:21:13.000Z","cover":true,"_content":"\n# 课前提醒（给我自己的）\n\n1. 打开vscode，准备源码\n2. 准备好使用g++\n\n# 多文件编程\n\n## Why\n\n非结构化与结构化：`goto`满天飞的后果\n\n## How\n\n```cpp\n//fun.h\nvoid func();\n\n//fun.cpp\n#include \"fun.h\"\nvoid func(){\n\tstd::cout<<\"hello\"<<std::endl;//?\n}\n\n//main.cpp\n#include <stdio.h>\n#inlcude \"fun.h\"\nusing namespace std;\nint main(){\n    printf(\"hi\\n\");\n\tfunc();\n\treturn 0;\n}\n```\n\n**提问**：`iostream`头文件应该放在哪？\n\n```c++\n//fun.h\n#include <iostream>\n```\n\n**提问**：`main.cpp` 如何找到func()的实现？\n\nVS（IDE）的编译过程：\n\n- 预处理\n- 编译，生成中间可执行文件\n- **链接**\n- 生成最终可执行文件\n\n---\n\n演示：https://zhuanlan.zhihu.com/p/106781089\n\n---\n\n更进一步：Make\n\n**提问**：如果把上面的`stdio.h`改成`iostream`，会怎么样\n\n```c++\n//fun.h\n#ifndef _fun\n#define _fun\n\n#include <iostream>\n\n#endif\n```\n\n# 面对对象\n\n**提问**：计算机是用来干啥的？为何计算机今天能为我们带来如此多好处？一个词语，两个汉字。\n\n1. 面向过程：我让机器干啥就干啥\n2. 面向对象：以对象为中心，把问题分解成对象\n\n*举例*：卖书\n\n## C的对象\n\n```c\nstruct book{\n    char name[10];\n    char ISBN[20];\n    double price;\n}\n\ndouble getPrice(struct book* theBook){\n    return theBook->price;\n}\nvoid showPrice(struct book* theBook){\n    printf(\"%lf\",theBook->price);\n}\n```\n\n**提问**：考虑一另一把剑🗡\n\n```c\nstruct sword{\n    char name[10];\n    double price;\n}\ndouble getPrice(struct sword* theSword){\n    return theSword->price;\n}\nvoid showPrice(struct book* theSword){\n    printf(\"%lf\",theSword->price);\n}\n```\n\nC不允许同名函数，即使允许，你也不知道show了谁的price。如何解决这个问题？（其实可以同名，在后面的重载会讲到）\n\n把函数写在struct里面，让函数成为struct的“专属函数”。C不许我们这么做，但是C++可以\n\n```c++\nstruct Book{\n    char name[10];\n    char ISBN[20];\n    double price;\n    \n    double getPrice(){\n    \treturn price;\n\t}\n\tvoid showPrice(){\n    \tprintf(\"%lf\",price);\n\t}\n    //...\n};\n\nstruct Book theBook=/*...*/;\ntheBook.showPrice();\n```\n\n**提问**：考虑price的合理性，如何正确的为price赋值？（price>0)\n\n```c++\n//考虑这种用法\ntheBook.price=100;\n\nint setPrice(double value){\n    if(value<0){\n        return -1;\n    }else{\n        price=value;\n        return 0;\n    }\n}\n//还是没有解决问题，依然可以\ntheBook.price=100;\n```\n\n封装的必要性\n\n```c++\nclass Book{\nprivate:\n    char name[10];\n    char ISBN[20];\n    double price;\npublic:\n\tint setPrice(double value){\n    \tif(value<0){\n        \treturn -1;\n    \t}else{\n        \tprice=value;\n    \t}\n\t}\n    double getPrice(){\n    \treturn price;\n\t}\n\tvoid showPrice(){\n    \tprintf(\"%lf\",price);\n\t}\n    //...\n};\n\n//无法直接修改price，必须通过公共成员函数\n```\n\n## 构造函数\n\nC中的`struct`如何创建对象？\n\n```c\ntypedef struct{\n\tint num;\n}Book;\n\nBook b;\n```\n\n考虑 `int a=1`，我们能不能`Book b`？\n\n我们可以如何创建一个对象？我们需要Constructor，构造函数。\n\n```c++\nclass Book{\npublic:\n    Book(){}\n    //Book(double the_price):price(the_price){}\n    Book(double the_price){setPrice(the_price);}\n    Book(double the_price,char* the_name){\n        Book(the_price,the_name,\"0000\");\n    }\n    Book(double the_price=10.0,char* the_name=\"none\",char* ISBN){\n        setPrice(the_price);\n        memcpy(name,the_name,10);\n        memcpy(ISBN,the_ISBN,20);\n    }\n    \nprivate:\n    double price;\n    char name[10];\n    char ISBN[20];\n    //...\n};\n\nBook b0;\nBook b1(10);\nBook b2(10,\"Apollo\");\n```\n\n参考：\n\n1. 拷贝构造\n2. 移动构造\n3. 合成构造\n\n## 继承与多态\n\n**提问**：我希望有一个科幻书，科幻书有一个别人没有的成员：科幻程度(depth)。同时有一种传记，有一个独有的值来记录传记主人公的名字(person)。\n\n```c++\nclass Book{\npublic:\n    //...\nprivate:\n    double price;\n    char name[10];\n    char ISBN[20];\n    int depth;\n    char* person;\n    //...\n    \n    //...\n};\n```\n\n有公共属性，也有独有的属性(attribute)\n\n```c++\nclass Fiction:public Book{\npublic:\n    Fiction();\n    \n    int setPrice(double value){\n    \tif(value<10){\n        \treturn -1;\n    \t}else{\n        \tprice=value;\n    \t}\n\t}\nprivate:\n    //不用写，都继承过来了\n    //...\n};\nclass biography:public Book{\n  //现场要求写一个  \n};\n```\n\n继承的方式有三种：\n\n>当一个类派生自基类，该基类可以被继承为 **public、protected** 或 **private** 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。\n>\n>我们几乎不使用 **protected** 或 **private** 继承，通常使用 **public** 继承。当使用不同类型的继承时，遵循以下几个规则：\n>\n>- **公有继承（public）：**当一个类派生自**公有**基类时，基类的**公有**成员也是派生类的**公有**成员，基类的**保护**成员也是派生类的**保护**成员，基类的**私有**成员不能直接被派生类访问，但是可以通过调用基类的**公有**和**保护**成员来访问。\n>- **保护继承（protected）：** 当一个类派生自**保护**基类时，基类的**公有**和**保护**成员将成为派生类的**保护**成员。\n>- **私有继承（private）：**当一个类派生自**私有**基类时，基类的**公有**和**保护**成员将成为派生类的**私有**成员。\n\n现在，我希望所有书都是被分了类的（如果不知道怎么分，就分到“未知分类”里面去），我们现在不允许直接创建一个Book对象，必须要先从Book继承一个专门的分类，再创建该分类的对象。\n\n```c++\nclass Book{\npublic:\n    virtual Book();\n    virtual Book(double the_price);\n    virtual Book(double the_price);\n    \n    virtual int setPrice(double value);\n    \nprivate:\n    char name[10];\n    char ISBN[20];\n    double price;\n    //...\n};\n```\n\n`virtual`意味着必须由子类来实现这些函数。这叫纯虚函数，关于virtual，还有更多用法。\n\n## 重载\n\n`virtual`要求必须由子类来实现，这就是重载。重载允许同名，但必须接受不同参数。\n\n```c++\n#include <iostream>\nusing namespace std;\n\nvoid func(int a) { cout << \"1\" << endl; }\nvoid func(char b) { cout << \"2\" << endl; }\n\nint main() {\n  func(1);\n  func('a');\n}\n```\n\n**提问**：\n\n```c++\n//已经有了这个函数\nBook(double the_price,char* the_name){\n   setPrice(the_price);\n   memcpy(name,the_name,10);\n}\n//又有了这个\nBook(double the_price,char* the_ISBN){\n   setPrice(the_price);\n   memcpy(name,the_ISBN,10);\n}\n\nBook b3(10,\"Apollo\");\n//Apollo 会变成name还是ISBN？\n```\n\nC++编译器不允许这样的事情发生，会出现redefinition报错，编译器认为这两个是同一函数。因此，参数的类型应该有所区别。\n\n更进一步，考虑Book==Book\n\n```c++\nBook a(1,\"apollo\");\nBook b(10,\"apollo\");\n\n//a.equal(b);\nif(a==b){}\n\nclass Book{\npublic:\n    //...\n    bool operator==(const Book) {\n      if (this->name == Book::name)\n        return true;\n      else\n        return false;\n    }\n    \nprivate:\n    char name[10];\n    char ISBN[20];\n    double price;\n    //...\n};\n//写一个重载+，当两本书相同时，价格相加\n```\n\n## 析构函数\n\n一个对象创建完成后，也要销毁，我们应当定义它如何被销毁。\n\n## 两种风格的对象\n\n- 使这个对象像个“东西”，示例如上\n- 使这个对象像个“指针”，先看看内存管理\n\n# 内存管理\n\n**提问**：a+b中的内存是如何分配的？\n\n>**栈区（stack）：**指那些由编译器在需要的时候分配，不需要时自动清除的变量所在的储存区，如函数执行时，函数的形参以及函数内的局部变量分配在栈区，函数运行结束后，形参和局部变量去栈（自动释放）。栈内存分配运算内置与处理器的指令集中，效率高但是分配的内存空间有限。\n>\n>**堆区（heap）：**指哪些由程序员手动分配释放的储存区，如果程序员不释放这块内存，内存将一直被占用，直到程序运行结束由系统自动收回，c语言中使用malloc，free申请和释放空间。\n>\n>**静态储存区（static）：**全局变量和静态变量的储存是放在一块的，其中初始化的全局变量和静态变量在一个区域，这块空间当程序运行结束后由系统释放。\n>\n>**常量储存区（const）：**常量字符串就是储存在这里的，如“ABC”字符串就储存在常量区，储存在常量区的只读不可写。const修饰的全局变量也储存在常量区，const修饰的局部变量依然在栈上。\n>\n>**程序代码区：**存放源程序的二进制代码。\n\n**提问**：如何创建一个长度不定的数组\n\n错误示范：\n\n```c\nint main(void) {\n    int N = 0;\n\n    printf(\"请输入数组的大小\\n\");\n    scanf(\"%d\", &N);\n    int arr[N] = { 0 };\n}\n```\n\n正确示范：\n\n```c\nint main(void) {\n\n    int arr[1000] = { 0 };\n    int N = 0;\n    int i = 0;\n\n    printf(\"请输入数组的大小\\n\");\n    scanf(\"%d\", &N);\n\n    printf(\"请输入%d个数\\n\", N);\n    for (i = 0; i < N; i++)\n        scanf(\"%d\", &arr[i]);\n\n    return 0;\n}\n```\n\n## 手动内存管理\n\nC 使用malloc 分配内存和 free释放内存。\n\n```c\n#include<stdlib.h>\n\nint main(void) {\n\n    int i = 0;\n    int N = 0;\n    int* arr;\n\n    printf(\"请输入数组的大小\\n\");\n    scanf(\"%d\", &N);\n\n    arr = (int*)malloc(sizeof(int) * N);\n\n    printf(\"请输入%d个数\\n\", N);\n    for (i = 0; i < N; i++)\n        scanf(\"%d\", &arr[i]);\n\n    free(arr);\n    return 0;\n}\n```\n\nC++ 使用封装好的new 和delete\n\n```c++\nint main(void) {\n\n    int i = 0;\n    int N = 0;\n\n    printf(\"请输入数组的大小\\n\");\n    cin<<N;\n\n    int *arr = new int[N];\n\n    cin<<\"请输入%d个数\\n\"<<endl;\n    for (i = 0; i < N; i++)\n        cin<< arr[i]);\n\n    delete[] p;\n    return 0;\n}\n```\n\n **提问**：为什么不是delete p?\n\n## 内存泄漏\n\n画图\n\n*share_ptr* 的原理：对指针进行计数\n\n# 使用STL库\n\n## String\n\n- 创建string\n- string+\n- insert\n- substr\n\n## Vector\n\n- 创建vector\n- size\n- begin\n- end\n- resize\n\n## Algorithm\n\n- find\n- rotate\n- sort\n- min\n- max\n\n## Utility\n\n- swap\n- pari\n- tuple\n\n# 完整示例\n\n```c++\n//book.h\n#ifndef _book\n#define _book\n\n#include <string>\n#include \"show.hpp\"\n\nclass Book{\npublic:\n    Book(){init();};\n    //Book(double the_price):price(the_price){}\n    Book(double the_price);\n    Book(std::string the_name)=delete;\n    //Book(double the_price,std::string the_name);\n    Book(double the_price,std::string the_name,std::string ISBN);\n    \n    Book(Book);\n    \n    Book(Book b);\n    \n    int set_price();\n    int set_name();\n    int set_ISBN();\n    \n    friend void show_price(Book);\n    \nprivate:\n    double price;\n    std::string name;\n    std::string ISBN;\n    \n    int init(double the_price=0,std::string the_name=\"\",std::string ISBN=\"\");\n};\n#endif\n```\n\n```c++\n//book.cpp\n#include \"book.h\"\n\nBook::Book(double the_price){Book()}\n//Book::Book(double the_price=0,std::string the_name):Book(the_price,the_name,\"\"){}\nBook::Book(double the_price=0,std::string the_name=\"\",std::string the_ISBN=\"\"){\n    Book::init(the_price,the_name,the_ISBN);\n}\nBook::Book(Book the_book){}\n\nint Book::init(double the_price,std::string the_name,std::string the_ISBN){\n    return set_price(the_price) && set_name(the_name) && set_ISBN(the_ISBN);\n}\nint Book::set_price(double the_price){\n    if(the_price>=0){\n        this->price=the_price;\n        return 1;\n    }else{\n        return 0;\n    }\n}\n//set_name 和 set_ISBN 略\n```\n\n```c++\n//show.hpp\nvoid show_price(Book the_book){\n    std::cout<<the_book.price<<std::endl;\n}\n```\n\n```c++\n//main.cpp\n#include \"book.hpp\"\n\nint main(){\n    Book b;\n    b.set_price(10);\n    show_price(b);\n    Book bb(b);\n    //Book bb=b;\n    //Book bb{b};\n}\n```\n\n\n\n# Apollo2D\n\n//这里是Agent2d中的WorldModel","source":"_posts/oop-for-apollo.md","raw":"---\nauthor: kawhicurry\ntitle: 给Apollo的面对对象课\ncategories: uncategorized\ndate: 2021-11-21 19:21:13\ntags: cpp\ncover: true\n---\n\n# 课前提醒（给我自己的）\n\n1. 打开vscode，准备源码\n2. 准备好使用g++\n\n# 多文件编程\n\n## Why\n\n非结构化与结构化：`goto`满天飞的后果\n\n## How\n\n```cpp\n//fun.h\nvoid func();\n\n//fun.cpp\n#include \"fun.h\"\nvoid func(){\n\tstd::cout<<\"hello\"<<std::endl;//?\n}\n\n//main.cpp\n#include <stdio.h>\n#inlcude \"fun.h\"\nusing namespace std;\nint main(){\n    printf(\"hi\\n\");\n\tfunc();\n\treturn 0;\n}\n```\n\n**提问**：`iostream`头文件应该放在哪？\n\n```c++\n//fun.h\n#include <iostream>\n```\n\n**提问**：`main.cpp` 如何找到func()的实现？\n\nVS（IDE）的编译过程：\n\n- 预处理\n- 编译，生成中间可执行文件\n- **链接**\n- 生成最终可执行文件\n\n---\n\n演示：https://zhuanlan.zhihu.com/p/106781089\n\n---\n\n更进一步：Make\n\n**提问**：如果把上面的`stdio.h`改成`iostream`，会怎么样\n\n```c++\n//fun.h\n#ifndef _fun\n#define _fun\n\n#include <iostream>\n\n#endif\n```\n\n# 面对对象\n\n**提问**：计算机是用来干啥的？为何计算机今天能为我们带来如此多好处？一个词语，两个汉字。\n\n1. 面向过程：我让机器干啥就干啥\n2. 面向对象：以对象为中心，把问题分解成对象\n\n*举例*：卖书\n\n## C的对象\n\n```c\nstruct book{\n    char name[10];\n    char ISBN[20];\n    double price;\n}\n\ndouble getPrice(struct book* theBook){\n    return theBook->price;\n}\nvoid showPrice(struct book* theBook){\n    printf(\"%lf\",theBook->price);\n}\n```\n\n**提问**：考虑一另一把剑🗡\n\n```c\nstruct sword{\n    char name[10];\n    double price;\n}\ndouble getPrice(struct sword* theSword){\n    return theSword->price;\n}\nvoid showPrice(struct book* theSword){\n    printf(\"%lf\",theSword->price);\n}\n```\n\nC不允许同名函数，即使允许，你也不知道show了谁的price。如何解决这个问题？（其实可以同名，在后面的重载会讲到）\n\n把函数写在struct里面，让函数成为struct的“专属函数”。C不许我们这么做，但是C++可以\n\n```c++\nstruct Book{\n    char name[10];\n    char ISBN[20];\n    double price;\n    \n    double getPrice(){\n    \treturn price;\n\t}\n\tvoid showPrice(){\n    \tprintf(\"%lf\",price);\n\t}\n    //...\n};\n\nstruct Book theBook=/*...*/;\ntheBook.showPrice();\n```\n\n**提问**：考虑price的合理性，如何正确的为price赋值？（price>0)\n\n```c++\n//考虑这种用法\ntheBook.price=100;\n\nint setPrice(double value){\n    if(value<0){\n        return -1;\n    }else{\n        price=value;\n        return 0;\n    }\n}\n//还是没有解决问题，依然可以\ntheBook.price=100;\n```\n\n封装的必要性\n\n```c++\nclass Book{\nprivate:\n    char name[10];\n    char ISBN[20];\n    double price;\npublic:\n\tint setPrice(double value){\n    \tif(value<0){\n        \treturn -1;\n    \t}else{\n        \tprice=value;\n    \t}\n\t}\n    double getPrice(){\n    \treturn price;\n\t}\n\tvoid showPrice(){\n    \tprintf(\"%lf\",price);\n\t}\n    //...\n};\n\n//无法直接修改price，必须通过公共成员函数\n```\n\n## 构造函数\n\nC中的`struct`如何创建对象？\n\n```c\ntypedef struct{\n\tint num;\n}Book;\n\nBook b;\n```\n\n考虑 `int a=1`，我们能不能`Book b`？\n\n我们可以如何创建一个对象？我们需要Constructor，构造函数。\n\n```c++\nclass Book{\npublic:\n    Book(){}\n    //Book(double the_price):price(the_price){}\n    Book(double the_price){setPrice(the_price);}\n    Book(double the_price,char* the_name){\n        Book(the_price,the_name,\"0000\");\n    }\n    Book(double the_price=10.0,char* the_name=\"none\",char* ISBN){\n        setPrice(the_price);\n        memcpy(name,the_name,10);\n        memcpy(ISBN,the_ISBN,20);\n    }\n    \nprivate:\n    double price;\n    char name[10];\n    char ISBN[20];\n    //...\n};\n\nBook b0;\nBook b1(10);\nBook b2(10,\"Apollo\");\n```\n\n参考：\n\n1. 拷贝构造\n2. 移动构造\n3. 合成构造\n\n## 继承与多态\n\n**提问**：我希望有一个科幻书，科幻书有一个别人没有的成员：科幻程度(depth)。同时有一种传记，有一个独有的值来记录传记主人公的名字(person)。\n\n```c++\nclass Book{\npublic:\n    //...\nprivate:\n    double price;\n    char name[10];\n    char ISBN[20];\n    int depth;\n    char* person;\n    //...\n    \n    //...\n};\n```\n\n有公共属性，也有独有的属性(attribute)\n\n```c++\nclass Fiction:public Book{\npublic:\n    Fiction();\n    \n    int setPrice(double value){\n    \tif(value<10){\n        \treturn -1;\n    \t}else{\n        \tprice=value;\n    \t}\n\t}\nprivate:\n    //不用写，都继承过来了\n    //...\n};\nclass biography:public Book{\n  //现场要求写一个  \n};\n```\n\n继承的方式有三种：\n\n>当一个类派生自基类，该基类可以被继承为 **public、protected** 或 **private** 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。\n>\n>我们几乎不使用 **protected** 或 **private** 继承，通常使用 **public** 继承。当使用不同类型的继承时，遵循以下几个规则：\n>\n>- **公有继承（public）：**当一个类派生自**公有**基类时，基类的**公有**成员也是派生类的**公有**成员，基类的**保护**成员也是派生类的**保护**成员，基类的**私有**成员不能直接被派生类访问，但是可以通过调用基类的**公有**和**保护**成员来访问。\n>- **保护继承（protected）：** 当一个类派生自**保护**基类时，基类的**公有**和**保护**成员将成为派生类的**保护**成员。\n>- **私有继承（private）：**当一个类派生自**私有**基类时，基类的**公有**和**保护**成员将成为派生类的**私有**成员。\n\n现在，我希望所有书都是被分了类的（如果不知道怎么分，就分到“未知分类”里面去），我们现在不允许直接创建一个Book对象，必须要先从Book继承一个专门的分类，再创建该分类的对象。\n\n```c++\nclass Book{\npublic:\n    virtual Book();\n    virtual Book(double the_price);\n    virtual Book(double the_price);\n    \n    virtual int setPrice(double value);\n    \nprivate:\n    char name[10];\n    char ISBN[20];\n    double price;\n    //...\n};\n```\n\n`virtual`意味着必须由子类来实现这些函数。这叫纯虚函数，关于virtual，还有更多用法。\n\n## 重载\n\n`virtual`要求必须由子类来实现，这就是重载。重载允许同名，但必须接受不同参数。\n\n```c++\n#include <iostream>\nusing namespace std;\n\nvoid func(int a) { cout << \"1\" << endl; }\nvoid func(char b) { cout << \"2\" << endl; }\n\nint main() {\n  func(1);\n  func('a');\n}\n```\n\n**提问**：\n\n```c++\n//已经有了这个函数\nBook(double the_price,char* the_name){\n   setPrice(the_price);\n   memcpy(name,the_name,10);\n}\n//又有了这个\nBook(double the_price,char* the_ISBN){\n   setPrice(the_price);\n   memcpy(name,the_ISBN,10);\n}\n\nBook b3(10,\"Apollo\");\n//Apollo 会变成name还是ISBN？\n```\n\nC++编译器不允许这样的事情发生，会出现redefinition报错，编译器认为这两个是同一函数。因此，参数的类型应该有所区别。\n\n更进一步，考虑Book==Book\n\n```c++\nBook a(1,\"apollo\");\nBook b(10,\"apollo\");\n\n//a.equal(b);\nif(a==b){}\n\nclass Book{\npublic:\n    //...\n    bool operator==(const Book) {\n      if (this->name == Book::name)\n        return true;\n      else\n        return false;\n    }\n    \nprivate:\n    char name[10];\n    char ISBN[20];\n    double price;\n    //...\n};\n//写一个重载+，当两本书相同时，价格相加\n```\n\n## 析构函数\n\n一个对象创建完成后，也要销毁，我们应当定义它如何被销毁。\n\n## 两种风格的对象\n\n- 使这个对象像个“东西”，示例如上\n- 使这个对象像个“指针”，先看看内存管理\n\n# 内存管理\n\n**提问**：a+b中的内存是如何分配的？\n\n>**栈区（stack）：**指那些由编译器在需要的时候分配，不需要时自动清除的变量所在的储存区，如函数执行时，函数的形参以及函数内的局部变量分配在栈区，函数运行结束后，形参和局部变量去栈（自动释放）。栈内存分配运算内置与处理器的指令集中，效率高但是分配的内存空间有限。\n>\n>**堆区（heap）：**指哪些由程序员手动分配释放的储存区，如果程序员不释放这块内存，内存将一直被占用，直到程序运行结束由系统自动收回，c语言中使用malloc，free申请和释放空间。\n>\n>**静态储存区（static）：**全局变量和静态变量的储存是放在一块的，其中初始化的全局变量和静态变量在一个区域，这块空间当程序运行结束后由系统释放。\n>\n>**常量储存区（const）：**常量字符串就是储存在这里的，如“ABC”字符串就储存在常量区，储存在常量区的只读不可写。const修饰的全局变量也储存在常量区，const修饰的局部变量依然在栈上。\n>\n>**程序代码区：**存放源程序的二进制代码。\n\n**提问**：如何创建一个长度不定的数组\n\n错误示范：\n\n```c\nint main(void) {\n    int N = 0;\n\n    printf(\"请输入数组的大小\\n\");\n    scanf(\"%d\", &N);\n    int arr[N] = { 0 };\n}\n```\n\n正确示范：\n\n```c\nint main(void) {\n\n    int arr[1000] = { 0 };\n    int N = 0;\n    int i = 0;\n\n    printf(\"请输入数组的大小\\n\");\n    scanf(\"%d\", &N);\n\n    printf(\"请输入%d个数\\n\", N);\n    for (i = 0; i < N; i++)\n        scanf(\"%d\", &arr[i]);\n\n    return 0;\n}\n```\n\n## 手动内存管理\n\nC 使用malloc 分配内存和 free释放内存。\n\n```c\n#include<stdlib.h>\n\nint main(void) {\n\n    int i = 0;\n    int N = 0;\n    int* arr;\n\n    printf(\"请输入数组的大小\\n\");\n    scanf(\"%d\", &N);\n\n    arr = (int*)malloc(sizeof(int) * N);\n\n    printf(\"请输入%d个数\\n\", N);\n    for (i = 0; i < N; i++)\n        scanf(\"%d\", &arr[i]);\n\n    free(arr);\n    return 0;\n}\n```\n\nC++ 使用封装好的new 和delete\n\n```c++\nint main(void) {\n\n    int i = 0;\n    int N = 0;\n\n    printf(\"请输入数组的大小\\n\");\n    cin<<N;\n\n    int *arr = new int[N];\n\n    cin<<\"请输入%d个数\\n\"<<endl;\n    for (i = 0; i < N; i++)\n        cin<< arr[i]);\n\n    delete[] p;\n    return 0;\n}\n```\n\n **提问**：为什么不是delete p?\n\n## 内存泄漏\n\n画图\n\n*share_ptr* 的原理：对指针进行计数\n\n# 使用STL库\n\n## String\n\n- 创建string\n- string+\n- insert\n- substr\n\n## Vector\n\n- 创建vector\n- size\n- begin\n- end\n- resize\n\n## Algorithm\n\n- find\n- rotate\n- sort\n- min\n- max\n\n## Utility\n\n- swap\n- pari\n- tuple\n\n# 完整示例\n\n```c++\n//book.h\n#ifndef _book\n#define _book\n\n#include <string>\n#include \"show.hpp\"\n\nclass Book{\npublic:\n    Book(){init();};\n    //Book(double the_price):price(the_price){}\n    Book(double the_price);\n    Book(std::string the_name)=delete;\n    //Book(double the_price,std::string the_name);\n    Book(double the_price,std::string the_name,std::string ISBN);\n    \n    Book(Book);\n    \n    Book(Book b);\n    \n    int set_price();\n    int set_name();\n    int set_ISBN();\n    \n    friend void show_price(Book);\n    \nprivate:\n    double price;\n    std::string name;\n    std::string ISBN;\n    \n    int init(double the_price=0,std::string the_name=\"\",std::string ISBN=\"\");\n};\n#endif\n```\n\n```c++\n//book.cpp\n#include \"book.h\"\n\nBook::Book(double the_price){Book()}\n//Book::Book(double the_price=0,std::string the_name):Book(the_price,the_name,\"\"){}\nBook::Book(double the_price=0,std::string the_name=\"\",std::string the_ISBN=\"\"){\n    Book::init(the_price,the_name,the_ISBN);\n}\nBook::Book(Book the_book){}\n\nint Book::init(double the_price,std::string the_name,std::string the_ISBN){\n    return set_price(the_price) && set_name(the_name) && set_ISBN(the_ISBN);\n}\nint Book::set_price(double the_price){\n    if(the_price>=0){\n        this->price=the_price;\n        return 1;\n    }else{\n        return 0;\n    }\n}\n//set_name 和 set_ISBN 略\n```\n\n```c++\n//show.hpp\nvoid show_price(Book the_book){\n    std::cout<<the_book.price<<std::endl;\n}\n```\n\n```c++\n//main.cpp\n#include \"book.hpp\"\n\nint main(){\n    Book b;\n    b.set_price(10);\n    show_price(b);\n    Book bb(b);\n    //Book bb=b;\n    //Book bb{b};\n}\n```\n\n\n\n# Apollo2D\n\n//这里是Agent2d中的WorldModel","slug":"oop-for-apollo","published":1,"updated":"2021-12-19T09:49:41.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxd4ztl1000pw8ula65ogyqa","content":"<h1 id=\"课前提醒（给我自己的）\"><a href=\"#课前提醒（给我自己的）\" class=\"headerlink\" title=\"课前提醒（给我自己的）\"></a>课前提醒（给我自己的）</h1><ol>\n<li>打开vscode，准备源码</li>\n<li>准备好使用g++</li>\n</ol>\n<h1 id=\"多文件编程\"><a href=\"#多文件编程\" class=\"headerlink\" title=\"多文件编程\"></a>多文件编程</h1><h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><p>非结构化与结构化：<code>goto</code>满天飞的后果</p>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//fun.h</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//fun.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;fun.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tstd::cout&lt;&lt;<span class=\"string\">&quot;hello&quot;</span>&lt;&lt;std::endl;<span class=\"comment\">//?</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#inlcude <span class=\"meta-string\">&quot;fun.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hi\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">func</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>提问</strong>：<code>iostream</code>头文件应该放在哪？</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//fun.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>提问</strong>：<code>main.cpp</code> 如何找到func()的实现？</p>\n<p>VS（IDE）的编译过程：</p>\n<ul>\n<li>预处理</li>\n<li>编译，生成中间可执行文件</li>\n<li><strong>链接</strong></li>\n<li>生成最终可执行文件</li>\n</ul>\n<hr>\n<p>演示：<a href=\"https://zhuanlan.zhihu.com/p/106781089\">https://zhuanlan.zhihu.com/p/106781089</a></p>\n<hr>\n<p>更进一步：Make</p>\n<p><strong>提问</strong>：如果把上面的<code>stdio.h</code>改成<code>iostream</code>，会怎么样</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//fun.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _fun</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _fun</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"面对对象\"><a href=\"#面对对象\" class=\"headerlink\" title=\"面对对象\"></a>面对对象</h1><p><strong>提问</strong>：计算机是用来干啥的？为何计算机今天能为我们带来如此多好处？一个词语，两个汉字。</p>\n<ol>\n<li>面向过程：我让机器干啥就干啥</li>\n<li>面向对象：以对象为中心，把问题分解成对象</li>\n</ol>\n<p><em>举例</em>：卖书</p>\n<h2 id=\"C的对象\"><a href=\"#C的对象\" class=\"headerlink\" title=\"C的对象\"></a>C的对象</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">book</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">(struct book* theBook)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> theBook-&gt;price;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrice</span><span class=\"params\">(struct book* theBook)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lf&quot;</span>,theBook-&gt;price);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>提问</strong>：考虑一另一把剑🗡</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sword</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">(struct sword* theSword)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> theSword-&gt;price;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrice</span><span class=\"params\">(struct book* theSword)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lf&quot;</span>,theSword-&gt;price);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>C不允许同名函数，即使允许，你也不知道show了谁的price。如何解决这个问题？（其实可以同名，在后面的重载会讲到）</p>\n<p>把函数写在struct里面，让函数成为struct的“专属函数”。C不许我们这么做，但是C++可以</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> price;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrice</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lf&quot;</span>,price);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> <span class=\"title\">theBook</span>=</span><span class=\"comment\">/*...*/</span>;</span><br><span class=\"line\">theBook.<span class=\"built_in\">showPrice</span>();</span><br></pre></td></tr></table></figure>\n\n<p><strong>提问</strong>：考虑price的合理性，如何正确的为price赋值？（price&gt;0)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//考虑这种用法</span></span><br><span class=\"line\">theBook.price=<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> value)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(value&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        price=value;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//还是没有解决问题，依然可以</span></span><br><span class=\"line\">theBook.price=<span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n\n<p>封装的必要性</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> value)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(value&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    \t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        \tprice=value;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> price;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrice</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lf&quot;</span>,price);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//无法直接修改price，必须通过公共成员函数</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>C中的<code>struct</code>如何创建对象？</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num;</span><br><span class=\"line\">&#125;Book;</span><br><span class=\"line\"></span><br><span class=\"line\">Book b;</span><br></pre></td></tr></table></figure>\n\n<p>考虑 <code>int a=1</code>，我们能不能<code>Book b</code>？</p>\n<p>我们可以如何创建一个对象？我们需要Constructor，构造函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Book</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//Book(double the_price):price(the_price)&#123;&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price)&#123;<span class=\"built_in\">setPrice</span>(the_price);&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price,<span class=\"keyword\">char</span>* the_name)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Book</span>(the_price,the_name,<span class=\"string\">&quot;0000&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price=<span class=\"number\">10.0</span>,<span class=\"keyword\">char</span>* the_name=<span class=\"string\">&quot;none&quot;</span>,<span class=\"keyword\">char</span>* ISBN)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setPrice</span>(the_price);</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(name,the_name,<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(ISBN,the_ISBN,<span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Book b0;</span><br><span class=\"line\"><span class=\"function\">Book <span class=\"title\">b1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">Book <span class=\"title\">b2</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"string\">&quot;Apollo&quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>参考：</p>\n<ol>\n<li>拷贝构造</li>\n<li>移动构造</li>\n<li>合成构造</li>\n</ol>\n<h2 id=\"继承与多态\"><a href=\"#继承与多态\" class=\"headerlink\" title=\"继承与多态\"></a>继承与多态</h2><p><strong>提问</strong>：我希望有一个科幻书，科幻书有一个别人没有的成员：科幻程度(depth)。同时有一种传记，有一个独有的值来记录传记主人公的名字(person)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> depth;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* person;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>有公共属性，也有独有的属性(attribute)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fiction</span>:</span><span class=\"keyword\">public</span> Book&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Fiction</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> value)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(value&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    \t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        \tprice=value;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">//不用写，都继承过来了</span></span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">biography</span>:</span><span class=\"keyword\">public</span> Book&#123;</span><br><span class=\"line\">  <span class=\"comment\">//现场要求写一个  </span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>继承的方式有三种：</p>\n<blockquote>\n<p>当一个类派生自基类，该基类可以被继承为 <strong>public、protected</strong> 或 <strong>private</strong> 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。</p>\n<p>我们几乎不使用 <strong>protected</strong> 或 <strong>private</strong> 继承，通常使用 <strong>public</strong> 继承。当使用不同类型的继承时，遵循以下几个规则：</p>\n<ul>\n<li><strong>公有继承（public）：</strong>当一个类派生自<strong>公有</strong>基类时，基类的<strong>公有</strong>成员也是派生类的<strong>公有</strong>成员，基类的<strong>保护</strong>成员也是派生类的<strong>保护</strong>成员，基类的<strong>私有</strong>成员不能直接被派生类访问，但是可以通过调用基类的<strong>公有</strong>和<strong>保护</strong>成员来访问。</li>\n<li><strong>保护继承（protected）：</strong> 当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</li>\n<li><strong>私有继承（private）：</strong>当一个类派生自<strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>成员。</li>\n</ul>\n</blockquote>\n<p>现在，我希望所有书都是被分了类的（如果不知道怎么分，就分到“未知分类”里面去），我们现在不允许直接创建一个Book对象，必须要先从Book继承一个专门的分类，再创建该分类的对象。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"title\">Book</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"title\">Book</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"title\">Book</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> value)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>virtual</code>意味着必须由子类来实现这些函数。这叫纯虚函数，关于virtual，还有更多用法。</p>\n<h2 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h2><p><code>virtual</code>要求必须由子类来实现，这就是重载。重载允许同名，但必须接受不同参数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;1&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">char</span> b)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;2&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">func</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">func</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>提问</strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//已经有了这个函数</span></span><br><span class=\"line\"><span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price,<span class=\"keyword\">char</span>* the_name)&#123;</span><br><span class=\"line\">   <span class=\"built_in\">setPrice</span>(the_price);</span><br><span class=\"line\">   <span class=\"built_in\">memcpy</span>(name,the_name,<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//又有了这个</span></span><br><span class=\"line\"><span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price,<span class=\"keyword\">char</span>* the_ISBN)&#123;</span><br><span class=\"line\">   <span class=\"built_in\">setPrice</span>(the_price);</span><br><span class=\"line\">   <span class=\"built_in\">memcpy</span>(name,the_ISBN,<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Book <span class=\"title\">b3</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"string\">&quot;Apollo&quot;</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//Apollo 会变成name还是ISBN？</span></span><br></pre></td></tr></table></figure>\n\n<p>C++编译器不允许这样的事情发生，会出现redefinition报错，编译器认为这两个是同一函数。因此，参数的类型应该有所区别。</p>\n<p>更进一步，考虑Book==Book</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Book <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"string\">&quot;apollo&quot;</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">Book <span class=\"title\">b</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"string\">&quot;apollo&quot;</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//a.equal(b);</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a==b)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> Book) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;name == Book::name)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//写一个重载+，当两本书相同时，价格相加</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h2><p>一个对象创建完成后，也要销毁，我们应当定义它如何被销毁。</p>\n<h2 id=\"两种风格的对象\"><a href=\"#两种风格的对象\" class=\"headerlink\" title=\"两种风格的对象\"></a>两种风格的对象</h2><ul>\n<li>使这个对象像个“东西”，示例如上</li>\n<li>使这个对象像个“指针”，先看看内存管理</li>\n</ul>\n<h1 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h1><p><strong>提问</strong>：a+b中的内存是如何分配的？</p>\n<blockquote>\n<p><strong>栈区（stack）：</strong>指那些由编译器在需要的时候分配，不需要时自动清除的变量所在的储存区，如函数执行时，函数的形参以及函数内的局部变量分配在栈区，函数运行结束后，形参和局部变量去栈（自动释放）。栈内存分配运算内置与处理器的指令集中，效率高但是分配的内存空间有限。</p>\n<p><strong>堆区（heap）：</strong>指哪些由程序员手动分配释放的储存区，如果程序员不释放这块内存，内存将一直被占用，直到程序运行结束由系统自动收回，c语言中使用malloc，free申请和释放空间。</p>\n<p><strong>静态储存区（static）：</strong>全局变量和静态变量的储存是放在一块的，其中初始化的全局变量和静态变量在一个区域，这块空间当程序运行结束后由系统释放。</p>\n<p><strong>常量储存区（const）：</strong>常量字符串就是储存在这里的，如“ABC”字符串就储存在常量区，储存在常量区的只读不可写。const修饰的全局变量也储存在常量区，const修饰的局部变量依然在栈上。</p>\n<p><strong>程序代码区：</strong>存放源程序的二进制代码。</p>\n</blockquote>\n<p><strong>提问</strong>：如何创建一个长度不定的数组</p>\n<p>错误示范：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入数组的大小\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;N);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[N] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>正确示范：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[<span class=\"number\">1000</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入数组的大小\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;N);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入%d个数\\n&quot;</span>, N);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"手动内存管理\"><a href=\"#手动内存管理\" class=\"headerlink\" title=\"手动内存管理\"></a>手动内存管理</h2><p>C 使用malloc 分配内存和 free释放内存。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>* arr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入数组的大小\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;N);</span><br><span class=\"line\"></span><br><span class=\"line\">    arr = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * N);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入%d个数\\n&quot;</span>, N);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(arr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>C++ 使用封装好的new 和delete</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入数组的大小\\n&quot;</span>);</span><br><span class=\"line\">    cin&lt;&lt;N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\"></span><br><span class=\"line\">    cin&lt;&lt;<span class=\"string\">&quot;请输入%d个数\\n&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        cin&lt;&lt; arr[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <strong>提问</strong>：为什么不是delete p?</p>\n<h2 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h2><p>画图</p>\n<p><em>share_ptr</em> 的原理：对指针进行计数</p>\n<h1 id=\"使用STL库\"><a href=\"#使用STL库\" class=\"headerlink\" title=\"使用STL库\"></a>使用STL库</h1><h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><ul>\n<li>创建string</li>\n<li>string+</li>\n<li>insert</li>\n<li>substr</li>\n</ul>\n<h2 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h2><ul>\n<li>创建vector</li>\n<li>size</li>\n<li>begin</li>\n<li>end</li>\n<li>resize</li>\n</ul>\n<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><ul>\n<li>find</li>\n<li>rotate</li>\n<li>sort</li>\n<li>min</li>\n<li>max</li>\n</ul>\n<h2 id=\"Utility\"><a href=\"#Utility\" class=\"headerlink\" title=\"Utility\"></a>Utility</h2><ul>\n<li>swap</li>\n<li>pari</li>\n<li>tuple</li>\n</ul>\n<h1 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//book.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _book</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _book</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;show.hpp&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Book</span>()&#123;<span class=\"built_in\">init</span>();&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//Book(double the_price):price(the_price)&#123;&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price);</span><br><span class=\"line\">    <span class=\"built_in\">Book</span>(std::string the_name)=<span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    <span class=\"comment\">//Book(double the_price,std::string the_name);</span></span><br><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price,std::string the_name,std::string ISBN);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">Book</span>(Book);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">Book</span>(Book b);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">set_price</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">set_name</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">set_ISBN</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"keyword\">void</span> <span class=\"title\">show_price</span><span class=\"params\">(Book)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">    std::string name;</span><br><span class=\"line\">    std::string ISBN;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price=<span class=\"number\">0</span>,std::string the_name=<span class=\"string\">&quot;&quot;</span>,std::string ISBN=<span class=\"string\">&quot;&quot;</span>)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//book.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;book.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Book::<span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price)&#123;<span class=\"built_in\">Book</span>()&#125;</span><br><span class=\"line\"><span class=\"comment\">//Book::Book(double the_price=0,std::string the_name):Book(the_price,the_name,&quot;&quot;)&#123;&#125;</span></span><br><span class=\"line\">Book::<span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price=<span class=\"number\">0</span>,std::string the_name=<span class=\"string\">&quot;&quot;</span>,std::string the_ISBN=<span class=\"string\">&quot;&quot;</span>)&#123;</span><br><span class=\"line\">    Book::<span class=\"built_in\">init</span>(the_price,the_name,the_ISBN);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Book::<span class=\"built_in\">Book</span>(Book the_book)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Book::init</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price,std::string the_name,std::string the_ISBN)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">set_price</span>(the_price) &amp;&amp; <span class=\"built_in\">set_name</span>(the_name) &amp;&amp; <span class=\"built_in\">set_ISBN</span>(the_ISBN);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Book::set_price</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(the_price&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;price=the_price;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//set_name 和 set_ISBN 略</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//show.hpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show_price</span><span class=\"params\">(Book the_book)</span></span>&#123;</span><br><span class=\"line\">    std::cout&lt;&lt;the_book.price&lt;&lt;std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;book.hpp&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Book b;</span><br><span class=\"line\">    b.<span class=\"built_in\">set_price</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">show_price</span>(b);</span><br><span class=\"line\">    <span class=\"function\">Book <span class=\"title\">bb</span><span class=\"params\">(b)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//Book bb=b;</span></span><br><span class=\"line\">    <span class=\"comment\">//Book bb&#123;b&#125;;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Apollo2D\"><a href=\"#Apollo2D\" class=\"headerlink\" title=\"Apollo2D\"></a>Apollo2D</h1><p>//这里是Agent2d中的WorldModel</p>\n","site":{"data":{"covers":[{"heleo":"_posts/hello-world.md"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"课前提醒（给我自己的）\"><a href=\"#课前提醒（给我自己的）\" class=\"headerlink\" title=\"课前提醒（给我自己的）\"></a>课前提醒（给我自己的）</h1><ol>\n<li>打开vscode，准备源码</li>\n<li>准备好使用g++</li>\n</ol>\n<h1 id=\"多文件编程\"><a href=\"#多文件编程\" class=\"headerlink\" title=\"多文件编程\"></a>多文件编程</h1><h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><p>非结构化与结构化：<code>goto</code>满天飞的后果</p>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//fun.h</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//fun.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;fun.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tstd::cout&lt;&lt;<span class=\"string\">&quot;hello&quot;</span>&lt;&lt;std::endl;<span class=\"comment\">//?</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#inlcude <span class=\"meta-string\">&quot;fun.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hi\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">func</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>提问</strong>：<code>iostream</code>头文件应该放在哪？</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//fun.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>提问</strong>：<code>main.cpp</code> 如何找到func()的实现？</p>\n<p>VS（IDE）的编译过程：</p>\n<ul>\n<li>预处理</li>\n<li>编译，生成中间可执行文件</li>\n<li><strong>链接</strong></li>\n<li>生成最终可执行文件</li>\n</ul>\n<hr>\n<p>演示：<a href=\"https://zhuanlan.zhihu.com/p/106781089\">https://zhuanlan.zhihu.com/p/106781089</a></p>\n<hr>\n<p>更进一步：Make</p>\n<p><strong>提问</strong>：如果把上面的<code>stdio.h</code>改成<code>iostream</code>，会怎么样</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//fun.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _fun</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _fun</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"面对对象\"><a href=\"#面对对象\" class=\"headerlink\" title=\"面对对象\"></a>面对对象</h1><p><strong>提问</strong>：计算机是用来干啥的？为何计算机今天能为我们带来如此多好处？一个词语，两个汉字。</p>\n<ol>\n<li>面向过程：我让机器干啥就干啥</li>\n<li>面向对象：以对象为中心，把问题分解成对象</li>\n</ol>\n<p><em>举例</em>：卖书</p>\n<h2 id=\"C的对象\"><a href=\"#C的对象\" class=\"headerlink\" title=\"C的对象\"></a>C的对象</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">book</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">(struct book* theBook)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> theBook-&gt;price;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrice</span><span class=\"params\">(struct book* theBook)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lf&quot;</span>,theBook-&gt;price);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>提问</strong>：考虑一另一把剑🗡</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sword</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">(struct sword* theSword)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> theSword-&gt;price;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrice</span><span class=\"params\">(struct book* theSword)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lf&quot;</span>,theSword-&gt;price);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>C不允许同名函数，即使允许，你也不知道show了谁的price。如何解决这个问题？（其实可以同名，在后面的重载会讲到）</p>\n<p>把函数写在struct里面，让函数成为struct的“专属函数”。C不许我们这么做，但是C++可以</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> price;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrice</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lf&quot;</span>,price);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> <span class=\"title\">theBook</span>=</span><span class=\"comment\">/*...*/</span>;</span><br><span class=\"line\">theBook.<span class=\"built_in\">showPrice</span>();</span><br></pre></td></tr></table></figure>\n\n<p><strong>提问</strong>：考虑price的合理性，如何正确的为price赋值？（price&gt;0)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//考虑这种用法</span></span><br><span class=\"line\">theBook.price=<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> value)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(value&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        price=value;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//还是没有解决问题，依然可以</span></span><br><span class=\"line\">theBook.price=<span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n\n<p>封装的必要性</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> value)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(value&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    \t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        \tprice=value;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> price;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrice</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lf&quot;</span>,price);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//无法直接修改price，必须通过公共成员函数</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>C中的<code>struct</code>如何创建对象？</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num;</span><br><span class=\"line\">&#125;Book;</span><br><span class=\"line\"></span><br><span class=\"line\">Book b;</span><br></pre></td></tr></table></figure>\n\n<p>考虑 <code>int a=1</code>，我们能不能<code>Book b</code>？</p>\n<p>我们可以如何创建一个对象？我们需要Constructor，构造函数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Book</span>()&#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">//Book(double the_price):price(the_price)&#123;&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price)&#123;<span class=\"built_in\">setPrice</span>(the_price);&#125;</span><br><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price,<span class=\"keyword\">char</span>* the_name)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Book</span>(the_price,the_name,<span class=\"string\">&quot;0000&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price=<span class=\"number\">10.0</span>,<span class=\"keyword\">char</span>* the_name=<span class=\"string\">&quot;none&quot;</span>,<span class=\"keyword\">char</span>* ISBN)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setPrice</span>(the_price);</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(name,the_name,<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(ISBN,the_ISBN,<span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Book b0;</span><br><span class=\"line\"><span class=\"function\">Book <span class=\"title\">b1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">Book <span class=\"title\">b2</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"string\">&quot;Apollo&quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>参考：</p>\n<ol>\n<li>拷贝构造</li>\n<li>移动构造</li>\n<li>合成构造</li>\n</ol>\n<h2 id=\"继承与多态\"><a href=\"#继承与多态\" class=\"headerlink\" title=\"继承与多态\"></a>继承与多态</h2><p><strong>提问</strong>：我希望有一个科幻书，科幻书有一个别人没有的成员：科幻程度(depth)。同时有一种传记，有一个独有的值来记录传记主人公的名字(person)。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> depth;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* person;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>有公共属性，也有独有的属性(attribute)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fiction</span>:</span><span class=\"keyword\">public</span> Book&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Fiction</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> value)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(value&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    \t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        \tprice=value;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"comment\">//不用写，都继承过来了</span></span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">biography</span>:</span><span class=\"keyword\">public</span> Book&#123;</span><br><span class=\"line\">  <span class=\"comment\">//现场要求写一个  </span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>继承的方式有三种：</p>\n<blockquote>\n<p>当一个类派生自基类，该基类可以被继承为 <strong>public、protected</strong> 或 <strong>private</strong> 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。</p>\n<p>我们几乎不使用 <strong>protected</strong> 或 <strong>private</strong> 继承，通常使用 <strong>public</strong> 继承。当使用不同类型的继承时，遵循以下几个规则：</p>\n<ul>\n<li><strong>公有继承（public）：</strong>当一个类派生自<strong>公有</strong>基类时，基类的<strong>公有</strong>成员也是派生类的<strong>公有</strong>成员，基类的<strong>保护</strong>成员也是派生类的<strong>保护</strong>成员，基类的<strong>私有</strong>成员不能直接被派生类访问，但是可以通过调用基类的<strong>公有</strong>和<strong>保护</strong>成员来访问。</li>\n<li><strong>保护继承（protected）：</strong> 当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</li>\n<li><strong>私有继承（private）：</strong>当一个类派生自<strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>成员。</li>\n</ul>\n</blockquote>\n<p>现在，我希望所有书都是被分了类的（如果不知道怎么分，就分到“未知分类”里面去），我们现在不允许直接创建一个Book对象，必须要先从Book继承一个专门的分类，再创建该分类的对象。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"title\">Book</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"title\">Book</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"title\">Book</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> value)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>virtual</code>意味着必须由子类来实现这些函数。这叫纯虚函数，关于virtual，还有更多用法。</p>\n<h2 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h2><p><code>virtual</code>要求必须由子类来实现，这就是重载。重载允许同名，但必须接受不同参数。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;1&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">char</span> b)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;2&quot;</span> &lt;&lt; endl; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">func</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">func</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>提问</strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//已经有了这个函数</span></span><br><span class=\"line\"><span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price,<span class=\"keyword\">char</span>* the_name)&#123;</span><br><span class=\"line\">   <span class=\"built_in\">setPrice</span>(the_price);</span><br><span class=\"line\">   <span class=\"built_in\">memcpy</span>(name,the_name,<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//又有了这个</span></span><br><span class=\"line\"><span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price,<span class=\"keyword\">char</span>* the_ISBN)&#123;</span><br><span class=\"line\">   <span class=\"built_in\">setPrice</span>(the_price);</span><br><span class=\"line\">   <span class=\"built_in\">memcpy</span>(name,the_ISBN,<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Book <span class=\"title\">b3</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"string\">&quot;Apollo&quot;</span>)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//Apollo 会变成name还是ISBN？</span></span><br></pre></td></tr></table></figure>\n\n<p>C++编译器不允许这样的事情发生，会出现redefinition报错，编译器认为这两个是同一函数。因此，参数的类型应该有所区别。</p>\n<p>更进一步，考虑Book==Book</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Book <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"string\">&quot;apollo&quot;</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">Book <span class=\"title\">b</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"string\">&quot;apollo&quot;</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//a.equal(b);</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a==b)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> Book) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;name == Book::name)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//写一个重载+，当两本书相同时，价格相加</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h2><p>一个对象创建完成后，也要销毁，我们应当定义它如何被销毁。</p>\n<h2 id=\"两种风格的对象\"><a href=\"#两种风格的对象\" class=\"headerlink\" title=\"两种风格的对象\"></a>两种风格的对象</h2><ul>\n<li>使这个对象像个“东西”，示例如上</li>\n<li>使这个对象像个“指针”，先看看内存管理</li>\n</ul>\n<h1 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h1><p><strong>提问</strong>：a+b中的内存是如何分配的？</p>\n<blockquote>\n<p><strong>栈区（stack）：</strong>指那些由编译器在需要的时候分配，不需要时自动清除的变量所在的储存区，如函数执行时，函数的形参以及函数内的局部变量分配在栈区，函数运行结束后，形参和局部变量去栈（自动释放）。栈内存分配运算内置与处理器的指令集中，效率高但是分配的内存空间有限。</p>\n<p><strong>堆区（heap）：</strong>指哪些由程序员手动分配释放的储存区，如果程序员不释放这块内存，内存将一直被占用，直到程序运行结束由系统自动收回，c语言中使用malloc，free申请和释放空间。</p>\n<p><strong>静态储存区（static）：</strong>全局变量和静态变量的储存是放在一块的，其中初始化的全局变量和静态变量在一个区域，这块空间当程序运行结束后由系统释放。</p>\n<p><strong>常量储存区（const）：</strong>常量字符串就是储存在这里的，如“ABC”字符串就储存在常量区，储存在常量区的只读不可写。const修饰的全局变量也储存在常量区，const修饰的局部变量依然在栈上。</p>\n<p><strong>程序代码区：</strong>存放源程序的二进制代码。</p>\n</blockquote>\n<p><strong>提问</strong>：如何创建一个长度不定的数组</p>\n<p>错误示范：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入数组的大小\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;N);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[N] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>正确示范：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[<span class=\"number\">1000</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入数组的大小\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;N);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入%d个数\\n&quot;</span>, N);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"手动内存管理\"><a href=\"#手动内存管理\" class=\"headerlink\" title=\"手动内存管理\"></a>手动内存管理</h2><p>C 使用malloc 分配内存和 free释放内存。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>* arr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入数组的大小\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;N);</span><br><span class=\"line\"></span><br><span class=\"line\">    arr = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * N);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入%d个数\\n&quot;</span>, N);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(arr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>C++ 使用封装好的new 和delete</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入数组的大小\\n&quot;</span>);</span><br><span class=\"line\">    cin&lt;&lt;N;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br><span class=\"line\"></span><br><span class=\"line\">    cin&lt;&lt;<span class=\"string\">&quot;请输入%d个数\\n&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">        cin&lt;&lt; arr[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <strong>提问</strong>：为什么不是delete p?</p>\n<h2 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h2><p>画图</p>\n<p><em>share_ptr</em> 的原理：对指针进行计数</p>\n<h1 id=\"使用STL库\"><a href=\"#使用STL库\" class=\"headerlink\" title=\"使用STL库\"></a>使用STL库</h1><h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><ul>\n<li>创建string</li>\n<li>string+</li>\n<li>insert</li>\n<li>substr</li>\n</ul>\n<h2 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h2><ul>\n<li>创建vector</li>\n<li>size</li>\n<li>begin</li>\n<li>end</li>\n<li>resize</li>\n</ul>\n<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><ul>\n<li>find</li>\n<li>rotate</li>\n<li>sort</li>\n<li>min</li>\n<li>max</li>\n</ul>\n<h2 id=\"Utility\"><a href=\"#Utility\" class=\"headerlink\" title=\"Utility\"></a>Utility</h2><ul>\n<li>swap</li>\n<li>pari</li>\n<li>tuple</li>\n</ul>\n<h1 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//book.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _book</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _book</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;show.hpp&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">Book</span>()&#123;<span class=\"built_in\">init</span>();&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//Book(double the_price):price(the_price)&#123;&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price);</span><br><span class=\"line\">    <span class=\"built_in\">Book</span>(std::string the_name)=<span class=\"keyword\">delete</span>;</span><br><span class=\"line\">    <span class=\"comment\">//Book(double the_price,std::string the_name);</span></span><br><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price,std::string the_name,std::string ISBN);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">Book</span>(Book);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">Book</span>(Book b);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">set_price</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">set_name</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">set_ISBN</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"keyword\">void</span> <span class=\"title\">show_price</span><span class=\"params\">(Book)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br><span class=\"line\">    std::string name;</span><br><span class=\"line\">    std::string ISBN;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price=<span class=\"number\">0</span>,std::string the_name=<span class=\"string\">&quot;&quot;</span>,std::string ISBN=<span class=\"string\">&quot;&quot;</span>)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//book.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;book.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Book::<span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price)&#123;<span class=\"built_in\">Book</span>()&#125;</span><br><span class=\"line\"><span class=\"comment\">//Book::Book(double the_price=0,std::string the_name):Book(the_price,the_name,&quot;&quot;)&#123;&#125;</span></span><br><span class=\"line\">Book::<span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price=<span class=\"number\">0</span>,std::string the_name=<span class=\"string\">&quot;&quot;</span>,std::string the_ISBN=<span class=\"string\">&quot;&quot;</span>)&#123;</span><br><span class=\"line\">    Book::<span class=\"built_in\">init</span>(the_price,the_name,the_ISBN);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Book::<span class=\"built_in\">Book</span>(Book the_book)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Book::init</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price,std::string the_name,std::string the_ISBN)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">set_price</span>(the_price) &amp;&amp; <span class=\"built_in\">set_name</span>(the_name) &amp;&amp; <span class=\"built_in\">set_ISBN</span>(the_ISBN);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Book::set_price</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(the_price&gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;price=the_price;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//set_name 和 set_ISBN 略</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//show.hpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show_price</span><span class=\"params\">(Book the_book)</span></span>&#123;</span><br><span class=\"line\">    std::cout&lt;&lt;the_book.price&lt;&lt;std::endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;book.hpp&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Book b;</span><br><span class=\"line\">    b.<span class=\"built_in\">set_price</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"built_in\">show_price</span>(b);</span><br><span class=\"line\">    <span class=\"function\">Book <span class=\"title\">bb</span><span class=\"params\">(b)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//Book bb=b;</span></span><br><span class=\"line\">    <span class=\"comment\">//Book bb&#123;b&#125;;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Apollo2D\"><a href=\"#Apollo2D\" class=\"headerlink\" title=\"Apollo2D\"></a>Apollo2D</h1><p>//这里是Agent2d中的WorldModel</p>\n"},{"author":"kawhicurry","title":"可以用来阅读源码的工具","date":"2021-12-15T07:55:21.000Z","_content":"\n今天突然想看看nginx的源码，于是随手下了一份，发现写的挺清楚的。不过看的时候还是有不少麻烦事，比如看着看着就记不得之前看到哪了。之前看robocup2d的代码也是这个问题，这里记录了一下这几天为了看源码找的工具。\n\n## Source Insight\n\n这个说是老牌IDE了，据说有很多好的功能，但是因为\n\n- 要钱\n- 古老的UI\n- 看起来很复杂\n\n所以就没用它了\n\n## Source trail\n\n就是因为它我才知道原来有专门看源码用的软件\n\n这个软件提供了\n\n- 对于各种结构（文件，类）的图形化展示\n- 对于各种component间相互作用的展示\n- 支持图形化和源码相互对照的功能\n\n但是也有这些缺点\n\n- 程序流程不够清晰（可能这点本来就是给人看的）\n- 对于宏的处理不够好，不能做到“把宏当变量”（也可能是我不会？）\n- 程序必须要能完全编译才能生成图形展示。\n\n上面这些都是看robocup的代码时候的感想，这个工程直接使用了makefile。而软件可能对cmake、vs、qt的工程更友好一些。\n\n## VScode\n\n最后还是拿vscode看了起来，goto来goto去还是很爽的。不过为了能更爽的看代码，搜了下插件\n\n### insight\n\n一个快捷搜索用的小插件，可以在左侧快速搜索勾选的word，但是只支持诸如google、stack overflow此类的网站（其实挺好的，但是我不是很方便。。。）\n\n我考虑考虑学学typescript帮忙更新下这个插件哈。感觉不难（\n\n### codetour\n\n好东西了属于是。可以按顺序记录每次看的内容并生成一个.tour文件（本质上是json），这玩意可以很轻松的记录我看某个东西的流程，并且支持修改我看的内容。比如我看的时候走错了地方，我还能倒回去）。更进一步，这个工具可以用来记录决策树。\n\n\n\n比起工具，还是更加注重代码本身吧，毕竟目的是“学习源码的精髓”而不是“学几个工具”。","source":"_posts/可以用来阅读源码的工具.md","raw":"---\nauthor: kawhicurry\ntitle: 可以用来阅读源码的工具\ncategories: tools\ndate: 2021-12-15 15:55:21\ntags:\n---\n\n今天突然想看看nginx的源码，于是随手下了一份，发现写的挺清楚的。不过看的时候还是有不少麻烦事，比如看着看着就记不得之前看到哪了。之前看robocup2d的代码也是这个问题，这里记录了一下这几天为了看源码找的工具。\n\n## Source Insight\n\n这个说是老牌IDE了，据说有很多好的功能，但是因为\n\n- 要钱\n- 古老的UI\n- 看起来很复杂\n\n所以就没用它了\n\n## Source trail\n\n就是因为它我才知道原来有专门看源码用的软件\n\n这个软件提供了\n\n- 对于各种结构（文件，类）的图形化展示\n- 对于各种component间相互作用的展示\n- 支持图形化和源码相互对照的功能\n\n但是也有这些缺点\n\n- 程序流程不够清晰（可能这点本来就是给人看的）\n- 对于宏的处理不够好，不能做到“把宏当变量”（也可能是我不会？）\n- 程序必须要能完全编译才能生成图形展示。\n\n上面这些都是看robocup的代码时候的感想，这个工程直接使用了makefile。而软件可能对cmake、vs、qt的工程更友好一些。\n\n## VScode\n\n最后还是拿vscode看了起来，goto来goto去还是很爽的。不过为了能更爽的看代码，搜了下插件\n\n### insight\n\n一个快捷搜索用的小插件，可以在左侧快速搜索勾选的word，但是只支持诸如google、stack overflow此类的网站（其实挺好的，但是我不是很方便。。。）\n\n我考虑考虑学学typescript帮忙更新下这个插件哈。感觉不难（\n\n### codetour\n\n好东西了属于是。可以按顺序记录每次看的内容并生成一个.tour文件（本质上是json），这玩意可以很轻松的记录我看某个东西的流程，并且支持修改我看的内容。比如我看的时候走错了地方，我还能倒回去）。更进一步，这个工具可以用来记录决策树。\n\n\n\n比起工具，还是更加注重代码本身吧，毕竟目的是“学习源码的精髓”而不是“学几个工具”。","slug":"可以用来阅读源码的工具","published":1,"updated":"2021-12-15T08:19:21.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxd4ztl3000tw8ulh3ju43x3","content":"<p>今天突然想看看nginx的源码，于是随手下了一份，发现写的挺清楚的。不过看的时候还是有不少麻烦事，比如看着看着就记不得之前看到哪了。之前看robocup2d的代码也是这个问题，这里记录了一下这几天为了看源码找的工具。</p>\n<h2 id=\"Source-Insight\"><a href=\"#Source-Insight\" class=\"headerlink\" title=\"Source Insight\"></a>Source Insight</h2><p>这个说是老牌IDE了，据说有很多好的功能，但是因为</p>\n<ul>\n<li>要钱</li>\n<li>古老的UI</li>\n<li>看起来很复杂</li>\n</ul>\n<p>所以就没用它了</p>\n<h2 id=\"Source-trail\"><a href=\"#Source-trail\" class=\"headerlink\" title=\"Source trail\"></a>Source trail</h2><p>就是因为它我才知道原来有专门看源码用的软件</p>\n<p>这个软件提供了</p>\n<ul>\n<li>对于各种结构（文件，类）的图形化展示</li>\n<li>对于各种component间相互作用的展示</li>\n<li>支持图形化和源码相互对照的功能</li>\n</ul>\n<p>但是也有这些缺点</p>\n<ul>\n<li>程序流程不够清晰（可能这点本来就是给人看的）</li>\n<li>对于宏的处理不够好，不能做到“把宏当变量”（也可能是我不会？）</li>\n<li>程序必须要能完全编译才能生成图形展示。</li>\n</ul>\n<p>上面这些都是看robocup的代码时候的感想，这个工程直接使用了makefile。而软件可能对cmake、vs、qt的工程更友好一些。</p>\n<h2 id=\"VScode\"><a href=\"#VScode\" class=\"headerlink\" title=\"VScode\"></a>VScode</h2><p>最后还是拿vscode看了起来，goto来goto去还是很爽的。不过为了能更爽的看代码，搜了下插件</p>\n<h3 id=\"insight\"><a href=\"#insight\" class=\"headerlink\" title=\"insight\"></a>insight</h3><p>一个快捷搜索用的小插件，可以在左侧快速搜索勾选的word，但是只支持诸如google、stack overflow此类的网站（其实挺好的，但是我不是很方便。。。）</p>\n<p>我考虑考虑学学typescript帮忙更新下这个插件哈。感觉不难（</p>\n<h3 id=\"codetour\"><a href=\"#codetour\" class=\"headerlink\" title=\"codetour\"></a>codetour</h3><p>好东西了属于是。可以按顺序记录每次看的内容并生成一个.tour文件（本质上是json），这玩意可以很轻松的记录我看某个东西的流程，并且支持修改我看的内容。比如我看的时候走错了地方，我还能倒回去）。更进一步，这个工具可以用来记录决策树。</p>\n<p>比起工具，还是更加注重代码本身吧，毕竟目的是“学习源码的精髓”而不是“学几个工具”。</p>\n","site":{"data":{"covers":[{"heleo":"_posts/hello-world.md"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>今天突然想看看nginx的源码，于是随手下了一份，发现写的挺清楚的。不过看的时候还是有不少麻烦事，比如看着看着就记不得之前看到哪了。之前看robocup2d的代码也是这个问题，这里记录了一下这几天为了看源码找的工具。</p>\n<h2 id=\"Source-Insight\"><a href=\"#Source-Insight\" class=\"headerlink\" title=\"Source Insight\"></a>Source Insight</h2><p>这个说是老牌IDE了，据说有很多好的功能，但是因为</p>\n<ul>\n<li>要钱</li>\n<li>古老的UI</li>\n<li>看起来很复杂</li>\n</ul>\n<p>所以就没用它了</p>\n<h2 id=\"Source-trail\"><a href=\"#Source-trail\" class=\"headerlink\" title=\"Source trail\"></a>Source trail</h2><p>就是因为它我才知道原来有专门看源码用的软件</p>\n<p>这个软件提供了</p>\n<ul>\n<li>对于各种结构（文件，类）的图形化展示</li>\n<li>对于各种component间相互作用的展示</li>\n<li>支持图形化和源码相互对照的功能</li>\n</ul>\n<p>但是也有这些缺点</p>\n<ul>\n<li>程序流程不够清晰（可能这点本来就是给人看的）</li>\n<li>对于宏的处理不够好，不能做到“把宏当变量”（也可能是我不会？）</li>\n<li>程序必须要能完全编译才能生成图形展示。</li>\n</ul>\n<p>上面这些都是看robocup的代码时候的感想，这个工程直接使用了makefile。而软件可能对cmake、vs、qt的工程更友好一些。</p>\n<h2 id=\"VScode\"><a href=\"#VScode\" class=\"headerlink\" title=\"VScode\"></a>VScode</h2><p>最后还是拿vscode看了起来，goto来goto去还是很爽的。不过为了能更爽的看代码，搜了下插件</p>\n<h3 id=\"insight\"><a href=\"#insight\" class=\"headerlink\" title=\"insight\"></a>insight</h3><p>一个快捷搜索用的小插件，可以在左侧快速搜索勾选的word，但是只支持诸如google、stack overflow此类的网站（其实挺好的，但是我不是很方便。。。）</p>\n<p>我考虑考虑学学typescript帮忙更新下这个插件哈。感觉不难（</p>\n<h3 id=\"codetour\"><a href=\"#codetour\" class=\"headerlink\" title=\"codetour\"></a>codetour</h3><p>好东西了属于是。可以按顺序记录每次看的内容并生成一个.tour文件（本质上是json），这玩意可以很轻松的记录我看某个东西的流程，并且支持修改我看的内容。比如我看的时候走错了地方，我还能倒回去）。更进一步，这个工具可以用来记录决策树。</p>\n<p>比起工具，还是更加注重代码本身吧，毕竟目的是“学习源码的精髓”而不是“学几个工具”。</p>\n"},{"author":"kawhicurry","title":"Situation of operation technology","date":"2021-11-13T12:01:01.000Z","_content":"# 一个软件的诞生\n\n## 开发过程\n\n准备：市场调查、需求分析……\n\n确定方案：技术，平台\n\n开发：\n\n- 设计&前端：界面\n- 后端：业务逻辑\n\n上线：\n\n- 运营：宣传\n- 运维：服务器维护\n\n# 传统的运维方式\n\n把写好的软件部署到服务器上，跑就完事了。\n\n## 如果业务量大了呢？\n\n用一样的方式部署到很多服务器上，跑就完事了。\n\n## 有什么问题？\n\n- **必须时刻以最大业务量安排服务器数量**，成本高。\n- 每个公司都要有专职运维人员，招人难\n- 运维人员无论水平高低，所能管理的服务器数量有上限\n- 遇到突发状况，所需运维人员数量陡增，而保持一个大量运维团队需要高成本\n\n# 一种趋势\n\n所需管理的服务器数量庞大，但大部分工作都是重复的。所以……\n\n## CI/CD\n\n持续集成，持续交付，持续部署。让后端开发人员（数量庞大，不乏牛人）来完成运维工作\n\n## Devops\n\n运维开发，专门开发运维工具的人。试图将运维工作尽可能的自动化。\n\n# 另一种趋势\n\n## 虚拟化技术的进步\n\n最初的虚拟化：让windows的应用在mac上跑起来（纯举例），虚拟化的环境具有完整的系统，可以在另一个操作系统上跑起来。在性能上具有极大的开销（就是会很慢）\n\n容器化：让一个应用在一个容器中运行，该容器具有该应用所需的全部环境。一个容器就是一个进程，开销较小，与操作系统兼容良好（主要指linux）\n\n## 容器时代\n\n不再关注各式各样的环境问题，所需要的环境都可以打包成容器，并且可以使用别人打包好的容器。\n\n**docker**:第一个开源容器技术的公司，现在仍然是王者。\n\ndocker的开源使得任何人都可以轻松部署各式各样的服务，因为环境的配置已经不是难题。但是对于企业来说，问题仍然存在：每个服务器上都可以跑好几个容器，就像以前一个服务器上可以跑好几个应用一样。如果有几千台呢？几万台呢？\n\n## 容器编排\n\n能不能让不同的服务器上的容器连成一个整体？或者自动编排容器，让它们在合适的时间或者位置提供服务？\n\n**kubernetes**:来自google，简称k8s，容器编排唯一的标准，生态的中心。\n\n允许将多个提供同一服务的容器打包成一个pod（豆荚），将多个服务器设置为一个cluster（集群），由k8s来决定pod在哪台服务器上运行。并且k8s可以在不同服务器上启动相同的pod，当一台服务器出现故障时，k8s迅速在其他服务器上添加故障服务器上运行的pod，从而保证了服务的稳定性。\n\n即成事实：**k8s是生态的中心**\n\n围绕k8s的生态：监控，流水线部署，自动预警，网格化网关，容器化数据库以及**serverless**\n\n*k8s标志着云时代的正式开始*\n\n## 再进一步\n\n如果容器可以方便的创建和销毁，能不能更进一步？\n\n当有请求时才创建容器进行服务（而不是一直等着），请求结束就销毁容器，这便是**Serverless**，来自Amazon（亚马逊）\n\n**Serverless**，无服务器技术，只有有需求的时候才服务。\n\n试想一个秒杀系统，在短暂的几秒内，服务器收到了数以亿记的请求，服务器立刻反应，创建大量容器进行服务，每服务完就立即销毁，把资源留给下一个创建的容器。而在几秒前或几秒后，服务器也许还处于一个“清闲”的状态。当前的serverless按照请求数计费，小公司无需按最大并发量购置服务器，只需直接购买serverless服务。\n\n# 云服务现状\n\n自k8s被推出以后，大公司们成立了CNCF（云原生计算基金会）。示例成员：google、AWS（亚马逊，世界最大的云服务供应商，serverless的领头羊）、RedHat（红帽，世界上最大的服务器软件公司，负责的centos操作系统跑在世界上百分之五十以上，中国百分之八十以上的服务器上）、docker、apache基金会（最成熟的服务器软件apache拥有者）、github、gitlab（二者分别为最大的代码托管网站和最大的开源私有git服务提供商）、华为（独立的鲲鹏架构）。\n\n## 国内环境\n\n- 阿里云：全国最大的云服务供应商，对内为淘宝等提供服务，对外为各类企业提供云服务。\n- 腾讯云：对内有qq、微信、微信小程序等业务。拥有独立的小程序平台。\n- 华为云：有自产鲲鹏服务器，使用与绝大多数服务器不一样的arm架构（大部分服务器包括个人电脑都是amd64，也叫x86-64，但苹果的自研芯片M1是arm）。\n- 七牛云：阿里云出走大佬创办，有一定实力。\n- 青云：一个k8s开源集群管理系统的国内主导者。\n\n现状分析：\n\n> 一方面，围绕容器和容器编排的标准已经制定完成，但基于标准的各项指标仍有提升空间，各大公司仍然在试图在这些标准下做出更好的工具，比如容器和容器的构建工具。另一方面，围绕生态的工具也有许多不完善之处，比如一个让不懂运维的人也能轻松部署的自动部署平台，或是一个完善的部署到监控的工具链。这些被统称为“云基础设施”，云基础设施仍然有许多待完善之处。对于互联网行业来说，传统的运维会越来越少（但绝对不会消失），更多企业倾向于请云服务供应商来构建自己的服务，甚至直接将自身服务交给云供应商。反过来，云供应商也要开发更好的云平台给企业使用。\n\n# 一些其他的机会\n\n## 云与AI\n\n当服务器闲下来可以做什么？挖矿（划掉）。服务器被设计成可以不间断的运行，但很显然它并不会真的时刻运行，当它闲下来时，其算力就有大用途，比如用于机器学习。当然，对于专业的ai公司，他们也有自己的服务器集群，如何利用互联网的云服务来管理自己的集群，也成了一个不错的方向。\n\n## 云与物联网\n\n专业的物联网后端早就有了，尤其是近年来通信行业的进步，更加促进了“计算不一定非要在本地完成”这种概念的推广。对于传统控制行业来说，大多数计算会在嵌入式设备（看作是一个低性能的计算机）上完成，底层工程师们不得不想尽办法优化性能，确保其服务能稳定的运行在嵌入式设备中。而现在，这些计算有望在很远的云服务器上完成。（当然，嵌入式设备工程师并不会消失）\n\n这就是我对这个行业的一些了解。","source":"_posts/net-server-0.md","raw":"---\nauthor: kawhicurry\ntitle: Situation of operation technology\ncategories: operation\ndate: 2021-11-13 20:01:01\ntags: git\n---\n# 一个软件的诞生\n\n## 开发过程\n\n准备：市场调查、需求分析……\n\n确定方案：技术，平台\n\n开发：\n\n- 设计&前端：界面\n- 后端：业务逻辑\n\n上线：\n\n- 运营：宣传\n- 运维：服务器维护\n\n# 传统的运维方式\n\n把写好的软件部署到服务器上，跑就完事了。\n\n## 如果业务量大了呢？\n\n用一样的方式部署到很多服务器上，跑就完事了。\n\n## 有什么问题？\n\n- **必须时刻以最大业务量安排服务器数量**，成本高。\n- 每个公司都要有专职运维人员，招人难\n- 运维人员无论水平高低，所能管理的服务器数量有上限\n- 遇到突发状况，所需运维人员数量陡增，而保持一个大量运维团队需要高成本\n\n# 一种趋势\n\n所需管理的服务器数量庞大，但大部分工作都是重复的。所以……\n\n## CI/CD\n\n持续集成，持续交付，持续部署。让后端开发人员（数量庞大，不乏牛人）来完成运维工作\n\n## Devops\n\n运维开发，专门开发运维工具的人。试图将运维工作尽可能的自动化。\n\n# 另一种趋势\n\n## 虚拟化技术的进步\n\n最初的虚拟化：让windows的应用在mac上跑起来（纯举例），虚拟化的环境具有完整的系统，可以在另一个操作系统上跑起来。在性能上具有极大的开销（就是会很慢）\n\n容器化：让一个应用在一个容器中运行，该容器具有该应用所需的全部环境。一个容器就是一个进程，开销较小，与操作系统兼容良好（主要指linux）\n\n## 容器时代\n\n不再关注各式各样的环境问题，所需要的环境都可以打包成容器，并且可以使用别人打包好的容器。\n\n**docker**:第一个开源容器技术的公司，现在仍然是王者。\n\ndocker的开源使得任何人都可以轻松部署各式各样的服务，因为环境的配置已经不是难题。但是对于企业来说，问题仍然存在：每个服务器上都可以跑好几个容器，就像以前一个服务器上可以跑好几个应用一样。如果有几千台呢？几万台呢？\n\n## 容器编排\n\n能不能让不同的服务器上的容器连成一个整体？或者自动编排容器，让它们在合适的时间或者位置提供服务？\n\n**kubernetes**:来自google，简称k8s，容器编排唯一的标准，生态的中心。\n\n允许将多个提供同一服务的容器打包成一个pod（豆荚），将多个服务器设置为一个cluster（集群），由k8s来决定pod在哪台服务器上运行。并且k8s可以在不同服务器上启动相同的pod，当一台服务器出现故障时，k8s迅速在其他服务器上添加故障服务器上运行的pod，从而保证了服务的稳定性。\n\n即成事实：**k8s是生态的中心**\n\n围绕k8s的生态：监控，流水线部署，自动预警，网格化网关，容器化数据库以及**serverless**\n\n*k8s标志着云时代的正式开始*\n\n## 再进一步\n\n如果容器可以方便的创建和销毁，能不能更进一步？\n\n当有请求时才创建容器进行服务（而不是一直等着），请求结束就销毁容器，这便是**Serverless**，来自Amazon（亚马逊）\n\n**Serverless**，无服务器技术，只有有需求的时候才服务。\n\n试想一个秒杀系统，在短暂的几秒内，服务器收到了数以亿记的请求，服务器立刻反应，创建大量容器进行服务，每服务完就立即销毁，把资源留给下一个创建的容器。而在几秒前或几秒后，服务器也许还处于一个“清闲”的状态。当前的serverless按照请求数计费，小公司无需按最大并发量购置服务器，只需直接购买serverless服务。\n\n# 云服务现状\n\n自k8s被推出以后，大公司们成立了CNCF（云原生计算基金会）。示例成员：google、AWS（亚马逊，世界最大的云服务供应商，serverless的领头羊）、RedHat（红帽，世界上最大的服务器软件公司，负责的centos操作系统跑在世界上百分之五十以上，中国百分之八十以上的服务器上）、docker、apache基金会（最成熟的服务器软件apache拥有者）、github、gitlab（二者分别为最大的代码托管网站和最大的开源私有git服务提供商）、华为（独立的鲲鹏架构）。\n\n## 国内环境\n\n- 阿里云：全国最大的云服务供应商，对内为淘宝等提供服务，对外为各类企业提供云服务。\n- 腾讯云：对内有qq、微信、微信小程序等业务。拥有独立的小程序平台。\n- 华为云：有自产鲲鹏服务器，使用与绝大多数服务器不一样的arm架构（大部分服务器包括个人电脑都是amd64，也叫x86-64，但苹果的自研芯片M1是arm）。\n- 七牛云：阿里云出走大佬创办，有一定实力。\n- 青云：一个k8s开源集群管理系统的国内主导者。\n\n现状分析：\n\n> 一方面，围绕容器和容器编排的标准已经制定完成，但基于标准的各项指标仍有提升空间，各大公司仍然在试图在这些标准下做出更好的工具，比如容器和容器的构建工具。另一方面，围绕生态的工具也有许多不完善之处，比如一个让不懂运维的人也能轻松部署的自动部署平台，或是一个完善的部署到监控的工具链。这些被统称为“云基础设施”，云基础设施仍然有许多待完善之处。对于互联网行业来说，传统的运维会越来越少（但绝对不会消失），更多企业倾向于请云服务供应商来构建自己的服务，甚至直接将自身服务交给云供应商。反过来，云供应商也要开发更好的云平台给企业使用。\n\n# 一些其他的机会\n\n## 云与AI\n\n当服务器闲下来可以做什么？挖矿（划掉）。服务器被设计成可以不间断的运行，但很显然它并不会真的时刻运行，当它闲下来时，其算力就有大用途，比如用于机器学习。当然，对于专业的ai公司，他们也有自己的服务器集群，如何利用互联网的云服务来管理自己的集群，也成了一个不错的方向。\n\n## 云与物联网\n\n专业的物联网后端早就有了，尤其是近年来通信行业的进步，更加促进了“计算不一定非要在本地完成”这种概念的推广。对于传统控制行业来说，大多数计算会在嵌入式设备（看作是一个低性能的计算机）上完成，底层工程师们不得不想尽办法优化性能，确保其服务能稳定的运行在嵌入式设备中。而现在，这些计算有望在很远的云服务器上完成。（当然，嵌入式设备工程师并不会消失）\n\n这就是我对这个行业的一些了解。","slug":"net-server-0","published":1,"updated":"2021-11-14T01:56:56.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxd4ztlo001bw8ul9w3ohfib","content":"<h1 id=\"一个软件的诞生\"><a href=\"#一个软件的诞生\" class=\"headerlink\" title=\"一个软件的诞生\"></a>一个软件的诞生</h1><h2 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h2><p>准备：市场调查、需求分析……</p>\n<p>确定方案：技术，平台</p>\n<p>开发：</p>\n<ul>\n<li>设计&amp;前端：界面</li>\n<li>后端：业务逻辑</li>\n</ul>\n<p>上线：</p>\n<ul>\n<li>运营：宣传</li>\n<li>运维：服务器维护</li>\n</ul>\n<h1 id=\"传统的运维方式\"><a href=\"#传统的运维方式\" class=\"headerlink\" title=\"传统的运维方式\"></a>传统的运维方式</h1><p>把写好的软件部署到服务器上，跑就完事了。</p>\n<h2 id=\"如果业务量大了呢？\"><a href=\"#如果业务量大了呢？\" class=\"headerlink\" title=\"如果业务量大了呢？\"></a>如果业务量大了呢？</h2><p>用一样的方式部署到很多服务器上，跑就完事了。</p>\n<h2 id=\"有什么问题？\"><a href=\"#有什么问题？\" class=\"headerlink\" title=\"有什么问题？\"></a>有什么问题？</h2><ul>\n<li><strong>必须时刻以最大业务量安排服务器数量</strong>，成本高。</li>\n<li>每个公司都要有专职运维人员，招人难</li>\n<li>运维人员无论水平高低，所能管理的服务器数量有上限</li>\n<li>遇到突发状况，所需运维人员数量陡增，而保持一个大量运维团队需要高成本</li>\n</ul>\n<h1 id=\"一种趋势\"><a href=\"#一种趋势\" class=\"headerlink\" title=\"一种趋势\"></a>一种趋势</h1><p>所需管理的服务器数量庞大，但大部分工作都是重复的。所以……</p>\n<h2 id=\"CI-CD\"><a href=\"#CI-CD\" class=\"headerlink\" title=\"CI/CD\"></a>CI/CD</h2><p>持续集成，持续交付，持续部署。让后端开发人员（数量庞大，不乏牛人）来完成运维工作</p>\n<h2 id=\"Devops\"><a href=\"#Devops\" class=\"headerlink\" title=\"Devops\"></a>Devops</h2><p>运维开发，专门开发运维工具的人。试图将运维工作尽可能的自动化。</p>\n<h1 id=\"另一种趋势\"><a href=\"#另一种趋势\" class=\"headerlink\" title=\"另一种趋势\"></a>另一种趋势</h1><h2 id=\"虚拟化技术的进步\"><a href=\"#虚拟化技术的进步\" class=\"headerlink\" title=\"虚拟化技术的进步\"></a>虚拟化技术的进步</h2><p>最初的虚拟化：让windows的应用在mac上跑起来（纯举例），虚拟化的环境具有完整的系统，可以在另一个操作系统上跑起来。在性能上具有极大的开销（就是会很慢）</p>\n<p>容器化：让一个应用在一个容器中运行，该容器具有该应用所需的全部环境。一个容器就是一个进程，开销较小，与操作系统兼容良好（主要指linux）</p>\n<h2 id=\"容器时代\"><a href=\"#容器时代\" class=\"headerlink\" title=\"容器时代\"></a>容器时代</h2><p>不再关注各式各样的环境问题，所需要的环境都可以打包成容器，并且可以使用别人打包好的容器。</p>\n<p><strong>docker</strong>:第一个开源容器技术的公司，现在仍然是王者。</p>\n<p>docker的开源使得任何人都可以轻松部署各式各样的服务，因为环境的配置已经不是难题。但是对于企业来说，问题仍然存在：每个服务器上都可以跑好几个容器，就像以前一个服务器上可以跑好几个应用一样。如果有几千台呢？几万台呢？</p>\n<h2 id=\"容器编排\"><a href=\"#容器编排\" class=\"headerlink\" title=\"容器编排\"></a>容器编排</h2><p>能不能让不同的服务器上的容器连成一个整体？或者自动编排容器，让它们在合适的时间或者位置提供服务？</p>\n<p><strong>kubernetes</strong>:来自google，简称k8s，容器编排唯一的标准，生态的中心。</p>\n<p>允许将多个提供同一服务的容器打包成一个pod（豆荚），将多个服务器设置为一个cluster（集群），由k8s来决定pod在哪台服务器上运行。并且k8s可以在不同服务器上启动相同的pod，当一台服务器出现故障时，k8s迅速在其他服务器上添加故障服务器上运行的pod，从而保证了服务的稳定性。</p>\n<p>即成事实：<strong>k8s是生态的中心</strong></p>\n<p>围绕k8s的生态：监控，流水线部署，自动预警，网格化网关，容器化数据库以及<strong>serverless</strong></p>\n<p><em>k8s标志着云时代的正式开始</em></p>\n<h2 id=\"再进一步\"><a href=\"#再进一步\" class=\"headerlink\" title=\"再进一步\"></a>再进一步</h2><p>如果容器可以方便的创建和销毁，能不能更进一步？</p>\n<p>当有请求时才创建容器进行服务（而不是一直等着），请求结束就销毁容器，这便是<strong>Serverless</strong>，来自Amazon（亚马逊）</p>\n<p><strong>Serverless</strong>，无服务器技术，只有有需求的时候才服务。</p>\n<p>试想一个秒杀系统，在短暂的几秒内，服务器收到了数以亿记的请求，服务器立刻反应，创建大量容器进行服务，每服务完就立即销毁，把资源留给下一个创建的容器。而在几秒前或几秒后，服务器也许还处于一个“清闲”的状态。当前的serverless按照请求数计费，小公司无需按最大并发量购置服务器，只需直接购买serverless服务。</p>\n<h1 id=\"云服务现状\"><a href=\"#云服务现状\" class=\"headerlink\" title=\"云服务现状\"></a>云服务现状</h1><p>自k8s被推出以后，大公司们成立了CNCF（云原生计算基金会）。示例成员：google、AWS（亚马逊，世界最大的云服务供应商，serverless的领头羊）、RedHat（红帽，世界上最大的服务器软件公司，负责的centos操作系统跑在世界上百分之五十以上，中国百分之八十以上的服务器上）、docker、apache基金会（最成熟的服务器软件apache拥有者）、github、gitlab（二者分别为最大的代码托管网站和最大的开源私有git服务提供商）、华为（独立的鲲鹏架构）。</p>\n<h2 id=\"国内环境\"><a href=\"#国内环境\" class=\"headerlink\" title=\"国内环境\"></a>国内环境</h2><ul>\n<li>阿里云：全国最大的云服务供应商，对内为淘宝等提供服务，对外为各类企业提供云服务。</li>\n<li>腾讯云：对内有qq、微信、微信小程序等业务。拥有独立的小程序平台。</li>\n<li>华为云：有自产鲲鹏服务器，使用与绝大多数服务器不一样的arm架构（大部分服务器包括个人电脑都是amd64，也叫x86-64，但苹果的自研芯片M1是arm）。</li>\n<li>七牛云：阿里云出走大佬创办，有一定实力。</li>\n<li>青云：一个k8s开源集群管理系统的国内主导者。</li>\n</ul>\n<p>现状分析：</p>\n<blockquote>\n<p>一方面，围绕容器和容器编排的标准已经制定完成，但基于标准的各项指标仍有提升空间，各大公司仍然在试图在这些标准下做出更好的工具，比如容器和容器的构建工具。另一方面，围绕生态的工具也有许多不完善之处，比如一个让不懂运维的人也能轻松部署的自动部署平台，或是一个完善的部署到监控的工具链。这些被统称为“云基础设施”，云基础设施仍然有许多待完善之处。对于互联网行业来说，传统的运维会越来越少（但绝对不会消失），更多企业倾向于请云服务供应商来构建自己的服务，甚至直接将自身服务交给云供应商。反过来，云供应商也要开发更好的云平台给企业使用。</p>\n</blockquote>\n<h1 id=\"一些其他的机会\"><a href=\"#一些其他的机会\" class=\"headerlink\" title=\"一些其他的机会\"></a>一些其他的机会</h1><h2 id=\"云与AI\"><a href=\"#云与AI\" class=\"headerlink\" title=\"云与AI\"></a>云与AI</h2><p>当服务器闲下来可以做什么？挖矿（划掉）。服务器被设计成可以不间断的运行，但很显然它并不会真的时刻运行，当它闲下来时，其算力就有大用途，比如用于机器学习。当然，对于专业的ai公司，他们也有自己的服务器集群，如何利用互联网的云服务来管理自己的集群，也成了一个不错的方向。</p>\n<h2 id=\"云与物联网\"><a href=\"#云与物联网\" class=\"headerlink\" title=\"云与物联网\"></a>云与物联网</h2><p>专业的物联网后端早就有了，尤其是近年来通信行业的进步，更加促进了“计算不一定非要在本地完成”这种概念的推广。对于传统控制行业来说，大多数计算会在嵌入式设备（看作是一个低性能的计算机）上完成，底层工程师们不得不想尽办法优化性能，确保其服务能稳定的运行在嵌入式设备中。而现在，这些计算有望在很远的云服务器上完成。（当然，嵌入式设备工程师并不会消失）</p>\n<p>这就是我对这个行业的一些了解。</p>\n","site":{"data":{"covers":[{"heleo":"_posts/hello-world.md"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"一个软件的诞生\"><a href=\"#一个软件的诞生\" class=\"headerlink\" title=\"一个软件的诞生\"></a>一个软件的诞生</h1><h2 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h2><p>准备：市场调查、需求分析……</p>\n<p>确定方案：技术，平台</p>\n<p>开发：</p>\n<ul>\n<li>设计&amp;前端：界面</li>\n<li>后端：业务逻辑</li>\n</ul>\n<p>上线：</p>\n<ul>\n<li>运营：宣传</li>\n<li>运维：服务器维护</li>\n</ul>\n<h1 id=\"传统的运维方式\"><a href=\"#传统的运维方式\" class=\"headerlink\" title=\"传统的运维方式\"></a>传统的运维方式</h1><p>把写好的软件部署到服务器上，跑就完事了。</p>\n<h2 id=\"如果业务量大了呢？\"><a href=\"#如果业务量大了呢？\" class=\"headerlink\" title=\"如果业务量大了呢？\"></a>如果业务量大了呢？</h2><p>用一样的方式部署到很多服务器上，跑就完事了。</p>\n<h2 id=\"有什么问题？\"><a href=\"#有什么问题？\" class=\"headerlink\" title=\"有什么问题？\"></a>有什么问题？</h2><ul>\n<li><strong>必须时刻以最大业务量安排服务器数量</strong>，成本高。</li>\n<li>每个公司都要有专职运维人员，招人难</li>\n<li>运维人员无论水平高低，所能管理的服务器数量有上限</li>\n<li>遇到突发状况，所需运维人员数量陡增，而保持一个大量运维团队需要高成本</li>\n</ul>\n<h1 id=\"一种趋势\"><a href=\"#一种趋势\" class=\"headerlink\" title=\"一种趋势\"></a>一种趋势</h1><p>所需管理的服务器数量庞大，但大部分工作都是重复的。所以……</p>\n<h2 id=\"CI-CD\"><a href=\"#CI-CD\" class=\"headerlink\" title=\"CI/CD\"></a>CI/CD</h2><p>持续集成，持续交付，持续部署。让后端开发人员（数量庞大，不乏牛人）来完成运维工作</p>\n<h2 id=\"Devops\"><a href=\"#Devops\" class=\"headerlink\" title=\"Devops\"></a>Devops</h2><p>运维开发，专门开发运维工具的人。试图将运维工作尽可能的自动化。</p>\n<h1 id=\"另一种趋势\"><a href=\"#另一种趋势\" class=\"headerlink\" title=\"另一种趋势\"></a>另一种趋势</h1><h2 id=\"虚拟化技术的进步\"><a href=\"#虚拟化技术的进步\" class=\"headerlink\" title=\"虚拟化技术的进步\"></a>虚拟化技术的进步</h2><p>最初的虚拟化：让windows的应用在mac上跑起来（纯举例），虚拟化的环境具有完整的系统，可以在另一个操作系统上跑起来。在性能上具有极大的开销（就是会很慢）</p>\n<p>容器化：让一个应用在一个容器中运行，该容器具有该应用所需的全部环境。一个容器就是一个进程，开销较小，与操作系统兼容良好（主要指linux）</p>\n<h2 id=\"容器时代\"><a href=\"#容器时代\" class=\"headerlink\" title=\"容器时代\"></a>容器时代</h2><p>不再关注各式各样的环境问题，所需要的环境都可以打包成容器，并且可以使用别人打包好的容器。</p>\n<p><strong>docker</strong>:第一个开源容器技术的公司，现在仍然是王者。</p>\n<p>docker的开源使得任何人都可以轻松部署各式各样的服务，因为环境的配置已经不是难题。但是对于企业来说，问题仍然存在：每个服务器上都可以跑好几个容器，就像以前一个服务器上可以跑好几个应用一样。如果有几千台呢？几万台呢？</p>\n<h2 id=\"容器编排\"><a href=\"#容器编排\" class=\"headerlink\" title=\"容器编排\"></a>容器编排</h2><p>能不能让不同的服务器上的容器连成一个整体？或者自动编排容器，让它们在合适的时间或者位置提供服务？</p>\n<p><strong>kubernetes</strong>:来自google，简称k8s，容器编排唯一的标准，生态的中心。</p>\n<p>允许将多个提供同一服务的容器打包成一个pod（豆荚），将多个服务器设置为一个cluster（集群），由k8s来决定pod在哪台服务器上运行。并且k8s可以在不同服务器上启动相同的pod，当一台服务器出现故障时，k8s迅速在其他服务器上添加故障服务器上运行的pod，从而保证了服务的稳定性。</p>\n<p>即成事实：<strong>k8s是生态的中心</strong></p>\n<p>围绕k8s的生态：监控，流水线部署，自动预警，网格化网关，容器化数据库以及<strong>serverless</strong></p>\n<p><em>k8s标志着云时代的正式开始</em></p>\n<h2 id=\"再进一步\"><a href=\"#再进一步\" class=\"headerlink\" title=\"再进一步\"></a>再进一步</h2><p>如果容器可以方便的创建和销毁，能不能更进一步？</p>\n<p>当有请求时才创建容器进行服务（而不是一直等着），请求结束就销毁容器，这便是<strong>Serverless</strong>，来自Amazon（亚马逊）</p>\n<p><strong>Serverless</strong>，无服务器技术，只有有需求的时候才服务。</p>\n<p>试想一个秒杀系统，在短暂的几秒内，服务器收到了数以亿记的请求，服务器立刻反应，创建大量容器进行服务，每服务完就立即销毁，把资源留给下一个创建的容器。而在几秒前或几秒后，服务器也许还处于一个“清闲”的状态。当前的serverless按照请求数计费，小公司无需按最大并发量购置服务器，只需直接购买serverless服务。</p>\n<h1 id=\"云服务现状\"><a href=\"#云服务现状\" class=\"headerlink\" title=\"云服务现状\"></a>云服务现状</h1><p>自k8s被推出以后，大公司们成立了CNCF（云原生计算基金会）。示例成员：google、AWS（亚马逊，世界最大的云服务供应商，serverless的领头羊）、RedHat（红帽，世界上最大的服务器软件公司，负责的centos操作系统跑在世界上百分之五十以上，中国百分之八十以上的服务器上）、docker、apache基金会（最成熟的服务器软件apache拥有者）、github、gitlab（二者分别为最大的代码托管网站和最大的开源私有git服务提供商）、华为（独立的鲲鹏架构）。</p>\n<h2 id=\"国内环境\"><a href=\"#国内环境\" class=\"headerlink\" title=\"国内环境\"></a>国内环境</h2><ul>\n<li>阿里云：全国最大的云服务供应商，对内为淘宝等提供服务，对外为各类企业提供云服务。</li>\n<li>腾讯云：对内有qq、微信、微信小程序等业务。拥有独立的小程序平台。</li>\n<li>华为云：有自产鲲鹏服务器，使用与绝大多数服务器不一样的arm架构（大部分服务器包括个人电脑都是amd64，也叫x86-64，但苹果的自研芯片M1是arm）。</li>\n<li>七牛云：阿里云出走大佬创办，有一定实力。</li>\n<li>青云：一个k8s开源集群管理系统的国内主导者。</li>\n</ul>\n<p>现状分析：</p>\n<blockquote>\n<p>一方面，围绕容器和容器编排的标准已经制定完成，但基于标准的各项指标仍有提升空间，各大公司仍然在试图在这些标准下做出更好的工具，比如容器和容器的构建工具。另一方面，围绕生态的工具也有许多不完善之处，比如一个让不懂运维的人也能轻松部署的自动部署平台，或是一个完善的部署到监控的工具链。这些被统称为“云基础设施”，云基础设施仍然有许多待完善之处。对于互联网行业来说，传统的运维会越来越少（但绝对不会消失），更多企业倾向于请云服务供应商来构建自己的服务，甚至直接将自身服务交给云供应商。反过来，云供应商也要开发更好的云平台给企业使用。</p>\n</blockquote>\n<h1 id=\"一些其他的机会\"><a href=\"#一些其他的机会\" class=\"headerlink\" title=\"一些其他的机会\"></a>一些其他的机会</h1><h2 id=\"云与AI\"><a href=\"#云与AI\" class=\"headerlink\" title=\"云与AI\"></a>云与AI</h2><p>当服务器闲下来可以做什么？挖矿（划掉）。服务器被设计成可以不间断的运行，但很显然它并不会真的时刻运行，当它闲下来时，其算力就有大用途，比如用于机器学习。当然，对于专业的ai公司，他们也有自己的服务器集群，如何利用互联网的云服务来管理自己的集群，也成了一个不错的方向。</p>\n<h2 id=\"云与物联网\"><a href=\"#云与物联网\" class=\"headerlink\" title=\"云与物联网\"></a>云与物联网</h2><p>专业的物联网后端早就有了，尤其是近年来通信行业的进步，更加促进了“计算不一定非要在本地完成”这种概念的推广。对于传统控制行业来说，大多数计算会在嵌入式设备（看作是一个低性能的计算机）上完成，底层工程师们不得不想尽办法优化性能，确保其服务能稳定的运行在嵌入式设备中。而现在，这些计算有望在很远的云服务器上完成。（当然，嵌入式设备工程师并不会消失）</p>\n<p>这就是我对这个行业的一些了解。</p>\n"},{"author":"kawhicurry","title":"0xCalculator 16进制计算器","date":"2021-11-28T09:31:31.000Z","_content":"\n# 功能\n\n1. 对十六进制数进行双目、表达式运算\n2. 对运算结果进行保存和再读取，支持自动保存和手动保存\n3. 自定义运算结果储存位置\n4. 自定义字体大小\n5. 可更换窗口风格（换肤）\n6. 自动保存设置\n\n# 任务分配\n\n1. ：ui设计与qt框架\n2. ：核心算法\n3. ：文件读写\n\n# 开源地址\n<https://github.com/kawhicurry/0xCalculator>\n\n# 开发过程\n\n## Qt框架\n\nqt文件将会以平铺的方式放置在同一工程目录下，其组织结构由`.pro`文件记录，该文件类似于makefile（可以看作是qmakefile？）。其标准目录如下：\n\n> .pro：记录文件\n>\n> /Headers：略\n>\n> /Sources：略\n>\n> /Forms：存放`.ui`文件，实际为`xml`格式，但不建议直接编辑，所有操作应当在设计模块中完成\n>\n> /Resources：存放qt标准资源（可以qt方式引用的资源）\n>\n> /Other files\n\n## UI设计\n\n直接在qt creator的设计界面中打开`设计`模块。从画面左侧拖动组件，摆放至设计框中即可。\n\n*问题*：组件散乱\n\n- 左侧组件库中有`layout`组件,将其拖动至设计框中,再向layout中添加组件，即可使所有组件呈现一定规律。\n\n>布局类型：\n>\n>垂直：略\n>\n>水平：略\n>\n>栅格（grid）：上面俩合起来\n>\n>窗口：？存疑，不是很能理解这是啥\n\n*问题*：使用layout组件后无法布局固定，启动ui界面后拖动窗口改变其大小，layout组件位置不动。\n\n- 应当首先在右侧`对象`框中选中主窗口（mainwindow）中的中间部件（centralwidget），右键选择布局，为整个中间部分设定大的布局，（注：主窗口除了中间部件还初始化了一个菜单栏（menubar）），然后在该布局中嵌套布局或组件。本方案选择了栅格布局，虽然只需垂直布局即可，但为了可拓展性，还是选择栅格。接下来在整个中间部分的栅格布局中，嵌套了一个垂直布局（用于输入和输出）和一个栅格布局（用于存放按键）。\n\n接下来在主窗口中添加所需的组件，分别为输入框、输出框、5*6个按键。然后可以对其属性进行可视化的设计，以下是对`设计`界面中一些工具的解释：\n\n> 右侧下方为属性框，显示了所选定组件的属性，每个组件都是层层继承而来，因此要注意每一层的具体属性以及继承关系。\n>\n> 右侧上方为对象框，显示了当前ui文件中所有文件属性。\n>\n> 正中央下方的框实际上有两个可编辑区域，一个为action editor，即为组件添加动作（可方便设置快捷键）。另一个为信号与槽。\n>\n> 注：信号与槽是最Qt制作ui界面中最重要的机制。\n\n创建槽函数：在信号与槽编辑框中点击加号创建信号与槽，然后选择信号的发送对象、发送信号量、槽、响应函数。此处的创建**只支持内定的槽函数**，想要自定义槽函数，需在右侧对象中找到对象，然后右键选择转到槽，接下来选择信号量之后，Qt会跳转该ui文件对应的cpp文件下，并自动创建一个该槽函数的实现（.h文件中也会自动添加声明）。接下来只需在此槽函数中编写发送信号后（触发信号发送条件），所需只需的步骤即可。\n\n> 信号量是Qt类自带的属性，某个类既有自己的属性，也有继承而来的属性。如pushButton组件继承自QAbstractButton，后者又继承自QWidget，后者又继承自QObject。对于QAbstractButton，其自带的信号有`clicked()`,`pressed()`等，对于QWidget，有`windowIconChanged`等。具体解释请参考官方文档。\n\n`设计`界面支持大量的属性设置，如字体，背景等。并且可以直接在ui界面中即时显示，但并不推荐直接做修改。\n\n一种渲染方式：Qt提供了qss来进行类似css的样式渲染，只需选中对象然后右键改变样式表，修改某个组件的样式表即可。Qss还提供了选择器的功能，因此，只需在某个较大的组件中设置样式表，并对不同的渲染对象进行选择即可。本方案一开始的办法就是在centralwidget组件中设置样式表，完成了酷炫的按键风格。需要注意的是，改变样式表的方法在Qt中是存在一定问题的，并且，**任何写死的方法都可能在以后要修改时造成麻烦**。关于样式表后面还会再进一步设定。\n\n## 模拟按键\n\n一个计算器应当提供一系列的按键，因此要在栅格布局中拖入一定数量的按键。按键分为输入按键和功能按键。\n\n- 输入按键：0123456789ABCDEF+-*/（）\n- 功能按键：<- -> DEL CE UP DOWN =\n\n对于输入按键，按下按键后应当在输入框中显示对应的输入，同时这些按键应当有对应的键盘输入。\n\n对于输出按键，左移和右移是为了移动输入框中的光标。DEL清除一个字符，CE要同时清除输入和输出框。UP和DOWN提供了查看历史功能。等号是整个计算器的核心功能，按下等号后，应当读取输入框中的算式，进行计算后将结果字符串返回至输出框中。\n\n通过在组件上右键选择 转到槽 可以快捷创建槽函数。示例如图：\n\n```c++\n//mainwindow.h\nvoid MainWindow::on_pushButton_left_bracket_clicked();\n//mainwindow.cpp\nvoid MainWindow::on_pushButton_left_bracket_clicked() {\n  ui->textBrowser_input->setFocus();\n  ui->textBrowser_input->insertPlainText(\"(\");\n}\n```\n\n手动创建几个后，就可以发现其规矩。一个槽函数的名称由`on_name_action`组成。`pushButton_left_bracket`是改按键的名称，这个名称需要在ui文件中指定，当拖动pushButton的时候，qt会按照12345依次给其一个默认名称，并且上面的默认文字都是pushButton。因此对于声明，可以用宏生成。\n\n```c++\n//mainwindwo.h\n#define clicked_func(name) void on_pushButton_##name##_clicked();\n  clicked_func(0);\n  clicked_func(1);\n  clicked_func(2);\n  clicked_func(3);\n//...\n#define triggered_func(name) void on_action##name##_triggered();\n\n  triggered_func(Author);\n  triggered_func(Save) triggered_func(Read);\n  triggered_func(History_location);\n  triggered_func(Auto_Save);\n```\n\n对于实现，部分直接输入的槽函数也可以用宏生成\n\n```cpp\n//mainwindow.cpp\n#define set_insert_func(name)                         \\\n  void MainWindow::on_pushButton_##name##_clicked() { \\\n    ui->textBrowser_input->setFocus();                \\\n    ui->textBrowser_input->insertPlainText(#name);    \\\n  }\n\nset_insert_func(0);\nset_insert_func(1);\nset_insert_func(2);\nset_insert_func(3);\nset_insert_func(4);\n```\n\n剩下的就只能自己写咯。\n\n## 输入输出框\n\nqt为用户提供了`text Browser`,`text Edit`,`Plain text edit`,`line edit`等组件作为文本框。这里选择了text Browser，目的是屏蔽直接复制粘贴输入，防止非法字符进入。结果后面发现`text Browser`是由`text Edit`继承而来，因此browser也可以提供输入功能（离谱，read Only属性。\n\n所有的输入按键都将在输入框中插入一个对应的字符。这里只需要调用`text Browser`类中自带的public function member：`insertPlainText(QString)`。\n\n*问题*：文本框中的光标只有在选中文本框时才会显示，如果使用鼠标点击按键进行输入，输入框中的光标实际仍然存在但不显示。\n\n- 为了使得光标时刻存在，这里使用了一个简单粗暴的方法，为所有按键功能加上`setFocus()`。从而保证焦点始终在输入框中。\n\n对于输出框，每次显示结果都是更新所有内容（而不是插入），因此需要`setPlainText`。\n\n## 等号\n\n等号按键是计算器最核心的按键，以下为等号按键的槽函数\n\n```c++\n//mainwindow.cpp\nvoid MainWindow::on_pushButton_equal_clicked() {\n  ui->textBrowser_input->setFocus();\n\n  Location::isRead = 0;\n\n  QString s = ui->textBrowser_input->toPlainText();\n  QString rst = parser(s);\n  ui->textBrowser_output->setPlainText(rst);\n  if (Location::autoSave) {\n    save(Location::filePath, s, rst);\n  }\n}\n```\n\n按下等号后，程序首先保证焦点仍然在输入框口上，然后讲是否正在读取历史记录按键设置为0（这讲在后面的历史记录读取中说到），然后获取输入框中的内容，交给由竞赛大佬@龚程昊编写的parser函数进行处理（这将在后面数据处理中说到），然后将parser函数返回的字符串（QString）显示到输出框中，然后在自动保存功能开启的情况下，保存至本地文件中。\n\n## 数据处理\n\n等会儿copy大佬写的东西，大致思路是使用栈和转化为前缀表达式。\n\n但大佬使用的使用的是std库，并且是作为一个单独的cpp程序书写的（方便调试）。因此，这里将源文件复制到parser文件中，并将main函数改写成接受`QString`作为参数，返回`QString`的parser()函数。这里用到了`QString::toStdString`和`QString::fromStdString`。\n\n记录几个当时测试出来的bug：\n\n1. 只写一个数后按等号，直接返回0\n2. 没有考虑负数\n3. 没有考虑溢出\n\n附上代码\n\n```cpp\n//parser.cpp\n#include \"parser.h\"\n\nusing namespace std;\n\nbool pd(char i) {\n  if ((i <= 57 && i >= 48) || (i >= 65 && i <= 70)) return 0;\n  return 1;\n}\n\nint pri(char i)  // priority\n{\n  if (i == '+' || i == '-') return 1;\n  if (i == '*' || i == '/') return 2;\n  if (i == '(') return 0;\n  if (i == ')') return -1;\n  return 255;\n}\nbool judge(char i)  //乱码\n{\n  if ((i <= 57 && i >= 48) || (i >= 65 && i <= 70) || i == '+' || i == '-' ||\n      i == '*' || i == '/' || i == '(' || i == ')') {\n    return 0;\n  }\n  return 1;\n}\n\nQString parser(QString expression) {\n  using namespace std;\n  const int N = 1007;\n  const long R = LONG_MAX;\n  char s[N], stack1[N];\n  long read[N], sta[N], stack2[N], stt[N];\n  bool f[N] = {0}, flag[N] = {0}, ff = 0, fff = 0;\n  string c, sc;\n  string str, as = expression.toStdString();\n  str = \"0+\" + as;\n  int l = str.length();\n  for (int i = 0; i < l; i++) {\n    s[i] = str[i];\n    if (judge(s[i])) {\n      ff = 1;\n    }\n    if (s[i] == '(' && (s[i + 1] == '*' || s[i + 1] == '/')) ff = 1;\n    if (s[i] == ')' && (s[i - 1] == '+' || s[i - 1] == '-' || s[i - 1] == '*' ||\n                        s[i - 1] == '/'))\n      ff = 1;\n  }\n  if (pd(s[l - 1]) && s[l - 1] != ')') ff = 1;\n  int st = 0;\n  for (int i = 0; i < l; i++)  //括号是否匹配\n  {\n    if (s[i] == '(') st++;\n    if (s[i] == ')') st--;\n  }\n  if (st != 0) ff = 1;\n  int j = 0, k = 0, m = 0;\n  while (j < l && ff == 0) {\n    if (!pd(s[j]))  //数字\n    {\n      if (s[j] <= 57 && s[j] >= 48) {\n        sta[k] = s[j] - 48;\n        j++;\n        k++;\n      } else if (s[j] >= 65 && s[j] <= 70) {\n        sta[k] = s[j] - 55;\n        j++;\n        k++;\n      }\n    } else if (pd(s[j]))  //符号\n    {\n      if (!pd(s[j - 1]) && j > 0)  //前面的数字\n      {\n        int cnt = 0;\n        char c = s[j];\n        for (int h = 0; k > 0; h++) {\n          cnt += sta[k - 1] * pow(16, h);\n          k--;\n        }\n        read[m] = cnt;\n        m++;\n        j++;\n        read[m] = c;\n        f[m] = 1;\n        m++;\n\n      } else {  //前面的符号\n        char c = s[j];\n        read[m] = c;\n        f[m] = 1;\n        m++;\n        j++;\n      }\n    }\n  }\n  if (!pd(s[l - 1]))  //数字\n  {\n    if (k > 9) {\n      return \"Detect Overflow\";\n    }\n    int cnt = 0;\n    for (int h = 0; k > 0; h++) {\n      cnt += sta[k - 1] * pow(16, h);\n      if (cnt > R) return \"Detect Overflow\";\n      k--;\n    }\n    read[m] = cnt;\n    m++;\n    j++;\n  }\n  for (int i = 0; i < m - 1; i++) {\n    if (i == 1) {\n      if (f[i] == 1 && f[i + 1] == 1 && pri(read[i]) >= 1 &&\n          pri(read[i + 1]) == 2) {\n        ff = 1;\n      }\n    } else if (f[i] == 1 && f[i + 1] == 1 && pri(read[i]) >= 1 &&\n               pri(read[i + 1]) >= 1) {\n      ff = 1;\n    }\n  }\n  int a = 0, b = 0;  //反缀表达式\n  for (int i = 0; i < m; i++) {\n    if (f[i] == 0) {\n      stack2[a] = read[i];\n      a++;\n    } else if (f[i] == 1) {\n      if (read[i] == '(') {\n        stack1[b] = '(';\n        b++;\n      } else if (pri(read[i]) == 1)  //+-\n      {\n        while (pri(stack1[b - 1]) >= 1 && b > 0) {\n          stack2[a] = stack1[b - 1];\n          flag[a] = 1;\n          b--;\n          a++;\n        }\n        stack1[b] = read[i];\n        b++;\n      } else if (pri(read[i]) == 2)  //*/\n      {\n        while (pri(stack1[b - 1]) == 2 && b > 0) {\n          stack2[a] = stack1[b - 1];\n          flag[a] = 1;\n          b--;\n          a++;\n        }\n        stack1[b] = read[i];\n        b++;\n      } else if (read[i] == ')') {\n        while (stack1[b - 1] != '(') {\n          stack2[a] = stack1[b - 1];\n          flag[a] = 1;\n          b--;\n          a++;\n        }\n        b--;\n      }\n    }\n  }\n  while (b > 0) {\n    stack2[a] = stack1[b - 1];\n    flag[a] = 1;\n    a++;\n    b--;\n  }\n  // calculation\n  int g = 0, cn = 0;\n  for (int i = 0; i < a; i++) {\n    if (!flag[i])  //数字\n    {\n      stt[g] = stack2[i];\n      g++;\n    } else if (flag[i])  //符号\n    {\n      switch (stack2[i]) {\n        case '+':\n          cn = stt[g - 2] + stt[g - 1];\n          if (cn > R) ff = 1;\n          break;\n        case '-':\n          cn = stt[g - 2] - stt[g - 1];\n          if (cn < -R) ff = 1;\n          break;\n        case '*':\n          cn = stt[g - 2] * stt[g - 1];\n          if (cn > R || cn < -R) ff = 1;\n          break;\n        case '/':\n          if (stt[g - 1] != 0) {\n            cn = stt[g - 2] / stt[g - 1];\n            break;\n          } else if (stt[g - 1] == 0) {\n            ff = 1;\n            break;\n          }\n      }\n      g -= 2;\n      stt[g] = cn;\n      g++;\n    }\n  }\n  int x;\n  int cnn = cn;\n  if (cn == 0 && !ff) {\n    //        cout<<str<<\"=\"<<cn<<endl;\n    return \"0\";\n    fff = 1;\n  }\n  while (cn != 0 && !ff)  //转十六进制\n  {\n    if (cn >= 0) {\n      x = cn % 16;\n      if (x < 10)\n        c = x + '0';\n      else\n        c = x + 'A' - 10;\n      sc = c + sc;\n      cn /= 16;\n    } else if (cn <= 0) {\n      x = cn % 16;\n      if (x > -10)\n        c = -x + '0';\n      else\n        c = -x + 'A' - 10;\n      sc = c + sc;\n      cn /= 16;\n    }\n  }\n  if (cnn < 0) {\n    sc = '-' + sc;\n  }\n  if (!ff && !fff) {\n    //        cout<<as<<\"=\";\n    //        cout<<sc<<endl;\n    if (sc == \"-80000000\") {\n      return \"Detect Overflow\";\n    }\n    return QString::fromStdString(sc);\n  }\n  return \"Formula Error\";\n}\n\n```\n\n贴代码的时候才发现大佬写了一个pd（判断）和一个judge（还是判断）。算了算了，能用就行（\n\n## 历史记录\n\n如果只是作为计算器，以上功能就已经可以算完成了。但大多数计算器都是有历史记录功能的，因此这个计算器也该有一个。\n\n这里将历史记录分为底层和顶层两部分来设计，顶层使用Qt框架，而底层使用c的基本库，从而实现更加原子化和方便的操作。\n\n顶层实现的用户接口功能：\n\n- 手动保存当前结果\n- 选择是否自动保存结果\n- 选择保存位置\n- 读取历史记录\n\n底层实现的文本的读写功能\n\n- 获取时间\n- 记录结果\n- 写入和读取\n\n### 底层设计细节\n\n保存功能被设计为，获取当前时间和本次运算的算式和结果，以新行的方式追加到某文件的结尾。保存功能的底层设计都被保存在`saving`文件下。\n\n为此底层使用std库设计了`save()`函数。该函数还调用了`getCurrentTime()`来获取当前时间。当然，这个函数也是由`main()`函数修改而来，由std框架接入了qt框架。源码如下：\n\n```cpp\n//saving.cpp\nstatic string getCurrentTime()  //输出当前时间\n{\n  time_t t = time(0);\n  char ch[64] = {0};\n  strftime(ch, sizeof(ch) - 1, \"%Y-%m-%d %H:%M:%S\", localtime(&t));\n  return ch;\n}\nbool save(QString location, QString fomula, QString data) {\n  string addr = location.toStdString();\n  fstream f;\n  f.open(addr, ios::out | ios::app);\n  f << getCurrentTime() << \" \" << fomula.toStdString() << \"=\"\n    << data.toStdString()\n    << endl;  //变量addr、以及gch的等式和输出结果变量还需加进去\n  f.close();\n  return 1;\n}\n```\n\n除了保存结果外，还需要读取结果，读取结果需要始终从最后一行开始往上读。经历了一系列讨论之后，本项目决定使用读取整个文件来获取所有的行数，并根据行数来获取内容。为此有了`CountLine()`和`readLine()`两个函数：\n\n```cpp\nint CountLines(QString filename) {\n  ifstream f;\n  int n = 0;\n  string tmp;\n  string stdfilename = filename.toStdString();\n  // ios::in 表示以只读的方式读取文件\n  f.open(stdfilename, ios::in);\n  //文件打开失败:返回0\n  if (f.fail()) {\n    return 0;\n  } else {\n    //文件存在\n    while (getline(f, tmp, '\\n')) {\n      n++;\n    }\n    f.close();\n    return n;\n  }\n}\nQString ReadLine(QString filename, int line)  //读取指定行文件\n{\n  // line行数限制 1 - lines\n  if (line > 0 && line <= CountLines(filename)) {\n    ifstream f;\n    string stdfilename = filename.toStdString();\n    f.open(stdfilename, ios::in);\n\n    vector<string> strVec;\n    //行0 - 行lines对应strvect[0] - strvect[lines]\n    while (!f.eof()) {\n      string inbuf;\n      getline(f, inbuf, '\\n');\n      strVec.push_back(inbuf);\n    }\n    return QString::fromStdString(strVec[line - 1]);\n  } else {\n    return NULL;\n  }\n}\n```\n\n读取整个文件并计算行数并不是一个效率高的方式，但在文件不大和不追求高效率的条件下，这是最好的实践方式。因为考虑这里还需要考虑到连续读取历史文件。\n\n当用户按下`UP`按键时，表示用户开始读取历史文件。用户首先查看的应该是历史文件的最后一行，当用户再次按下`UP`时，读取倒数第二行，依次类推。为了实现该功能，这里使用了一个全局变量`line`表示当前正在读取的行数，该行数被初始化为历史记录的总行数。然后再次读取将会`--line`后读取。当用户按下`DOWN`按键时，++line后读取。\n\n这里就要考虑到另一个问题，读取一定历史记录后，用户重新进行计算，然后再次查看历史记录，这样行数应当从新的历史记录最后一行开始计算。为此，这里引入了`isRead`变量，该变量初始化为`0`，表示现在未在读取。首次按下`UP`按键时，该变量置`1`，同时将`line`变量初始化为当前历史记录行数。当用户按下`UP`或`DOWN`按键时，正常修改`line`变量的值并进行读取即可。当用户按下`=`或手动保存时，需要将`isRead`置零。这样下一次按下`UP`时，将重新读取历史文件行数并为`line`赋值。\n\n```cpp\n//mainwindow.cpp\n//等号的槽函数在上面\nvoid MainWindow::on_pushButton_Up_clicked() {\n  ui->textBrowser_input->setFocus();\n  if (Location::isRead) {\n    --Location::line;\n  } else {\n    Location::line = CountLines(Location::filePath);\n    Location::isRead = 1;\n  }\n  ui->textBrowser_output->setText(ReadLine(Location::filePath, Location::line));\n}\nvoid MainWindow::on_pushButton_Down_clicked() {\n  ui->textBrowser_input->setFocus();\n  if (Location::isRead) {\n    ++Location::line;\n  }\n  ui->textBrowser_output->setText(ReadLine(Location::filePath, Location::line));\n}\n```\n\n保存和读取的路径将在`顶层设计细节`中进一步讨论。\n\n### 顶层设计细节\n\n这里在menubar中设置了一个`history location`按键，用于修改历史文件的存放位置。当按下此按键时，程序应当打开一个新的窗口，因此，需要首先在源文件中创建一个新的窗口。右键点击`项目`，选择`add new`，选择`qt设计师类`，然后会分别在三个文件夹中依次得到头文件、源文件、ui设计文件。然后需要在主窗口中设置点击`history location`按键打开新窗口。\n\n```cpp\n//mainwindow.cpp\nvoid MainWindow::on_actionHistory_location_triggered() {\n  Location *new_win = new Location();\n  new_win->show();\n}\n```\n\n**注意**：记得在`mainwindow.h`中include`location.h`，按下打开新窗口实际上就是创建一个新的Location窗口，然后展示。\n\n接下来就是在`location.ui`中修改和设计可视化窗口，此项目使用了栅格布局，在左侧设置了一个较大的`textBrowser`和较小的`lineEdit`（设为不可修改，用于给出提示），在右侧依次设置了`选择文件`，`选择文件夹`，`确定`，`取消` 四个按键。\n\n> 选择文件：调用Qt库，打开系统默认的文件选择框，设置必须选择.txt格式结尾的文件，将返回的结果输出至`textBrowser`。\n>\n> 选择文件夹：同上，但是选择的是文件夹，并且返回的是存在的文件夹的路径，将返回的结果加上`/result.txt`后输入至`textBrowser`。\n>\n> 确定：按下后，读取`textBrowser`中的路径，检查其合法性（因为一开始`textBrowser`设置了可以直接更改，因此可能会输入奇怪的路径），若不合法则在`lineEdit`中给出相应的报错（格式不合法或路径不合法）。若合法，则检查文件是否存在，不存在则创建。当一切都合理以后，将全局变量`filePath`设为文本框中的内容，并关闭`Location`窗口。\n>\n> 取消：直接关闭，不做任何修改。\n\n```cpp\n//location.cpp\nvoid Location::on_pushButton_path_clicked() {\n  QString file_name =\n      QFileDialog::getOpenFileName(NULL, \"选择txt文件\", \".\", \"*.txt\");\n  ui->textEdit->setText(file_name);\n}\n\nvoid Location::on_pushButton_dir_clicked() {\n  QString dir_name = QFileDialog::getExistingDirectory(NULL, \"选择文件夹\", \".\");\n  ui->textEdit->setText(dir_name + \"/result.txt\");\n}\n\nvoid Location::on_pushButton_cancel_clicked() { Location::close(); }\n\nvoid Location::on_pushButton_sure_clicked() {\n  QString new_path = ui->textEdit->toPlainText();\n  QFileInfo info(new_path);\n\n  if (!info.exists()) {\n    if (new_path.contains(\".txt\")) {\n      QFile f(new_path);\n      f.open(QIODevice::WriteOnly);\n      f.close();\n    } else {\n      ui->prompt->setText(\"路径或格式不合法，请重新输入\");\n    }\n  }\n  Location::filePath=new_path;\n  Location::close();\n}\n```\n\n自动保存功能被设计为主窗口中菜单栏中的一个按键，默认为开启状态，显示为`Auto Save On`，当点击该按键后，槽函数将该文本替换为`Auto Save Off`，并将全局变量`autoSave`置零。\n\n`filePath`和`autoSave`以及底层中的`isRead`和`line`都设计为一个全局变量，便于主窗口调用。\n\n```cpp\n//location.h\nclass Location : public QDialog {\n public:\n  static QString filePath;\n  static int line;\n  static bool isRead;\n  static bool autoSave;\n}\n\n//location.cpp\nQString Location::filePath = \"result.txt\";\nint Location::line = 0;\nbool Location::isRead = 0;\nbool Location::autoSave = 1;\n```\n\n在主窗口中，只有用户按下等号（并且自动保存功能开启）或手动保存（在`menubar`中设置了一个保存按键并且设置了快捷键）时，才会保存。因此只需在这些地方加入`save()`函数即可。当然，也要有对`autoSave`的判断。\n\n## 样式设定\n\n前面提到了可以在`ui`文件中直接修改样式，但这种方式并不利于后面的修改，因此我们选择直接调用函数的方式。如要为`centralWidget`设定样式，可以调用`setStyelSheet()`，后接一个QString，该字符串中直接书写qss内容。\n\n这里选择了另一种方式，使用qt的资源文件管理功能来存储单独的qss文件，然后以前缀引用的方式来调用这些文件。\n\n在`项目`中右键新建`qt resource file`，设定名称后打开管理界面，点击添加前缀`add prefix`。然后添加文件`add Files`。前缀决定了调用的方式（将会在源代码中演示）。文件可以新建一个`general file`后添加，也可以将其他方式创建的qss文件加入。\n\n引入的资源可以以`QFile`的方式引用。本项目在菜单栏中添加了一个黑色主题的选项，其槽函数如下\n\n```cpp\nvoid MainWindow::on_actionBlack_theme_triggered() {\n  globalQss = \":/Black.qss\";\n  QFile defaultQss(globalQss);\n  defaultQss.open(QFile::ReadOnly);\n  QString qssContent = defaultQss.readAll();\n  centralWidget()->setStyleSheet(qssContent);\n}\n```\n\n`/`为我设定的前缀，只需以冒号开头，加上前缀和文件，即表明在应用qt指定好的资源文件。接下来就只需打开该文件并读取其内容，然后为需要的组件设定qss样式即可。\n\n**注意**：使用qss的一些麻烦：后面我希望能设定字体的大小、样式等，但这时通过`setFont()`等函数并不起作用。原因估计是qss的优先级很高，直接设定将不起作用。这时我只能再写一个`changeStyle()`函数，通过qss样式表更新来进行样式更新\n\n```cpp\nvoid MainWindow::changeStyle(QString newStyle, QWidget *widget) {\n  QString oldStyle = widget->styleSheet();\n  oldStyle += newStyle;\n  widget->setStyleSheet(oldStyle);\n}\n```\n\n所以这里我只写了改变字体的函数。\n\n```cpp\nvoid MainWindow::on_actionLarge_font_size_triggered() {\n  changeStyle(\"*{font:30px;}\", MainWindow::centralWidget());\n}\n```\n\n## 保存设置\n\n类似于文件的保存位置，是否自动保存等功能，每次重新启动程序后都会按照程序的设定重新初始化。为了使得这些设定能被保存下来，需要使用一个文件将这些配置保存下来。恰好最近见到了许多`ini`格式文件，qt也提供了`QSetting`及配套的`ini`配置文件读写。\n\n配置文件应当在主窗口创建时被读取，在主窗口被销毁时被存入。因此只需在`mainwindow`的构造函数和析构函数中加入读写`ini`文件的步骤即可。需要注意的是，要考虑`ini`文件不存在的情况，不存在时需要使用程序的内置设定。\n\n ```cpp\n MainWindow::MainWindow(QWidget *parent)\n     : QMainWindow(parent), ui(new Ui::MainWindow) {\n   ui->setupUi(this);\n \n   this->grabKeyboard();\n \n   QSettings *iniRead = new QSettings(\"config.ini\", QSettings::IniFormat);\n   QString iniAuto = iniRead->value(\"autoSave\").toString();\n   QString iniPath = iniRead->value(\"filePath\").toString();\n   QString iniQss = iniRead->value(\"globalQss\").toString();\n   delete iniRead;\n \n   // init autoSave\n   if (!iniAuto.isEmpty() && !iniAuto.toInt()) {\n     Location::autoSave = 0;\n     ui->actionAuto_Save->setText(\"Auto Save Off\");\n   }\n \n   // init filePath\n   QFile iniPathFile(iniPath);\n   if (iniPathFile.open(QFile::WriteOnly)) {\n     Location::filePath = iniPath;\n   }\n \n   // init Qss file(theme)\n   QFile iniQssFile(iniQss);\n   QString qssContent;\n   if (iniQssFile.open(QFile::ReadOnly)) {\n     qssContent = iniQssFile.readAll();\n     globalQss = iniQss;\n   } else {\n     QFile defaultQss(\":/Black.qss\");\n     defaultQss.open(QFile::ReadOnly);\n     qssContent = defaultQss.readAll();\n   }\n   centralWidget()->setStyleSheet(qssContent);\n }\n \n MainWindow::~MainWindow() {\n   QSettings *IniWrite = new QSettings(\"config.ini\", QSettings::IniFormat);\n   IniWrite->setValue(\"autoSave\", Location::autoSave);\n   IniWrite->setValue(\"filePath\", Location::filePath);\n   IniWrite->setValue(\"globalQss\", globalQss);\n   delete IniWrite;\n \n   delete ui;\n }\n \n ```\n\n## 其他\n\n- 在主函数中为整个窗口设置了透明度，让它看起来酷炫一点点。\n- 在主函数中为窗口设定名称。\n- 在`.pro`文件中加入图标文件，使得生成的程序有图标\n\n# 感想\n\n## 收获\n\n- 不再害怕qt框架了，反而觉得它好用。\n- qt的窗口类很舒服，有清晰且层次分明的关系，有足够好用的成员函数。\n- qt的基本库也有不少可以讨论的，如QString的设计，不仅提供了基本的可变长度和操作符重载，还考虑到了和std库之间的转换。\n- qt的信号与槽机制是qt最精髓的东西之一，信号是一种非常不错的线程间通信方式，很遗憾我没有手动使用connect函数来创建信号与槽。但确实在写qt的过程中，qtcreator已经为我提供了足够的可视化信号与槽构建工具。\n- qss基本等于css\n- qt以易于制作ui界面出名，但用了之后发现，qt实际上是借鉴了很多现代浏览器（前端）的实现方式。我写的时候感觉自己像是在写js+css。对于一个web项目来说，前端工程师书写html，css，以及利用框架来写js。后端工程师则使用各种工具来构建web服务。但对于qt这样一种前后结合的一体化程序设计框架来说，前后的分离并不彻底（虽然对硬件工程师来说可能会很友好）。\n- 我还是支持“qt是一个平台而不只是一个ui框架”这种说法。qt在基本库中的内容一点也不比它在ui界面中的少。无论是基本库还是ui库，都有很多可以研究的东西。\n- 宏的自动扩展确实好用\n- qt毕竟还是封装的比较高层了，要是需要一些简单的功能，还是老老实实写原生的c和std吧。\n\n## 遗憾\n\n- 大佬说他使用了前缀表达式，求余和翻方功能不好实现，我懂的算法也不多，这两个功能没能实现。只能说算法能力有待提高了。\n","source":"_posts/0xCalculator.md","raw":"---\nauthor: kawhicurry\ntitle: 0xCalculator 16进制计算器\ncategories: cpp\ndate: 2021-11-28 17:31:31\ntags: cpp\n---\n\n# 功能\n\n1. 对十六进制数进行双目、表达式运算\n2. 对运算结果进行保存和再读取，支持自动保存和手动保存\n3. 自定义运算结果储存位置\n4. 自定义字体大小\n5. 可更换窗口风格（换肤）\n6. 自动保存设置\n\n# 任务分配\n\n1. ：ui设计与qt框架\n2. ：核心算法\n3. ：文件读写\n\n# 开源地址\n<https://github.com/kawhicurry/0xCalculator>\n\n# 开发过程\n\n## Qt框架\n\nqt文件将会以平铺的方式放置在同一工程目录下，其组织结构由`.pro`文件记录，该文件类似于makefile（可以看作是qmakefile？）。其标准目录如下：\n\n> .pro：记录文件\n>\n> /Headers：略\n>\n> /Sources：略\n>\n> /Forms：存放`.ui`文件，实际为`xml`格式，但不建议直接编辑，所有操作应当在设计模块中完成\n>\n> /Resources：存放qt标准资源（可以qt方式引用的资源）\n>\n> /Other files\n\n## UI设计\n\n直接在qt creator的设计界面中打开`设计`模块。从画面左侧拖动组件，摆放至设计框中即可。\n\n*问题*：组件散乱\n\n- 左侧组件库中有`layout`组件,将其拖动至设计框中,再向layout中添加组件，即可使所有组件呈现一定规律。\n\n>布局类型：\n>\n>垂直：略\n>\n>水平：略\n>\n>栅格（grid）：上面俩合起来\n>\n>窗口：？存疑，不是很能理解这是啥\n\n*问题*：使用layout组件后无法布局固定，启动ui界面后拖动窗口改变其大小，layout组件位置不动。\n\n- 应当首先在右侧`对象`框中选中主窗口（mainwindow）中的中间部件（centralwidget），右键选择布局，为整个中间部分设定大的布局，（注：主窗口除了中间部件还初始化了一个菜单栏（menubar）），然后在该布局中嵌套布局或组件。本方案选择了栅格布局，虽然只需垂直布局即可，但为了可拓展性，还是选择栅格。接下来在整个中间部分的栅格布局中，嵌套了一个垂直布局（用于输入和输出）和一个栅格布局（用于存放按键）。\n\n接下来在主窗口中添加所需的组件，分别为输入框、输出框、5*6个按键。然后可以对其属性进行可视化的设计，以下是对`设计`界面中一些工具的解释：\n\n> 右侧下方为属性框，显示了所选定组件的属性，每个组件都是层层继承而来，因此要注意每一层的具体属性以及继承关系。\n>\n> 右侧上方为对象框，显示了当前ui文件中所有文件属性。\n>\n> 正中央下方的框实际上有两个可编辑区域，一个为action editor，即为组件添加动作（可方便设置快捷键）。另一个为信号与槽。\n>\n> 注：信号与槽是最Qt制作ui界面中最重要的机制。\n\n创建槽函数：在信号与槽编辑框中点击加号创建信号与槽，然后选择信号的发送对象、发送信号量、槽、响应函数。此处的创建**只支持内定的槽函数**，想要自定义槽函数，需在右侧对象中找到对象，然后右键选择转到槽，接下来选择信号量之后，Qt会跳转该ui文件对应的cpp文件下，并自动创建一个该槽函数的实现（.h文件中也会自动添加声明）。接下来只需在此槽函数中编写发送信号后（触发信号发送条件），所需只需的步骤即可。\n\n> 信号量是Qt类自带的属性，某个类既有自己的属性，也有继承而来的属性。如pushButton组件继承自QAbstractButton，后者又继承自QWidget，后者又继承自QObject。对于QAbstractButton，其自带的信号有`clicked()`,`pressed()`等，对于QWidget，有`windowIconChanged`等。具体解释请参考官方文档。\n\n`设计`界面支持大量的属性设置，如字体，背景等。并且可以直接在ui界面中即时显示，但并不推荐直接做修改。\n\n一种渲染方式：Qt提供了qss来进行类似css的样式渲染，只需选中对象然后右键改变样式表，修改某个组件的样式表即可。Qss还提供了选择器的功能，因此，只需在某个较大的组件中设置样式表，并对不同的渲染对象进行选择即可。本方案一开始的办法就是在centralwidget组件中设置样式表，完成了酷炫的按键风格。需要注意的是，改变样式表的方法在Qt中是存在一定问题的，并且，**任何写死的方法都可能在以后要修改时造成麻烦**。关于样式表后面还会再进一步设定。\n\n## 模拟按键\n\n一个计算器应当提供一系列的按键，因此要在栅格布局中拖入一定数量的按键。按键分为输入按键和功能按键。\n\n- 输入按键：0123456789ABCDEF+-*/（）\n- 功能按键：<- -> DEL CE UP DOWN =\n\n对于输入按键，按下按键后应当在输入框中显示对应的输入，同时这些按键应当有对应的键盘输入。\n\n对于输出按键，左移和右移是为了移动输入框中的光标。DEL清除一个字符，CE要同时清除输入和输出框。UP和DOWN提供了查看历史功能。等号是整个计算器的核心功能，按下等号后，应当读取输入框中的算式，进行计算后将结果字符串返回至输出框中。\n\n通过在组件上右键选择 转到槽 可以快捷创建槽函数。示例如图：\n\n```c++\n//mainwindow.h\nvoid MainWindow::on_pushButton_left_bracket_clicked();\n//mainwindow.cpp\nvoid MainWindow::on_pushButton_left_bracket_clicked() {\n  ui->textBrowser_input->setFocus();\n  ui->textBrowser_input->insertPlainText(\"(\");\n}\n```\n\n手动创建几个后，就可以发现其规矩。一个槽函数的名称由`on_name_action`组成。`pushButton_left_bracket`是改按键的名称，这个名称需要在ui文件中指定，当拖动pushButton的时候，qt会按照12345依次给其一个默认名称，并且上面的默认文字都是pushButton。因此对于声明，可以用宏生成。\n\n```c++\n//mainwindwo.h\n#define clicked_func(name) void on_pushButton_##name##_clicked();\n  clicked_func(0);\n  clicked_func(1);\n  clicked_func(2);\n  clicked_func(3);\n//...\n#define triggered_func(name) void on_action##name##_triggered();\n\n  triggered_func(Author);\n  triggered_func(Save) triggered_func(Read);\n  triggered_func(History_location);\n  triggered_func(Auto_Save);\n```\n\n对于实现，部分直接输入的槽函数也可以用宏生成\n\n```cpp\n//mainwindow.cpp\n#define set_insert_func(name)                         \\\n  void MainWindow::on_pushButton_##name##_clicked() { \\\n    ui->textBrowser_input->setFocus();                \\\n    ui->textBrowser_input->insertPlainText(#name);    \\\n  }\n\nset_insert_func(0);\nset_insert_func(1);\nset_insert_func(2);\nset_insert_func(3);\nset_insert_func(4);\n```\n\n剩下的就只能自己写咯。\n\n## 输入输出框\n\nqt为用户提供了`text Browser`,`text Edit`,`Plain text edit`,`line edit`等组件作为文本框。这里选择了text Browser，目的是屏蔽直接复制粘贴输入，防止非法字符进入。结果后面发现`text Browser`是由`text Edit`继承而来，因此browser也可以提供输入功能（离谱，read Only属性。\n\n所有的输入按键都将在输入框中插入一个对应的字符。这里只需要调用`text Browser`类中自带的public function member：`insertPlainText(QString)`。\n\n*问题*：文本框中的光标只有在选中文本框时才会显示，如果使用鼠标点击按键进行输入，输入框中的光标实际仍然存在但不显示。\n\n- 为了使得光标时刻存在，这里使用了一个简单粗暴的方法，为所有按键功能加上`setFocus()`。从而保证焦点始终在输入框中。\n\n对于输出框，每次显示结果都是更新所有内容（而不是插入），因此需要`setPlainText`。\n\n## 等号\n\n等号按键是计算器最核心的按键，以下为等号按键的槽函数\n\n```c++\n//mainwindow.cpp\nvoid MainWindow::on_pushButton_equal_clicked() {\n  ui->textBrowser_input->setFocus();\n\n  Location::isRead = 0;\n\n  QString s = ui->textBrowser_input->toPlainText();\n  QString rst = parser(s);\n  ui->textBrowser_output->setPlainText(rst);\n  if (Location::autoSave) {\n    save(Location::filePath, s, rst);\n  }\n}\n```\n\n按下等号后，程序首先保证焦点仍然在输入框口上，然后讲是否正在读取历史记录按键设置为0（这讲在后面的历史记录读取中说到），然后获取输入框中的内容，交给由竞赛大佬@龚程昊编写的parser函数进行处理（这将在后面数据处理中说到），然后将parser函数返回的字符串（QString）显示到输出框中，然后在自动保存功能开启的情况下，保存至本地文件中。\n\n## 数据处理\n\n等会儿copy大佬写的东西，大致思路是使用栈和转化为前缀表达式。\n\n但大佬使用的使用的是std库，并且是作为一个单独的cpp程序书写的（方便调试）。因此，这里将源文件复制到parser文件中，并将main函数改写成接受`QString`作为参数，返回`QString`的parser()函数。这里用到了`QString::toStdString`和`QString::fromStdString`。\n\n记录几个当时测试出来的bug：\n\n1. 只写一个数后按等号，直接返回0\n2. 没有考虑负数\n3. 没有考虑溢出\n\n附上代码\n\n```cpp\n//parser.cpp\n#include \"parser.h\"\n\nusing namespace std;\n\nbool pd(char i) {\n  if ((i <= 57 && i >= 48) || (i >= 65 && i <= 70)) return 0;\n  return 1;\n}\n\nint pri(char i)  // priority\n{\n  if (i == '+' || i == '-') return 1;\n  if (i == '*' || i == '/') return 2;\n  if (i == '(') return 0;\n  if (i == ')') return -1;\n  return 255;\n}\nbool judge(char i)  //乱码\n{\n  if ((i <= 57 && i >= 48) || (i >= 65 && i <= 70) || i == '+' || i == '-' ||\n      i == '*' || i == '/' || i == '(' || i == ')') {\n    return 0;\n  }\n  return 1;\n}\n\nQString parser(QString expression) {\n  using namespace std;\n  const int N = 1007;\n  const long R = LONG_MAX;\n  char s[N], stack1[N];\n  long read[N], sta[N], stack2[N], stt[N];\n  bool f[N] = {0}, flag[N] = {0}, ff = 0, fff = 0;\n  string c, sc;\n  string str, as = expression.toStdString();\n  str = \"0+\" + as;\n  int l = str.length();\n  for (int i = 0; i < l; i++) {\n    s[i] = str[i];\n    if (judge(s[i])) {\n      ff = 1;\n    }\n    if (s[i] == '(' && (s[i + 1] == '*' || s[i + 1] == '/')) ff = 1;\n    if (s[i] == ')' && (s[i - 1] == '+' || s[i - 1] == '-' || s[i - 1] == '*' ||\n                        s[i - 1] == '/'))\n      ff = 1;\n  }\n  if (pd(s[l - 1]) && s[l - 1] != ')') ff = 1;\n  int st = 0;\n  for (int i = 0; i < l; i++)  //括号是否匹配\n  {\n    if (s[i] == '(') st++;\n    if (s[i] == ')') st--;\n  }\n  if (st != 0) ff = 1;\n  int j = 0, k = 0, m = 0;\n  while (j < l && ff == 0) {\n    if (!pd(s[j]))  //数字\n    {\n      if (s[j] <= 57 && s[j] >= 48) {\n        sta[k] = s[j] - 48;\n        j++;\n        k++;\n      } else if (s[j] >= 65 && s[j] <= 70) {\n        sta[k] = s[j] - 55;\n        j++;\n        k++;\n      }\n    } else if (pd(s[j]))  //符号\n    {\n      if (!pd(s[j - 1]) && j > 0)  //前面的数字\n      {\n        int cnt = 0;\n        char c = s[j];\n        for (int h = 0; k > 0; h++) {\n          cnt += sta[k - 1] * pow(16, h);\n          k--;\n        }\n        read[m] = cnt;\n        m++;\n        j++;\n        read[m] = c;\n        f[m] = 1;\n        m++;\n\n      } else {  //前面的符号\n        char c = s[j];\n        read[m] = c;\n        f[m] = 1;\n        m++;\n        j++;\n      }\n    }\n  }\n  if (!pd(s[l - 1]))  //数字\n  {\n    if (k > 9) {\n      return \"Detect Overflow\";\n    }\n    int cnt = 0;\n    for (int h = 0; k > 0; h++) {\n      cnt += sta[k - 1] * pow(16, h);\n      if (cnt > R) return \"Detect Overflow\";\n      k--;\n    }\n    read[m] = cnt;\n    m++;\n    j++;\n  }\n  for (int i = 0; i < m - 1; i++) {\n    if (i == 1) {\n      if (f[i] == 1 && f[i + 1] == 1 && pri(read[i]) >= 1 &&\n          pri(read[i + 1]) == 2) {\n        ff = 1;\n      }\n    } else if (f[i] == 1 && f[i + 1] == 1 && pri(read[i]) >= 1 &&\n               pri(read[i + 1]) >= 1) {\n      ff = 1;\n    }\n  }\n  int a = 0, b = 0;  //反缀表达式\n  for (int i = 0; i < m; i++) {\n    if (f[i] == 0) {\n      stack2[a] = read[i];\n      a++;\n    } else if (f[i] == 1) {\n      if (read[i] == '(') {\n        stack1[b] = '(';\n        b++;\n      } else if (pri(read[i]) == 1)  //+-\n      {\n        while (pri(stack1[b - 1]) >= 1 && b > 0) {\n          stack2[a] = stack1[b - 1];\n          flag[a] = 1;\n          b--;\n          a++;\n        }\n        stack1[b] = read[i];\n        b++;\n      } else if (pri(read[i]) == 2)  //*/\n      {\n        while (pri(stack1[b - 1]) == 2 && b > 0) {\n          stack2[a] = stack1[b - 1];\n          flag[a] = 1;\n          b--;\n          a++;\n        }\n        stack1[b] = read[i];\n        b++;\n      } else if (read[i] == ')') {\n        while (stack1[b - 1] != '(') {\n          stack2[a] = stack1[b - 1];\n          flag[a] = 1;\n          b--;\n          a++;\n        }\n        b--;\n      }\n    }\n  }\n  while (b > 0) {\n    stack2[a] = stack1[b - 1];\n    flag[a] = 1;\n    a++;\n    b--;\n  }\n  // calculation\n  int g = 0, cn = 0;\n  for (int i = 0; i < a; i++) {\n    if (!flag[i])  //数字\n    {\n      stt[g] = stack2[i];\n      g++;\n    } else if (flag[i])  //符号\n    {\n      switch (stack2[i]) {\n        case '+':\n          cn = stt[g - 2] + stt[g - 1];\n          if (cn > R) ff = 1;\n          break;\n        case '-':\n          cn = stt[g - 2] - stt[g - 1];\n          if (cn < -R) ff = 1;\n          break;\n        case '*':\n          cn = stt[g - 2] * stt[g - 1];\n          if (cn > R || cn < -R) ff = 1;\n          break;\n        case '/':\n          if (stt[g - 1] != 0) {\n            cn = stt[g - 2] / stt[g - 1];\n            break;\n          } else if (stt[g - 1] == 0) {\n            ff = 1;\n            break;\n          }\n      }\n      g -= 2;\n      stt[g] = cn;\n      g++;\n    }\n  }\n  int x;\n  int cnn = cn;\n  if (cn == 0 && !ff) {\n    //        cout<<str<<\"=\"<<cn<<endl;\n    return \"0\";\n    fff = 1;\n  }\n  while (cn != 0 && !ff)  //转十六进制\n  {\n    if (cn >= 0) {\n      x = cn % 16;\n      if (x < 10)\n        c = x + '0';\n      else\n        c = x + 'A' - 10;\n      sc = c + sc;\n      cn /= 16;\n    } else if (cn <= 0) {\n      x = cn % 16;\n      if (x > -10)\n        c = -x + '0';\n      else\n        c = -x + 'A' - 10;\n      sc = c + sc;\n      cn /= 16;\n    }\n  }\n  if (cnn < 0) {\n    sc = '-' + sc;\n  }\n  if (!ff && !fff) {\n    //        cout<<as<<\"=\";\n    //        cout<<sc<<endl;\n    if (sc == \"-80000000\") {\n      return \"Detect Overflow\";\n    }\n    return QString::fromStdString(sc);\n  }\n  return \"Formula Error\";\n}\n\n```\n\n贴代码的时候才发现大佬写了一个pd（判断）和一个judge（还是判断）。算了算了，能用就行（\n\n## 历史记录\n\n如果只是作为计算器，以上功能就已经可以算完成了。但大多数计算器都是有历史记录功能的，因此这个计算器也该有一个。\n\n这里将历史记录分为底层和顶层两部分来设计，顶层使用Qt框架，而底层使用c的基本库，从而实现更加原子化和方便的操作。\n\n顶层实现的用户接口功能：\n\n- 手动保存当前结果\n- 选择是否自动保存结果\n- 选择保存位置\n- 读取历史记录\n\n底层实现的文本的读写功能\n\n- 获取时间\n- 记录结果\n- 写入和读取\n\n### 底层设计细节\n\n保存功能被设计为，获取当前时间和本次运算的算式和结果，以新行的方式追加到某文件的结尾。保存功能的底层设计都被保存在`saving`文件下。\n\n为此底层使用std库设计了`save()`函数。该函数还调用了`getCurrentTime()`来获取当前时间。当然，这个函数也是由`main()`函数修改而来，由std框架接入了qt框架。源码如下：\n\n```cpp\n//saving.cpp\nstatic string getCurrentTime()  //输出当前时间\n{\n  time_t t = time(0);\n  char ch[64] = {0};\n  strftime(ch, sizeof(ch) - 1, \"%Y-%m-%d %H:%M:%S\", localtime(&t));\n  return ch;\n}\nbool save(QString location, QString fomula, QString data) {\n  string addr = location.toStdString();\n  fstream f;\n  f.open(addr, ios::out | ios::app);\n  f << getCurrentTime() << \" \" << fomula.toStdString() << \"=\"\n    << data.toStdString()\n    << endl;  //变量addr、以及gch的等式和输出结果变量还需加进去\n  f.close();\n  return 1;\n}\n```\n\n除了保存结果外，还需要读取结果，读取结果需要始终从最后一行开始往上读。经历了一系列讨论之后，本项目决定使用读取整个文件来获取所有的行数，并根据行数来获取内容。为此有了`CountLine()`和`readLine()`两个函数：\n\n```cpp\nint CountLines(QString filename) {\n  ifstream f;\n  int n = 0;\n  string tmp;\n  string stdfilename = filename.toStdString();\n  // ios::in 表示以只读的方式读取文件\n  f.open(stdfilename, ios::in);\n  //文件打开失败:返回0\n  if (f.fail()) {\n    return 0;\n  } else {\n    //文件存在\n    while (getline(f, tmp, '\\n')) {\n      n++;\n    }\n    f.close();\n    return n;\n  }\n}\nQString ReadLine(QString filename, int line)  //读取指定行文件\n{\n  // line行数限制 1 - lines\n  if (line > 0 && line <= CountLines(filename)) {\n    ifstream f;\n    string stdfilename = filename.toStdString();\n    f.open(stdfilename, ios::in);\n\n    vector<string> strVec;\n    //行0 - 行lines对应strvect[0] - strvect[lines]\n    while (!f.eof()) {\n      string inbuf;\n      getline(f, inbuf, '\\n');\n      strVec.push_back(inbuf);\n    }\n    return QString::fromStdString(strVec[line - 1]);\n  } else {\n    return NULL;\n  }\n}\n```\n\n读取整个文件并计算行数并不是一个效率高的方式，但在文件不大和不追求高效率的条件下，这是最好的实践方式。因为考虑这里还需要考虑到连续读取历史文件。\n\n当用户按下`UP`按键时，表示用户开始读取历史文件。用户首先查看的应该是历史文件的最后一行，当用户再次按下`UP`时，读取倒数第二行，依次类推。为了实现该功能，这里使用了一个全局变量`line`表示当前正在读取的行数，该行数被初始化为历史记录的总行数。然后再次读取将会`--line`后读取。当用户按下`DOWN`按键时，++line后读取。\n\n这里就要考虑到另一个问题，读取一定历史记录后，用户重新进行计算，然后再次查看历史记录，这样行数应当从新的历史记录最后一行开始计算。为此，这里引入了`isRead`变量，该变量初始化为`0`，表示现在未在读取。首次按下`UP`按键时，该变量置`1`，同时将`line`变量初始化为当前历史记录行数。当用户按下`UP`或`DOWN`按键时，正常修改`line`变量的值并进行读取即可。当用户按下`=`或手动保存时，需要将`isRead`置零。这样下一次按下`UP`时，将重新读取历史文件行数并为`line`赋值。\n\n```cpp\n//mainwindow.cpp\n//等号的槽函数在上面\nvoid MainWindow::on_pushButton_Up_clicked() {\n  ui->textBrowser_input->setFocus();\n  if (Location::isRead) {\n    --Location::line;\n  } else {\n    Location::line = CountLines(Location::filePath);\n    Location::isRead = 1;\n  }\n  ui->textBrowser_output->setText(ReadLine(Location::filePath, Location::line));\n}\nvoid MainWindow::on_pushButton_Down_clicked() {\n  ui->textBrowser_input->setFocus();\n  if (Location::isRead) {\n    ++Location::line;\n  }\n  ui->textBrowser_output->setText(ReadLine(Location::filePath, Location::line));\n}\n```\n\n保存和读取的路径将在`顶层设计细节`中进一步讨论。\n\n### 顶层设计细节\n\n这里在menubar中设置了一个`history location`按键，用于修改历史文件的存放位置。当按下此按键时，程序应当打开一个新的窗口，因此，需要首先在源文件中创建一个新的窗口。右键点击`项目`，选择`add new`，选择`qt设计师类`，然后会分别在三个文件夹中依次得到头文件、源文件、ui设计文件。然后需要在主窗口中设置点击`history location`按键打开新窗口。\n\n```cpp\n//mainwindow.cpp\nvoid MainWindow::on_actionHistory_location_triggered() {\n  Location *new_win = new Location();\n  new_win->show();\n}\n```\n\n**注意**：记得在`mainwindow.h`中include`location.h`，按下打开新窗口实际上就是创建一个新的Location窗口，然后展示。\n\n接下来就是在`location.ui`中修改和设计可视化窗口，此项目使用了栅格布局，在左侧设置了一个较大的`textBrowser`和较小的`lineEdit`（设为不可修改，用于给出提示），在右侧依次设置了`选择文件`，`选择文件夹`，`确定`，`取消` 四个按键。\n\n> 选择文件：调用Qt库，打开系统默认的文件选择框，设置必须选择.txt格式结尾的文件，将返回的结果输出至`textBrowser`。\n>\n> 选择文件夹：同上，但是选择的是文件夹，并且返回的是存在的文件夹的路径，将返回的结果加上`/result.txt`后输入至`textBrowser`。\n>\n> 确定：按下后，读取`textBrowser`中的路径，检查其合法性（因为一开始`textBrowser`设置了可以直接更改，因此可能会输入奇怪的路径），若不合法则在`lineEdit`中给出相应的报错（格式不合法或路径不合法）。若合法，则检查文件是否存在，不存在则创建。当一切都合理以后，将全局变量`filePath`设为文本框中的内容，并关闭`Location`窗口。\n>\n> 取消：直接关闭，不做任何修改。\n\n```cpp\n//location.cpp\nvoid Location::on_pushButton_path_clicked() {\n  QString file_name =\n      QFileDialog::getOpenFileName(NULL, \"选择txt文件\", \".\", \"*.txt\");\n  ui->textEdit->setText(file_name);\n}\n\nvoid Location::on_pushButton_dir_clicked() {\n  QString dir_name = QFileDialog::getExistingDirectory(NULL, \"选择文件夹\", \".\");\n  ui->textEdit->setText(dir_name + \"/result.txt\");\n}\n\nvoid Location::on_pushButton_cancel_clicked() { Location::close(); }\n\nvoid Location::on_pushButton_sure_clicked() {\n  QString new_path = ui->textEdit->toPlainText();\n  QFileInfo info(new_path);\n\n  if (!info.exists()) {\n    if (new_path.contains(\".txt\")) {\n      QFile f(new_path);\n      f.open(QIODevice::WriteOnly);\n      f.close();\n    } else {\n      ui->prompt->setText(\"路径或格式不合法，请重新输入\");\n    }\n  }\n  Location::filePath=new_path;\n  Location::close();\n}\n```\n\n自动保存功能被设计为主窗口中菜单栏中的一个按键，默认为开启状态，显示为`Auto Save On`，当点击该按键后，槽函数将该文本替换为`Auto Save Off`，并将全局变量`autoSave`置零。\n\n`filePath`和`autoSave`以及底层中的`isRead`和`line`都设计为一个全局变量，便于主窗口调用。\n\n```cpp\n//location.h\nclass Location : public QDialog {\n public:\n  static QString filePath;\n  static int line;\n  static bool isRead;\n  static bool autoSave;\n}\n\n//location.cpp\nQString Location::filePath = \"result.txt\";\nint Location::line = 0;\nbool Location::isRead = 0;\nbool Location::autoSave = 1;\n```\n\n在主窗口中，只有用户按下等号（并且自动保存功能开启）或手动保存（在`menubar`中设置了一个保存按键并且设置了快捷键）时，才会保存。因此只需在这些地方加入`save()`函数即可。当然，也要有对`autoSave`的判断。\n\n## 样式设定\n\n前面提到了可以在`ui`文件中直接修改样式，但这种方式并不利于后面的修改，因此我们选择直接调用函数的方式。如要为`centralWidget`设定样式，可以调用`setStyelSheet()`，后接一个QString，该字符串中直接书写qss内容。\n\n这里选择了另一种方式，使用qt的资源文件管理功能来存储单独的qss文件，然后以前缀引用的方式来调用这些文件。\n\n在`项目`中右键新建`qt resource file`，设定名称后打开管理界面，点击添加前缀`add prefix`。然后添加文件`add Files`。前缀决定了调用的方式（将会在源代码中演示）。文件可以新建一个`general file`后添加，也可以将其他方式创建的qss文件加入。\n\n引入的资源可以以`QFile`的方式引用。本项目在菜单栏中添加了一个黑色主题的选项，其槽函数如下\n\n```cpp\nvoid MainWindow::on_actionBlack_theme_triggered() {\n  globalQss = \":/Black.qss\";\n  QFile defaultQss(globalQss);\n  defaultQss.open(QFile::ReadOnly);\n  QString qssContent = defaultQss.readAll();\n  centralWidget()->setStyleSheet(qssContent);\n}\n```\n\n`/`为我设定的前缀，只需以冒号开头，加上前缀和文件，即表明在应用qt指定好的资源文件。接下来就只需打开该文件并读取其内容，然后为需要的组件设定qss样式即可。\n\n**注意**：使用qss的一些麻烦：后面我希望能设定字体的大小、样式等，但这时通过`setFont()`等函数并不起作用。原因估计是qss的优先级很高，直接设定将不起作用。这时我只能再写一个`changeStyle()`函数，通过qss样式表更新来进行样式更新\n\n```cpp\nvoid MainWindow::changeStyle(QString newStyle, QWidget *widget) {\n  QString oldStyle = widget->styleSheet();\n  oldStyle += newStyle;\n  widget->setStyleSheet(oldStyle);\n}\n```\n\n所以这里我只写了改变字体的函数。\n\n```cpp\nvoid MainWindow::on_actionLarge_font_size_triggered() {\n  changeStyle(\"*{font:30px;}\", MainWindow::centralWidget());\n}\n```\n\n## 保存设置\n\n类似于文件的保存位置，是否自动保存等功能，每次重新启动程序后都会按照程序的设定重新初始化。为了使得这些设定能被保存下来，需要使用一个文件将这些配置保存下来。恰好最近见到了许多`ini`格式文件，qt也提供了`QSetting`及配套的`ini`配置文件读写。\n\n配置文件应当在主窗口创建时被读取，在主窗口被销毁时被存入。因此只需在`mainwindow`的构造函数和析构函数中加入读写`ini`文件的步骤即可。需要注意的是，要考虑`ini`文件不存在的情况，不存在时需要使用程序的内置设定。\n\n ```cpp\n MainWindow::MainWindow(QWidget *parent)\n     : QMainWindow(parent), ui(new Ui::MainWindow) {\n   ui->setupUi(this);\n \n   this->grabKeyboard();\n \n   QSettings *iniRead = new QSettings(\"config.ini\", QSettings::IniFormat);\n   QString iniAuto = iniRead->value(\"autoSave\").toString();\n   QString iniPath = iniRead->value(\"filePath\").toString();\n   QString iniQss = iniRead->value(\"globalQss\").toString();\n   delete iniRead;\n \n   // init autoSave\n   if (!iniAuto.isEmpty() && !iniAuto.toInt()) {\n     Location::autoSave = 0;\n     ui->actionAuto_Save->setText(\"Auto Save Off\");\n   }\n \n   // init filePath\n   QFile iniPathFile(iniPath);\n   if (iniPathFile.open(QFile::WriteOnly)) {\n     Location::filePath = iniPath;\n   }\n \n   // init Qss file(theme)\n   QFile iniQssFile(iniQss);\n   QString qssContent;\n   if (iniQssFile.open(QFile::ReadOnly)) {\n     qssContent = iniQssFile.readAll();\n     globalQss = iniQss;\n   } else {\n     QFile defaultQss(\":/Black.qss\");\n     defaultQss.open(QFile::ReadOnly);\n     qssContent = defaultQss.readAll();\n   }\n   centralWidget()->setStyleSheet(qssContent);\n }\n \n MainWindow::~MainWindow() {\n   QSettings *IniWrite = new QSettings(\"config.ini\", QSettings::IniFormat);\n   IniWrite->setValue(\"autoSave\", Location::autoSave);\n   IniWrite->setValue(\"filePath\", Location::filePath);\n   IniWrite->setValue(\"globalQss\", globalQss);\n   delete IniWrite;\n \n   delete ui;\n }\n \n ```\n\n## 其他\n\n- 在主函数中为整个窗口设置了透明度，让它看起来酷炫一点点。\n- 在主函数中为窗口设定名称。\n- 在`.pro`文件中加入图标文件，使得生成的程序有图标\n\n# 感想\n\n## 收获\n\n- 不再害怕qt框架了，反而觉得它好用。\n- qt的窗口类很舒服，有清晰且层次分明的关系，有足够好用的成员函数。\n- qt的基本库也有不少可以讨论的，如QString的设计，不仅提供了基本的可变长度和操作符重载，还考虑到了和std库之间的转换。\n- qt的信号与槽机制是qt最精髓的东西之一，信号是一种非常不错的线程间通信方式，很遗憾我没有手动使用connect函数来创建信号与槽。但确实在写qt的过程中，qtcreator已经为我提供了足够的可视化信号与槽构建工具。\n- qss基本等于css\n- qt以易于制作ui界面出名，但用了之后发现，qt实际上是借鉴了很多现代浏览器（前端）的实现方式。我写的时候感觉自己像是在写js+css。对于一个web项目来说，前端工程师书写html，css，以及利用框架来写js。后端工程师则使用各种工具来构建web服务。但对于qt这样一种前后结合的一体化程序设计框架来说，前后的分离并不彻底（虽然对硬件工程师来说可能会很友好）。\n- 我还是支持“qt是一个平台而不只是一个ui框架”这种说法。qt在基本库中的内容一点也不比它在ui界面中的少。无论是基本库还是ui库，都有很多可以研究的东西。\n- 宏的自动扩展确实好用\n- qt毕竟还是封装的比较高层了，要是需要一些简单的功能，还是老老实实写原生的c和std吧。\n\n## 遗憾\n\n- 大佬说他使用了前缀表达式，求余和翻方功能不好实现，我懂的算法也不多，这两个功能没能实现。只能说算法能力有待提高了。\n","slug":"0xCalculator","published":1,"updated":"2021-12-03T08:14:12.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxd4ztlo001cw8ul31gd6f85","content":"<h1 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h1><ol>\n<li>对十六进制数进行双目、表达式运算</li>\n<li>对运算结果进行保存和再读取，支持自动保存和手动保存</li>\n<li>自定义运算结果储存位置</li>\n<li>自定义字体大小</li>\n<li>可更换窗口风格（换肤）</li>\n<li>自动保存设置</li>\n</ol>\n<h1 id=\"任务分配\"><a href=\"#任务分配\" class=\"headerlink\" title=\"任务分配\"></a>任务分配</h1><ol>\n<li>：ui设计与qt框架</li>\n<li>：核心算法</li>\n<li>：文件读写</li>\n</ol>\n<h1 id=\"开源地址\"><a href=\"#开源地址\" class=\"headerlink\" title=\"开源地址\"></a>开源地址</h1><p><a href=\"https://github.com/kawhicurry/0xCalculator\">https://github.com/kawhicurry/0xCalculator</a></p>\n<h1 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h1><h2 id=\"Qt框架\"><a href=\"#Qt框架\" class=\"headerlink\" title=\"Qt框架\"></a>Qt框架</h2><p>qt文件将会以平铺的方式放置在同一工程目录下，其组织结构由<code>.pro</code>文件记录，该文件类似于makefile（可以看作是qmakefile？）。其标准目录如下：</p>\n<blockquote>\n<p>.pro：记录文件</p>\n<p>/Headers：略</p>\n<p>/Sources：略</p>\n<p>/Forms：存放<code>.ui</code>文件，实际为<code>xml</code>格式，但不建议直接编辑，所有操作应当在设计模块中完成</p>\n<p>/Resources：存放qt标准资源（可以qt方式引用的资源）</p>\n<p>/Other files</p>\n</blockquote>\n<h2 id=\"UI设计\"><a href=\"#UI设计\" class=\"headerlink\" title=\"UI设计\"></a>UI设计</h2><p>直接在qt creator的设计界面中打开<code>设计</code>模块。从画面左侧拖动组件，摆放至设计框中即可。</p>\n<p><em>问题</em>：组件散乱</p>\n<ul>\n<li>左侧组件库中有<code>layout</code>组件,将其拖动至设计框中,再向layout中添加组件，即可使所有组件呈现一定规律。</li>\n</ul>\n<blockquote>\n<p>布局类型：</p>\n<p>垂直：略</p>\n<p>水平：略</p>\n<p>栅格（grid）：上面俩合起来</p>\n<p>窗口：？存疑，不是很能理解这是啥</p>\n</blockquote>\n<p><em>问题</em>：使用layout组件后无法布局固定，启动ui界面后拖动窗口改变其大小，layout组件位置不动。</p>\n<ul>\n<li>应当首先在右侧<code>对象</code>框中选中主窗口（mainwindow）中的中间部件（centralwidget），右键选择布局，为整个中间部分设定大的布局，（注：主窗口除了中间部件还初始化了一个菜单栏（menubar）），然后在该布局中嵌套布局或组件。本方案选择了栅格布局，虽然只需垂直布局即可，但为了可拓展性，还是选择栅格。接下来在整个中间部分的栅格布局中，嵌套了一个垂直布局（用于输入和输出）和一个栅格布局（用于存放按键）。</li>\n</ul>\n<p>接下来在主窗口中添加所需的组件，分别为输入框、输出框、5*6个按键。然后可以对其属性进行可视化的设计，以下是对<code>设计</code>界面中一些工具的解释：</p>\n<blockquote>\n<p>右侧下方为属性框，显示了所选定组件的属性，每个组件都是层层继承而来，因此要注意每一层的具体属性以及继承关系。</p>\n<p>右侧上方为对象框，显示了当前ui文件中所有文件属性。</p>\n<p>正中央下方的框实际上有两个可编辑区域，一个为action editor，即为组件添加动作（可方便设置快捷键）。另一个为信号与槽。</p>\n<p>注：信号与槽是最Qt制作ui界面中最重要的机制。</p>\n</blockquote>\n<p>创建槽函数：在信号与槽编辑框中点击加号创建信号与槽，然后选择信号的发送对象、发送信号量、槽、响应函数。此处的创建<strong>只支持内定的槽函数</strong>，想要自定义槽函数，需在右侧对象中找到对象，然后右键选择转到槽，接下来选择信号量之后，Qt会跳转该ui文件对应的cpp文件下，并自动创建一个该槽函数的实现（.h文件中也会自动添加声明）。接下来只需在此槽函数中编写发送信号后（触发信号发送条件），所需只需的步骤即可。</p>\n<blockquote>\n<p>信号量是Qt类自带的属性，某个类既有自己的属性，也有继承而来的属性。如pushButton组件继承自QAbstractButton，后者又继承自QWidget，后者又继承自QObject。对于QAbstractButton，其自带的信号有<code>clicked()</code>,<code>pressed()</code>等，对于QWidget，有<code>windowIconChanged</code>等。具体解释请参考官方文档。</p>\n</blockquote>\n<p><code>设计</code>界面支持大量的属性设置，如字体，背景等。并且可以直接在ui界面中即时显示，但并不推荐直接做修改。</p>\n<p>一种渲染方式：Qt提供了qss来进行类似css的样式渲染，只需选中对象然后右键改变样式表，修改某个组件的样式表即可。Qss还提供了选择器的功能，因此，只需在某个较大的组件中设置样式表，并对不同的渲染对象进行选择即可。本方案一开始的办法就是在centralwidget组件中设置样式表，完成了酷炫的按键风格。需要注意的是，改变样式表的方法在Qt中是存在一定问题的，并且，<strong>任何写死的方法都可能在以后要修改时造成麻烦</strong>。关于样式表后面还会再进一步设定。</p>\n<h2 id=\"模拟按键\"><a href=\"#模拟按键\" class=\"headerlink\" title=\"模拟按键\"></a>模拟按键</h2><p>一个计算器应当提供一系列的按键，因此要在栅格布局中拖入一定数量的按键。按键分为输入按键和功能按键。</p>\n<ul>\n<li>输入按键：0123456789ABCDEF+-*/（）</li>\n<li>功能按键：&lt;- -&gt; DEL CE UP DOWN =</li>\n</ul>\n<p>对于输入按键，按下按键后应当在输入框中显示对应的输入，同时这些按键应当有对应的键盘输入。</p>\n<p>对于输出按键，左移和右移是为了移动输入框中的光标。DEL清除一个字符，CE要同时清除输入和输出框。UP和DOWN提供了查看历史功能。等号是整个计算器的核心功能，按下等号后，应当读取输入框中的算式，进行计算后将结果字符串返回至输出框中。</p>\n<p>通过在组件上右键选择 转到槽 可以快捷创建槽函数。示例如图：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.h</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_left_bracket_clicked</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_left_bracket_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">setFocus</span>();</span><br><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">insertPlainText</span>(<span class=\"string\">&quot;(&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>手动创建几个后，就可以发现其规矩。一个槽函数的名称由<code>on_name_action</code>组成。<code>pushButton_left_bracket</code>是改按键的名称，这个名称需要在ui文件中指定，当拖动pushButton的时候，qt会按照12345依次给其一个默认名称，并且上面的默认文字都是pushButton。因此对于声明，可以用宏生成。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindwo.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clicked_func(name) void on_pushButton_##name##_clicked();</span></span><br><span class=\"line\">  <span class=\"built_in\">clicked_func</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"built_in\">clicked_func</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">clicked_func</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">clicked_func</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> triggered_func(name) void on_action##name##_triggered();</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">triggered_func</span>(Author);</span><br><span class=\"line\">  <span class=\"built_in\">triggered_func</span>(Save) <span class=\"built_in\">triggered_func</span>(Read);</span><br><span class=\"line\">  <span class=\"built_in\">triggered_func</span>(History_location);</span><br><span class=\"line\">  <span class=\"built_in\">triggered_func</span>(Auto_Save);</span><br></pre></td></tr></table></figure>\n\n<p>对于实现，部分直接输入的槽函数也可以用宏生成</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> set_insert_func(name)                         \\</span></span><br><span class=\"line\"><span class=\"meta\">  void MainWindow::on_pushButton_##name##_clicked() &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">    ui-&gt;textBrowser_input-&gt;setFocus();                \\</span></span><br><span class=\"line\"><span class=\"meta\">    ui-&gt;textBrowser_input-&gt;insertPlainText(#name);    \\</span></span><br><span class=\"line\"><span class=\"meta\">  &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<p>剩下的就只能自己写咯。</p>\n<h2 id=\"输入输出框\"><a href=\"#输入输出框\" class=\"headerlink\" title=\"输入输出框\"></a>输入输出框</h2><p>qt为用户提供了<code>text Browser</code>,<code>text Edit</code>,<code>Plain text edit</code>,<code>line edit</code>等组件作为文本框。这里选择了text Browser，目的是屏蔽直接复制粘贴输入，防止非法字符进入。结果后面发现<code>text Browser</code>是由<code>text Edit</code>继承而来，因此browser也可以提供输入功能（离谱，read Only属性。</p>\n<p>所有的输入按键都将在输入框中插入一个对应的字符。这里只需要调用<code>text Browser</code>类中自带的public function member：<code>insertPlainText(QString)</code>。</p>\n<p><em>问题</em>：文本框中的光标只有在选中文本框时才会显示，如果使用鼠标点击按键进行输入，输入框中的光标实际仍然存在但不显示。</p>\n<ul>\n<li>为了使得光标时刻存在，这里使用了一个简单粗暴的方法，为所有按键功能加上<code>setFocus()</code>。从而保证焦点始终在输入框中。</li>\n</ul>\n<p>对于输出框，每次显示结果都是更新所有内容（而不是插入），因此需要<code>setPlainText</code>。</p>\n<h2 id=\"等号\"><a href=\"#等号\" class=\"headerlink\" title=\"等号\"></a>等号</h2><p>等号按键是计算器最核心的按键，以下为等号按键的槽函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_equal_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">setFocus</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  Location::isRead = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  QString s = ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">toPlainText</span>();</span><br><span class=\"line\">  QString rst = <span class=\"built_in\">parser</span>(s);</span><br><span class=\"line\">  ui-&gt;textBrowser_output-&gt;<span class=\"built_in\">setPlainText</span>(rst);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Location::autoSave) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">save</span>(Location::filePath, s, rst);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>按下等号后，程序首先保证焦点仍然在输入框口上，然后讲是否正在读取历史记录按键设置为0（这讲在后面的历史记录读取中说到），然后获取输入框中的内容，交给由竞赛大佬@龚程昊编写的parser函数进行处理（这将在后面数据处理中说到），然后将parser函数返回的字符串（QString）显示到输出框中，然后在自动保存功能开启的情况下，保存至本地文件中。</p>\n<h2 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a>数据处理</h2><p>等会儿copy大佬写的东西，大致思路是使用栈和转化为前缀表达式。</p>\n<p>但大佬使用的使用的是std库，并且是作为一个单独的cpp程序书写的（方便调试）。因此，这里将源文件复制到parser文件中，并将main函数改写成接受<code>QString</code>作为参数，返回<code>QString</code>的parser()函数。这里用到了<code>QString::toStdString</code>和<code>QString::fromStdString</code>。</p>\n<p>记录几个当时测试出来的bug：</p>\n<ol>\n<li>只写一个数后按等号，直接返回0</li>\n<li>没有考虑负数</li>\n<li>没有考虑溢出</li>\n</ol>\n<p>附上代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//parser.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;parser.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">pd</span><span class=\"params\">(<span class=\"keyword\">char</span> i)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((i &lt;= <span class=\"number\">57</span> &amp;&amp; i &gt;= <span class=\"number\">48</span>) || (i &gt;= <span class=\"number\">65</span> &amp;&amp; i &lt;= <span class=\"number\">70</span>)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pri</span><span class=\"params\">(<span class=\"keyword\">char</span> i)</span>  <span class=\"comment\">// priority</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"string\">&#x27;+&#x27;</span> || i == <span class=\"string\">&#x27;-&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"string\">&#x27;*&#x27;</span> || i == <span class=\"string\">&#x27;/&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"string\">&#x27;(&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"string\">&#x27;)&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">255</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">judge</span><span class=\"params\">(<span class=\"keyword\">char</span> i)</span>  <span class=\"comment\">//乱码</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((i &lt;= <span class=\"number\">57</span> &amp;&amp; i &gt;= <span class=\"number\">48</span>) || (i &gt;= <span class=\"number\">65</span> &amp;&amp; i &lt;= <span class=\"number\">70</span>) || i == <span class=\"string\">&#x27;+&#x27;</span> || i == <span class=\"string\">&#x27;-&#x27;</span> ||</span><br><span class=\"line\">      i == <span class=\"string\">&#x27;*&#x27;</span> || i == <span class=\"string\">&#x27;/&#x27;</span> || i == <span class=\"string\">&#x27;(&#x27;</span> || i == <span class=\"string\">&#x27;)&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">QString <span class=\"title\">parser</span><span class=\"params\">(QString expression)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1007</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> R = LONG_MAX;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> s[N], stack1[N];</span><br><span class=\"line\">  <span class=\"keyword\">long</span> read[N], sta[N], stack2[N], stt[N];</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> f[N] = &#123;<span class=\"number\">0</span>&#125;, flag[N] = &#123;<span class=\"number\">0</span>&#125;, ff = <span class=\"number\">0</span>, fff = <span class=\"number\">0</span>;</span><br><span class=\"line\">  string c, sc;</span><br><span class=\"line\">  string str, as = expression.<span class=\"built_in\">toStdString</span>();</span><br><span class=\"line\">  str = <span class=\"string\">&quot;0+&quot;</span> + as;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> l = str.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">    s[i] = str[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">judge</span>(s[i])) &#123;</span><br><span class=\"line\">      ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;(&#x27;</span> &amp;&amp; (s[i + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;*&#x27;</span> || s[i + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;/&#x27;</span>)) ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;)&#x27;</span> &amp;&amp; (s[i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;+&#x27;</span> || s[i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;-&#x27;</span> || s[i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;*&#x27;</span> ||</span><br><span class=\"line\">                        s[i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;/&#x27;</span>))</span><br><span class=\"line\">      ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">pd</span>(s[l - <span class=\"number\">1</span>]) &amp;&amp; s[l - <span class=\"number\">1</span>] != <span class=\"string\">&#x27;)&#x27;</span>) ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> st = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; l; i++)  <span class=\"comment\">//括号是否匹配</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;(&#x27;</span>) st++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;)&#x27;</span>) st--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (st != <span class=\"number\">0</span>) ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>, k = <span class=\"number\">0</span>, m = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (j &lt; l &amp;&amp; ff == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">pd</span>(s[j]))  <span class=\"comment\">//数字</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (s[j] &lt;= <span class=\"number\">57</span> &amp;&amp; s[j] &gt;= <span class=\"number\">48</span>) &#123;</span><br><span class=\"line\">        sta[k] = s[j] - <span class=\"number\">48</span>;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[j] &gt;= <span class=\"number\">65</span> &amp;&amp; s[j] &lt;= <span class=\"number\">70</span>) &#123;</span><br><span class=\"line\">        sta[k] = s[j] - <span class=\"number\">55</span>;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">pd</span>(s[j]))  <span class=\"comment\">//符号</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">pd</span>(s[j - <span class=\"number\">1</span>]) &amp;&amp; j &gt; <span class=\"number\">0</span>)  <span class=\"comment\">//前面的数字</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = s[j];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> h = <span class=\"number\">0</span>; k &gt; <span class=\"number\">0</span>; h++) &#123;</span><br><span class=\"line\">          cnt += sta[k - <span class=\"number\">1</span>] * <span class=\"built_in\">pow</span>(<span class=\"number\">16</span>, h);</span><br><span class=\"line\">          k--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        read[m] = cnt;</span><br><span class=\"line\">        m++;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">        read[m] = c;</span><br><span class=\"line\">        f[m] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        m++;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">//前面的符号</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = s[j];</span><br><span class=\"line\">        read[m] = c;</span><br><span class=\"line\">        f[m] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        m++;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">pd</span>(s[l - <span class=\"number\">1</span>]))  <span class=\"comment\">//数字</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k &gt; <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;Detect Overflow&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> h = <span class=\"number\">0</span>; k &gt; <span class=\"number\">0</span>; h++) &#123;</span><br><span class=\"line\">      cnt += sta[k - <span class=\"number\">1</span>] * <span class=\"built_in\">pow</span>(<span class=\"number\">16</span>, h);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cnt &gt; R) <span class=\"keyword\">return</span> <span class=\"string\">&quot;Detect Overflow&quot;</span>;</span><br><span class=\"line\">      k--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    read[m] = cnt;</span><br><span class=\"line\">    m++;</span><br><span class=\"line\">    j++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (f[i] == <span class=\"number\">1</span> &amp;&amp; f[i + <span class=\"number\">1</span>] == <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">pri</span>(read[i]) &gt;= <span class=\"number\">1</span> &amp;&amp;</span><br><span class=\"line\">          <span class=\"built_in\">pri</span>(read[i + <span class=\"number\">1</span>]) == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f[i] == <span class=\"number\">1</span> &amp;&amp; f[i + <span class=\"number\">1</span>] == <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">pri</span>(read[i]) &gt;= <span class=\"number\">1</span> &amp;&amp;</span><br><span class=\"line\">               <span class=\"built_in\">pri</span>(read[i + <span class=\"number\">1</span>]) &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">0</span>;  <span class=\"comment\">//反缀表达式</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f[i] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      stack2[a] = read[i];</span><br><span class=\"line\">      a++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f[i] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (read[i] == <span class=\"string\">&#x27;(&#x27;</span>) &#123;</span><br><span class=\"line\">        stack1[b] = <span class=\"string\">&#x27;(&#x27;</span>;</span><br><span class=\"line\">        b++;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">pri</span>(read[i]) == <span class=\"number\">1</span>)  <span class=\"comment\">//+-</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">pri</span>(stack1[b - <span class=\"number\">1</span>]) &gt;= <span class=\"number\">1</span> &amp;&amp; b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          stack2[a] = stack1[b - <span class=\"number\">1</span>];</span><br><span class=\"line\">          flag[a] = <span class=\"number\">1</span>;</span><br><span class=\"line\">          b--;</span><br><span class=\"line\">          a++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stack1[b] = read[i];</span><br><span class=\"line\">        b++;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">pri</span>(read[i]) == <span class=\"number\">2</span>)  <span class=\"comment\">//*/</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">pri</span>(stack1[b - <span class=\"number\">1</span>]) == <span class=\"number\">2</span> &amp;&amp; b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          stack2[a] = stack1[b - <span class=\"number\">1</span>];</span><br><span class=\"line\">          flag[a] = <span class=\"number\">1</span>;</span><br><span class=\"line\">          b--;</span><br><span class=\"line\">          a++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stack1[b] = read[i];</span><br><span class=\"line\">        b++;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (read[i] == <span class=\"string\">&#x27;)&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (stack1[b - <span class=\"number\">1</span>] != <span class=\"string\">&#x27;(&#x27;</span>) &#123;</span><br><span class=\"line\">          stack2[a] = stack1[b - <span class=\"number\">1</span>];</span><br><span class=\"line\">          flag[a] = <span class=\"number\">1</span>;</span><br><span class=\"line\">          b--;</span><br><span class=\"line\">          a++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        b--;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    stack2[a] = stack1[b - <span class=\"number\">1</span>];</span><br><span class=\"line\">    flag[a] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    a++;</span><br><span class=\"line\">    b--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// calculation</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> g = <span class=\"number\">0</span>, cn = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!flag[i])  <span class=\"comment\">//数字</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      stt[g] = stack2[i];</span><br><span class=\"line\">      g++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag[i])  <span class=\"comment\">//符号</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\"><span class=\"keyword\">switch</span></span> (stack2[i]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br><span class=\"line\">          cn = stt[g - <span class=\"number\">2</span>] + stt[g - <span class=\"number\">1</span>];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (cn &gt; R) ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">          cn = stt[g - <span class=\"number\">2</span>] - stt[g - <span class=\"number\">1</span>];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (cn &lt; -R) ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\">          cn = stt[g - <span class=\"number\">2</span>] * stt[g - <span class=\"number\">1</span>];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (cn &gt; R || cn &lt; -R) ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (stt[g - <span class=\"number\">1</span>] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            cn = stt[g - <span class=\"number\">2</span>] / stt[g - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stt[g - <span class=\"number\">1</span>] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      g -= <span class=\"number\">2</span>;</span><br><span class=\"line\">      stt[g] = cn;</span><br><span class=\"line\">      g++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> cnn = cn;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cn == <span class=\"number\">0</span> &amp;&amp; !ff) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//        cout&lt;&lt;str&lt;&lt;&quot;=&quot;&lt;&lt;cn&lt;&lt;endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    fff = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (cn != <span class=\"number\">0</span> &amp;&amp; !ff)  <span class=\"comment\">//转十六进制</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cn &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      x = cn % <span class=\"number\">16</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">10</span>)</span><br><span class=\"line\">        c = x + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        c = x + <span class=\"string\">&#x27;A&#x27;</span> - <span class=\"number\">10</span>;</span><br><span class=\"line\">      sc = c + sc;</span><br><span class=\"line\">      cn /= <span class=\"number\">16</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cn &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      x = cn % <span class=\"number\">16</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">-10</span>)</span><br><span class=\"line\">        c = -x + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        c = -x + <span class=\"string\">&#x27;A&#x27;</span> - <span class=\"number\">10</span>;</span><br><span class=\"line\">      sc = c + sc;</span><br><span class=\"line\">      cn /= <span class=\"number\">16</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cnn &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    sc = <span class=\"string\">&#x27;-&#x27;</span> + sc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!ff &amp;&amp; !fff) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//        cout&lt;&lt;as&lt;&lt;&quot;=&quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">//        cout&lt;&lt;sc&lt;&lt;endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sc == <span class=\"string\">&quot;-80000000&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;Detect Overflow&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QString::<span class=\"built_in\">fromStdString</span>(sc);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;Formula Error&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>贴代码的时候才发现大佬写了一个pd（判断）和一个judge（还是判断）。算了算了，能用就行（</p>\n<h2 id=\"历史记录\"><a href=\"#历史记录\" class=\"headerlink\" title=\"历史记录\"></a>历史记录</h2><p>如果只是作为计算器，以上功能就已经可以算完成了。但大多数计算器都是有历史记录功能的，因此这个计算器也该有一个。</p>\n<p>这里将历史记录分为底层和顶层两部分来设计，顶层使用Qt框架，而底层使用c的基本库，从而实现更加原子化和方便的操作。</p>\n<p>顶层实现的用户接口功能：</p>\n<ul>\n<li>手动保存当前结果</li>\n<li>选择是否自动保存结果</li>\n<li>选择保存位置</li>\n<li>读取历史记录</li>\n</ul>\n<p>底层实现的文本的读写功能</p>\n<ul>\n<li>获取时间</li>\n<li>记录结果</li>\n<li>写入和读取</li>\n</ul>\n<h3 id=\"底层设计细节\"><a href=\"#底层设计细节\" class=\"headerlink\" title=\"底层设计细节\"></a>底层设计细节</h3><p>保存功能被设计为，获取当前时间和本次运算的算式和结果，以新行的方式追加到某文件的结尾。保存功能的底层设计都被保存在<code>saving</code>文件下。</p>\n<p>为此底层使用std库设计了<code>save()</code>函数。该函数还调用了<code>getCurrentTime()</code>来获取当前时间。当然，这个函数也是由<code>main()</code>函数修改而来，由std框架接入了qt框架。源码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//saving.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> string <span class=\"title\">getCurrentTime</span><span class=\"params\">()</span>  <span class=\"comment\">//输出当前时间</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">time_t</span> t = <span class=\"built_in\">time</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">char</span> ch[<span class=\"number\">64</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">strftime</span>(ch, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(ch) - <span class=\"number\">1</span>, <span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, <span class=\"built_in\">localtime</span>(&amp;t));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ch;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">save</span><span class=\"params\">(QString location, QString fomula, QString data)</span> </span>&#123;</span><br><span class=\"line\">  string addr = location.<span class=\"built_in\">toStdString</span>();</span><br><span class=\"line\">  fstream f;</span><br><span class=\"line\">  f.<span class=\"built_in\">open</span>(addr, ios::out | ios::app);</span><br><span class=\"line\">  f &lt;&lt; <span class=\"built_in\">getCurrentTime</span>() &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; fomula.<span class=\"built_in\">toStdString</span>() &lt;&lt; <span class=\"string\">&quot;=&quot;</span></span><br><span class=\"line\">    &lt;&lt; data.<span class=\"built_in\">toStdString</span>()</span><br><span class=\"line\">    &lt;&lt; endl;  <span class=\"comment\">//变量addr、以及gch的等式和输出结果变量还需加进去</span></span><br><span class=\"line\">  f.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了保存结果外，还需要读取结果，读取结果需要始终从最后一行开始往上读。经历了一系列讨论之后，本项目决定使用读取整个文件来获取所有的行数，并根据行数来获取内容。为此有了<code>CountLine()</code>和<code>readLine()</code>两个函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">CountLines</span><span class=\"params\">(QString filename)</span> </span>&#123;</span><br><span class=\"line\">  ifstream f;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">  string tmp;</span><br><span class=\"line\">  string stdfilename = filename.<span class=\"built_in\">toStdString</span>();</span><br><span class=\"line\">  <span class=\"comment\">// ios::in 表示以只读的方式读取文件</span></span><br><span class=\"line\">  f.<span class=\"built_in\">open</span>(stdfilename, ios::in);</span><br><span class=\"line\">  <span class=\"comment\">//文件打开失败:返回0</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (f.<span class=\"built_in\">fail</span>()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//文件存在</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">getline</span>(f, tmp, <span class=\"string\">&#x27;\\n&#x27;</span>)) &#123;</span><br><span class=\"line\">      n++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">QString <span class=\"title\">ReadLine</span><span class=\"params\">(QString filename, <span class=\"keyword\">int</span> line)</span>  <span class=\"comment\">//读取指定行文件</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// line行数限制 1 - lines</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (line &gt; <span class=\"number\">0</span> &amp;&amp; line &lt;= <span class=\"built_in\">CountLines</span>(filename)) &#123;</span><br><span class=\"line\">    ifstream f;</span><br><span class=\"line\">    string stdfilename = filename.<span class=\"built_in\">toStdString</span>();</span><br><span class=\"line\">    f.<span class=\"built_in\">open</span>(stdfilename, ios::in);</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;string&gt; strVec;</span><br><span class=\"line\">    <span class=\"comment\">//行0 - 行lines对应strvect[0] - strvect[lines]</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!f.<span class=\"built_in\">eof</span>()) &#123;</span><br><span class=\"line\">      string inbuf;</span><br><span class=\"line\">      <span class=\"built_in\">getline</span>(f, inbuf, <span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">      strVec.<span class=\"built_in\">push_back</span>(inbuf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QString::<span class=\"built_in\">fromStdString</span>(strVec[line - <span class=\"number\">1</span>]);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>读取整个文件并计算行数并不是一个效率高的方式，但在文件不大和不追求高效率的条件下，这是最好的实践方式。因为考虑这里还需要考虑到连续读取历史文件。</p>\n<p>当用户按下<code>UP</code>按键时，表示用户开始读取历史文件。用户首先查看的应该是历史文件的最后一行，当用户再次按下<code>UP</code>时，读取倒数第二行，依次类推。为了实现该功能，这里使用了一个全局变量<code>line</code>表示当前正在读取的行数，该行数被初始化为历史记录的总行数。然后再次读取将会<code>--line</code>后读取。当用户按下<code>DOWN</code>按键时，++line后读取。</p>\n<p>这里就要考虑到另一个问题，读取一定历史记录后，用户重新进行计算，然后再次查看历史记录，这样行数应当从新的历史记录最后一行开始计算。为此，这里引入了<code>isRead</code>变量，该变量初始化为<code>0</code>，表示现在未在读取。首次按下<code>UP</code>按键时，该变量置<code>1</code>，同时将<code>line</code>变量初始化为当前历史记录行数。当用户按下<code>UP</code>或<code>DOWN</code>按键时，正常修改<code>line</code>变量的值并进行读取即可。当用户按下<code>=</code>或手动保存时，需要将<code>isRead</code>置零。这样下一次按下<code>UP</code>时，将重新读取历史文件行数并为<code>line</code>赋值。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br><span class=\"line\"><span class=\"comment\">//等号的槽函数在上面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_Up_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">setFocus</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Location::isRead) &#123;</span><br><span class=\"line\">    --Location::line;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Location::line = <span class=\"built_in\">CountLines</span>(Location::filePath);</span><br><span class=\"line\">    Location::isRead = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ui-&gt;textBrowser_output-&gt;<span class=\"built_in\">setText</span>(<span class=\"built_in\">ReadLine</span>(Location::filePath, Location::line));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_Down_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">setFocus</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Location::isRead) &#123;</span><br><span class=\"line\">    ++Location::line;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ui-&gt;textBrowser_output-&gt;<span class=\"built_in\">setText</span>(<span class=\"built_in\">ReadLine</span>(Location::filePath, Location::line));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>保存和读取的路径将在<code>顶层设计细节</code>中进一步讨论。</p>\n<h3 id=\"顶层设计细节\"><a href=\"#顶层设计细节\" class=\"headerlink\" title=\"顶层设计细节\"></a>顶层设计细节</h3><p>这里在menubar中设置了一个<code>history location</code>按键，用于修改历史文件的存放位置。当按下此按键时，程序应当打开一个新的窗口，因此，需要首先在源文件中创建一个新的窗口。右键点击<code>项目</code>，选择<code>add new</code>，选择<code>qt设计师类</code>，然后会分别在三个文件夹中依次得到头文件、源文件、ui设计文件。然后需要在主窗口中设置点击<code>history location</code>按键打开新窗口。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_actionHistory_location_triggered</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Location *new_win = <span class=\"keyword\">new</span> <span class=\"built_in\">Location</span>();</span><br><span class=\"line\">  new_win-&gt;<span class=\"built_in\">show</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：记得在<code>mainwindow.h</code>中include<code>location.h</code>，按下打开新窗口实际上就是创建一个新的Location窗口，然后展示。</p>\n<p>接下来就是在<code>location.ui</code>中修改和设计可视化窗口，此项目使用了栅格布局，在左侧设置了一个较大的<code>textBrowser</code>和较小的<code>lineEdit</code>（设为不可修改，用于给出提示），在右侧依次设置了<code>选择文件</code>，<code>选择文件夹</code>，<code>确定</code>，<code>取消</code> 四个按键。</p>\n<blockquote>\n<p>选择文件：调用Qt库，打开系统默认的文件选择框，设置必须选择.txt格式结尾的文件，将返回的结果输出至<code>textBrowser</code>。</p>\n<p>选择文件夹：同上，但是选择的是文件夹，并且返回的是存在的文件夹的路径，将返回的结果加上<code>/result.txt</code>后输入至<code>textBrowser</code>。</p>\n<p>确定：按下后，读取<code>textBrowser</code>中的路径，检查其合法性（因为一开始<code>textBrowser</code>设置了可以直接更改，因此可能会输入奇怪的路径），若不合法则在<code>lineEdit</code>中给出相应的报错（格式不合法或路径不合法）。若合法，则检查文件是否存在，不存在则创建。当一切都合理以后，将全局变量<code>filePath</code>设为文本框中的内容，并关闭<code>Location</code>窗口。</p>\n<p>取消：直接关闭，不做任何修改。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//location.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Location::on_pushButton_path_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  QString file_name =</span><br><span class=\"line\">      QFileDialog::<span class=\"built_in\">getOpenFileName</span>(<span class=\"literal\">NULL</span>, <span class=\"string\">&quot;选择txt文件&quot;</span>, <span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;*.txt&quot;</span>);</span><br><span class=\"line\">  ui-&gt;textEdit-&gt;<span class=\"built_in\">setText</span>(file_name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Location::on_pushButton_dir_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  QString dir_name = QFileDialog::<span class=\"built_in\">getExistingDirectory</span>(<span class=\"literal\">NULL</span>, <span class=\"string\">&quot;选择文件夹&quot;</span>, <span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">  ui-&gt;textEdit-&gt;<span class=\"built_in\">setText</span>(dir_name + <span class=\"string\">&quot;/result.txt&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Location::on_pushButton_cancel_clicked</span><span class=\"params\">()</span> </span>&#123; Location::<span class=\"built_in\">close</span>(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Location::on_pushButton_sure_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  QString new_path = ui-&gt;textEdit-&gt;<span class=\"built_in\">toPlainText</span>();</span><br><span class=\"line\">  <span class=\"function\">QFileInfo <span class=\"title\">info</span><span class=\"params\">(new_path)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!info.<span class=\"built_in\">exists</span>()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (new_path.<span class=\"built_in\">contains</span>(<span class=\"string\">&quot;.txt&quot;</span>)) &#123;</span><br><span class=\"line\">      <span class=\"function\">QFile <span class=\"title\">f</span><span class=\"params\">(new_path)</span></span>;</span><br><span class=\"line\">      f.<span class=\"built_in\">open</span>(QIODevice::WriteOnly);</span><br><span class=\"line\">      f.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      ui-&gt;prompt-&gt;<span class=\"built_in\">setText</span>(<span class=\"string\">&quot;路径或格式不合法，请重新输入&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Location::filePath=new_path;</span><br><span class=\"line\">  Location::<span class=\"built_in\">close</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自动保存功能被设计为主窗口中菜单栏中的一个按键，默认为开启状态，显示为<code>Auto Save On</code>，当点击该按键后，槽函数将该文本替换为<code>Auto Save Off</code>，并将全局变量<code>autoSave</code>置零。</p>\n<p><code>filePath</code>和<code>autoSave</code>以及底层中的<code>isRead</code>和<code>line</code>都设计为一个全局变量，便于主窗口调用。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//location.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Location</span> :</span> <span class=\"keyword\">public</span> QDialog &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"keyword\">static</span> QString filePath;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> line;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> isRead;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> autoSave;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//location.cpp</span></span><br><span class=\"line\">QString Location::filePath = <span class=\"string\">&quot;result.txt&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> Location::line = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> Location::isRead = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> Location::autoSave = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在主窗口中，只有用户按下等号（并且自动保存功能开启）或手动保存（在<code>menubar</code>中设置了一个保存按键并且设置了快捷键）时，才会保存。因此只需在这些地方加入<code>save()</code>函数即可。当然，也要有对<code>autoSave</code>的判断。</p>\n<h2 id=\"样式设定\"><a href=\"#样式设定\" class=\"headerlink\" title=\"样式设定\"></a>样式设定</h2><p>前面提到了可以在<code>ui</code>文件中直接修改样式，但这种方式并不利于后面的修改，因此我们选择直接调用函数的方式。如要为<code>centralWidget</code>设定样式，可以调用<code>setStyelSheet()</code>，后接一个QString，该字符串中直接书写qss内容。</p>\n<p>这里选择了另一种方式，使用qt的资源文件管理功能来存储单独的qss文件，然后以前缀引用的方式来调用这些文件。</p>\n<p>在<code>项目</code>中右键新建<code>qt resource file</code>，设定名称后打开管理界面，点击添加前缀<code>add prefix</code>。然后添加文件<code>add Files</code>。前缀决定了调用的方式（将会在源代码中演示）。文件可以新建一个<code>general file</code>后添加，也可以将其他方式创建的qss文件加入。</p>\n<p>引入的资源可以以<code>QFile</code>的方式引用。本项目在菜单栏中添加了一个黑色主题的选项，其槽函数如下</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_actionBlack_theme_triggered</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  globalQss = <span class=\"string\">&quot;:/Black.qss&quot;</span>;</span><br><span class=\"line\">  <span class=\"function\">QFile <span class=\"title\">defaultQss</span><span class=\"params\">(globalQss)</span></span>;</span><br><span class=\"line\">  defaultQss.<span class=\"built_in\">open</span>(QFile::ReadOnly);</span><br><span class=\"line\">  QString qssContent = defaultQss.<span class=\"built_in\">readAll</span>();</span><br><span class=\"line\">  <span class=\"built_in\">centralWidget</span>()-&gt;<span class=\"built_in\">setStyleSheet</span>(qssContent);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>/</code>为我设定的前缀，只需以冒号开头，加上前缀和文件，即表明在应用qt指定好的资源文件。接下来就只需打开该文件并读取其内容，然后为需要的组件设定qss样式即可。</p>\n<p><strong>注意</strong>：使用qss的一些麻烦：后面我希望能设定字体的大小、样式等，但这时通过<code>setFont()</code>等函数并不起作用。原因估计是qss的优先级很高，直接设定将不起作用。这时我只能再写一个<code>changeStyle()</code>函数，通过qss样式表更新来进行样式更新</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::changeStyle</span><span class=\"params\">(QString newStyle, QWidget *widget)</span> </span>&#123;</span><br><span class=\"line\">  QString oldStyle = widget-&gt;<span class=\"built_in\">styleSheet</span>();</span><br><span class=\"line\">  oldStyle += newStyle;</span><br><span class=\"line\">  widget-&gt;<span class=\"built_in\">setStyleSheet</span>(oldStyle);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以这里我只写了改变字体的函数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_actionLarge_font_size_triggered</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">changeStyle</span>(<span class=\"string\">&quot;*&#123;font:30px;&#125;&quot;</span>, MainWindow::<span class=\"built_in\">centralWidget</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"保存设置\"><a href=\"#保存设置\" class=\"headerlink\" title=\"保存设置\"></a>保存设置</h2><p>类似于文件的保存位置，是否自动保存等功能，每次重新启动程序后都会按照程序的设定重新初始化。为了使得这些设定能被保存下来，需要使用一个文件将这些配置保存下来。恰好最近见到了许多<code>ini</code>格式文件，qt也提供了<code>QSetting</code>及配套的<code>ini</code>配置文件读写。</p>\n<p>配置文件应当在主窗口创建时被读取，在主窗口被销毁时被存入。因此只需在<code>mainwindow</code>的构造函数和析构函数中加入读写<code>ini</code>文件的步骤即可。需要注意的是，要考虑<code>ini</code>文件不存在的情况，不存在时需要使用程序的内置设定。</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MainWindow::<span class=\"built_in\">MainWindow</span>(QWidget *parent)</span><br><span class=\"line\">    : <span class=\"built_in\">QMainWindow</span>(parent), <span class=\"built_in\">ui</span>(<span class=\"keyword\">new</span> Ui::MainWindow) &#123;</span><br><span class=\"line\">  ui-&gt;<span class=\"built_in\">setupUi</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">grabKeyboard</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  QSettings *iniRead = <span class=\"keyword\">new</span> <span class=\"built_in\">QSettings</span>(<span class=\"string\">&quot;config.ini&quot;</span>, QSettings::IniFormat);</span><br><span class=\"line\">  QString iniAuto = iniRead-&gt;<span class=\"built_in\">value</span>(<span class=\"string\">&quot;autoSave&quot;</span>).<span class=\"built_in\">toString</span>();</span><br><span class=\"line\">  QString iniPath = iniRead-&gt;<span class=\"built_in\">value</span>(<span class=\"string\">&quot;filePath&quot;</span>).<span class=\"built_in\">toString</span>();</span><br><span class=\"line\">  QString iniQss = iniRead-&gt;<span class=\"built_in\">value</span>(<span class=\"string\">&quot;globalQss&quot;</span>).<span class=\"built_in\">toString</span>();</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> iniRead;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// init autoSave</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!iniAuto.<span class=\"built_in\">isEmpty</span>() &amp;&amp; !iniAuto.<span class=\"built_in\">toInt</span>()) &#123;</span><br><span class=\"line\">    Location::autoSave = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ui-&gt;actionAuto_Save-&gt;<span class=\"built_in\">setText</span>(<span class=\"string\">&quot;Auto Save Off&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// init filePath</span></span><br><span class=\"line\">  <span class=\"function\">QFile <span class=\"title\">iniPathFile</span><span class=\"params\">(iniPath)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (iniPathFile.<span class=\"built_in\">open</span>(QFile::WriteOnly)) &#123;</span><br><span class=\"line\">    Location::filePath = iniPath;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// init Qss file(theme)</span></span><br><span class=\"line\">  <span class=\"function\">QFile <span class=\"title\">iniQssFile</span><span class=\"params\">(iniQss)</span></span>;</span><br><span class=\"line\">  QString qssContent;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (iniQssFile.<span class=\"built_in\">open</span>(QFile::ReadOnly)) &#123;</span><br><span class=\"line\">    qssContent = iniQssFile.<span class=\"built_in\">readAll</span>();</span><br><span class=\"line\">    globalQss = iniQss;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    QFile <span class=\"built_in\">defaultQss</span>(<span class=\"string\">&quot;:/Black.qss&quot;</span>);</span><br><span class=\"line\">    defaultQss.<span class=\"built_in\">open</span>(QFile::ReadOnly);</span><br><span class=\"line\">    qssContent = defaultQss.<span class=\"built_in\">readAll</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">centralWidget</span>()-&gt;<span class=\"built_in\">setStyleSheet</span>(qssContent);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MainWindow::~<span class=\"built_in\">MainWindow</span>() &#123;</span><br><span class=\"line\">  QSettings *IniWrite = <span class=\"keyword\">new</span> <span class=\"built_in\">QSettings</span>(<span class=\"string\">&quot;config.ini&quot;</span>, QSettings::IniFormat);</span><br><span class=\"line\">  IniWrite-&gt;<span class=\"built_in\">setValue</span>(<span class=\"string\">&quot;autoSave&quot;</span>, Location::autoSave);</span><br><span class=\"line\">  IniWrite-&gt;<span class=\"built_in\">setValue</span>(<span class=\"string\">&quot;filePath&quot;</span>, Location::filePath);</span><br><span class=\"line\">  IniWrite-&gt;<span class=\"built_in\">setValue</span>(<span class=\"string\">&quot;globalQss&quot;</span>, globalQss);</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> IniWrite;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> ui;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>在主函数中为整个窗口设置了透明度，让它看起来酷炫一点点。</li>\n<li>在主函数中为窗口设定名称。</li>\n<li>在<code>.pro</code>文件中加入图标文件，使得生成的程序有图标</li>\n</ul>\n<h1 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h1><h2 id=\"收获\"><a href=\"#收获\" class=\"headerlink\" title=\"收获\"></a>收获</h2><ul>\n<li>不再害怕qt框架了，反而觉得它好用。</li>\n<li>qt的窗口类很舒服，有清晰且层次分明的关系，有足够好用的成员函数。</li>\n<li>qt的基本库也有不少可以讨论的，如QString的设计，不仅提供了基本的可变长度和操作符重载，还考虑到了和std库之间的转换。</li>\n<li>qt的信号与槽机制是qt最精髓的东西之一，信号是一种非常不错的线程间通信方式，很遗憾我没有手动使用connect函数来创建信号与槽。但确实在写qt的过程中，qtcreator已经为我提供了足够的可视化信号与槽构建工具。</li>\n<li>qss基本等于css</li>\n<li>qt以易于制作ui界面出名，但用了之后发现，qt实际上是借鉴了很多现代浏览器（前端）的实现方式。我写的时候感觉自己像是在写js+css。对于一个web项目来说，前端工程师书写html，css，以及利用框架来写js。后端工程师则使用各种工具来构建web服务。但对于qt这样一种前后结合的一体化程序设计框架来说，前后的分离并不彻底（虽然对硬件工程师来说可能会很友好）。</li>\n<li>我还是支持“qt是一个平台而不只是一个ui框架”这种说法。qt在基本库中的内容一点也不比它在ui界面中的少。无论是基本库还是ui库，都有很多可以研究的东西。</li>\n<li>宏的自动扩展确实好用</li>\n<li>qt毕竟还是封装的比较高层了，要是需要一些简单的功能，还是老老实实写原生的c和std吧。</li>\n</ul>\n<h2 id=\"遗憾\"><a href=\"#遗憾\" class=\"headerlink\" title=\"遗憾\"></a>遗憾</h2><ul>\n<li>大佬说他使用了前缀表达式，求余和翻方功能不好实现，我懂的算法也不多，这两个功能没能实现。只能说算法能力有待提高了。</li>\n</ul>\n","site":{"data":{"covers":[{"heleo":"_posts/hello-world.md"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h1><ol>\n<li>对十六进制数进行双目、表达式运算</li>\n<li>对运算结果进行保存和再读取，支持自动保存和手动保存</li>\n<li>自定义运算结果储存位置</li>\n<li>自定义字体大小</li>\n<li>可更换窗口风格（换肤）</li>\n<li>自动保存设置</li>\n</ol>\n<h1 id=\"任务分配\"><a href=\"#任务分配\" class=\"headerlink\" title=\"任务分配\"></a>任务分配</h1><ol>\n<li>：ui设计与qt框架</li>\n<li>：核心算法</li>\n<li>：文件读写</li>\n</ol>\n<h1 id=\"开源地址\"><a href=\"#开源地址\" class=\"headerlink\" title=\"开源地址\"></a>开源地址</h1><p><a href=\"https://github.com/kawhicurry/0xCalculator\">https://github.com/kawhicurry/0xCalculator</a></p>\n<h1 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h1><h2 id=\"Qt框架\"><a href=\"#Qt框架\" class=\"headerlink\" title=\"Qt框架\"></a>Qt框架</h2><p>qt文件将会以平铺的方式放置在同一工程目录下，其组织结构由<code>.pro</code>文件记录，该文件类似于makefile（可以看作是qmakefile？）。其标准目录如下：</p>\n<blockquote>\n<p>.pro：记录文件</p>\n<p>/Headers：略</p>\n<p>/Sources：略</p>\n<p>/Forms：存放<code>.ui</code>文件，实际为<code>xml</code>格式，但不建议直接编辑，所有操作应当在设计模块中完成</p>\n<p>/Resources：存放qt标准资源（可以qt方式引用的资源）</p>\n<p>/Other files</p>\n</blockquote>\n<h2 id=\"UI设计\"><a href=\"#UI设计\" class=\"headerlink\" title=\"UI设计\"></a>UI设计</h2><p>直接在qt creator的设计界面中打开<code>设计</code>模块。从画面左侧拖动组件，摆放至设计框中即可。</p>\n<p><em>问题</em>：组件散乱</p>\n<ul>\n<li>左侧组件库中有<code>layout</code>组件,将其拖动至设计框中,再向layout中添加组件，即可使所有组件呈现一定规律。</li>\n</ul>\n<blockquote>\n<p>布局类型：</p>\n<p>垂直：略</p>\n<p>水平：略</p>\n<p>栅格（grid）：上面俩合起来</p>\n<p>窗口：？存疑，不是很能理解这是啥</p>\n</blockquote>\n<p><em>问题</em>：使用layout组件后无法布局固定，启动ui界面后拖动窗口改变其大小，layout组件位置不动。</p>\n<ul>\n<li>应当首先在右侧<code>对象</code>框中选中主窗口（mainwindow）中的中间部件（centralwidget），右键选择布局，为整个中间部分设定大的布局，（注：主窗口除了中间部件还初始化了一个菜单栏（menubar）），然后在该布局中嵌套布局或组件。本方案选择了栅格布局，虽然只需垂直布局即可，但为了可拓展性，还是选择栅格。接下来在整个中间部分的栅格布局中，嵌套了一个垂直布局（用于输入和输出）和一个栅格布局（用于存放按键）。</li>\n</ul>\n<p>接下来在主窗口中添加所需的组件，分别为输入框、输出框、5*6个按键。然后可以对其属性进行可视化的设计，以下是对<code>设计</code>界面中一些工具的解释：</p>\n<blockquote>\n<p>右侧下方为属性框，显示了所选定组件的属性，每个组件都是层层继承而来，因此要注意每一层的具体属性以及继承关系。</p>\n<p>右侧上方为对象框，显示了当前ui文件中所有文件属性。</p>\n<p>正中央下方的框实际上有两个可编辑区域，一个为action editor，即为组件添加动作（可方便设置快捷键）。另一个为信号与槽。</p>\n<p>注：信号与槽是最Qt制作ui界面中最重要的机制。</p>\n</blockquote>\n<p>创建槽函数：在信号与槽编辑框中点击加号创建信号与槽，然后选择信号的发送对象、发送信号量、槽、响应函数。此处的创建<strong>只支持内定的槽函数</strong>，想要自定义槽函数，需在右侧对象中找到对象，然后右键选择转到槽，接下来选择信号量之后，Qt会跳转该ui文件对应的cpp文件下，并自动创建一个该槽函数的实现（.h文件中也会自动添加声明）。接下来只需在此槽函数中编写发送信号后（触发信号发送条件），所需只需的步骤即可。</p>\n<blockquote>\n<p>信号量是Qt类自带的属性，某个类既有自己的属性，也有继承而来的属性。如pushButton组件继承自QAbstractButton，后者又继承自QWidget，后者又继承自QObject。对于QAbstractButton，其自带的信号有<code>clicked()</code>,<code>pressed()</code>等，对于QWidget，有<code>windowIconChanged</code>等。具体解释请参考官方文档。</p>\n</blockquote>\n<p><code>设计</code>界面支持大量的属性设置，如字体，背景等。并且可以直接在ui界面中即时显示，但并不推荐直接做修改。</p>\n<p>一种渲染方式：Qt提供了qss来进行类似css的样式渲染，只需选中对象然后右键改变样式表，修改某个组件的样式表即可。Qss还提供了选择器的功能，因此，只需在某个较大的组件中设置样式表，并对不同的渲染对象进行选择即可。本方案一开始的办法就是在centralwidget组件中设置样式表，完成了酷炫的按键风格。需要注意的是，改变样式表的方法在Qt中是存在一定问题的，并且，<strong>任何写死的方法都可能在以后要修改时造成麻烦</strong>。关于样式表后面还会再进一步设定。</p>\n<h2 id=\"模拟按键\"><a href=\"#模拟按键\" class=\"headerlink\" title=\"模拟按键\"></a>模拟按键</h2><p>一个计算器应当提供一系列的按键，因此要在栅格布局中拖入一定数量的按键。按键分为输入按键和功能按键。</p>\n<ul>\n<li>输入按键：0123456789ABCDEF+-*/（）</li>\n<li>功能按键：&lt;- -&gt; DEL CE UP DOWN =</li>\n</ul>\n<p>对于输入按键，按下按键后应当在输入框中显示对应的输入，同时这些按键应当有对应的键盘输入。</p>\n<p>对于输出按键，左移和右移是为了移动输入框中的光标。DEL清除一个字符，CE要同时清除输入和输出框。UP和DOWN提供了查看历史功能。等号是整个计算器的核心功能，按下等号后，应当读取输入框中的算式，进行计算后将结果字符串返回至输出框中。</p>\n<p>通过在组件上右键选择 转到槽 可以快捷创建槽函数。示例如图：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.h</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_left_bracket_clicked</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_left_bracket_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">setFocus</span>();</span><br><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">insertPlainText</span>(<span class=\"string\">&quot;(&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>手动创建几个后，就可以发现其规矩。一个槽函数的名称由<code>on_name_action</code>组成。<code>pushButton_left_bracket</code>是改按键的名称，这个名称需要在ui文件中指定，当拖动pushButton的时候，qt会按照12345依次给其一个默认名称，并且上面的默认文字都是pushButton。因此对于声明，可以用宏生成。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindwo.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clicked_func(name) void on_pushButton_##name##_clicked();</span></span><br><span class=\"line\">  <span class=\"built_in\">clicked_func</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"built_in\">clicked_func</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">clicked_func</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">clicked_func</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> triggered_func(name) void on_action##name##_triggered();</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">triggered_func</span>(Author);</span><br><span class=\"line\">  <span class=\"built_in\">triggered_func</span>(Save) <span class=\"built_in\">triggered_func</span>(Read);</span><br><span class=\"line\">  <span class=\"built_in\">triggered_func</span>(History_location);</span><br><span class=\"line\">  <span class=\"built_in\">triggered_func</span>(Auto_Save);</span><br></pre></td></tr></table></figure>\n\n<p>对于实现，部分直接输入的槽函数也可以用宏生成</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> set_insert_func(name)                         \\</span></span><br><span class=\"line\"><span class=\"meta\">  void MainWindow::on_pushButton_##name##_clicked() &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">    ui-&gt;textBrowser_input-&gt;setFocus();                \\</span></span><br><span class=\"line\"><span class=\"meta\">    ui-&gt;textBrowser_input-&gt;insertPlainText(#name);    \\</span></span><br><span class=\"line\"><span class=\"meta\">  &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<p>剩下的就只能自己写咯。</p>\n<h2 id=\"输入输出框\"><a href=\"#输入输出框\" class=\"headerlink\" title=\"输入输出框\"></a>输入输出框</h2><p>qt为用户提供了<code>text Browser</code>,<code>text Edit</code>,<code>Plain text edit</code>,<code>line edit</code>等组件作为文本框。这里选择了text Browser，目的是屏蔽直接复制粘贴输入，防止非法字符进入。结果后面发现<code>text Browser</code>是由<code>text Edit</code>继承而来，因此browser也可以提供输入功能（离谱，read Only属性。</p>\n<p>所有的输入按键都将在输入框中插入一个对应的字符。这里只需要调用<code>text Browser</code>类中自带的public function member：<code>insertPlainText(QString)</code>。</p>\n<p><em>问题</em>：文本框中的光标只有在选中文本框时才会显示，如果使用鼠标点击按键进行输入，输入框中的光标实际仍然存在但不显示。</p>\n<ul>\n<li>为了使得光标时刻存在，这里使用了一个简单粗暴的方法，为所有按键功能加上<code>setFocus()</code>。从而保证焦点始终在输入框中。</li>\n</ul>\n<p>对于输出框，每次显示结果都是更新所有内容（而不是插入），因此需要<code>setPlainText</code>。</p>\n<h2 id=\"等号\"><a href=\"#等号\" class=\"headerlink\" title=\"等号\"></a>等号</h2><p>等号按键是计算器最核心的按键，以下为等号按键的槽函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_equal_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">setFocus</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  Location::isRead = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  QString s = ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">toPlainText</span>();</span><br><span class=\"line\">  QString rst = <span class=\"built_in\">parser</span>(s);</span><br><span class=\"line\">  ui-&gt;textBrowser_output-&gt;<span class=\"built_in\">setPlainText</span>(rst);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Location::autoSave) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">save</span>(Location::filePath, s, rst);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>按下等号后，程序首先保证焦点仍然在输入框口上，然后讲是否正在读取历史记录按键设置为0（这讲在后面的历史记录读取中说到），然后获取输入框中的内容，交给由竞赛大佬@龚程昊编写的parser函数进行处理（这将在后面数据处理中说到），然后将parser函数返回的字符串（QString）显示到输出框中，然后在自动保存功能开启的情况下，保存至本地文件中。</p>\n<h2 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a>数据处理</h2><p>等会儿copy大佬写的东西，大致思路是使用栈和转化为前缀表达式。</p>\n<p>但大佬使用的使用的是std库，并且是作为一个单独的cpp程序书写的（方便调试）。因此，这里将源文件复制到parser文件中，并将main函数改写成接受<code>QString</code>作为参数，返回<code>QString</code>的parser()函数。这里用到了<code>QString::toStdString</code>和<code>QString::fromStdString</code>。</p>\n<p>记录几个当时测试出来的bug：</p>\n<ol>\n<li>只写一个数后按等号，直接返回0</li>\n<li>没有考虑负数</li>\n<li>没有考虑溢出</li>\n</ol>\n<p>附上代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//parser.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;parser.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">pd</span><span class=\"params\">(<span class=\"keyword\">char</span> i)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((i &lt;= <span class=\"number\">57</span> &amp;&amp; i &gt;= <span class=\"number\">48</span>) || (i &gt;= <span class=\"number\">65</span> &amp;&amp; i &lt;= <span class=\"number\">70</span>)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pri</span><span class=\"params\">(<span class=\"keyword\">char</span> i)</span>  <span class=\"comment\">// priority</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"string\">&#x27;+&#x27;</span> || i == <span class=\"string\">&#x27;-&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"string\">&#x27;*&#x27;</span> || i == <span class=\"string\">&#x27;/&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"string\">&#x27;(&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"string\">&#x27;)&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">255</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">judge</span><span class=\"params\">(<span class=\"keyword\">char</span> i)</span>  <span class=\"comment\">//乱码</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((i &lt;= <span class=\"number\">57</span> &amp;&amp; i &gt;= <span class=\"number\">48</span>) || (i &gt;= <span class=\"number\">65</span> &amp;&amp; i &lt;= <span class=\"number\">70</span>) || i == <span class=\"string\">&#x27;+&#x27;</span> || i == <span class=\"string\">&#x27;-&#x27;</span> ||</span><br><span class=\"line\">      i == <span class=\"string\">&#x27;*&#x27;</span> || i == <span class=\"string\">&#x27;/&#x27;</span> || i == <span class=\"string\">&#x27;(&#x27;</span> || i == <span class=\"string\">&#x27;)&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">QString <span class=\"title\">parser</span><span class=\"params\">(QString expression)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1007</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> R = LONG_MAX;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> s[N], stack1[N];</span><br><span class=\"line\">  <span class=\"keyword\">long</span> read[N], sta[N], stack2[N], stt[N];</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> f[N] = &#123;<span class=\"number\">0</span>&#125;, flag[N] = &#123;<span class=\"number\">0</span>&#125;, ff = <span class=\"number\">0</span>, fff = <span class=\"number\">0</span>;</span><br><span class=\"line\">  string c, sc;</span><br><span class=\"line\">  string str, as = expression.<span class=\"built_in\">toStdString</span>();</span><br><span class=\"line\">  str = <span class=\"string\">&quot;0+&quot;</span> + as;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> l = str.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">    s[i] = str[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">judge</span>(s[i])) &#123;</span><br><span class=\"line\">      ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;(&#x27;</span> &amp;&amp; (s[i + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;*&#x27;</span> || s[i + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;/&#x27;</span>)) ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;)&#x27;</span> &amp;&amp; (s[i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;+&#x27;</span> || s[i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;-&#x27;</span> || s[i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;*&#x27;</span> ||</span><br><span class=\"line\">                        s[i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;/&#x27;</span>))</span><br><span class=\"line\">      ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">pd</span>(s[l - <span class=\"number\">1</span>]) &amp;&amp; s[l - <span class=\"number\">1</span>] != <span class=\"string\">&#x27;)&#x27;</span>) ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> st = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; l; i++)  <span class=\"comment\">//括号是否匹配</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;(&#x27;</span>) st++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;)&#x27;</span>) st--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (st != <span class=\"number\">0</span>) ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>, k = <span class=\"number\">0</span>, m = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (j &lt; l &amp;&amp; ff == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">pd</span>(s[j]))  <span class=\"comment\">//数字</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (s[j] &lt;= <span class=\"number\">57</span> &amp;&amp; s[j] &gt;= <span class=\"number\">48</span>) &#123;</span><br><span class=\"line\">        sta[k] = s[j] - <span class=\"number\">48</span>;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[j] &gt;= <span class=\"number\">65</span> &amp;&amp; s[j] &lt;= <span class=\"number\">70</span>) &#123;</span><br><span class=\"line\">        sta[k] = s[j] - <span class=\"number\">55</span>;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">pd</span>(s[j]))  <span class=\"comment\">//符号</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">pd</span>(s[j - <span class=\"number\">1</span>]) &amp;&amp; j &gt; <span class=\"number\">0</span>)  <span class=\"comment\">//前面的数字</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = s[j];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> h = <span class=\"number\">0</span>; k &gt; <span class=\"number\">0</span>; h++) &#123;</span><br><span class=\"line\">          cnt += sta[k - <span class=\"number\">1</span>] * <span class=\"built_in\">pow</span>(<span class=\"number\">16</span>, h);</span><br><span class=\"line\">          k--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        read[m] = cnt;</span><br><span class=\"line\">        m++;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">        read[m] = c;</span><br><span class=\"line\">        f[m] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        m++;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">//前面的符号</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> c = s[j];</span><br><span class=\"line\">        read[m] = c;</span><br><span class=\"line\">        f[m] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        m++;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">pd</span>(s[l - <span class=\"number\">1</span>]))  <span class=\"comment\">//数字</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k &gt; <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;Detect Overflow&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> h = <span class=\"number\">0</span>; k &gt; <span class=\"number\">0</span>; h++) &#123;</span><br><span class=\"line\">      cnt += sta[k - <span class=\"number\">1</span>] * <span class=\"built_in\">pow</span>(<span class=\"number\">16</span>, h);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cnt &gt; R) <span class=\"keyword\">return</span> <span class=\"string\">&quot;Detect Overflow&quot;</span>;</span><br><span class=\"line\">      k--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    read[m] = cnt;</span><br><span class=\"line\">    m++;</span><br><span class=\"line\">    j++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (f[i] == <span class=\"number\">1</span> &amp;&amp; f[i + <span class=\"number\">1</span>] == <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">pri</span>(read[i]) &gt;= <span class=\"number\">1</span> &amp;&amp;</span><br><span class=\"line\">          <span class=\"built_in\">pri</span>(read[i + <span class=\"number\">1</span>]) == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f[i] == <span class=\"number\">1</span> &amp;&amp; f[i + <span class=\"number\">1</span>] == <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">pri</span>(read[i]) &gt;= <span class=\"number\">1</span> &amp;&amp;</span><br><span class=\"line\">               <span class=\"built_in\">pri</span>(read[i + <span class=\"number\">1</span>]) &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">0</span>;  <span class=\"comment\">//反缀表达式</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f[i] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      stack2[a] = read[i];</span><br><span class=\"line\">      a++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f[i] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (read[i] == <span class=\"string\">&#x27;(&#x27;</span>) &#123;</span><br><span class=\"line\">        stack1[b] = <span class=\"string\">&#x27;(&#x27;</span>;</span><br><span class=\"line\">        b++;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">pri</span>(read[i]) == <span class=\"number\">1</span>)  <span class=\"comment\">//+-</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">pri</span>(stack1[b - <span class=\"number\">1</span>]) &gt;= <span class=\"number\">1</span> &amp;&amp; b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          stack2[a] = stack1[b - <span class=\"number\">1</span>];</span><br><span class=\"line\">          flag[a] = <span class=\"number\">1</span>;</span><br><span class=\"line\">          b--;</span><br><span class=\"line\">          a++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stack1[b] = read[i];</span><br><span class=\"line\">        b++;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">pri</span>(read[i]) == <span class=\"number\">2</span>)  <span class=\"comment\">//*/</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">pri</span>(stack1[b - <span class=\"number\">1</span>]) == <span class=\"number\">2</span> &amp;&amp; b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          stack2[a] = stack1[b - <span class=\"number\">1</span>];</span><br><span class=\"line\">          flag[a] = <span class=\"number\">1</span>;</span><br><span class=\"line\">          b--;</span><br><span class=\"line\">          a++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stack1[b] = read[i];</span><br><span class=\"line\">        b++;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (read[i] == <span class=\"string\">&#x27;)&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (stack1[b - <span class=\"number\">1</span>] != <span class=\"string\">&#x27;(&#x27;</span>) &#123;</span><br><span class=\"line\">          stack2[a] = stack1[b - <span class=\"number\">1</span>];</span><br><span class=\"line\">          flag[a] = <span class=\"number\">1</span>;</span><br><span class=\"line\">          b--;</span><br><span class=\"line\">          a++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        b--;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    stack2[a] = stack1[b - <span class=\"number\">1</span>];</span><br><span class=\"line\">    flag[a] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    a++;</span><br><span class=\"line\">    b--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// calculation</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> g = <span class=\"number\">0</span>, cn = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!flag[i])  <span class=\"comment\">//数字</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      stt[g] = stack2[i];</span><br><span class=\"line\">      g++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag[i])  <span class=\"comment\">//符号</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\"><span class=\"keyword\">switch</span></span> (stack2[i]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br><span class=\"line\">          cn = stt[g - <span class=\"number\">2</span>] + stt[g - <span class=\"number\">1</span>];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (cn &gt; R) ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">          cn = stt[g - <span class=\"number\">2</span>] - stt[g - <span class=\"number\">1</span>];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (cn &lt; -R) ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\">          cn = stt[g - <span class=\"number\">2</span>] * stt[g - <span class=\"number\">1</span>];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (cn &gt; R || cn &lt; -R) ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (stt[g - <span class=\"number\">1</span>] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            cn = stt[g - <span class=\"number\">2</span>] / stt[g - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stt[g - <span class=\"number\">1</span>] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ff = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      g -= <span class=\"number\">2</span>;</span><br><span class=\"line\">      stt[g] = cn;</span><br><span class=\"line\">      g++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> cnn = cn;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cn == <span class=\"number\">0</span> &amp;&amp; !ff) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//        cout&lt;&lt;str&lt;&lt;&quot;=&quot;&lt;&lt;cn&lt;&lt;endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    fff = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (cn != <span class=\"number\">0</span> &amp;&amp; !ff)  <span class=\"comment\">//转十六进制</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cn &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      x = cn % <span class=\"number\">16</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">10</span>)</span><br><span class=\"line\">        c = x + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        c = x + <span class=\"string\">&#x27;A&#x27;</span> - <span class=\"number\">10</span>;</span><br><span class=\"line\">      sc = c + sc;</span><br><span class=\"line\">      cn /= <span class=\"number\">16</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cn &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      x = cn % <span class=\"number\">16</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">-10</span>)</span><br><span class=\"line\">        c = -x + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        c = -x + <span class=\"string\">&#x27;A&#x27;</span> - <span class=\"number\">10</span>;</span><br><span class=\"line\">      sc = c + sc;</span><br><span class=\"line\">      cn /= <span class=\"number\">16</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cnn &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    sc = <span class=\"string\">&#x27;-&#x27;</span> + sc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!ff &amp;&amp; !fff) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//        cout&lt;&lt;as&lt;&lt;&quot;=&quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">//        cout&lt;&lt;sc&lt;&lt;endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sc == <span class=\"string\">&quot;-80000000&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;Detect Overflow&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QString::<span class=\"built_in\">fromStdString</span>(sc);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;Formula Error&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>贴代码的时候才发现大佬写了一个pd（判断）和一个judge（还是判断）。算了算了，能用就行（</p>\n<h2 id=\"历史记录\"><a href=\"#历史记录\" class=\"headerlink\" title=\"历史记录\"></a>历史记录</h2><p>如果只是作为计算器，以上功能就已经可以算完成了。但大多数计算器都是有历史记录功能的，因此这个计算器也该有一个。</p>\n<p>这里将历史记录分为底层和顶层两部分来设计，顶层使用Qt框架，而底层使用c的基本库，从而实现更加原子化和方便的操作。</p>\n<p>顶层实现的用户接口功能：</p>\n<ul>\n<li>手动保存当前结果</li>\n<li>选择是否自动保存结果</li>\n<li>选择保存位置</li>\n<li>读取历史记录</li>\n</ul>\n<p>底层实现的文本的读写功能</p>\n<ul>\n<li>获取时间</li>\n<li>记录结果</li>\n<li>写入和读取</li>\n</ul>\n<h3 id=\"底层设计细节\"><a href=\"#底层设计细节\" class=\"headerlink\" title=\"底层设计细节\"></a>底层设计细节</h3><p>保存功能被设计为，获取当前时间和本次运算的算式和结果，以新行的方式追加到某文件的结尾。保存功能的底层设计都被保存在<code>saving</code>文件下。</p>\n<p>为此底层使用std库设计了<code>save()</code>函数。该函数还调用了<code>getCurrentTime()</code>来获取当前时间。当然，这个函数也是由<code>main()</code>函数修改而来，由std框架接入了qt框架。源码如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//saving.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> string <span class=\"title\">getCurrentTime</span><span class=\"params\">()</span>  <span class=\"comment\">//输出当前时间</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">time_t</span> t = <span class=\"built_in\">time</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">char</span> ch[<span class=\"number\">64</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">strftime</span>(ch, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(ch) - <span class=\"number\">1</span>, <span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, <span class=\"built_in\">localtime</span>(&amp;t));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ch;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">save</span><span class=\"params\">(QString location, QString fomula, QString data)</span> </span>&#123;</span><br><span class=\"line\">  string addr = location.<span class=\"built_in\">toStdString</span>();</span><br><span class=\"line\">  fstream f;</span><br><span class=\"line\">  f.<span class=\"built_in\">open</span>(addr, ios::out | ios::app);</span><br><span class=\"line\">  f &lt;&lt; <span class=\"built_in\">getCurrentTime</span>() &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; fomula.<span class=\"built_in\">toStdString</span>() &lt;&lt; <span class=\"string\">&quot;=&quot;</span></span><br><span class=\"line\">    &lt;&lt; data.<span class=\"built_in\">toStdString</span>()</span><br><span class=\"line\">    &lt;&lt; endl;  <span class=\"comment\">//变量addr、以及gch的等式和输出结果变量还需加进去</span></span><br><span class=\"line\">  f.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了保存结果外，还需要读取结果，读取结果需要始终从最后一行开始往上读。经历了一系列讨论之后，本项目决定使用读取整个文件来获取所有的行数，并根据行数来获取内容。为此有了<code>CountLine()</code>和<code>readLine()</code>两个函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">CountLines</span><span class=\"params\">(QString filename)</span> </span>&#123;</span><br><span class=\"line\">  ifstream f;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">  string tmp;</span><br><span class=\"line\">  string stdfilename = filename.<span class=\"built_in\">toStdString</span>();</span><br><span class=\"line\">  <span class=\"comment\">// ios::in 表示以只读的方式读取文件</span></span><br><span class=\"line\">  f.<span class=\"built_in\">open</span>(stdfilename, ios::in);</span><br><span class=\"line\">  <span class=\"comment\">//文件打开失败:返回0</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (f.<span class=\"built_in\">fail</span>()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//文件存在</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">getline</span>(f, tmp, <span class=\"string\">&#x27;\\n&#x27;</span>)) &#123;</span><br><span class=\"line\">      n++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">QString <span class=\"title\">ReadLine</span><span class=\"params\">(QString filename, <span class=\"keyword\">int</span> line)</span>  <span class=\"comment\">//读取指定行文件</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// line行数限制 1 - lines</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (line &gt; <span class=\"number\">0</span> &amp;&amp; line &lt;= <span class=\"built_in\">CountLines</span>(filename)) &#123;</span><br><span class=\"line\">    ifstream f;</span><br><span class=\"line\">    string stdfilename = filename.<span class=\"built_in\">toStdString</span>();</span><br><span class=\"line\">    f.<span class=\"built_in\">open</span>(stdfilename, ios::in);</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;string&gt; strVec;</span><br><span class=\"line\">    <span class=\"comment\">//行0 - 行lines对应strvect[0] - strvect[lines]</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!f.<span class=\"built_in\">eof</span>()) &#123;</span><br><span class=\"line\">      string inbuf;</span><br><span class=\"line\">      <span class=\"built_in\">getline</span>(f, inbuf, <span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">      strVec.<span class=\"built_in\">push_back</span>(inbuf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QString::<span class=\"built_in\">fromStdString</span>(strVec[line - <span class=\"number\">1</span>]);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>读取整个文件并计算行数并不是一个效率高的方式，但在文件不大和不追求高效率的条件下，这是最好的实践方式。因为考虑这里还需要考虑到连续读取历史文件。</p>\n<p>当用户按下<code>UP</code>按键时，表示用户开始读取历史文件。用户首先查看的应该是历史文件的最后一行，当用户再次按下<code>UP</code>时，读取倒数第二行，依次类推。为了实现该功能，这里使用了一个全局变量<code>line</code>表示当前正在读取的行数，该行数被初始化为历史记录的总行数。然后再次读取将会<code>--line</code>后读取。当用户按下<code>DOWN</code>按键时，++line后读取。</p>\n<p>这里就要考虑到另一个问题，读取一定历史记录后，用户重新进行计算，然后再次查看历史记录，这样行数应当从新的历史记录最后一行开始计算。为此，这里引入了<code>isRead</code>变量，该变量初始化为<code>0</code>，表示现在未在读取。首次按下<code>UP</code>按键时，该变量置<code>1</code>，同时将<code>line</code>变量初始化为当前历史记录行数。当用户按下<code>UP</code>或<code>DOWN</code>按键时，正常修改<code>line</code>变量的值并进行读取即可。当用户按下<code>=</code>或手动保存时，需要将<code>isRead</code>置零。这样下一次按下<code>UP</code>时，将重新读取历史文件行数并为<code>line</code>赋值。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br><span class=\"line\"><span class=\"comment\">//等号的槽函数在上面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_Up_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">setFocus</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Location::isRead) &#123;</span><br><span class=\"line\">    --Location::line;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Location::line = <span class=\"built_in\">CountLines</span>(Location::filePath);</span><br><span class=\"line\">    Location::isRead = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ui-&gt;textBrowser_output-&gt;<span class=\"built_in\">setText</span>(<span class=\"built_in\">ReadLine</span>(Location::filePath, Location::line));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_Down_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">setFocus</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Location::isRead) &#123;</span><br><span class=\"line\">    ++Location::line;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ui-&gt;textBrowser_output-&gt;<span class=\"built_in\">setText</span>(<span class=\"built_in\">ReadLine</span>(Location::filePath, Location::line));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>保存和读取的路径将在<code>顶层设计细节</code>中进一步讨论。</p>\n<h3 id=\"顶层设计细节\"><a href=\"#顶层设计细节\" class=\"headerlink\" title=\"顶层设计细节\"></a>顶层设计细节</h3><p>这里在menubar中设置了一个<code>history location</code>按键，用于修改历史文件的存放位置。当按下此按键时，程序应当打开一个新的窗口，因此，需要首先在源文件中创建一个新的窗口。右键点击<code>项目</code>，选择<code>add new</code>，选择<code>qt设计师类</code>，然后会分别在三个文件夹中依次得到头文件、源文件、ui设计文件。然后需要在主窗口中设置点击<code>history location</code>按键打开新窗口。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_actionHistory_location_triggered</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Location *new_win = <span class=\"keyword\">new</span> <span class=\"built_in\">Location</span>();</span><br><span class=\"line\">  new_win-&gt;<span class=\"built_in\">show</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：记得在<code>mainwindow.h</code>中include<code>location.h</code>，按下打开新窗口实际上就是创建一个新的Location窗口，然后展示。</p>\n<p>接下来就是在<code>location.ui</code>中修改和设计可视化窗口，此项目使用了栅格布局，在左侧设置了一个较大的<code>textBrowser</code>和较小的<code>lineEdit</code>（设为不可修改，用于给出提示），在右侧依次设置了<code>选择文件</code>，<code>选择文件夹</code>，<code>确定</code>，<code>取消</code> 四个按键。</p>\n<blockquote>\n<p>选择文件：调用Qt库，打开系统默认的文件选择框，设置必须选择.txt格式结尾的文件，将返回的结果输出至<code>textBrowser</code>。</p>\n<p>选择文件夹：同上，但是选择的是文件夹，并且返回的是存在的文件夹的路径，将返回的结果加上<code>/result.txt</code>后输入至<code>textBrowser</code>。</p>\n<p>确定：按下后，读取<code>textBrowser</code>中的路径，检查其合法性（因为一开始<code>textBrowser</code>设置了可以直接更改，因此可能会输入奇怪的路径），若不合法则在<code>lineEdit</code>中给出相应的报错（格式不合法或路径不合法）。若合法，则检查文件是否存在，不存在则创建。当一切都合理以后，将全局变量<code>filePath</code>设为文本框中的内容，并关闭<code>Location</code>窗口。</p>\n<p>取消：直接关闭，不做任何修改。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//location.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Location::on_pushButton_path_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  QString file_name =</span><br><span class=\"line\">      QFileDialog::<span class=\"built_in\">getOpenFileName</span>(<span class=\"literal\">NULL</span>, <span class=\"string\">&quot;选择txt文件&quot;</span>, <span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;*.txt&quot;</span>);</span><br><span class=\"line\">  ui-&gt;textEdit-&gt;<span class=\"built_in\">setText</span>(file_name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Location::on_pushButton_dir_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  QString dir_name = QFileDialog::<span class=\"built_in\">getExistingDirectory</span>(<span class=\"literal\">NULL</span>, <span class=\"string\">&quot;选择文件夹&quot;</span>, <span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">  ui-&gt;textEdit-&gt;<span class=\"built_in\">setText</span>(dir_name + <span class=\"string\">&quot;/result.txt&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Location::on_pushButton_cancel_clicked</span><span class=\"params\">()</span> </span>&#123; Location::<span class=\"built_in\">close</span>(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Location::on_pushButton_sure_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  QString new_path = ui-&gt;textEdit-&gt;<span class=\"built_in\">toPlainText</span>();</span><br><span class=\"line\">  <span class=\"function\">QFileInfo <span class=\"title\">info</span><span class=\"params\">(new_path)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!info.<span class=\"built_in\">exists</span>()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (new_path.<span class=\"built_in\">contains</span>(<span class=\"string\">&quot;.txt&quot;</span>)) &#123;</span><br><span class=\"line\">      <span class=\"function\">QFile <span class=\"title\">f</span><span class=\"params\">(new_path)</span></span>;</span><br><span class=\"line\">      f.<span class=\"built_in\">open</span>(QIODevice::WriteOnly);</span><br><span class=\"line\">      f.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      ui-&gt;prompt-&gt;<span class=\"built_in\">setText</span>(<span class=\"string\">&quot;路径或格式不合法，请重新输入&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Location::filePath=new_path;</span><br><span class=\"line\">  Location::<span class=\"built_in\">close</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自动保存功能被设计为主窗口中菜单栏中的一个按键，默认为开启状态，显示为<code>Auto Save On</code>，当点击该按键后，槽函数将该文本替换为<code>Auto Save Off</code>，并将全局变量<code>autoSave</code>置零。</p>\n<p><code>filePath</code>和<code>autoSave</code>以及底层中的<code>isRead</code>和<code>line</code>都设计为一个全局变量，便于主窗口调用。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//location.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Location</span> :</span> <span class=\"keyword\">public</span> QDialog &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"keyword\">static</span> QString filePath;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> line;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> isRead;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> autoSave;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//location.cpp</span></span><br><span class=\"line\">QString Location::filePath = <span class=\"string\">&quot;result.txt&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> Location::line = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> Location::isRead = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> Location::autoSave = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在主窗口中，只有用户按下等号（并且自动保存功能开启）或手动保存（在<code>menubar</code>中设置了一个保存按键并且设置了快捷键）时，才会保存。因此只需在这些地方加入<code>save()</code>函数即可。当然，也要有对<code>autoSave</code>的判断。</p>\n<h2 id=\"样式设定\"><a href=\"#样式设定\" class=\"headerlink\" title=\"样式设定\"></a>样式设定</h2><p>前面提到了可以在<code>ui</code>文件中直接修改样式，但这种方式并不利于后面的修改，因此我们选择直接调用函数的方式。如要为<code>centralWidget</code>设定样式，可以调用<code>setStyelSheet()</code>，后接一个QString，该字符串中直接书写qss内容。</p>\n<p>这里选择了另一种方式，使用qt的资源文件管理功能来存储单独的qss文件，然后以前缀引用的方式来调用这些文件。</p>\n<p>在<code>项目</code>中右键新建<code>qt resource file</code>，设定名称后打开管理界面，点击添加前缀<code>add prefix</code>。然后添加文件<code>add Files</code>。前缀决定了调用的方式（将会在源代码中演示）。文件可以新建一个<code>general file</code>后添加，也可以将其他方式创建的qss文件加入。</p>\n<p>引入的资源可以以<code>QFile</code>的方式引用。本项目在菜单栏中添加了一个黑色主题的选项，其槽函数如下</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_actionBlack_theme_triggered</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  globalQss = <span class=\"string\">&quot;:/Black.qss&quot;</span>;</span><br><span class=\"line\">  <span class=\"function\">QFile <span class=\"title\">defaultQss</span><span class=\"params\">(globalQss)</span></span>;</span><br><span class=\"line\">  defaultQss.<span class=\"built_in\">open</span>(QFile::ReadOnly);</span><br><span class=\"line\">  QString qssContent = defaultQss.<span class=\"built_in\">readAll</span>();</span><br><span class=\"line\">  <span class=\"built_in\">centralWidget</span>()-&gt;<span class=\"built_in\">setStyleSheet</span>(qssContent);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>/</code>为我设定的前缀，只需以冒号开头，加上前缀和文件，即表明在应用qt指定好的资源文件。接下来就只需打开该文件并读取其内容，然后为需要的组件设定qss样式即可。</p>\n<p><strong>注意</strong>：使用qss的一些麻烦：后面我希望能设定字体的大小、样式等，但这时通过<code>setFont()</code>等函数并不起作用。原因估计是qss的优先级很高，直接设定将不起作用。这时我只能再写一个<code>changeStyle()</code>函数，通过qss样式表更新来进行样式更新</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::changeStyle</span><span class=\"params\">(QString newStyle, QWidget *widget)</span> </span>&#123;</span><br><span class=\"line\">  QString oldStyle = widget-&gt;<span class=\"built_in\">styleSheet</span>();</span><br><span class=\"line\">  oldStyle += newStyle;</span><br><span class=\"line\">  widget-&gt;<span class=\"built_in\">setStyleSheet</span>(oldStyle);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以这里我只写了改变字体的函数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_actionLarge_font_size_triggered</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">changeStyle</span>(<span class=\"string\">&quot;*&#123;font:30px;&#125;&quot;</span>, MainWindow::<span class=\"built_in\">centralWidget</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"保存设置\"><a href=\"#保存设置\" class=\"headerlink\" title=\"保存设置\"></a>保存设置</h2><p>类似于文件的保存位置，是否自动保存等功能，每次重新启动程序后都会按照程序的设定重新初始化。为了使得这些设定能被保存下来，需要使用一个文件将这些配置保存下来。恰好最近见到了许多<code>ini</code>格式文件，qt也提供了<code>QSetting</code>及配套的<code>ini</code>配置文件读写。</p>\n<p>配置文件应当在主窗口创建时被读取，在主窗口被销毁时被存入。因此只需在<code>mainwindow</code>的构造函数和析构函数中加入读写<code>ini</code>文件的步骤即可。需要注意的是，要考虑<code>ini</code>文件不存在的情况，不存在时需要使用程序的内置设定。</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MainWindow::<span class=\"built_in\">MainWindow</span>(QWidget *parent)</span><br><span class=\"line\">    : <span class=\"built_in\">QMainWindow</span>(parent), <span class=\"built_in\">ui</span>(<span class=\"keyword\">new</span> Ui::MainWindow) &#123;</span><br><span class=\"line\">  ui-&gt;<span class=\"built_in\">setupUi</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">grabKeyboard</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  QSettings *iniRead = <span class=\"keyword\">new</span> <span class=\"built_in\">QSettings</span>(<span class=\"string\">&quot;config.ini&quot;</span>, QSettings::IniFormat);</span><br><span class=\"line\">  QString iniAuto = iniRead-&gt;<span class=\"built_in\">value</span>(<span class=\"string\">&quot;autoSave&quot;</span>).<span class=\"built_in\">toString</span>();</span><br><span class=\"line\">  QString iniPath = iniRead-&gt;<span class=\"built_in\">value</span>(<span class=\"string\">&quot;filePath&quot;</span>).<span class=\"built_in\">toString</span>();</span><br><span class=\"line\">  QString iniQss = iniRead-&gt;<span class=\"built_in\">value</span>(<span class=\"string\">&quot;globalQss&quot;</span>).<span class=\"built_in\">toString</span>();</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> iniRead;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// init autoSave</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!iniAuto.<span class=\"built_in\">isEmpty</span>() &amp;&amp; !iniAuto.<span class=\"built_in\">toInt</span>()) &#123;</span><br><span class=\"line\">    Location::autoSave = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ui-&gt;actionAuto_Save-&gt;<span class=\"built_in\">setText</span>(<span class=\"string\">&quot;Auto Save Off&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// init filePath</span></span><br><span class=\"line\">  <span class=\"function\">QFile <span class=\"title\">iniPathFile</span><span class=\"params\">(iniPath)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (iniPathFile.<span class=\"built_in\">open</span>(QFile::WriteOnly)) &#123;</span><br><span class=\"line\">    Location::filePath = iniPath;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// init Qss file(theme)</span></span><br><span class=\"line\">  <span class=\"function\">QFile <span class=\"title\">iniQssFile</span><span class=\"params\">(iniQss)</span></span>;</span><br><span class=\"line\">  QString qssContent;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (iniQssFile.<span class=\"built_in\">open</span>(QFile::ReadOnly)) &#123;</span><br><span class=\"line\">    qssContent = iniQssFile.<span class=\"built_in\">readAll</span>();</span><br><span class=\"line\">    globalQss = iniQss;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    QFile <span class=\"built_in\">defaultQss</span>(<span class=\"string\">&quot;:/Black.qss&quot;</span>);</span><br><span class=\"line\">    defaultQss.<span class=\"built_in\">open</span>(QFile::ReadOnly);</span><br><span class=\"line\">    qssContent = defaultQss.<span class=\"built_in\">readAll</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">centralWidget</span>()-&gt;<span class=\"built_in\">setStyleSheet</span>(qssContent);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MainWindow::~<span class=\"built_in\">MainWindow</span>() &#123;</span><br><span class=\"line\">  QSettings *IniWrite = <span class=\"keyword\">new</span> <span class=\"built_in\">QSettings</span>(<span class=\"string\">&quot;config.ini&quot;</span>, QSettings::IniFormat);</span><br><span class=\"line\">  IniWrite-&gt;<span class=\"built_in\">setValue</span>(<span class=\"string\">&quot;autoSave&quot;</span>, Location::autoSave);</span><br><span class=\"line\">  IniWrite-&gt;<span class=\"built_in\">setValue</span>(<span class=\"string\">&quot;filePath&quot;</span>, Location::filePath);</span><br><span class=\"line\">  IniWrite-&gt;<span class=\"built_in\">setValue</span>(<span class=\"string\">&quot;globalQss&quot;</span>, globalQss);</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> IniWrite;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> ui;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>在主函数中为整个窗口设置了透明度，让它看起来酷炫一点点。</li>\n<li>在主函数中为窗口设定名称。</li>\n<li>在<code>.pro</code>文件中加入图标文件，使得生成的程序有图标</li>\n</ul>\n<h1 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h1><h2 id=\"收获\"><a href=\"#收获\" class=\"headerlink\" title=\"收获\"></a>收获</h2><ul>\n<li>不再害怕qt框架了，反而觉得它好用。</li>\n<li>qt的窗口类很舒服，有清晰且层次分明的关系，有足够好用的成员函数。</li>\n<li>qt的基本库也有不少可以讨论的，如QString的设计，不仅提供了基本的可变长度和操作符重载，还考虑到了和std库之间的转换。</li>\n<li>qt的信号与槽机制是qt最精髓的东西之一，信号是一种非常不错的线程间通信方式，很遗憾我没有手动使用connect函数来创建信号与槽。但确实在写qt的过程中，qtcreator已经为我提供了足够的可视化信号与槽构建工具。</li>\n<li>qss基本等于css</li>\n<li>qt以易于制作ui界面出名，但用了之后发现，qt实际上是借鉴了很多现代浏览器（前端）的实现方式。我写的时候感觉自己像是在写js+css。对于一个web项目来说，前端工程师书写html，css，以及利用框架来写js。后端工程师则使用各种工具来构建web服务。但对于qt这样一种前后结合的一体化程序设计框架来说，前后的分离并不彻底（虽然对硬件工程师来说可能会很友好）。</li>\n<li>我还是支持“qt是一个平台而不只是一个ui框架”这种说法。qt在基本库中的内容一点也不比它在ui界面中的少。无论是基本库还是ui库，都有很多可以研究的东西。</li>\n<li>宏的自动扩展确实好用</li>\n<li>qt毕竟还是封装的比较高层了，要是需要一些简单的功能，还是老老实实写原生的c和std吧。</li>\n</ul>\n<h2 id=\"遗憾\"><a href=\"#遗憾\" class=\"headerlink\" title=\"遗憾\"></a>遗憾</h2><ul>\n<li>大佬说他使用了前缀表达式，求余和翻方功能不好实现，我懂的算法也不多，这两个功能没能实现。只能说算法能力有待提高了。</li>\n</ul>\n"},{"author":"kawhicurry","title":"introduction-to-matery","date":"2021-12-19T12:02:04.000Z","top":1,"_content":"## 文章 Front-matter 介绍\n\n### Front-matter 选项详解\n\n`Front-matter` 选项中的所有内容均为**非必填**的。但我仍然建议至少填写 `title` 和 `date` 的值。\n\n| 配置选项   | 默认值                      | 描述                                                         |\n| ---------- | --------------------------- | ------------------------------------------------------------ |\n| title      | `Markdown` 的文件标题        | 文章标题，强烈建议填写此选项                                 |\n| date       | 文件创建时的日期时间          | 发布时间，强烈建议填写此选项，且最好保证全局唯一             |\n| author     | 根 `_config.yml` 中的 `author` | 文章作者                                                     |\n| img        | `featureImages` 中的某个值   | 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: `http://xxx.com/xxx.jpg` |\n| top        | `true`                      | 推荐文章（文章是否置顶），如果 `top` 值为 `true`，则会作为首页推荐文章 |\n| hide        | `false`                    | 隐藏文章，如果`hide`值为`true`，则文章不会在首页显示 |\n| cover      | `false`                     | `v1.0.2`版本新增，表示该文章是否需要加入到首页轮播封面中 |\n| coverImg   | 无                          | `v1.0.2`版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 |\n| password   | 无                          | 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 `password` 的值，该值必须是用 `SHA256` 加密后的密码，防止被他人识破。前提是在主题的 `config.yml` 中激活了 `verifyPassword` 选项 |\n| toc        | `true`                      | 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 `config.yml` 中激活了 `toc` 选项 |\n| mathjax    | `false`                     | 是否开启数学公式支持 ，本文章是否开启 `mathjax`，且需要在主题的 `_config.yml` 文件中也需要开启才行 |\n| summary    | 无                          | 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 |\n| categories | 无                          | 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 |\n| tags       | 无                          | 文章标签，一篇文章可以多个标签                              |\n| keywords   | 文章标题                     | 文章关键字，SEO 时需要                              |\n| reprintPolicy | cc_by                    | 文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个 |\n\n> **注意**:\n> 1. 如果 `img` 属性不填写的话，文章特色图会根据文章标题的 `hashcode` 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图**各有特色**。\n> 2. `date` 的值尽量保证每篇文章是唯一的，因为本主题中 `Gitalk` 和 `Gitment` 识别 `id` 是通过 `date` 的值来作为唯一标识的。\n> 3. 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 `_config.yml` 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：[开源中国在线工具](http://tool.oschina.net/encrypt?type=2)、[chahuo](http://encode.chahuo.com/)、[站长工具](http://tool.chinaz.com/tools/hash.aspx)。\n> 4. 您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则\n以下为文章的 `Front-matter` 示例。\n\n### 最简示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\n---\n```\n\n### 最全示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\nauthor: 赵奇\nimg: /source/images/xxx.jpg\ntop: true\nhide: false\ncover: true\ncoverImg: /images/1.jpg\npassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\ntoc: false\nmathjax: false\nsummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---\n```","source":"_posts/introduction-to-matery.md","raw":"---\nauthor: kawhicurry\ntitle: introduction-to-matery\ncategories: front\ndate: 2021-12-19 20:02:04\ntags: hexo\ntop: 1\n---\n## 文章 Front-matter 介绍\n\n### Front-matter 选项详解\n\n`Front-matter` 选项中的所有内容均为**非必填**的。但我仍然建议至少填写 `title` 和 `date` 的值。\n\n| 配置选项   | 默认值                      | 描述                                                         |\n| ---------- | --------------------------- | ------------------------------------------------------------ |\n| title      | `Markdown` 的文件标题        | 文章标题，强烈建议填写此选项                                 |\n| date       | 文件创建时的日期时间          | 发布时间，强烈建议填写此选项，且最好保证全局唯一             |\n| author     | 根 `_config.yml` 中的 `author` | 文章作者                                                     |\n| img        | `featureImages` 中的某个值   | 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: `http://xxx.com/xxx.jpg` |\n| top        | `true`                      | 推荐文章（文章是否置顶），如果 `top` 值为 `true`，则会作为首页推荐文章 |\n| hide        | `false`                    | 隐藏文章，如果`hide`值为`true`，则文章不会在首页显示 |\n| cover      | `false`                     | `v1.0.2`版本新增，表示该文章是否需要加入到首页轮播封面中 |\n| coverImg   | 无                          | `v1.0.2`版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 |\n| password   | 无                          | 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 `password` 的值，该值必须是用 `SHA256` 加密后的密码，防止被他人识破。前提是在主题的 `config.yml` 中激活了 `verifyPassword` 选项 |\n| toc        | `true`                      | 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 `config.yml` 中激活了 `toc` 选项 |\n| mathjax    | `false`                     | 是否开启数学公式支持 ，本文章是否开启 `mathjax`，且需要在主题的 `_config.yml` 文件中也需要开启才行 |\n| summary    | 无                          | 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 |\n| categories | 无                          | 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 |\n| tags       | 无                          | 文章标签，一篇文章可以多个标签                              |\n| keywords   | 文章标题                     | 文章关键字，SEO 时需要                              |\n| reprintPolicy | cc_by                    | 文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个 |\n\n> **注意**:\n> 1. 如果 `img` 属性不填写的话，文章特色图会根据文章标题的 `hashcode` 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图**各有特色**。\n> 2. `date` 的值尽量保证每篇文章是唯一的，因为本主题中 `Gitalk` 和 `Gitment` 识别 `id` 是通过 `date` 的值来作为唯一标识的。\n> 3. 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 `_config.yml` 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：[开源中国在线工具](http://tool.oschina.net/encrypt?type=2)、[chahuo](http://encode.chahuo.com/)、[站长工具](http://tool.chinaz.com/tools/hash.aspx)。\n> 4. 您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则\n以下为文章的 `Front-matter` 示例。\n\n### 最简示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\n---\n```\n\n### 最全示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\nauthor: 赵奇\nimg: /source/images/xxx.jpg\ntop: true\nhide: false\ncover: true\ncoverImg: /images/1.jpg\npassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\ntoc: false\nmathjax: false\nsummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---\n```","slug":"introduction-to-matery","published":1,"updated":"2021-12-19T12:05:36.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxd7pxwn0000d0ul1o69214z","content":"<h2 id=\"文章-Front-matter-介绍\"><a href=\"#文章-Front-matter-介绍\" class=\"headerlink\" title=\"文章 Front-matter 介绍\"></a>文章 Front-matter 介绍</h2><h3 id=\"Front-matter-选项详解\"><a href=\"#Front-matter-选项详解\" class=\"headerlink\" title=\"Front-matter 选项详解\"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p>\n<table>\n<thead>\n<tr>\n<th>配置选项</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td><code>Markdown</code> 的文件标题</td>\n<td>文章标题，强烈建议填写此选项</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件创建时的日期时间</td>\n<td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td>\n</tr>\n<tr>\n<td>author</td>\n<td>根 <code>_config.yml</code> 中的 <code>author</code></td>\n<td>文章作者</td>\n</tr>\n<tr>\n<td>img</td>\n<td><code>featureImages</code> 中的某个值</td>\n<td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td>\n</tr>\n<tr>\n<td>top</td>\n<td><code>true</code></td>\n<td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td>\n</tr>\n<tr>\n<td>hide</td>\n<td><code>false</code></td>\n<td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td>\n</tr>\n<tr>\n<td>cover</td>\n<td><code>false</code></td>\n<td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td>\n</tr>\n<tr>\n<td>coverImg</td>\n<td>无</td>\n<td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>\n</tr>\n<tr>\n<td>password</td>\n<td>无</td>\n<td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td>\n</tr>\n<tr>\n<td>toc</td>\n<td><code>true</code></td>\n<td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td>\n</tr>\n<tr>\n<td>mathjax</td>\n<td><code>false</code></td>\n<td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td>\n</tr>\n<tr>\n<td>summary</td>\n<td>无</td>\n<td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>无</td>\n<td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>无</td>\n<td>文章标签，一篇文章可以多个标签</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>文章标题</td>\n<td>文章关键字，SEO 时需要</td>\n</tr>\n<tr>\n<td>reprintPolicy</td>\n<td>cc_by</td>\n<td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>注意</strong>:</p>\n<ol>\n<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li>\n<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li>\n<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href=\"http://tool.oschina.net/encrypt?type=2\">开源中国在线工具</a>、<a href=\"http://encode.chahuo.com/\">chahuo</a>、<a href=\"http://tool.chinaz.com/tools/hash.aspx\">站长工具</a>。</li>\n<li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则<br>以下为文章的 <code>Front-matter</code> 示例。</li>\n</ol>\n</blockquote>\n<h3 id=\"最简示例\"><a href=\"#最简示例\" class=\"headerlink\" title=\"最简示例\"></a>最简示例</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">typora-vue-theme主题介绍</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-09-07 09:25:00</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"最全示例\"><a href=\"#最全示例\" class=\"headerlink\" title=\"最全示例\"></a>最全示例</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">typora-vue-theme主题介绍</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-09-07 09:25:00</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">赵奇</span></span><br><span class=\"line\"><span class=\"attr\">img:</span> <span class=\"string\">/source/images/xxx.jpg</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">hide:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">cover:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">coverImg:</span> <span class=\"string\">/images/1.jpg</span></span><br><span class=\"line\"><span class=\"attr\">password:</span> <span class=\"string\">8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span></span><br><span class=\"line\"><span class=\"attr\">toc:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">summary:</span> <span class=\"string\">这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> <span class=\"string\">Markdown</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Typora</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Markdown</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>","site":{"data":{"covers":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h2 id=\"文章-Front-matter-介绍\"><a href=\"#文章-Front-matter-介绍\" class=\"headerlink\" title=\"文章 Front-matter 介绍\"></a>文章 Front-matter 介绍</h2><h3 id=\"Front-matter-选项详解\"><a href=\"#Front-matter-选项详解\" class=\"headerlink\" title=\"Front-matter 选项详解\"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p>\n<table>\n<thead>\n<tr>\n<th>配置选项</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td><code>Markdown</code> 的文件标题</td>\n<td>文章标题，强烈建议填写此选项</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件创建时的日期时间</td>\n<td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td>\n</tr>\n<tr>\n<td>author</td>\n<td>根 <code>_config.yml</code> 中的 <code>author</code></td>\n<td>文章作者</td>\n</tr>\n<tr>\n<td>img</td>\n<td><code>featureImages</code> 中的某个值</td>\n<td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td>\n</tr>\n<tr>\n<td>top</td>\n<td><code>true</code></td>\n<td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td>\n</tr>\n<tr>\n<td>hide</td>\n<td><code>false</code></td>\n<td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td>\n</tr>\n<tr>\n<td>cover</td>\n<td><code>false</code></td>\n<td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td>\n</tr>\n<tr>\n<td>coverImg</td>\n<td>无</td>\n<td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>\n</tr>\n<tr>\n<td>password</td>\n<td>无</td>\n<td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td>\n</tr>\n<tr>\n<td>toc</td>\n<td><code>true</code></td>\n<td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td>\n</tr>\n<tr>\n<td>mathjax</td>\n<td><code>false</code></td>\n<td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td>\n</tr>\n<tr>\n<td>summary</td>\n<td>无</td>\n<td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>无</td>\n<td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>无</td>\n<td>文章标签，一篇文章可以多个标签</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>文章标题</td>\n<td>文章关键字，SEO 时需要</td>\n</tr>\n<tr>\n<td>reprintPolicy</td>\n<td>cc_by</td>\n<td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>注意</strong>:</p>\n<ol>\n<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li>\n<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li>\n<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href=\"http://tool.oschina.net/encrypt?type=2\">开源中国在线工具</a>、<a href=\"http://encode.chahuo.com/\">chahuo</a>、<a href=\"http://tool.chinaz.com/tools/hash.aspx\">站长工具</a>。</li>\n<li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则<br>以下为文章的 <code>Front-matter</code> 示例。</li>\n</ol>\n</blockquote>\n<h3 id=\"最简示例\"><a href=\"#最简示例\" class=\"headerlink\" title=\"最简示例\"></a>最简示例</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">typora-vue-theme主题介绍</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-09-07 09:25:00</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"最全示例\"><a href=\"#最全示例\" class=\"headerlink\" title=\"最全示例\"></a>最全示例</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">typora-vue-theme主题介绍</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-09-07 09:25:00</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">赵奇</span></span><br><span class=\"line\"><span class=\"attr\">img:</span> <span class=\"string\">/source/images/xxx.jpg</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">hide:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">cover:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">coverImg:</span> <span class=\"string\">/images/1.jpg</span></span><br><span class=\"line\"><span class=\"attr\">password:</span> <span class=\"string\">8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span></span><br><span class=\"line\"><span class=\"attr\">toc:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">summary:</span> <span class=\"string\">这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> <span class=\"string\">Markdown</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Typora</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Markdown</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>"},{"author":"kawhicurry","title":"自制Rss阅读器","top":0,"cover":0,"date":"2021-12-20T13:48:06.000Z","img":null,"coverImg":null,"summary":null,"keywords":null,"_content":"尝试自制了一个rss阅读器，使用python+linux的crontab+hexo\n\n有空来记录一下","source":"_posts/自制Rss阅读器.md","raw":"---\nauthor: kawhicurry\ntitle: 自制Rss阅读器\ncategories: uncategorized\ntop: 0\ncover: 0\ndate: 2021-12-20 21:48:06\ntags: rss\nimg:\ncoverImg:\nsummary:\nkeywords:\n---\n尝试自制了一个rss阅读器，使用python+linux的crontab+hexo\n\n有空来记录一下","slug":"自制Rss阅读器","published":1,"updated":"2021-12-20T13:49:45.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxeqj7zr0000xoulczbm7euw","content":"<p>尝试自制了一个rss阅读器，使用python+linux的crontab+hexo</p>\n<p>有空来记录一下</p>\n","site":{"data":{"covers":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/uav"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>尝试自制了一个rss阅读器，使用python+linux的crontab+hexo</p>\n<p>有空来记录一下</p>\n"},{"author":"kawhicurry","title":"起一个mongodb","top":0,"cover":0,"date":"2021-12-23T04:58:30.000Z","img":null,"coverImg":null,"summary":null,"keywords":null,"_content":"\n第一件事：`mongodb` , 不是\n\n- mongdb\n- mogodb\n- ......\n\n为了给RssSubcriber起一个数据库，在阿里云上搭了一个，本来想着直接用阿里云的市场镜像的，拿下来之后发现根本不知道咋用。。。还不如自己起一个。\n\n官方文档中给了使用包管理工具按照的方法：<https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/>\n\n大概步骤就是添加仓库然后直接安装完事。\n\n然后是要改一下配置文件，mongodb的配置文件位于`/etc/mongo.conf`，主要是将其中的\n\n```\nnet:\n   bindIp: 127.0.0.1\n   port: 27017\n```\n\n这里的`bindIp`表示监听的地址，这里只监听了本地，我将其该外`0.0.0.0`即可保证外网随时访问。\n\n然后下面的`port`也要记得加入阿里云的安全组。\n","source":"_posts/起一个mongodb.md","raw":"---\nauthor: kawhicurry\ntitle: 起一个mongodb\ncategories: database\ntop: 0\ncover: 0\ndate: 2021-12-23 12:58:30\ntags: mongodb\nimg:\ncoverImg:\nsummary:\nkeywords:\n---\n\n第一件事：`mongodb` , 不是\n\n- mongdb\n- mogodb\n- ......\n\n为了给RssSubcriber起一个数据库，在阿里云上搭了一个，本来想着直接用阿里云的市场镜像的，拿下来之后发现根本不知道咋用。。。还不如自己起一个。\n\n官方文档中给了使用包管理工具按照的方法：<https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/>\n\n大概步骤就是添加仓库然后直接安装完事。\n\n然后是要改一下配置文件，mongodb的配置文件位于`/etc/mongo.conf`，主要是将其中的\n\n```\nnet:\n   bindIp: 127.0.0.1\n   port: 27017\n```\n\n这里的`bindIp`表示监听的地址，这里只监听了本地，我将其该外`0.0.0.0`即可保证外网随时访问。\n\n然后下面的`port`也要记得加入阿里云的安全组。\n","slug":"起一个mongodb","published":1,"updated":"2021-12-23T05:11:52.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxiidbxc0000awul9r2f6cwi","content":"<p>第一件事：<code>mongodb</code> , 不是</p>\n<ul>\n<li>mongdb</li>\n<li>mogodb</li>\n<li>……</li>\n</ul>\n<p>为了给RssSubcriber起一个数据库，在阿里云上搭了一个，本来想着直接用阿里云的市场镜像的，拿下来之后发现根本不知道咋用。。。还不如自己起一个。</p>\n<p>官方文档中给了使用包管理工具按照的方法：<a href=\"https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/\">https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/</a></p>\n<p>大概步骤就是添加仓库然后直接安装完事。</p>\n<p>然后是要改一下配置文件，mongodb的配置文件位于<code>/etc/mongo.conf</code>，主要是将其中的</p>\n<pre class=\"language-none\"><code class=\"language-none\">net:\n   bindIp: 127.0.0.1\n   port: 27017</code></pre>\n\n<p>这里的<code>bindIp</code>表示监听的地址，这里只监听了本地，我将其该外<code>0.0.0.0</code>即可保证外网随时访问。</p>\n<p>然后下面的<code>port</code>也要记得加入阿里云的安全组。</p>\n","site":{"data":{"covers":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/UAV"}],"recommends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","title":"UAV","path":"auto/uav"}],"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>第一件事：<code>mongodb</code> , 不是</p>\n<ul>\n<li>mongdb</li>\n<li>mogodb</li>\n<li>……</li>\n</ul>\n<p>为了给RssSubcriber起一个数据库，在阿里云上搭了一个，本来想着直接用阿里云的市场镜像的，拿下来之后发现根本不知道咋用。。。还不如自己起一个。</p>\n<p>官方文档中给了使用包管理工具按照的方法：<a href=\"https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/\">https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/</a></p>\n<p>大概步骤就是添加仓库然后直接安装完事。</p>\n<p>然后是要改一下配置文件，mongodb的配置文件位于<code>/etc/mongo.conf</code>，主要是将其中的</p>\n<pre class=\"language-none\"><code class=\"language-none\">net:\n   bindIp: 127.0.0.1\n   port: 27017</code></pre>\n\n<p>这里的<code>bindIp</code>表示监听的地址，这里只监听了本地，我将其该外<code>0.0.0.0</code>即可保证外网随时访问。</p>\n<p>然后下面的<code>port</code>也要记得加入阿里云的安全组。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckxd4ztkh0001w8ul38j81p9s","category_id":"ckxd4ztkn0004w8ulbj1nc9bu","_id":"ckxd4ztky000iw8ul4xxe0bre"},{"post_id":"ckxd4ztkr0009w8ulfk4q3kl2","category_id":"ckxd4ztkv000dw8ul9owlbu04","_id":"ckxd4ztl2000qw8ul6bnn7zgy"},{"post_id":"ckxd4ztkt000bw8ul19ne6ugd","category_id":"ckxd4ztkz000lw8ul6n4565ge","_id":"ckxd4ztl4000vw8ul0u6j4bj4"},{"post_id":"ckxd4ztkv000gw8ul51hyhbxw","category_id":"ckxd4ztl2000rw8ul3r5odb4x","_id":"ckxd4ztl5000zw8ul3u1mhim4"},{"post_id":"ckxd4ztkz000kw8ulhr5q5n6g","category_id":"ckxd4ztl4000ww8ulbxr99vas","_id":"ckxd4ztl50013w8ulfotncf5o"},{"post_id":"ckxd4ztl0000nw8ulglyt30k3","category_id":"ckxd4ztl50010w8ul9giwbncd","_id":"ckxd4ztl60016w8uldk5dbp69"},{"post_id":"ckxd4ztl1000pw8ula65ogyqa","category_id":"ckxd4ztl50014w8ul4dzwbsl2","_id":"ckxd4ztl60019w8ul6wjz1h3l"},{"post_id":"ckxd4ztl3000tw8ulh3ju43x3","category_id":"ckxd4ztl60017w8ul2o5z7qfn","_id":"ckxd4ztl6001aw8ul0czq6w0m"},{"post_id":"ckxd4ztlo001bw8ul9w3ohfib","category_id":"ckxd4ztlp001dw8ul5y2s10xf","_id":"ckxd4ztlq001hw8ul2n7pf3cq"},{"post_id":"ckxd4ztlo001cw8ul31gd6f85","category_id":"ckxd4ztlq001gw8ul8ad7ax9g","_id":"ckxd4ztlq001iw8ulf2yf5vy3"},{"post_id":"ckxd7pxwn0000d0ul1o69214z","category_id":"ckxd7pxwu0001d0ul2l8360gy","_id":"ckxd7pxx00004d0ul4v1971jx"},{"post_id":"ckxeqj7zr0000xoulczbm7euw","category_id":"ckxd4ztl50014w8ul4dzwbsl2","_id":"ckxeqj8020002xoul65600and"},{"post_id":"ckxiidbxc0000awul9r2f6cwi","category_id":"ckxiidbxh0001awulfnmpadl0","_id":"ckxiidbxo0004awul88v83qoi"}],"PostTag":[{"post_id":"ckxd4ztkh0001w8ul38j81p9s","tag_id":"ckxd4ztkp0005w8ul0inj39o8","_id":"ckxd4ztkv000ew8ul482f1bks"},{"post_id":"ckxd4ztkm0003w8ul1njx1l6f","tag_id":"ckxd4ztku000cw8ul27dd4zep","_id":"ckxd4ztkz000mw8ulduk44p96"},{"post_id":"ckxd4ztkt000bw8ul19ne6ugd","tag_id":"ckxd4ztky000jw8ul3guj4ujb","_id":"ckxd4ztl2000sw8ul211v2tit"},{"post_id":"ckxd4ztkv000gw8ul51hyhbxw","tag_id":"ckxd4ztl1000ow8ulg13457hu","_id":"ckxd4ztl4000xw8ul1gmle7og"},{"post_id":"ckxd4ztkz000kw8ulhr5q5n6g","tag_id":"ckxd4ztl4000uw8ul83um4uk3","_id":"ckxd4ztl50011w8ulb2sd9ckt"},{"post_id":"ckxd4ztl0000nw8ulglyt30k3","tag_id":"ckxd4ztl5000yw8ul7ycpcutq","_id":"ckxd4ztl60015w8ulb9j07rxp"},{"post_id":"ckxd4ztl1000pw8ula65ogyqa","tag_id":"ckxd4ztl50012w8uleoqh49ox","_id":"ckxd4ztl60018w8ulgkva5mc3"},{"post_id":"ckxd4ztlo001bw8ul9w3ohfib","tag_id":"ckxd4ztl4000uw8ul83um4uk3","_id":"ckxd4ztlp001ew8ul4gei5y7r"},{"post_id":"ckxd4ztlo001cw8ul31gd6f85","tag_id":"ckxd4ztl50012w8uleoqh49ox","_id":"ckxd4ztlq001fw8ulf12z522v"},{"post_id":"ckxd7pxwn0000d0ul1o69214z","tag_id":"ckxd7pxwz0002d0uldtvi2qlg","_id":"ckxd7pxx00003d0ulaljid7kj"},{"post_id":"ckxeqj7zr0000xoulczbm7euw","tag_id":"ckxeqj7zx0001xoulcc4gg7sm","_id":"ckxeqj8030003xoul4bqz4x0u"},{"post_id":"ckxiidbxc0000awul9r2f6cwi","tag_id":"ckxiidbxm0002awulb4hobkcu","_id":"ckxiidbxn0003awulcjyjfrdr"}],"Tag":[{"name":"C","_id":"ckxd4ztkp0005w8ul0inj39o8"},{"name":"Daily","_id":"ckxd4ztku000cw8ul27dd4zep"},{"name":"auto","_id":"ckxd4ztky000jw8ul3guj4ujb"},{"name":"apollo","_id":"ckxd4ztl1000ow8ulg13457hu"},{"name":"git","_id":"ckxd4ztl4000uw8ul83um4uk3"},{"name":"rsync","_id":"ckxd4ztl5000yw8ul7ycpcutq"},{"name":"cpp","_id":"ckxd4ztl50012w8uleoqh49ox"},{"name":"hexo","_id":"ckxd7pxwz0002d0uldtvi2qlg"},{"name":"rss","_id":"ckxeqj7zx0001xoulcc4gg7sm"},{"name":"mongodb","_id":"ckxiidbxm0002awulb4hobkcu"}]}}