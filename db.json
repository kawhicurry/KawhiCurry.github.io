{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/00.png","path":"medias/images/00.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/test.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1640260861086},{"_id":"source/404/index.md","hash":"35fa7012b8245505ac7f9f9685ad7a2a9e561404","modified":1639911470284},{"_id":"source/_data/friends.json","hash":"432bdbdb8674ae8c1547705fc5529b8eb1471fd6","modified":1640954823691},{"_id":"source/_data/recommends.json","hash":"0534ce6ffcfc4f1c5f6a37930577079424f148a4","modified":1640426230503},{"_id":"source/about/index.md","hash":"427bfdd8211cb0a96ecd6bd3311a20392a47085a","modified":1639903409812},{"_id":"source/_scraft/1.md","hash":"555ea18287f843d1790593c2a3579ec4de880f1f","modified":1639982841526},{"_id":"source/_scraft/LearnMermaid.md","hash":"5edbdffb5a12659edef6f7a7b32bf3366ae38d8c","modified":1638096758442},{"_id":"source/_scraft/SkillTree.md","hash":"86719f8212f3defc5cc1824b7b4c70b1d5dd2b8a","modified":1638262330681},{"_id":"source/_scraft/qyauto.md","hash":"3cf9969d118568c53c4143536829259599c241b3","modified":1638519358352},{"_id":"source/contact/index.md","hash":"6d0f116d16f34683ac016ceb4abc17989511e20b","modified":1639903429529},{"_id":"source/categories/index.md","hash":"346938311c9ea108ec8d04c447fd930cc9c8ff68","modified":1639903351719},{"_id":"source/friends/index.md","hash":"cae3d09447c89f476f2f1fec319cba3f3c19a2f1","modified":1639913772867},{"_id":"source/tags/index.md","hash":"5772e4a26ecbde1fadefe2f899163522be8318bc","modified":1639903371631},{"_id":"source/_posts/Front-end/introduction-to-matery.md","hash":"e276989ba24c246d12bc00ddc9158bd3e927928e","modified":1640266288321},{"_id":"source/_posts/Daily/Daily-10-27.md","hash":"d059bff73758e67e67a3f39e520a62c61dd13e93","modified":1640266288321},{"_id":"source/_posts/Daily/New-Start.md","hash":"124111b4394136b318505c3a5dbcd9d2ae2dc034","modified":1640266288321},{"_id":"source/_posts/Daily/Qingyou-1.md","hash":"7202669e42f7f5c6b1424e009cf336d2cea346ef","modified":1640266288322},{"_id":"source/_posts/Project/0xCalculator.md","hash":"e3b97f61163b590287d592aaa90b38d87e373656","modified":1640266288331},{"_id":"source/_posts/Project/UAV.md","hash":"0e04fc0eb3773af00d746d19fc63ea0f4e40dc13","modified":1640266288322},{"_id":"source/_posts/Project/自制Rss阅读器.md","hash":"14e9291cd1dd17ca2812c5f3145bf5e3b769ab85","modified":1640346230783},{"_id":"source/_posts/Project/修改2d球队的阵型.md","hash":"2f5817c4fd0b9a3a377b72270d4dd650577e1f30","modified":1640266288321},{"_id":"source/_posts/Language/Magic-Macro.md","hash":"8e5507170c3d9d429faa0ba328332931e764e4b0","modified":1640266182351},{"_id":"source/_posts/Language/oop-for-apollo.md","hash":"eed75e2e868cf2b6bbc1472241b71cfb642cc92e","modified":1640425958439},{"_id":"source/_posts/Back-end/起一个mongodb.md","hash":"82407d2e2eeb8cb3d4e4a5185aef8930683825b7","modified":1640266288321},{"_id":"source/_posts/Operation/log-a-git-error.md","hash":"f62ac53a94643afd6e8045cc2014ba8c10d0cf87","modified":1640266288322},{"_id":"source/_posts/Operation/log-a-rsync-mistake.md","hash":"663158c04612fcef9ad94c016653ee24224063d7","modified":1640266288322},{"_id":"source/_posts/Operation/net-server-0.md","hash":"234485b2a0ce637f74372257bf25fd5a2cd9474e","modified":1640266288322},{"_id":"source/_posts/Tools/可以用来阅读源码的工具.md","hash":"c1573d03ff1f826319afb3654e812271cbd5baf1","modified":1640266288322},{"_id":"source/_posts/test/hello-world.md","hash":"a239b859209061316dafa77445f59060794421d9","modified":1640265605918},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1639902654726},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"484a703733b839bd98e016ddb015f028c2593fef","modified":1639902654727},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1639902654728},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"840d5a3275f37125a67cf7e82bbc6556f3bc5cbd","modified":1639902654730},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"c1d2e64fff598e095435e87274b4ab119d9d5fbd","modified":1641017383031},{"_id":"themes/hexo-theme-matery/README.md","hash":"d8ddcc0b3c6e30255faba941bb7dbcbb7213d650","modified":1639902654729},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"f5c69f3e107474da19630e136abed5d87609e59f","modified":1639902654733},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1639902654736},{"_id":"themes/hexo-theme-matery/languages/zh-Hans.yml","hash":"c6de0de68bdc75a8a905787a0526b70ee9821da8","modified":1639913903136},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"4d2bb286d9903f770344e11898bd3f13444760bf","modified":1639902654737},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1639902654778},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"6deb819e47fe11edd2fc87a6296cae725a0275f9","modified":1639902654779},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"626d28dbc7fa2e0fb6601e324dcad08993bcf002","modified":1639902654777},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1639902654782},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1639902654781},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"a777733e03d954ac265a3d0523245bd191732130","modified":1639902654783},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"1291eed5cc91a27607beffc8118c19493512f28f","modified":1639902654784},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1639902654785},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1639902654786},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"eb3875f997767bc6c500a158535cfadcbca96f8f","modified":1639902654787},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"444ecca1cb35bad81b063f1d7cb9fd80ead195dd","modified":1639902654789},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"7303bdf204599dad469ce3908c5d09faf7c6a36a","modified":1639902654788},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1639902654790},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1639902654789},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"0415b240b90083576274e83e28044aa9c0dd0f67","modified":1639902654739},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1639902654740},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1639902654738},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1639902654741},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"2febeb9b824a9f5c6aa81e5c3864cb13df4965f2","modified":1639902654742},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1639902654743},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1639902654745},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1639902654744},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1639902654746},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1639902654748},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1639902654749},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1639902654748},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1639902654750},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"efbc689d2b466ba4666b0cea2084a263d7f271d1","modified":1639902654747},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"3b482a6c737702cf32e2fe061d39f0652d8e877e","modified":1639902654750},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1639902654751},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"8cf6c23c2685d6261f688a32fbb5e64c1f4e7ccb","modified":1639902654752},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1639902654753},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"d0c1ebccbf0869678233aa46d2a61c6112926b2f","modified":1639902654754},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"2d1aff1cb54f47478564b48d046371ed73048562","modified":1639902654755},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"f3d6b20ac07f1b096c5cf0b091523867fd4fd0b5","modified":1639902654754},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1639902654756},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1639902654757},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"4c552a47ed5abda4f3f28fc55899e6008007a996","modified":1639902654757},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1639902654759},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"905f05088a1933f7f4122fe7c0bac5ff8469bbff","modified":1639902654758},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"1fb43f421de58aa24458f7d4a4cda44b8a3d62cc","modified":1639902654760},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1639902654761},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"90c2ab31492f8226454537d6b987e9399119047d","modified":1639902654762},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"4218ed406c43ed781fe78ad8bf1834fa4b76b049","modified":1639902654763},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1639902654763},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1639902654764},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"d1d7c4da3d56f42541eea965a6ebf1f8e2fff0f4","modified":1639902654765},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"5eea5e6da0cbfd3d93ae7e9193fa59997b467426","modified":1639902654766},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1639902654767},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1639902654767},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1639902654768},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"d84f2f464209f02f49917423ac5accf1c548f38c","modified":1639902654770},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1639902654769},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1639902654771},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1639902654771},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1639902654772},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1639902654774},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1639902654773},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"5f64edd00d0a7c3b5e90d5ff99c9ebba61482d75","modified":1639902654774},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1639902654775},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"c2f785f4986d6ed1da0d1f2cd339f33754625004","modified":1639902654777},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1639902654776},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"f59b2f1351d7977b676a4d51634b7dad648d3e99","modified":1639902654792},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"328a49b26ce663d9824c53aced118db4d55f2ac7","modified":1639902654793},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1639902654793},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1639902654794},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"add8c950cbcabe6d5c374affeae19d1e32af282c","modified":1640427836770},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"52b3b36a0ed3db3bdf8bf1f999e37731078c485b","modified":1639902654796},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1639902654797},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1639902654801},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"8db5b764f940614a209a332a4a11a53e5ea52fbc","modified":1639902654802},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"ddfef10e80a09b8efb48c52ede773e71d5890c78","modified":1639902654803},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"72fac8fd3671f3525a574423985ee522958989d3","modified":1639902654803},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1639902654978},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1639902654848},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1639902655011},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1639902654805},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1639902654850},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1639902654850},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1639902654852},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1639902654849},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1639902654853},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1639902654853},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1639902654854},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1639902654807},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1639902654806},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1639902654808},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1639902654809},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1639902654856},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","hash":"ff60e62a9486505283582e8ad9226b35ba93d5c5","modified":1639902654810},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1639902654857},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"4c0d5510ea487b0fe63e96464ab0b381565cc273","modified":1639902654869},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1639902654868},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1639902654875},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1639902654878},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1639902654879},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1639902654879},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1639902654882},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1639902654884},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"137e1c0f71e472fb7004c1832972287fb2dfc343","modified":1639902654895},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1639902654919},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1639902654928},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1639902654930},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1639902654927},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1639902654930},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1639902654932},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1639902654933},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1639902654934},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1639902654934},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"1ddc9448fbba8915f9452b4f0a970f33635e46a7","modified":1639902654937},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"07b1e7932403b38aebb1c024ef3c3f5bb0c6aa2e","modified":1639902654936},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1639902654939},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"84dae6b6b5528ee872be8d8fce66c0e1f1cd28a7","modified":1639902654938},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1639902654949},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1639902654950},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1639902654955},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1639902654975},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1639902654977},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1639902654976},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1639902654977},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1639902654985},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1639902654988},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1639902654991},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1639902654992},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1639902654996},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1639902655000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1639902655001},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1639902655002},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1639902655003},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1639902655006},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1639902655008},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1639902655010},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1639902655022},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1639902655023},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"670fb01e4930ae46fe8d6d2b75ead288f54e8e61","modified":1639902654827},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"c34acd6818df6db6be41a2e331886765d601f2eb","modified":1639902654831},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"3ad4f4e4b1fb3edee3d4ba25e6cdfed2f0b88a54","modified":1639902654832},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"13517529affa39e2585c591acae6dc336b6aa917","modified":1639902654833},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1639902654885},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","hash":"8bd508bb2f120487671bce49267f7ac8a2eff154","modified":1639902654814},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"94c83160bddccf08bd7424de40d738716f1eeb3a","modified":1639902654886},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1639902654887},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1639902654888},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1639902654890},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1639902654891},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1639902654891},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1639902654892},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"c55278b00976c96e1df949ca5afee79b8ab385b2","modified":1639902654894},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1639902654941},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1639902654947},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1639902654948},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1639902654943},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1639902654942},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1639902654945},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1639902654944},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1639902654867},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1639902654876},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"4cd5ddc413b3024d7b56331c0d0d0b2bd933f27f","modified":1639902654881},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d6c03e8c3e547b5f48878081d10559b80f626948","modified":1639902654956},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1639902654961},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1639902654965},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1639902654967},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1639902654982},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1639902654983},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1639902654986},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1639902654987},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1639902654990},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1639902654993},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1639902654994},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1639902654995},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1639902654998},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1639902655005},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1639902655007},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1639902655011},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"1e1f02bfa89e179fe2dd1383273b8812aa873418","modified":1639902654824},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"0613c7ebba55ee47ef302c0f7766324692f899a7","modified":1639902654825},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"a22acd7697f36e7d4cc31a853c70e776eac54bb1","modified":1639902654845},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"0ccb2c814a7e4ca12c4778821633809cb0361eaa","modified":1639902654847},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"af83425d4a008e11110634e9aed99e8f91424a99","modified":1639902654812},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1639902654980},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"104613de917a8576ff26aaa36d1c0c7bb4730f4e","modified":1639902654860},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1639902654897},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1639902654898},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"9cb4babc20eb8fb5a86c4b0cc894fdb0f3cd9534","modified":1639902654958},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1639902654963},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1639902654972},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1639902654974},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1639902655017},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"d1ffd6340cdbf72890ccb67f32015eafc5df51a7","modified":1639902654816},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"8ab907083fecaaa2a9ec93b27f884ad74573705c","modified":1639902654823},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"229deca2465fa9efc8c03d0ebeb9a01c1559822e","modified":1639902654830},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"fec22a01b4abb7e84cf99bb6719eb456691939ee","modified":1640427164301},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1639902654800},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"fec22a01b4abb7e84cf99bb6719eb456691939ee","modified":1640426830826},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"ea845c59bee4a5c6db774b8d8060f5641b789ae9","modified":1639902654836},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"eb8914f6b1797b45ee0883e6089d92695d9f9441","modified":1639902654844},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1639902654970},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1639902655020},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2742f0af59891d7429c725cb6f3d1b9b15cbdc14","modified":1640427223685},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"d1ec95821873a81eddf4e5698698b39d54d2a8cc","modified":1639902654953},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1639902655015},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1639902654865},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"b7fd3035e83c23c720c9f5957af31d7e288fb4eb","modified":1639902654821},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"1df59d7e5481ac2917c7043b28883393675dcaf9","modified":1639902654874},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"023bb481b65dd8cdeb8c424ca900f3866292bfb0","modified":1639902654842},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","hash":"70ff25d5bb1e7f3339a55b691d69402ba4831fba","modified":1639902654925},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","hash":"3889e37cafaaace5e745ccd3e10c9255e32cae3a","modified":1639902654918},{"_id":"public/search.xml","hash":"5d8a60cb2fea169b2fa19f54228760c43e93bded","modified":1642506748698},{"_id":"public/atom.xml","hash":"6d726a4594d4c81862bb0d7e55086431abbf4b31","modified":1642506760354},{"_id":"public/404/index.html","hash":"1be0b9a88bd657e907e40c23d49b4626faaa9a08","modified":1642506748698},{"_id":"public/about/index.html","hash":"ac442454b4bd12cb802b6993b5bdc3565f85bace","modified":1642506748698},{"_id":"public/categories/index.html","hash":"60bac5cdc1e347a8ecdbd3fcdbe97de0c2d8e2dc","modified":1642506748698},{"_id":"public/contact/index.html","hash":"46031c48b078ffc62b55589581b96d80a92f5c91","modified":1642506748698},{"_id":"public/friends/index.html","hash":"b71bec6d7f1e31e19c464f3209837d889937815d","modified":1642506748698},{"_id":"public/tags/index.html","hash":"9e12570ac711693b12a352859149ea7d5f82b060","modified":1642506748698},{"_id":"public/project/zi-zhi-rss-yue-du-qi/index.html","hash":"f41ead3f0cae3cca4e1e7ffd8f36e3fad1197b7f","modified":1642506748698},{"_id":"public/back-end/qi-yi-ge-mongodb/index.html","hash":"8552596c14221e9ce67530fbf120b50f3a9a2452","modified":1642506748698},{"_id":"public/front-end/introduction-to-matery/index.html","hash":"138a73b329a951835663f214958800f7c9049ff9","modified":1642506748698},{"_id":"public/tools/ke-yi-yong-lai-yue-du-yuan-ma-de-gong-ju/index.html","hash":"a699a9b35da45f03520b8f41f085678ef2c3b6aa","modified":1642506748698},{"_id":"public/project/xiu-gai-2d-qiu-dui-de-zhen-xing/index.html","hash":"3420d5e7e404e2cecb21d7a7e433404e6b913d1f","modified":1642506748698},{"_id":"public/operation/log-a-rsync-mistake/index.html","hash":"b2d68af1cd5edd3338c6729a7be1d7f4979fa38b","modified":1642506748698},{"_id":"public/project/0xcalculator/index.html","hash":"8ca8721b6e59d86527ff675ddd907854b9bf7ade","modified":1642506748698},{"_id":"public/project/uav/index.html","hash":"106c5de8e1f71239dd2078926480a44428397202","modified":1642506748698},{"_id":"public/language/oop-for-apollo/index.html","hash":"d374cde78e800714c872647618da4bf3e7150b18","modified":1642506748698},{"_id":"public/operation/net-server-0/index.html","hash":"4c1b33a0408a509a13749b087968d53e89df6187","modified":1642506748698},{"_id":"public/operation/log-a-git-error/index.html","hash":"ebb16fb3918101f6b8d47f434218e1e00acb9807","modified":1642506748698},{"_id":"public/language/magic-macro/index.html","hash":"e5a2800c1a9fd0c16193951628adefed1d9bc230","modified":1642506748698},{"_id":"public/daily/daily-10-27/index.html","hash":"d20e886db6a629b94f8b5176bf66e3a65941a4b0","modified":1642506748698},{"_id":"public/daily/qingyou-1/index.html","hash":"2157f9820328ed5f0c4ccfdd23579a31231bb251","modified":1642506748698},{"_id":"public/daily/new-start/index.html","hash":"a92a28476c7352f93b7125fbadd19ec2ff30c149","modified":1642506748698},{"_id":"public/test/hello-world/index.html","hash":"4586e21e441fbcaf7d145a615aa16d5e904686c7","modified":1642506748698},{"_id":"public/categories/Daily/index.html","hash":"6cc2c36ddd208df68df039f9c5ce4154db469365","modified":1642506748698},{"_id":"public/categories/Front-end/index.html","hash":"c855b5e50502eb803356a5a32e4d822c9f4134ed","modified":1642506748698},{"_id":"public/categories/Project/index.html","hash":"9335f74e8950042c2fb2c235cca3685d9b8c2098","modified":1642506748698},{"_id":"public/categories/Language/index.html","hash":"9dac8be162bd13785d9d2fcc0b5feba3c3cd09e6","modified":1642506748698},{"_id":"public/categories/Back-end/index.html","hash":"16944a1ba09aa0bc2cc73b6308699ea7b4830054","modified":1642506748698},{"_id":"public/categories/Operation/index.html","hash":"9fd639bf09803b65c495ec328a2f4d9bc981b6bf","modified":1642506748698},{"_id":"public/categories/Tools/index.html","hash":"df806fe61c88af607fe3bee2d0e2f9cfae6a4b6c","modified":1642506748698},{"_id":"public/categories/test/index.html","hash":"7b84ac214b7366b9d48641cab8e7e679a6197038","modified":1642506748698},{"_id":"public/archives/index.html","hash":"53c8bbeba3b6f93473f3a5fece4d8e425f7eb97d","modified":1642506748698},{"_id":"public/archives/page/2/index.html","hash":"0b7f2e96307db60b085a48f9a65bcaa40c7c0f06","modified":1642506748698},{"_id":"public/archives/2021/index.html","hash":"28fcbea1f98103abf36f437e6c1b57bcc52eb077","modified":1642506748698},{"_id":"public/archives/2021/page/2/index.html","hash":"b18872a0d8a68accc8c8224743279d7688cea7e0","modified":1642506748698},{"_id":"public/archives/2021/10/index.html","hash":"b42fdc313c3dd743e2418533c810f5d88d6e067e","modified":1642506748698},{"_id":"public/archives/2021/11/index.html","hash":"561146f0cafc343f1ddc228173d80603737f8d4a","modified":1642506748698},{"_id":"public/archives/2021/12/index.html","hash":"373a807800658efba8346def1a0f622fbd256d87","modified":1642506748698},{"_id":"public/index.html","hash":"fa82a837548771e1f12264f24d51ad6cbd0b769c","modified":1642506748698},{"_id":"public/page/2/index.html","hash":"2b0b7ad132befa7f5015f43d27dcbbae1f8ff822","modified":1640957514151},{"_id":"public/tags/Daily/index.html","hash":"b5149eacc7b778d6d61e2c6fbe7d8f3e80423372","modified":1642506748698},{"_id":"public/tags/hexo/index.html","hash":"0ec973b78a7038be25a3bd524b1837d90f15d8a8","modified":1642506748698},{"_id":"public/tags/auto/index.html","hash":"0cdf51aa21109756d9fc632ac4d87c95396ec002","modified":1642506748698},{"_id":"public/tags/rss/index.html","hash":"5444b0be3960ba01fdd0d6ea4301d77a7e055732","modified":1642506748698},{"_id":"public/tags/apollo/index.html","hash":"0a92d2516a7a96d615d1075a84eeb05801d786f1","modified":1642506748698},{"_id":"public/tags/C/index.html","hash":"6acc7cd4f8039ab43ab02bad385d14c412e7d39a","modified":1642506748698},{"_id":"public/tags/cpp/index.html","hash":"0e5832b249745732358715781e017bbcdc5bbf00","modified":1642506748698},{"_id":"public/tags/mongodb/index.html","hash":"b016752af9e8090c8ef0ec084b7b82bfe89e7449","modified":1642506748698},{"_id":"public/tags/git/index.html","hash":"7d9d7cba911d88fd78389121e7d25b944582226a","modified":1642506748698},{"_id":"public/tags/rsync/index.html","hash":"d245bea1bf23978edf27279593efd717298b3469","modified":1642506748698},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1640428554000},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1640428554000},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1640428554000},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1640428554000},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1640428554000},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1640428554000},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1640428554000},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1640428554000},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1640428554000},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1640428554000},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1640428554000},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1640428554000},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1640428554000},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1640428554000},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1640428554000},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1640428554000},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1640428554000},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1640428554000},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1640428554000},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1640428554000},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1640428554000},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"670fb01e4930ae46fe8d6d2b75ead288f54e8e61","modified":1640428554000},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"c34acd6818df6db6be41a2e331886765d601f2eb","modified":1640428554000},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"3ad4f4e4b1fb3edee3d4ba25e6cdfed2f0b88a54","modified":1640428554000},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"13517529affa39e2585c591acae6dc336b6aa917","modified":1640428554000},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"94c83160bddccf08bd7424de40d738716f1eeb3a","modified":1640428554000},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1640428554000},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1640428554000},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1640428554000},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1640428554000},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1640428554000},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1640428554000},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1640428554000},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1640428554000},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1640428554000},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1640428554000},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1640428554000},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1640428554000},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1640428554000},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1640428554000},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1640428554000},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1640428554000},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1640428554000},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1640428554000},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1640428554000},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1640428554000},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1640428554000},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1640428554000},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1640428554000},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1640428554000},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1640428554000},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"1e1f02bfa89e179fe2dd1383273b8812aa873418","modified":1640428554000},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"0613c7ebba55ee47ef302c0f7766324692f899a7","modified":1640428554000},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"a22acd7697f36e7d4cc31a853c70e776eac54bb1","modified":1640428554000},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"0ccb2c814a7e4ca12c4778821633809cb0361eaa","modified":1640428554000},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1640428554000},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1640428554000},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1640428554000},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1640428554000},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1640428554000},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"d1ffd6340cdbf72890ccb67f32015eafc5df51a7","modified":1640428554000},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"8ab907083fecaaa2a9ec93b27f884ad74573705c","modified":1640428554000},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"229deca2465fa9efc8c03d0ebeb9a01c1559822e","modified":1640428554000},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1640428554000},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1640428554000},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1640428554000},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1640428554000},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1640428554000},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1640428554000},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1640428554000},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1640428554000},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1640428554000},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1640428554000},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1640428554000},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1640428554000},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1640428554000},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1640428554000},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1640428554000},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1640428554000},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1640428554000},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1640428554000},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1640428554000},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1640428554000},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1640428554000},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1640428554000},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1640428554000},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1640428554000},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1640428554000},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1640428554000},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1640428554000},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1640428554000},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1640428554000},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1640428554000},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1640428554000},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1640428554000},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1640428554000},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1640428554000},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1640428554000},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1640428554000},{"_id":"public/libs/prism/prism.css","hash":"f1a273e896538fa4e11cb70acc5ec7e88d8b6c4c","modified":1640428554000},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1640428554000},{"_id":"public/favicon.png","hash":"fec22a01b4abb7e84cf99bb6719eb456691939ee","modified":1640428554000},{"_id":"public/medias/logo.png","hash":"fec22a01b4abb7e84cf99bb6719eb456691939ee","modified":1640428554000},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"ea845c59bee4a5c6db774b8d8060f5641b789ae9","modified":1640428554000},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"eb8914f6b1797b45ee0883e6089d92695d9f9441","modified":1640428554000},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1640428554000},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1640428554000},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1640428554000},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1640428554000},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1640428554000},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1640428554000},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1640428554000},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1640428554000},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1640428554000},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1640428554000},{"_id":"public/css/matery.css","hash":"19b37d6608843005da50cd265877204a91966404","modified":1640428554000},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1640428554000},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1640428554000},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1640428554000},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1640428554000},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1640428554000},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1640428554000},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1640428554000},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1640428554000},{"_id":"public/libs/awesome/css/all.min.css","hash":"a57ee68d11601b0fd8e5037fc241ff65a754473c","modified":1640428554000},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1640428554000},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1640428554000},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1640428554000},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1640428554000},{"_id":"public/libs/awesome/css/all.css","hash":"8a4a55db46c5dbfef9c6703fa2d04e89cbfcf633","modified":1640428554000},{"_id":"public/medias/avatar.jpg","hash":"2742f0af59891d7429c725cb6f3d1b9b15cbdc14","modified":1640428554000},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1640428554000},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1640428554000},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1640428554000},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"b7fd3035e83c23c720c9f5957af31d7e288fb4eb","modified":1640428554000},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1640428554000},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1640428554000},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1640428554000},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"023bb481b65dd8cdeb8c424ca900f3866292bfb0","modified":1640428554000},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1640428554000},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1640428554000},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1640428554000},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1640428554000},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"be7f26d6f063cfec5440517848ae5943adae1f54","modified":1640428554000},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1640428554000},{"_id":"source/_posts/Operation/基于虚拟机的开发机搭建.md","hash":"d7b9843f0b8f406daf45d10bd5002fcbfa55ea7d","modified":1640693471962},{"_id":"public/operation/ji-yu-xu-ni-ji-de-kai-fa-ji-da-jian/index.html","hash":"bd33cbf96856886ea098a6e1af7dc88eddd0da10","modified":1642506748698},{"_id":"public/tags/linux/index.html","hash":"880b39355268c8a31081871357df6433b04c031a","modified":1642506748698},{"_id":"themes/hexo-theme-matery/source/medias/images/00.png","hash":"a9097f4ab72be4d22d2464ebf7c8d7bdec750efa","modified":1640957462376},{"_id":"public/medias/images/00.png","hash":"a9097f4ab72be4d22d2464ebf7c8d7bdec750efa","modified":1640957514151},{"_id":"source/_posts/Project/2021-2022寒假apollo2d准备计划.md","hash":"487e7a013b4a884c71b9e4521c1209490e549e54","modified":1641887371249},{"_id":"public/project/2021-2022-han-jia-apollo2d-zhun-bei-ji-hua/index.html","hash":"c5c1e1d64b4f7ec1a6e070b7159066c3fe17dbdb","modified":1642506748698},{"_id":"public/archives/2022/index.html","hash":"2cd782b434832a5ce394ebefd6c56470086fabf0","modified":1642506748698},{"_id":"public/archives/2022/01/index.html","hash":"dd7e4138e03bf58132e09eb471cf29a7be1126b2","modified":1642506748698},{"_id":"public/tags/robucup/index.html","hash":"0560d2d118a090540e1c68deccf482a1350c764e","modified":1642506748698},{"_id":"source/_posts/Operation/记录一次ssh登录的问题.md","hash":"2c34b48c2fd14c63400b3e1cc59c1bb8d6cfd5a1","modified":1641966213494},{"_id":"public/operation/ji-lu-yi-ci-ssh-deng-lu-de-wen-ti/index.html","hash":"76cbd0aa39028e076b64e45ee0f42d489c5e2d0a","modified":1642506748698},{"_id":"public/tags/tag1/index.html","hash":"7896f84ac3d0994979ed7a18d8ae04d1b69e7231","modified":1642506748698},{"_id":"public/tags/tag2/index.html","hash":"eb29cfd1f8e5ececd33dcc7e26f0e56c18e7b2d9","modified":1642506748698},{"_id":"source/_posts/Operation/记录一次docker迁移.md","hash":"e26c3c772f9117928627ba3c3711006ad5015bdd","modified":1642054099110},{"_id":"public/operation/ji-lu-yi-ci-docker-qian-yi/index.html","hash":"0d1ba1875fa976d3d0f758cc1c1b5b34e3df4d55","modified":1642506748698},{"_id":"public/tags/docker/index.html","hash":"35256f625804f029c5f0e7cf0e1148e78db1137c","modified":1642506748698},{"_id":"public/tags/mirror/index.html","hash":"58851b3f7c37ec18d90c575c59be9043ed8e1d42","modified":1642506748698},{"_id":"source/_posts/Project/Ros/ROS学习笔记（0）.md","hash":"8ffef93185a446150934bb09a8535cde88448bc4","modified":1642238943663},{"_id":"source/_posts/Daily/从2021到2022.md","hash":"9fcde027547971019657f15da5f778b001fef5f6","modified":1642244724429},{"_id":"public/daily/cong-2021-dao-2022/index.html","hash":"d1e13d3f12f04a9029d60c6dc1d6fd2ffdddc096","modified":1642506748698},{"_id":"public/project/ros/ros-xue-xi-bi-ji-0/index.html","hash":"342e0530a1a5c2b414c4871eeeaffd1cbae8c447","modified":1642238942609},{"_id":"public/archives/page/3/index.html","hash":"3618c44c6474d00129ae07e6bad97791651233c6","modified":1642506748698},{"_id":"public/tags/daily/index.html","hash":"3f246b560367a94e589f8d2980d1bd7025151383","modified":1642506748698},{"_id":"public/tags/summary/index.html","hash":"7e0711a261adf64fe96e1ea1919715a783e3d3b5","modified":1642506748698},{"_id":"public/tags/ros/index.html","hash":"139025d84cf797586de5986159249b803abd4561","modified":1642238942609},{"_id":"source/_posts/Project/ROS学习笔记（0）.md","hash":"09c7d93263cc936aad3526ecbb075ba8be780d0d","modified":1642396882487},{"_id":"public/project/ros-xue-xi-bi-ji-0/index.html","hash":"03d87a6210267ea17c77903ff31c568573c94a09","modified":1642506748698},{"_id":"public/tags/专栏：ros学习笔记/index.html","hash":"834f751b2b5ea2d9e53284c87a9dcd061179177d","modified":1642506748698},{"_id":"source/_drafts/2022寒假安排.md","hash":"513dd3f143b4e11afc506110f625450007572aeb","modified":1642396975273},{"_id":"source/_drafts/2022寒假安排-1.md","hash":"f7c97094f80d24c8071e78e905cd18aa5c61b8a9","modified":1642397003242},{"_id":"source/_drafts/LearnMermaid.md","hash":"5edbdffb5a12659edef6f7a7b32bf3366ae38d8c","modified":1642471951445},{"_id":"source/_drafts/qyauto.md","hash":"3cf9969d118568c53c4143536829259599c241b3","modified":1642471963156},{"_id":"source/_posts/Operation/重学linux（0）.md","hash":"8e0c4219846e662d394e5febebe23400878bbac7","modified":1642486635457},{"_id":"source/_posts/Operation/重学linux（1）.md","hash":"a8c75b6c1bd387d428f93398c792a28a65c7409a","modified":1642486635457},{"_id":"public/operation/chong-xue-linux-1/index.html","hash":"c5af1133afdade01338f11da5503ce1f8113a544","modified":1642506748698},{"_id":"public/operation/chong-xue-linux-0/index.html","hash":"71cb39ca4b67e82e050f5600a28383dd5e2f82ff","modified":1642506748698},{"_id":"public/tags/专栏：重学linux/index.html","hash":"7c599caf74099f9475ee48dd232176007e1a6720","modified":1642506748698},{"_id":"source/_posts/Operation/k8s权威指南学习笔记（0）.md","hash":"f1286d51ab2a027682b9d6923be8f6e7d50635a6","modified":1642506750526},{"_id":"source/_posts/undefined/k8s权威指南学习笔记（1）.md","hash":"f0505fb2ac0e359d70d5b1e014889a11c3b3720c","modified":1642506731774},{"_id":"public/undefined/k8s-quan-wei-zhi-nan-xue-xi-bi-ji-1/index.html","hash":"2f2b2a2f39c68c92b68b671d37977f804e3d4756","modified":1642506760354},{"_id":"public/operation/k8s-quan-wei-zhi-nan-xue-xi-bi-ji-0/index.html","hash":"177727544358b6f4a36dffe9e3b5ac17fa24704a","modified":1642506760354},{"_id":"public/categories/undefined/index.html","hash":"d98c05d8c6df7c7e9ecb8f4afe68bcc5b0b8e689","modified":1642506748698},{"_id":"public/tags/专栏：k8s权威指南学习笔记/index.html","hash":"62ab11a008ec7e2156868e5572c479497ebbd2d9","modified":1642506748698},{"_id":"public/tags/k8s/index.html","hash":"ca4998e7a7681a6739182daee6289397e4ea2aa1","modified":1642506748698},{"_id":"public/tags/k8s权威指南学习笔记/index.html","hash":"37de4e844b32810452baf7f52c7a9a12beca62e8","modified":1642506748698},{"_id":"source/_posts/Operation/k8s权威指南学习笔记（1）.md","hash":"cfba8faffb9035198fbe77c10bffbf16c4a94f9e","modified":1642506756430}],"Category":[{"name":"Daily","_id":"ckxlot1jj000424ul3oao8lo9"},{"name":"Front-end","_id":"ckxlot1ju000j24ul004afxba"},{"name":"Project","_id":"ckxlot1jx000q24ulf5nudwjo"},{"name":"Language","_id":"ckxlot1k4001724ulg8al43v1"},{"name":"Back-end","_id":"ckxlot1k7001f24ul2cao25to"},{"name":"Operation","_id":"ckxlot1k8001k24ule00t2mb3"},{"name":"Tools","_id":"ckxlot1kb001u24ulfcz4cosh"},{"name":"test","_id":"ckxlot1kb001x24ulen65clrj"},{"name":"Ros","parent":"ckxlot1jx000q24ulf5nudwjo","_id":"ckyfmocxt00001sul5f9l5tam"},{"name":"undefined","_id":"ckyk23zna0005coul0ike96pd"}],"Data":[{"_id":"friends","data":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","introduction":"来自青柚的运营大佬","url":"https://cfy73.github.io/","title":"Read More"}]},{"_id":"recommends","data":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}],"Page":[{"title":"404","date":"2021-12-19T10:55:41.000Z","type":"404","layout":"404","description":"Ops~，我找不到你想要的页面。这里的ops是错误，不是运维哦~","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2021-12-19 18:55:41\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Ops~，我找不到你想要的页面。这里的ops是错误，不是运维哦~\"\n---\n","updated":"2021-12-19T10:57:50.284Z","path":"404/index.html","comments":1,"_id":"ckxlot1j6000024ul04lmc6ad","content":"","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":""},{"title":"about","date":"2021-12-19T08:43:19.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-12-19 16:43:19\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2021-12-19T08:43:29.812Z","path":"about/index.html","comments":1,"_id":"ckxlot1jh000224ul0ltrarpy","content":"","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":""},{"title":"categories","date":"2021-12-19T08:41:07.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-12-19 16:41:07\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2021-12-19T08:42:31.719Z","path":"categories/index.html","comments":1,"_id":"ckxlot1jl000624ul08re8seh","content":"","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":""},{"title":"contact","date":"2021-12-19T08:43:40.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2021-12-19 16:43:40\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2021-12-19T08:43:49.529Z","path":"contact/index.html","comments":1,"_id":"ckxlot1jm000824uleyzd42ay","content":"","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":""},{"title":"friends","date":"2021-12-19T08:44:04.000Z","type":"friends","layout":"friends","_content":"\n其实我没啥朋友，真的","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2021-12-19 16:44:04\ntype: \"friends\"\nlayout: \"friends\"\n---\n\n其实我没啥朋友，真的","updated":"2021-12-19T11:36:12.867Z","path":"friends/index.html","comments":1,"_id":"ckxlot1jn000a24ul8q00d9cb","content":"<p>其实我没啥朋友，真的</p>\n","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<p>其实我没啥朋友，真的</p>\n"},{"title":"tags","date":"2021-12-19T08:42:40.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-12-19 16:42:40\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2021-12-19T08:42:51.631Z","path":"tags/index.html","comments":1,"_id":"ckxlot1jr000f24ul8qtzag2a","content":"","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":""}],"Post":[{"title":"Daily-10-27","date":"2021-10-27T10:57:04.000Z","_content":"\n# Daily-10-27\n\n谁都想不到第一次挑战会来的这么快，前两天还在悠哉游哉的看镜像站，今天就遇到了空前绝后大危机。学校的服务器似乎遇上了arp广播风暴，信息办和青柚几乎所有的服务都down了。两位后端学长带着我去了信息办，用了一下午来试着恢复所有service，顺便还参观了一下信息办的机房。\n\n今天早上才写了{% post_link Qingyou-1 %}这篇文章，说到同时加班我摸鱼。这个摸鱼确实没得办法，毕竟是业务处理方面的事情，但今天这个服务器down了，可就是彻彻底底要运维干活了（然后我还是在摸鱼）。早上本来在开开心心的在github上搭自己的blog，本来很开心的发现hexo的源代码和deploy用的现成文件可以直接用`git branch`分开来。结果到了中午，突然说学校的内部网络出了超级大问题，连食堂都刷不上卡。中午两位后端学长都到了，然后带着我去了信息办，坐在某个开会的桌子边重启服务。主要是两位学长在做，我最多起一个记录的作用。下面是一些印象深刻的记录。\n\n1. 最主要的两台服务器，理论是完全一样的，但一台可以正常运行，另一台卡死，reboot都卡死。并且tomcat父进程为1，无法kill，同时其log文件夹无法打开，无法ls、du，free显示内存占满，swap分区16g全满。最后只能物理重启，重启后可以正常使用了，从另一台服务器上copy过来了配置。\n2. 搭载某部门服务的服务器，80+443端口都无法使用，但ssh连接正常，redis没有设置登录密码，但是手动登录时要求密码了，reboot之后可以正常使用了，但是证书似乎还有问题，两个学长也没解决。\n3. 搭载另一部门服务的服务器，服务down了，重启服务后可正常使用。\n\n除此之外还有各种容器需要重启，有的是学长搭建的，如果不及时记录的话，还真不一定记得住他们的作用。\n\n本来下午约了去飞无人机，果断推到明天了，不过无人机的代码倒是早就写好了。本以为明天没课的，约时间调试无人机的时候才想起来明天还有个实验课。又是不想上课的一天。\n\n不管怎么说，今天下午还是多多少少学到了点nouns，也深刻意识到一个了解服务的运维的重要性，此前的服务都是后端同学手动搭的，幸好他们还记得相关信息，不然我现在的能力可做不到完美恢复。除此之外，我对网络、数据库的了解还是差的太多。\n\n对于未来的话，希望能早点上云吧，服务也希望能够系统化一点，文档可以多写一点。\n\n以上。\n\n","source":"_posts/Daily/Daily-10-27.md","raw":"---\ntitle: Daily-10-27\ntags: Daily\ncategories:\n  - Daily\ndate: 2021-10-27 18:57:04\n---\n\n# Daily-10-27\n\n谁都想不到第一次挑战会来的这么快，前两天还在悠哉游哉的看镜像站，今天就遇到了空前绝后大危机。学校的服务器似乎遇上了arp广播风暴，信息办和青柚几乎所有的服务都down了。两位后端学长带着我去了信息办，用了一下午来试着恢复所有service，顺便还参观了一下信息办的机房。\n\n今天早上才写了{% post_link Qingyou-1 %}这篇文章，说到同时加班我摸鱼。这个摸鱼确实没得办法，毕竟是业务处理方面的事情，但今天这个服务器down了，可就是彻彻底底要运维干活了（然后我还是在摸鱼）。早上本来在开开心心的在github上搭自己的blog，本来很开心的发现hexo的源代码和deploy用的现成文件可以直接用`git branch`分开来。结果到了中午，突然说学校的内部网络出了超级大问题，连食堂都刷不上卡。中午两位后端学长都到了，然后带着我去了信息办，坐在某个开会的桌子边重启服务。主要是两位学长在做，我最多起一个记录的作用。下面是一些印象深刻的记录。\n\n1. 最主要的两台服务器，理论是完全一样的，但一台可以正常运行，另一台卡死，reboot都卡死。并且tomcat父进程为1，无法kill，同时其log文件夹无法打开，无法ls、du，free显示内存占满，swap分区16g全满。最后只能物理重启，重启后可以正常使用了，从另一台服务器上copy过来了配置。\n2. 搭载某部门服务的服务器，80+443端口都无法使用，但ssh连接正常，redis没有设置登录密码，但是手动登录时要求密码了，reboot之后可以正常使用了，但是证书似乎还有问题，两个学长也没解决。\n3. 搭载另一部门服务的服务器，服务down了，重启服务后可正常使用。\n\n除此之外还有各种容器需要重启，有的是学长搭建的，如果不及时记录的话，还真不一定记得住他们的作用。\n\n本来下午约了去飞无人机，果断推到明天了，不过无人机的代码倒是早就写好了。本以为明天没课的，约时间调试无人机的时候才想起来明天还有个实验课。又是不想上课的一天。\n\n不管怎么说，今天下午还是多多少少学到了点nouns，也深刻意识到一个了解服务的运维的重要性，此前的服务都是后端同学手动搭的，幸好他们还记得相关信息，不然我现在的能力可做不到完美恢复。除此之外，我对网络、数据库的了解还是差的太多。\n\n对于未来的话，希望能早点上云吧，服务也希望能够系统化一点，文档可以多写一点。\n\n以上。\n\n","slug":"Daily-10-27","published":1,"category":"Daily","updated":"2021-12-23T13:31:28.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxlot1jd000124ulhwof5crj","content":"<h1 id=\"Daily-10-27\"><a href=\"#Daily-10-27\" class=\"headerlink\" title=\"Daily-10-27\"></a>Daily-10-27</h1><p>谁都想不到第一次挑战会来的这么快，前两天还在悠哉游哉的看镜像站，今天就遇到了空前绝后大危机。学校的服务器似乎遇上了arp广播风暴，信息办和青柚几乎所有的服务都down了。两位后端学长带着我去了信息办，用了一下午来试着恢复所有service，顺便还参观了一下信息办的机房。</p>\n<p>今天早上才写了<a href=\"/daily/qingyou-1/\" title=\"Qingyou_1\">Qingyou_1</a>这篇文章，说到同时加班我摸鱼。这个摸鱼确实没得办法，毕竟是业务处理方面的事情，但今天这个服务器down了，可就是彻彻底底要运维干活了（然后我还是在摸鱼）。早上本来在开开心心的在github上搭自己的blog，本来很开心的发现hexo的源代码和deploy用的现成文件可以直接用<code>git branch</code>分开来。结果到了中午，突然说学校的内部网络出了超级大问题，连食堂都刷不上卡。中午两位后端学长都到了，然后带着我去了信息办，坐在某个开会的桌子边重启服务。主要是两位学长在做，我最多起一个记录的作用。下面是一些印象深刻的记录。</p>\n<ol>\n<li>最主要的两台服务器，理论是完全一样的，但一台可以正常运行，另一台卡死，reboot都卡死。并且tomcat父进程为1，无法kill，同时其log文件夹无法打开，无法ls、du，free显示内存占满，swap分区16g全满。最后只能物理重启，重启后可以正常使用了，从另一台服务器上copy过来了配置。</li>\n<li>搭载某部门服务的服务器，80+443端口都无法使用，但ssh连接正常，redis没有设置登录密码，但是手动登录时要求密码了，reboot之后可以正常使用了，但是证书似乎还有问题，两个学长也没解决。</li>\n<li>搭载另一部门服务的服务器，服务down了，重启服务后可正常使用。</li>\n</ol>\n<p>除此之外还有各种容器需要重启，有的是学长搭建的，如果不及时记录的话，还真不一定记得住他们的作用。</p>\n<p>本来下午约了去飞无人机，果断推到明天了，不过无人机的代码倒是早就写好了。本以为明天没课的，约时间调试无人机的时候才想起来明天还有个实验课。又是不想上课的一天。</p>\n<p>不管怎么说，今天下午还是多多少少学到了点nouns，也深刻意识到一个了解服务的运维的重要性，此前的服务都是后端同学手动搭的，幸好他们还记得相关信息，不然我现在的能力可做不到完美恢复。除此之外，我对网络、数据库的了解还是差的太多。</p>\n<p>对于未来的话，希望能早点上云吧，服务也希望能够系统化一点，文档可以多写一点。</p>\n<p>以上。</p>\n","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<h1 id=\"Daily-10-27\"><a href=\"#Daily-10-27\" class=\"headerlink\" title=\"Daily-10-27\"></a>Daily-10-27</h1><p>谁都想不到第一次挑战会来的这么快，前两天还在悠哉游哉的看镜像站，今天就遇到了空前绝后大危机。学校的服务器似乎遇上了arp广播风暴，信息办和青柚几乎所有的服务都down了。两位后端学长带着我去了信息办，用了一下午来试着恢复所有service，顺便还参观了一下信息办的机房。</p>\n<p>今天早上才写了<a href=\"/daily/qingyou-1/\" title=\"Qingyou_1\">Qingyou_1</a>这篇文章，说到同时加班我摸鱼。这个摸鱼确实没得办法，毕竟是业务处理方面的事情，但今天这个服务器down了，可就是彻彻底底要运维干活了（然后我还是在摸鱼）。早上本来在开开心心的在github上搭自己的blog，本来很开心的发现hexo的源代码和deploy用的现成文件可以直接用<code>git branch</code>分开来。结果到了中午，突然说学校的内部网络出了超级大问题，连食堂都刷不上卡。中午两位后端学长都到了，然后带着我去了信息办，坐在某个开会的桌子边重启服务。主要是两位学长在做，我最多起一个记录的作用。下面是一些印象深刻的记录。</p>\n<ol>\n<li>最主要的两台服务器，理论是完全一样的，但一台可以正常运行，另一台卡死，reboot都卡死。并且tomcat父进程为1，无法kill，同时其log文件夹无法打开，无法ls、du，free显示内存占满，swap分区16g全满。最后只能物理重启，重启后可以正常使用了，从另一台服务器上copy过来了配置。</li>\n<li>搭载某部门服务的服务器，80+443端口都无法使用，但ssh连接正常，redis没有设置登录密码，但是手动登录时要求密码了，reboot之后可以正常使用了，但是证书似乎还有问题，两个学长也没解决。</li>\n<li>搭载另一部门服务的服务器，服务down了，重启服务后可正常使用。</li>\n</ol>\n<p>除此之外还有各种容器需要重启，有的是学长搭建的，如果不及时记录的话，还真不一定记得住他们的作用。</p>\n<p>本来下午约了去飞无人机，果断推到明天了，不过无人机的代码倒是早就写好了。本以为明天没课的，约时间调试无人机的时候才想起来明天还有个实验课。又是不想上课的一天。</p>\n<p>不管怎么说，今天下午还是多多少少学到了点nouns，也深刻意识到一个了解服务的运维的重要性，此前的服务都是后端同学手动搭的，幸好他们还记得相关信息，不然我现在的能力可做不到完美恢复。除此之外，我对网络、数据库的了解还是差的太多。</p>\n<p>对于未来的话，希望能早点上云吧，服务也希望能够系统化一点，文档可以多写一点。</p>\n<p>以上。</p>\n"},{"title":"New-Start","date":"2021-10-25T09:45:59.000Z","_content":"\n# New Start\n\nToday I start a new blog with domain: [kawhicurry.shuihua.top](kawhicurry.shuihua.top).\n\nI hope I can keep the anything I meet after now.\n\nRecord the things that refresh, happy, knowledgeable or miserable, sad, terrible.","source":"_posts/Daily/New-Start.md","raw":"---\ntitle: New-Start\ncategories:\n  - Daily\ndate: 2021-10-25 17:45:59\ntags:\n---\n\n# New Start\n\nToday I start a new blog with domain: [kawhicurry.shuihua.top](kawhicurry.shuihua.top).\n\nI hope I can keep the anything I meet after now.\n\nRecord the things that refresh, happy, knowledgeable or miserable, sad, terrible.","slug":"New-Start","published":1,"category":"Daily","updated":"2021-12-23T13:31:28.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxlot1ji000324ulcsdpbknv","content":"<h1 id=\"New-Start\"><a href=\"#New-Start\" class=\"headerlink\" title=\"New Start\"></a>New Start</h1><p>Today I start a new blog with domain: <a href=\"kawhicurry.shuihua.top\">kawhicurry.shuihua.top</a>.</p>\n<p>I hope I can keep the anything I meet after now.</p>\n<p>Record the things that refresh, happy, knowledgeable or miserable, sad, terrible.</p>\n","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<h1 id=\"New-Start\"><a href=\"#New-Start\" class=\"headerlink\" title=\"New Start\"></a>New Start</h1><p>Today I start a new blog with domain: <a href=\"kawhicurry.shuihua.top\">kawhicurry.shuihua.top</a>.</p>\n<p>I hope I can keep the anything I meet after now.</p>\n<p>Record the things that refresh, happy, knowledgeable or miserable, sad, terrible.</p>\n"},{"author":"kawhicurry","title":"introduction-to-matery","top":1,"date":"2021-12-19T12:02:04.000Z","_content":"## 文章 Front-matter 介绍\n\n### Front-matter 选项详解\n\n`Front-matter` 选项中的所有内容均为**非必填**的。但我仍然建议至少填写 `title` 和 `date` 的值。\n\n| 配置选项   | 默认值                      | 描述                                                         |\n| ---------- | --------------------------- | ------------------------------------------------------------ |\n| title      | `Markdown` 的文件标题        | 文章标题，强烈建议填写此选项                                 |\n| date       | 文件创建时的日期时间          | 发布时间，强烈建议填写此选项，且最好保证全局唯一             |\n| author     | 根 `_config.yml` 中的 `author` | 文章作者                                                     |\n| img        | `featureImages` 中的某个值   | 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: `http://xxx.com/xxx.jpg` |\n| top        | `true`                      | 推荐文章（文章是否置顶），如果 `top` 值为 `true`，则会作为首页推荐文章 |\n| hide        | `false`                    | 隐藏文章，如果`hide`值为`true`，则文章不会在首页显示 |\n| cover      | `false`                     | `v1.0.2`版本新增，表示该文章是否需要加入到首页轮播封面中 |\n| coverImg   | 无                          | `v1.0.2`版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 |\n| password   | 无                          | 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 `password` 的值，该值必须是用 `SHA256` 加密后的密码，防止被他人识破。前提是在主题的 `config.yml` 中激活了 `verifyPassword` 选项 |\n| toc        | `true`                      | 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 `config.yml` 中激活了 `toc` 选项 |\n| mathjax    | `false`                     | 是否开启数学公式支持 ，本文章是否开启 `mathjax`，且需要在主题的 `_config.yml` 文件中也需要开启才行 |\n| summary    | 无                          | 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 |\n| categories | 无                          | 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 |\n| tags       | 无                          | 文章标签，一篇文章可以多个标签                              |\n| keywords   | 文章标题                     | 文章关键字，SEO 时需要                              |\n| reprintPolicy | cc_by                    | 文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个 |\n\n> **注意**:\n> 1. 如果 `img` 属性不填写的话，文章特色图会根据文章标题的 `hashcode` 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图**各有特色**。\n> 2. `date` 的值尽量保证每篇文章是唯一的，因为本主题中 `Gitalk` 和 `Gitment` 识别 `id` 是通过 `date` 的值来作为唯一标识的。\n> 3. 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 `_config.yml` 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：[开源中国在线工具](http://tool.oschina.net/encrypt?type=2)、[chahuo](http://encode.chahuo.com/)、[站长工具](http://tool.chinaz.com/tools/hash.aspx)。\n> 4. 您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则\n以下为文章的 `Front-matter` 示例。\n\n### 最简示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\n---\n```\n\n### 最全示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\nauthor: 赵奇\nimg: /source/images/xxx.jpg\ntop: true\nhide: false\ncover: true\ncoverImg: /images/1.jpg\npassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\ntoc: false\nmathjax: false\nsummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---\n```","source":"_posts/Front-end/introduction-to-matery.md","raw":"---\nauthor: kawhicurry\ntitle: introduction-to-matery\ncategories:\n  - Front-end\ntags: hexo\ntop: 1\ndate: 2021-12-19 20:02:04\n---\n## 文章 Front-matter 介绍\n\n### Front-matter 选项详解\n\n`Front-matter` 选项中的所有内容均为**非必填**的。但我仍然建议至少填写 `title` 和 `date` 的值。\n\n| 配置选项   | 默认值                      | 描述                                                         |\n| ---------- | --------------------------- | ------------------------------------------------------------ |\n| title      | `Markdown` 的文件标题        | 文章标题，强烈建议填写此选项                                 |\n| date       | 文件创建时的日期时间          | 发布时间，强烈建议填写此选项，且最好保证全局唯一             |\n| author     | 根 `_config.yml` 中的 `author` | 文章作者                                                     |\n| img        | `featureImages` 中的某个值   | 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: `http://xxx.com/xxx.jpg` |\n| top        | `true`                      | 推荐文章（文章是否置顶），如果 `top` 值为 `true`，则会作为首页推荐文章 |\n| hide        | `false`                    | 隐藏文章，如果`hide`值为`true`，则文章不会在首页显示 |\n| cover      | `false`                     | `v1.0.2`版本新增，表示该文章是否需要加入到首页轮播封面中 |\n| coverImg   | 无                          | `v1.0.2`版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 |\n| password   | 无                          | 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 `password` 的值，该值必须是用 `SHA256` 加密后的密码，防止被他人识破。前提是在主题的 `config.yml` 中激活了 `verifyPassword` 选项 |\n| toc        | `true`                      | 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 `config.yml` 中激活了 `toc` 选项 |\n| mathjax    | `false`                     | 是否开启数学公式支持 ，本文章是否开启 `mathjax`，且需要在主题的 `_config.yml` 文件中也需要开启才行 |\n| summary    | 无                          | 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 |\n| categories | 无                          | 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 |\n| tags       | 无                          | 文章标签，一篇文章可以多个标签                              |\n| keywords   | 文章标题                     | 文章关键字，SEO 时需要                              |\n| reprintPolicy | cc_by                    | 文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个 |\n\n> **注意**:\n> 1. 如果 `img` 属性不填写的话，文章特色图会根据文章标题的 `hashcode` 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图**各有特色**。\n> 2. `date` 的值尽量保证每篇文章是唯一的，因为本主题中 `Gitalk` 和 `Gitment` 识别 `id` 是通过 `date` 的值来作为唯一标识的。\n> 3. 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 `_config.yml` 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：[开源中国在线工具](http://tool.oschina.net/encrypt?type=2)、[chahuo](http://encode.chahuo.com/)、[站长工具](http://tool.chinaz.com/tools/hash.aspx)。\n> 4. 您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则\n以下为文章的 `Front-matter` 示例。\n\n### 最简示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\n---\n```\n\n### 最全示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\nauthor: 赵奇\nimg: /source/images/xxx.jpg\ntop: true\nhide: false\ncover: true\ncoverImg: /images/1.jpg\npassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\ntoc: false\nmathjax: false\nsummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---\n```","slug":"introduction-to-matery","published":1,"category":"Front-end","updated":"2021-12-23T13:31:28.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxlot1jl000724ul2p67cvmt","content":"<h2 id=\"文章-Front-matter-介绍\"><a href=\"#文章-Front-matter-介绍\" class=\"headerlink\" title=\"文章 Front-matter 介绍\"></a>文章 Front-matter 介绍</h2><h3 id=\"Front-matter-选项详解\"><a href=\"#Front-matter-选项详解\" class=\"headerlink\" title=\"Front-matter 选项详解\"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p>\n<table>\n<thead>\n<tr>\n<th>配置选项</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td><code>Markdown</code> 的文件标题</td>\n<td>文章标题，强烈建议填写此选项</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件创建时的日期时间</td>\n<td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td>\n</tr>\n<tr>\n<td>author</td>\n<td>根 <code>_config.yml</code> 中的 <code>author</code></td>\n<td>文章作者</td>\n</tr>\n<tr>\n<td>img</td>\n<td><code>featureImages</code> 中的某个值</td>\n<td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td>\n</tr>\n<tr>\n<td>top</td>\n<td><code>true</code></td>\n<td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td>\n</tr>\n<tr>\n<td>hide</td>\n<td><code>false</code></td>\n<td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td>\n</tr>\n<tr>\n<td>cover</td>\n<td><code>false</code></td>\n<td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td>\n</tr>\n<tr>\n<td>coverImg</td>\n<td>无</td>\n<td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>\n</tr>\n<tr>\n<td>password</td>\n<td>无</td>\n<td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td>\n</tr>\n<tr>\n<td>toc</td>\n<td><code>true</code></td>\n<td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td>\n</tr>\n<tr>\n<td>mathjax</td>\n<td><code>false</code></td>\n<td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td>\n</tr>\n<tr>\n<td>summary</td>\n<td>无</td>\n<td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>无</td>\n<td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>无</td>\n<td>文章标签，一篇文章可以多个标签</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>文章标题</td>\n<td>文章关键字，SEO 时需要</td>\n</tr>\n<tr>\n<td>reprintPolicy</td>\n<td>cc_by</td>\n<td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>注意</strong>:</p>\n<ol>\n<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li>\n<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li>\n<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href=\"http://tool.oschina.net/encrypt?type=2\">开源中国在线工具</a>、<a href=\"http://encode.chahuo.com/\">chahuo</a>、<a href=\"http://tool.chinaz.com/tools/hash.aspx\">站长工具</a>。</li>\n<li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则<br>以下为文章的 <code>Front-matter</code> 示例。</li>\n</ol>\n</blockquote>\n<h3 id=\"最简示例\"><a href=\"#最简示例\" class=\"headerlink\" title=\"最简示例\"></a>最简示例</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> typora<span class=\"token punctuation\">-</span>vue<span class=\"token punctuation\">-</span>theme主题介绍\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-07 09:25:00</span>\n<span class=\"token punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"最全示例\"><a href=\"#最全示例\" class=\"headerlink\" title=\"最全示例\"></a>最全示例</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> typora<span class=\"token punctuation\">-</span>vue<span class=\"token punctuation\">-</span>theme主题介绍\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-07 09:25:00</span>\n<span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> 赵奇\n<span class=\"token key atrule\">img</span><span class=\"token punctuation\">:</span> /source/images/xxx.jpg\n<span class=\"token key atrule\">top</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">hide</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">cover</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">coverImg</span><span class=\"token punctuation\">:</span> /images/1.jpg\n<span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\n<span class=\"token key atrule\">toc</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">mathjax</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">summary</span><span class=\"token punctuation\">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\n<span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span> Markdown\n<span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Typora\n  <span class=\"token punctuation\">-</span> Markdown\n<span class=\"token punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<h2 id=\"文章-Front-matter-介绍\"><a href=\"#文章-Front-matter-介绍\" class=\"headerlink\" title=\"文章 Front-matter 介绍\"></a>文章 Front-matter 介绍</h2><h3 id=\"Front-matter-选项详解\"><a href=\"#Front-matter-选项详解\" class=\"headerlink\" title=\"Front-matter 选项详解\"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p>\n<table>\n<thead>\n<tr>\n<th>配置选项</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td><code>Markdown</code> 的文件标题</td>\n<td>文章标题，强烈建议填写此选项</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件创建时的日期时间</td>\n<td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td>\n</tr>\n<tr>\n<td>author</td>\n<td>根 <code>_config.yml</code> 中的 <code>author</code></td>\n<td>文章作者</td>\n</tr>\n<tr>\n<td>img</td>\n<td><code>featureImages</code> 中的某个值</td>\n<td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td>\n</tr>\n<tr>\n<td>top</td>\n<td><code>true</code></td>\n<td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td>\n</tr>\n<tr>\n<td>hide</td>\n<td><code>false</code></td>\n<td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td>\n</tr>\n<tr>\n<td>cover</td>\n<td><code>false</code></td>\n<td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td>\n</tr>\n<tr>\n<td>coverImg</td>\n<td>无</td>\n<td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>\n</tr>\n<tr>\n<td>password</td>\n<td>无</td>\n<td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td>\n</tr>\n<tr>\n<td>toc</td>\n<td><code>true</code></td>\n<td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td>\n</tr>\n<tr>\n<td>mathjax</td>\n<td><code>false</code></td>\n<td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td>\n</tr>\n<tr>\n<td>summary</td>\n<td>无</td>\n<td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>无</td>\n<td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>无</td>\n<td>文章标签，一篇文章可以多个标签</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>文章标题</td>\n<td>文章关键字，SEO 时需要</td>\n</tr>\n<tr>\n<td>reprintPolicy</td>\n<td>cc_by</td>\n<td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>注意</strong>:</p>\n<ol>\n<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li>\n<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li>\n<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href=\"http://tool.oschina.net/encrypt?type=2\">开源中国在线工具</a>、<a href=\"http://encode.chahuo.com/\">chahuo</a>、<a href=\"http://tool.chinaz.com/tools/hash.aspx\">站长工具</a>。</li>\n<li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则<br>以下为文章的 <code>Front-matter</code> 示例。</li>\n</ol>\n</blockquote>\n<h3 id=\"最简示例\"><a href=\"#最简示例\" class=\"headerlink\" title=\"最简示例\"></a>最简示例</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> typora<span class=\"token punctuation\">-</span>vue<span class=\"token punctuation\">-</span>theme主题介绍\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-07 09:25:00</span>\n<span class=\"token punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"最全示例\"><a href=\"#最全示例\" class=\"headerlink\" title=\"最全示例\"></a>最全示例</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> typora<span class=\"token punctuation\">-</span>vue<span class=\"token punctuation\">-</span>theme主题介绍\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-07 09:25:00</span>\n<span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> 赵奇\n<span class=\"token key atrule\">img</span><span class=\"token punctuation\">:</span> /source/images/xxx.jpg\n<span class=\"token key atrule\">top</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">hide</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">cover</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">coverImg</span><span class=\"token punctuation\">:</span> /images/1.jpg\n<span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\n<span class=\"token key atrule\">toc</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">mathjax</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">summary</span><span class=\"token punctuation\">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\n<span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span> Markdown\n<span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Typora\n  <span class=\"token punctuation\">-</span> Markdown\n<span class=\"token punctuation\">---</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"Qingyou_1","date":"2021-10-27T01:01:06.000Z","_content":"# 青柚的这点事（1）\n\n大一开学的时候被学校拉去听优秀学生讲座。然后青柚的指导老师上去宣传了一波，我就记得两件事：\n\n1. 学校的小程序是青柚管的\n2. 不招零基础\n\n说是不招，还是抱着试一试的心态，去投了个ui岗，毕竟当时恰好在学原型。结果石沉大海，冒得回应。\n\n大一上死命学会c之后，大一下堕落了起来，直到有天看到阿里云服务器打折，心血来潮，和好基友Roc买了一台49一年的小服务器，搭博客玩。\n\n没服务器的时候就在折腾jekyll和各种pages了，有了服务器之后终于上了心心念的wordpress，然后就是折腾wp各种奇奇怪怪的东西，然后发现有个好东西叫docker，于是又拿docker部署各种各样的服务。我记得最多的时候，部署了博客，gitee，一个ftp服务器，还连了163邮箱发报警。对于一个1核心2m带宽的服务器来说，压力还是很大了哈哈哈。对了，一开始是用宝塔面板，开始还觉得挺方便的，后来lnmp的p就开始出各种各样的问题。这时候就发现了自动部署忽视细节是个多么难搞的问题。从此决定手动搭各种环境。然后又经历了几次服务器重置之后，我和Roc决定还是把网页部署到gitlab page上，毕竟写好md文档然后直接push，确实比wp舒服多了。\n\n接下来在大一结束的那个暑假，我又一次想起了青柚的招新，这次我决定报个运维岗位试试。本想着会遇到各种可能的高难度问题，还提心吊胆地做了各种准备，结果似乎没有遇到太大困难就进来了。进来之后才发现青柚已经很久没有运维了。上一届的运维是一位后端，再往前是一位运营。也确实，运维这份活在小公司本就是可有可无的，更何况这么个工作室呢？不过我还是很喜欢这份活的，毕竟能看着各种软件稳稳的运行，不用想破脑袋实现各种奇奇怪怪的需求，其实也不错（手动狗头）。\n\n就在今天，学校的出入校小程序上线了。这个项目一个月前就开始了，当时我也被拉进了这个项目的群里，然后被告知学校找了外面的运维，用了大公司的serverless。这一个月以来都是平稳推进，直到前天，突然改了需求，又要求昨天就要上线，整个工作室的人都被拉了进来，并且核心人员从前天晚上七点一直加班到昨天中午十一二点。当所有人都在加班的时候，一个运维坐在工作室的正中间，写着自己满是bug的minishell（狗头）。\n\n好吧，其实几天前我几天前刚接到了要管理学校镜像站的任务，一个python+nginx的小组合，拉取镜像用了python写的mirrord工具，好像是北京外国语还是北京交大的（我估计再往上查一下会发现是清华的，此时，清华用的go），然后再在nginx里面配置下转发就行。但是仔细考虑下自己吧，好像python不咋熟练（那必然），go吧肯定不会，最要命的是线程相关的问题，基本是只知道概念（甚至不清楚），略知一二那种。所以想写出点什么，一时半会恐怕没办法，所以现在抓紧学操作系统，把线程方面搞清楚了，再找个趁手的工具，把镜像站的任务系统化一点，争取做成一个平台。\n\n我又想起前天晚上加班的场景，虽然我啥都没干，但我还是挺喜欢这种氛围的。希望能在这里写点什么，写点什么，最后再写点什么。（老谜语人了）\n\n","source":"_posts/Daily/Qingyou-1.md","raw":"---\ntitle: Qingyou_1\ncategories:\n  - Daily\ndate: 2021-10-27 09:01:06\ntags:\n---\n# 青柚的这点事（1）\n\n大一开学的时候被学校拉去听优秀学生讲座。然后青柚的指导老师上去宣传了一波，我就记得两件事：\n\n1. 学校的小程序是青柚管的\n2. 不招零基础\n\n说是不招，还是抱着试一试的心态，去投了个ui岗，毕竟当时恰好在学原型。结果石沉大海，冒得回应。\n\n大一上死命学会c之后，大一下堕落了起来，直到有天看到阿里云服务器打折，心血来潮，和好基友Roc买了一台49一年的小服务器，搭博客玩。\n\n没服务器的时候就在折腾jekyll和各种pages了，有了服务器之后终于上了心心念的wordpress，然后就是折腾wp各种奇奇怪怪的东西，然后发现有个好东西叫docker，于是又拿docker部署各种各样的服务。我记得最多的时候，部署了博客，gitee，一个ftp服务器，还连了163邮箱发报警。对于一个1核心2m带宽的服务器来说，压力还是很大了哈哈哈。对了，一开始是用宝塔面板，开始还觉得挺方便的，后来lnmp的p就开始出各种各样的问题。这时候就发现了自动部署忽视细节是个多么难搞的问题。从此决定手动搭各种环境。然后又经历了几次服务器重置之后，我和Roc决定还是把网页部署到gitlab page上，毕竟写好md文档然后直接push，确实比wp舒服多了。\n\n接下来在大一结束的那个暑假，我又一次想起了青柚的招新，这次我决定报个运维岗位试试。本想着会遇到各种可能的高难度问题，还提心吊胆地做了各种准备，结果似乎没有遇到太大困难就进来了。进来之后才发现青柚已经很久没有运维了。上一届的运维是一位后端，再往前是一位运营。也确实，运维这份活在小公司本就是可有可无的，更何况这么个工作室呢？不过我还是很喜欢这份活的，毕竟能看着各种软件稳稳的运行，不用想破脑袋实现各种奇奇怪怪的需求，其实也不错（手动狗头）。\n\n就在今天，学校的出入校小程序上线了。这个项目一个月前就开始了，当时我也被拉进了这个项目的群里，然后被告知学校找了外面的运维，用了大公司的serverless。这一个月以来都是平稳推进，直到前天，突然改了需求，又要求昨天就要上线，整个工作室的人都被拉了进来，并且核心人员从前天晚上七点一直加班到昨天中午十一二点。当所有人都在加班的时候，一个运维坐在工作室的正中间，写着自己满是bug的minishell（狗头）。\n\n好吧，其实几天前我几天前刚接到了要管理学校镜像站的任务，一个python+nginx的小组合，拉取镜像用了python写的mirrord工具，好像是北京外国语还是北京交大的（我估计再往上查一下会发现是清华的，此时，清华用的go），然后再在nginx里面配置下转发就行。但是仔细考虑下自己吧，好像python不咋熟练（那必然），go吧肯定不会，最要命的是线程相关的问题，基本是只知道概念（甚至不清楚），略知一二那种。所以想写出点什么，一时半会恐怕没办法，所以现在抓紧学操作系统，把线程方面搞清楚了，再找个趁手的工具，把镜像站的任务系统化一点，争取做成一个平台。\n\n我又想起前天晚上加班的场景，虽然我啥都没干，但我还是挺喜欢这种氛围的。希望能在这里写点什么，写点什么，最后再写点什么。（老谜语人了）\n\n","slug":"Qingyou-1","published":1,"category":"Daily","updated":"2021-12-23T13:31:28.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxlot1jn000924ula9b191yc","content":"<h1 id=\"青柚的这点事（1）\"><a href=\"#青柚的这点事（1）\" class=\"headerlink\" title=\"青柚的这点事（1）\"></a>青柚的这点事（1）</h1><p>大一开学的时候被学校拉去听优秀学生讲座。然后青柚的指导老师上去宣传了一波，我就记得两件事：</p>\n<ol>\n<li>学校的小程序是青柚管的</li>\n<li>不招零基础</li>\n</ol>\n<p>说是不招，还是抱着试一试的心态，去投了个ui岗，毕竟当时恰好在学原型。结果石沉大海，冒得回应。</p>\n<p>大一上死命学会c之后，大一下堕落了起来，直到有天看到阿里云服务器打折，心血来潮，和好基友Roc买了一台49一年的小服务器，搭博客玩。</p>\n<p>没服务器的时候就在折腾jekyll和各种pages了，有了服务器之后终于上了心心念的wordpress，然后就是折腾wp各种奇奇怪怪的东西，然后发现有个好东西叫docker，于是又拿docker部署各种各样的服务。我记得最多的时候，部署了博客，gitee，一个ftp服务器，还连了163邮箱发报警。对于一个1核心2m带宽的服务器来说，压力还是很大了哈哈哈。对了，一开始是用宝塔面板，开始还觉得挺方便的，后来lnmp的p就开始出各种各样的问题。这时候就发现了自动部署忽视细节是个多么难搞的问题。从此决定手动搭各种环境。然后又经历了几次服务器重置之后，我和Roc决定还是把网页部署到gitlab page上，毕竟写好md文档然后直接push，确实比wp舒服多了。</p>\n<p>接下来在大一结束的那个暑假，我又一次想起了青柚的招新，这次我决定报个运维岗位试试。本想着会遇到各种可能的高难度问题，还提心吊胆地做了各种准备，结果似乎没有遇到太大困难就进来了。进来之后才发现青柚已经很久没有运维了。上一届的运维是一位后端，再往前是一位运营。也确实，运维这份活在小公司本就是可有可无的，更何况这么个工作室呢？不过我还是很喜欢这份活的，毕竟能看着各种软件稳稳的运行，不用想破脑袋实现各种奇奇怪怪的需求，其实也不错（手动狗头）。</p>\n<p>就在今天，学校的出入校小程序上线了。这个项目一个月前就开始了，当时我也被拉进了这个项目的群里，然后被告知学校找了外面的运维，用了大公司的serverless。这一个月以来都是平稳推进，直到前天，突然改了需求，又要求昨天就要上线，整个工作室的人都被拉了进来，并且核心人员从前天晚上七点一直加班到昨天中午十一二点。当所有人都在加班的时候，一个运维坐在工作室的正中间，写着自己满是bug的minishell（狗头）。</p>\n<p>好吧，其实几天前我几天前刚接到了要管理学校镜像站的任务，一个python+nginx的小组合，拉取镜像用了python写的mirrord工具，好像是北京外国语还是北京交大的（我估计再往上查一下会发现是清华的，此时，清华用的go），然后再在nginx里面配置下转发就行。但是仔细考虑下自己吧，好像python不咋熟练（那必然），go吧肯定不会，最要命的是线程相关的问题，基本是只知道概念（甚至不清楚），略知一二那种。所以想写出点什么，一时半会恐怕没办法，所以现在抓紧学操作系统，把线程方面搞清楚了，再找个趁手的工具，把镜像站的任务系统化一点，争取做成一个平台。</p>\n<p>我又想起前天晚上加班的场景，虽然我啥都没干，但我还是挺喜欢这种氛围的。希望能在这里写点什么，写点什么，最后再写点什么。（老谜语人了）</p>\n","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<h1 id=\"青柚的这点事（1）\"><a href=\"#青柚的这点事（1）\" class=\"headerlink\" title=\"青柚的这点事（1）\"></a>青柚的这点事（1）</h1><p>大一开学的时候被学校拉去听优秀学生讲座。然后青柚的指导老师上去宣传了一波，我就记得两件事：</p>\n<ol>\n<li>学校的小程序是青柚管的</li>\n<li>不招零基础</li>\n</ol>\n<p>说是不招，还是抱着试一试的心态，去投了个ui岗，毕竟当时恰好在学原型。结果石沉大海，冒得回应。</p>\n<p>大一上死命学会c之后，大一下堕落了起来，直到有天看到阿里云服务器打折，心血来潮，和好基友Roc买了一台49一年的小服务器，搭博客玩。</p>\n<p>没服务器的时候就在折腾jekyll和各种pages了，有了服务器之后终于上了心心念的wordpress，然后就是折腾wp各种奇奇怪怪的东西，然后发现有个好东西叫docker，于是又拿docker部署各种各样的服务。我记得最多的时候，部署了博客，gitee，一个ftp服务器，还连了163邮箱发报警。对于一个1核心2m带宽的服务器来说，压力还是很大了哈哈哈。对了，一开始是用宝塔面板，开始还觉得挺方便的，后来lnmp的p就开始出各种各样的问题。这时候就发现了自动部署忽视细节是个多么难搞的问题。从此决定手动搭各种环境。然后又经历了几次服务器重置之后，我和Roc决定还是把网页部署到gitlab page上，毕竟写好md文档然后直接push，确实比wp舒服多了。</p>\n<p>接下来在大一结束的那个暑假，我又一次想起了青柚的招新，这次我决定报个运维岗位试试。本想着会遇到各种可能的高难度问题，还提心吊胆地做了各种准备，结果似乎没有遇到太大困难就进来了。进来之后才发现青柚已经很久没有运维了。上一届的运维是一位后端，再往前是一位运营。也确实，运维这份活在小公司本就是可有可无的，更何况这么个工作室呢？不过我还是很喜欢这份活的，毕竟能看着各种软件稳稳的运行，不用想破脑袋实现各种奇奇怪怪的需求，其实也不错（手动狗头）。</p>\n<p>就在今天，学校的出入校小程序上线了。这个项目一个月前就开始了，当时我也被拉进了这个项目的群里，然后被告知学校找了外面的运维，用了大公司的serverless。这一个月以来都是平稳推进，直到前天，突然改了需求，又要求昨天就要上线，整个工作室的人都被拉了进来，并且核心人员从前天晚上七点一直加班到昨天中午十一二点。当所有人都在加班的时候，一个运维坐在工作室的正中间，写着自己满是bug的minishell（狗头）。</p>\n<p>好吧，其实几天前我几天前刚接到了要管理学校镜像站的任务，一个python+nginx的小组合，拉取镜像用了python写的mirrord工具，好像是北京外国语还是北京交大的（我估计再往上查一下会发现是清华的，此时，清华用的go），然后再在nginx里面配置下转发就行。但是仔细考虑下自己吧，好像python不咋熟练（那必然），go吧肯定不会，最要命的是线程相关的问题，基本是只知道概念（甚至不清楚），略知一二那种。所以想写出点什么，一时半会恐怕没办法，所以现在抓紧学操作系统，把线程方面搞清楚了，再找个趁手的工具，把镜像站的任务系统化一点，争取做成一个平台。</p>\n<p>我又想起前天晚上加班的场景，虽然我啥都没干，但我还是挺喜欢这种氛围的。希望能在这里写点什么，写点什么，最后再写点什么。（老谜语人了）</p>\n"},{"author":"kawhicurry","title":"记录从无人机上学到的东西","date":"2021-11-16T12:54:45.000Z","_content":"\n# 记录从无人机上学到的东西\n\n*UAV*: Unmanned Aerial Vehicle\n\n## 项目的目的\n\n分为森林救火和森林巡逻，我被分在森林巡逻部分。主要是让飞机按一定轨迹在操场上飞行，以z形路线飞过一个操场。森姐救火则是在上述基础上加上使用视觉识别找到一个红色的正方形。我在该小组中负责通信部分。\n\n## 数传通信\n\n主要的任务是将无人机的xyz及三个偏转角通过数传发到地面站，地面站方面会有同学根据数据进行3d绘图。\n\n一开始读代码思路不对，一心想着找gps的数据，于是找到了Sensor，通过将整个sensor的数据取出来，然后获取其中的数据。后来发现库里有个MeasureSystem，可以直接获取xyz及偏转角。于是改写为直接调取。\n\n获取数据后就是发送，发送是利用飞控的Uart与数传进行连接。库中提供了Uart_Send函数，接受一个数组和一个长度作为参数，但是该数组只接受字符，因此要将实际数据转为字符后再发送，思路是将 原始数据%10+‘0’ 从而得到其ascii码值，同时用switch来遍历xyz和三个偏转角。每6个数据作为一组，一组中的数据之间使用‘，’分割，不同组之间使用‘@’分割。期间对原数据进行处理时要记得将得到的某个数据进行数组反转（再看一眼上面对原始数据处理的思路），因为这个问题还出过bug……。\n\n再具体一点，原始数据都是double 或者 float类型，单位都为厘米。一开始我在将获取的数据传到中间的handler时，将其转为（int），然后再直接处理，后面我在转为（int）前，让原始数据的右值*PRESION，设定一个精度，精度取100，从而获得了0.1mm级别的精度。但后面发现这个精度的意义不大了，于是又改回了1。\n\n再记录一下硬件的问题：\n\n1. 电调插反了，折磨了搞硬件的兄弟一下午\n2. 图传始终没有图像，一直以为是电源线的问题，后面发现是插在电脑上的输入线没有插稳\n3. 飞到一半炸机了，排查半天发现是当时调试的太久，没有注意到电量。\n4. 几乎相同的坐标发送代码（除了版本问题外，对数据处理的方式相同）在A9上正常运行，在TI上发出的数据是乱码，改用发送固定值之后，电脑端收到了稳定的乱码。更换数传和数传连接线之后问题仍然存在。直到写下此文时依然未解决。\n","source":"_posts/Project/UAV.md","raw":"---\nauthor: kawhicurry\ntitle: 记录从无人机上学到的东西\ncategories:\n  - Project\ntags: auto\ndate: 2021-11-16 20:54:45\n---\n\n# 记录从无人机上学到的东西\n\n*UAV*: Unmanned Aerial Vehicle\n\n## 项目的目的\n\n分为森林救火和森林巡逻，我被分在森林巡逻部分。主要是让飞机按一定轨迹在操场上飞行，以z形路线飞过一个操场。森姐救火则是在上述基础上加上使用视觉识别找到一个红色的正方形。我在该小组中负责通信部分。\n\n## 数传通信\n\n主要的任务是将无人机的xyz及三个偏转角通过数传发到地面站，地面站方面会有同学根据数据进行3d绘图。\n\n一开始读代码思路不对，一心想着找gps的数据，于是找到了Sensor，通过将整个sensor的数据取出来，然后获取其中的数据。后来发现库里有个MeasureSystem，可以直接获取xyz及偏转角。于是改写为直接调取。\n\n获取数据后就是发送，发送是利用飞控的Uart与数传进行连接。库中提供了Uart_Send函数，接受一个数组和一个长度作为参数，但是该数组只接受字符，因此要将实际数据转为字符后再发送，思路是将 原始数据%10+‘0’ 从而得到其ascii码值，同时用switch来遍历xyz和三个偏转角。每6个数据作为一组，一组中的数据之间使用‘，’分割，不同组之间使用‘@’分割。期间对原数据进行处理时要记得将得到的某个数据进行数组反转（再看一眼上面对原始数据处理的思路），因为这个问题还出过bug……。\n\n再具体一点，原始数据都是double 或者 float类型，单位都为厘米。一开始我在将获取的数据传到中间的handler时，将其转为（int），然后再直接处理，后面我在转为（int）前，让原始数据的右值*PRESION，设定一个精度，精度取100，从而获得了0.1mm级别的精度。但后面发现这个精度的意义不大了，于是又改回了1。\n\n再记录一下硬件的问题：\n\n1. 电调插反了，折磨了搞硬件的兄弟一下午\n2. 图传始终没有图像，一直以为是电源线的问题，后面发现是插在电脑上的输入线没有插稳\n3. 飞到一半炸机了，排查半天发现是当时调试的太久，没有注意到电量。\n4. 几乎相同的坐标发送代码（除了版本问题外，对数据处理的方式相同）在A9上正常运行，在TI上发出的数据是乱码，改用发送固定值之后，电脑端收到了稳定的乱码。更换数传和数传连接线之后问题仍然存在。直到写下此文时依然未解决。\n","slug":"UAV","published":1,"category":"Project","updated":"2021-12-23T13:31:28.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxlot1jo000b24ul6oj6gzmw","content":"<h1 id=\"记录从无人机上学到的东西\"><a href=\"#记录从无人机上学到的东西\" class=\"headerlink\" title=\"记录从无人机上学到的东西\"></a>记录从无人机上学到的东西</h1><p><em>UAV</em>: Unmanned Aerial Vehicle</p>\n<h2 id=\"项目的目的\"><a href=\"#项目的目的\" class=\"headerlink\" title=\"项目的目的\"></a>项目的目的</h2><p>分为森林救火和森林巡逻，我被分在森林巡逻部分。主要是让飞机按一定轨迹在操场上飞行，以z形路线飞过一个操场。森姐救火则是在上述基础上加上使用视觉识别找到一个红色的正方形。我在该小组中负责通信部分。</p>\n<h2 id=\"数传通信\"><a href=\"#数传通信\" class=\"headerlink\" title=\"数传通信\"></a>数传通信</h2><p>主要的任务是将无人机的xyz及三个偏转角通过数传发到地面站，地面站方面会有同学根据数据进行3d绘图。</p>\n<p>一开始读代码思路不对，一心想着找gps的数据，于是找到了Sensor，通过将整个sensor的数据取出来，然后获取其中的数据。后来发现库里有个MeasureSystem，可以直接获取xyz及偏转角。于是改写为直接调取。</p>\n<p>获取数据后就是发送，发送是利用飞控的Uart与数传进行连接。库中提供了Uart_Send函数，接受一个数组和一个长度作为参数，但是该数组只接受字符，因此要将实际数据转为字符后再发送，思路是将 原始数据%10+‘0’ 从而得到其ascii码值，同时用switch来遍历xyz和三个偏转角。每6个数据作为一组，一组中的数据之间使用‘，’分割，不同组之间使用‘@’分割。期间对原数据进行处理时要记得将得到的某个数据进行数组反转（再看一眼上面对原始数据处理的思路），因为这个问题还出过bug……。</p>\n<p>再具体一点，原始数据都是double 或者 float类型，单位都为厘米。一开始我在将获取的数据传到中间的handler时，将其转为（int），然后再直接处理，后面我在转为（int）前，让原始数据的右值*PRESION，设定一个精度，精度取100，从而获得了0.1mm级别的精度。但后面发现这个精度的意义不大了，于是又改回了1。</p>\n<p>再记录一下硬件的问题：</p>\n<ol>\n<li>电调插反了，折磨了搞硬件的兄弟一下午</li>\n<li>图传始终没有图像，一直以为是电源线的问题，后面发现是插在电脑上的输入线没有插稳</li>\n<li>飞到一半炸机了，排查半天发现是当时调试的太久，没有注意到电量。</li>\n<li>几乎相同的坐标发送代码（除了版本问题外，对数据处理的方式相同）在A9上正常运行，在TI上发出的数据是乱码，改用发送固定值之后，电脑端收到了稳定的乱码。更换数传和数传连接线之后问题仍然存在。直到写下此文时依然未解决。</li>\n</ol>\n","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<h1 id=\"记录从无人机上学到的东西\"><a href=\"#记录从无人机上学到的东西\" class=\"headerlink\" title=\"记录从无人机上学到的东西\"></a>记录从无人机上学到的东西</h1><p><em>UAV</em>: Unmanned Aerial Vehicle</p>\n<h2 id=\"项目的目的\"><a href=\"#项目的目的\" class=\"headerlink\" title=\"项目的目的\"></a>项目的目的</h2><p>分为森林救火和森林巡逻，我被分在森林巡逻部分。主要是让飞机按一定轨迹在操场上飞行，以z形路线飞过一个操场。森姐救火则是在上述基础上加上使用视觉识别找到一个红色的正方形。我在该小组中负责通信部分。</p>\n<h2 id=\"数传通信\"><a href=\"#数传通信\" class=\"headerlink\" title=\"数传通信\"></a>数传通信</h2><p>主要的任务是将无人机的xyz及三个偏转角通过数传发到地面站，地面站方面会有同学根据数据进行3d绘图。</p>\n<p>一开始读代码思路不对，一心想着找gps的数据，于是找到了Sensor，通过将整个sensor的数据取出来，然后获取其中的数据。后来发现库里有个MeasureSystem，可以直接获取xyz及偏转角。于是改写为直接调取。</p>\n<p>获取数据后就是发送，发送是利用飞控的Uart与数传进行连接。库中提供了Uart_Send函数，接受一个数组和一个长度作为参数，但是该数组只接受字符，因此要将实际数据转为字符后再发送，思路是将 原始数据%10+‘0’ 从而得到其ascii码值，同时用switch来遍历xyz和三个偏转角。每6个数据作为一组，一组中的数据之间使用‘，’分割，不同组之间使用‘@’分割。期间对原数据进行处理时要记得将得到的某个数据进行数组反转（再看一眼上面对原始数据处理的思路），因为这个问题还出过bug……。</p>\n<p>再具体一点，原始数据都是double 或者 float类型，单位都为厘米。一开始我在将获取的数据传到中间的handler时，将其转为（int），然后再直接处理，后面我在转为（int）前，让原始数据的右值*PRESION，设定一个精度，精度取100，从而获得了0.1mm级别的精度。但后面发现这个精度的意义不大了，于是又改回了1。</p>\n<p>再记录一下硬件的问题：</p>\n<ol>\n<li>电调插反了，折磨了搞硬件的兄弟一下午</li>\n<li>图传始终没有图像，一直以为是电源线的问题，后面发现是插在电脑上的输入线没有插稳</li>\n<li>飞到一半炸机了，排查半天发现是当时调试的太久，没有注意到电量。</li>\n<li>几乎相同的坐标发送代码（除了版本问题外，对数据处理的方式相同）在A9上正常运行，在TI上发出的数据是乱码，改用发送固定值之后，电脑端收到了稳定的乱码。更换数传和数传连接线之后问题仍然存在。直到写下此文时依然未解决。</li>\n</ol>\n"},{"author":"kawhicurry","title":"自制Rss阅读器","top":0,"cover":0,"date":"2021-12-20T13:48:06.000Z","img":null,"coverImg":null,"summary":null,"keywords":null,"_content":"尝试自制了一个rss阅读器，现在还在开发中。\n\n## 想法\n\n`Rss`：简单信息聚合。\n\n互联网使我们得以接触到广泛的信息，而我们往往希望自己关注的创作者（某个网站）有更新时，自己能第一个被通知。Rss便是为此而生。\n\nRss的概念其实很简单。它的使用过程大致如下\n\n- 创作者使用工具生成一个xml格式的feed。\n- Rss订阅工具（一般是第三方提供）获取这些feed后解析其内容并生成易于阅读的内容，随后通知订阅者内容已经更新。\n- 订阅者得到阅读器提供的清单选择自己感兴趣的内容阅读。\n\n这个过程看起来简单，但这中间又有以下几个问题：\n\n- 创作者不一定会提供feed。\n- Rss订阅工具一般由第三方的企业实现，它们会像爬虫一样（或者说就是爬虫）定时获取网站的feed。而使用服务器是有成本的。\n- 对订阅者的要求，订阅者需要将自己希望阅读的内容加入到订阅工具中。而获取feed对于很多订阅者来说是个难题。当然，浏览器插件一定程度上能解决一部分这个问题。\n- 阅读器的颜值，可能是因为rss凉了很久了，现在遗留下来的阅读器的ui都是一言难尽。\n- 阅读器的跨平台，移动设备近几年才普及开来，而rss在此之前就凉了。因此很少有好的rss跨平台解决方案。\n\n综上，我希望能有一款产品能完美完成我的Rss订阅问题。为何我要如此执着于Rss呢？\n\n- Rss意味着我可以自己选择要看什么，不看什么，而不是被现代的推荐机制牵着鼻子走。\n- Rss意味着我可以第一时间得到更新，而不是等到有人推送，或是选择性的推送，抑或是干脆得不到通知。\n- 好的Rss阅读工具意味着我可以舒服的阅读我想要阅读的内容，甚至可以让内容经过进一步处理后再阅读\n- 好的Rss阅读工具意味着我可以随时随地收到更新，并且在任意设备上进行阅读。\n\n## 实现\n\n接下来讨论下具体的实现。\n\n### 订阅源\n\n关于订阅源，[RssHub](https://docs.rsshub.app/)项目提供了不少有趣的订阅源。\n\n然后是对于一些不直接提供feed的网站，例如我想订阅B站某位up主的更新。[irreader](http://irreader.fatecore.com/)提供了一种不错的思路。让用户手动选择自己想要订阅的区块后，通过网页规则的匹配生成一个订阅规则（像是一种非xml格式的feed）。\n\n### 订阅器\n\n这里的订阅器指定时获取feed的工具。前面提到了部署服务器软件来定时获取feed的做法，除了服务器端的软件外，在用户本地进行同步也是一种办法。\n\n关于定时获取feed，当然原则上是越频繁越好啦，但也不能使劲的访问，搞成压力测试了。所以关于更新的频率，可以用算法优化优化。\n\n然后就是feed的判定，订阅器应当有能力判断获取的feed中是否有更新内容，以往的内容是否失效，哪些内容应当被加入数据库，哪些应当从数据库中去除。\n\n### 阅读器\n\n说到阅读，途径就多种多样了，随手枚举一下：网页，win客户端，linux客户端，Android客户端，iPhone客户端，各种平板，微信小程序。\n\n阅读的方式也有讲究，可以让用户打开链接（调用本地浏览器），或为用户提供一个阅读器，或是其他方式。\n\n## 一种方案\n\n尝试提出一种方案来完成上述所有内容。\n\n向用户提供：\n\n- 各种格式的阅读器，包括网页端和微信小程序（写写前端），桌面客户端及平板客户端（qt跨平台完事），手机客户端（qt好像可以跨Android和ios）。\n\n- 订阅工具，与阅读器集成，支持\n  - 与RssHub接入\n  - 添加自定义feed\n  - 添加自定义非feed源\n\n在服务端（不是服务器端）提供：\n\n- feed获取工具，分为两类：\n  - 服务器端：记录用户的订阅要求后添加至数据库，获得新feed与旧feed对比后写入数据库\n  - 本地端：支持手动或定时获取feed，以本地方式保存数据\n- feed解析工具，将feed解析为：\n  - 链接：用户可通过自己的浏览器阅读源内容\n  - 内容：获取feed中的文本后，解析为便于阅读的格式，交由阅读器供用户阅读","source":"_posts/Project/自制Rss阅读器.md","raw":"---\nauthor: kawhicurry\ntitle: 自制Rss阅读器\ncategories:\n  - Project\ntop: 0\ncover: 0\ntags: rss\ndate: 2021-12-20 21:48:06\nimg:\ncoverImg:\nsummary:\nkeywords:\n---\n尝试自制了一个rss阅读器，现在还在开发中。\n\n## 想法\n\n`Rss`：简单信息聚合。\n\n互联网使我们得以接触到广泛的信息，而我们往往希望自己关注的创作者（某个网站）有更新时，自己能第一个被通知。Rss便是为此而生。\n\nRss的概念其实很简单。它的使用过程大致如下\n\n- 创作者使用工具生成一个xml格式的feed。\n- Rss订阅工具（一般是第三方提供）获取这些feed后解析其内容并生成易于阅读的内容，随后通知订阅者内容已经更新。\n- 订阅者得到阅读器提供的清单选择自己感兴趣的内容阅读。\n\n这个过程看起来简单，但这中间又有以下几个问题：\n\n- 创作者不一定会提供feed。\n- Rss订阅工具一般由第三方的企业实现，它们会像爬虫一样（或者说就是爬虫）定时获取网站的feed。而使用服务器是有成本的。\n- 对订阅者的要求，订阅者需要将自己希望阅读的内容加入到订阅工具中。而获取feed对于很多订阅者来说是个难题。当然，浏览器插件一定程度上能解决一部分这个问题。\n- 阅读器的颜值，可能是因为rss凉了很久了，现在遗留下来的阅读器的ui都是一言难尽。\n- 阅读器的跨平台，移动设备近几年才普及开来，而rss在此之前就凉了。因此很少有好的rss跨平台解决方案。\n\n综上，我希望能有一款产品能完美完成我的Rss订阅问题。为何我要如此执着于Rss呢？\n\n- Rss意味着我可以自己选择要看什么，不看什么，而不是被现代的推荐机制牵着鼻子走。\n- Rss意味着我可以第一时间得到更新，而不是等到有人推送，或是选择性的推送，抑或是干脆得不到通知。\n- 好的Rss阅读工具意味着我可以舒服的阅读我想要阅读的内容，甚至可以让内容经过进一步处理后再阅读\n- 好的Rss阅读工具意味着我可以随时随地收到更新，并且在任意设备上进行阅读。\n\n## 实现\n\n接下来讨论下具体的实现。\n\n### 订阅源\n\n关于订阅源，[RssHub](https://docs.rsshub.app/)项目提供了不少有趣的订阅源。\n\n然后是对于一些不直接提供feed的网站，例如我想订阅B站某位up主的更新。[irreader](http://irreader.fatecore.com/)提供了一种不错的思路。让用户手动选择自己想要订阅的区块后，通过网页规则的匹配生成一个订阅规则（像是一种非xml格式的feed）。\n\n### 订阅器\n\n这里的订阅器指定时获取feed的工具。前面提到了部署服务器软件来定时获取feed的做法，除了服务器端的软件外，在用户本地进行同步也是一种办法。\n\n关于定时获取feed，当然原则上是越频繁越好啦，但也不能使劲的访问，搞成压力测试了。所以关于更新的频率，可以用算法优化优化。\n\n然后就是feed的判定，订阅器应当有能力判断获取的feed中是否有更新内容，以往的内容是否失效，哪些内容应当被加入数据库，哪些应当从数据库中去除。\n\n### 阅读器\n\n说到阅读，途径就多种多样了，随手枚举一下：网页，win客户端，linux客户端，Android客户端，iPhone客户端，各种平板，微信小程序。\n\n阅读的方式也有讲究，可以让用户打开链接（调用本地浏览器），或为用户提供一个阅读器，或是其他方式。\n\n## 一种方案\n\n尝试提出一种方案来完成上述所有内容。\n\n向用户提供：\n\n- 各种格式的阅读器，包括网页端和微信小程序（写写前端），桌面客户端及平板客户端（qt跨平台完事），手机客户端（qt好像可以跨Android和ios）。\n\n- 订阅工具，与阅读器集成，支持\n  - 与RssHub接入\n  - 添加自定义feed\n  - 添加自定义非feed源\n\n在服务端（不是服务器端）提供：\n\n- feed获取工具，分为两类：\n  - 服务器端：记录用户的订阅要求后添加至数据库，获得新feed与旧feed对比后写入数据库\n  - 本地端：支持手动或定时获取feed，以本地方式保存数据\n- feed解析工具，将feed解析为：\n  - 链接：用户可通过自己的浏览器阅读源内容\n  - 内容：获取feed中的文本后，解析为便于阅读的格式，交由阅读器供用户阅读","slug":"自制Rss阅读器","published":1,"category":"Project","updated":"2021-12-24T11:43:50.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxlot1jr000g24ul50xthmbj","content":"<p>尝试自制了一个rss阅读器，现在还在开发中。</p>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p><code>Rss</code>：简单信息聚合。</p>\n<p>互联网使我们得以接触到广泛的信息，而我们往往希望自己关注的创作者（某个网站）有更新时，自己能第一个被通知。Rss便是为此而生。</p>\n<p>Rss的概念其实很简单。它的使用过程大致如下</p>\n<ul>\n<li>创作者使用工具生成一个xml格式的feed。</li>\n<li>Rss订阅工具（一般是第三方提供）获取这些feed后解析其内容并生成易于阅读的内容，随后通知订阅者内容已经更新。</li>\n<li>订阅者得到阅读器提供的清单选择自己感兴趣的内容阅读。</li>\n</ul>\n<p>这个过程看起来简单，但这中间又有以下几个问题：</p>\n<ul>\n<li>创作者不一定会提供feed。</li>\n<li>Rss订阅工具一般由第三方的企业实现，它们会像爬虫一样（或者说就是爬虫）定时获取网站的feed。而使用服务器是有成本的。</li>\n<li>对订阅者的要求，订阅者需要将自己希望阅读的内容加入到订阅工具中。而获取feed对于很多订阅者来说是个难题。当然，浏览器插件一定程度上能解决一部分这个问题。</li>\n<li>阅读器的颜值，可能是因为rss凉了很久了，现在遗留下来的阅读器的ui都是一言难尽。</li>\n<li>阅读器的跨平台，移动设备近几年才普及开来，而rss在此之前就凉了。因此很少有好的rss跨平台解决方案。</li>\n</ul>\n<p>综上，我希望能有一款产品能完美完成我的Rss订阅问题。为何我要如此执着于Rss呢？</p>\n<ul>\n<li>Rss意味着我可以自己选择要看什么，不看什么，而不是被现代的推荐机制牵着鼻子走。</li>\n<li>Rss意味着我可以第一时间得到更新，而不是等到有人推送，或是选择性的推送，抑或是干脆得不到通知。</li>\n<li>好的Rss阅读工具意味着我可以舒服的阅读我想要阅读的内容，甚至可以让内容经过进一步处理后再阅读</li>\n<li>好的Rss阅读工具意味着我可以随时随地收到更新，并且在任意设备上进行阅读。</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>接下来讨论下具体的实现。</p>\n<h3 id=\"订阅源\"><a href=\"#订阅源\" class=\"headerlink\" title=\"订阅源\"></a>订阅源</h3><p>关于订阅源，<a href=\"https://docs.rsshub.app/\">RssHub</a>项目提供了不少有趣的订阅源。</p>\n<p>然后是对于一些不直接提供feed的网站，例如我想订阅B站某位up主的更新。<a href=\"http://irreader.fatecore.com/\">irreader</a>提供了一种不错的思路。让用户手动选择自己想要订阅的区块后，通过网页规则的匹配生成一个订阅规则（像是一种非xml格式的feed）。</p>\n<h3 id=\"订阅器\"><a href=\"#订阅器\" class=\"headerlink\" title=\"订阅器\"></a>订阅器</h3><p>这里的订阅器指定时获取feed的工具。前面提到了部署服务器软件来定时获取feed的做法，除了服务器端的软件外，在用户本地进行同步也是一种办法。</p>\n<p>关于定时获取feed，当然原则上是越频繁越好啦，但也不能使劲的访问，搞成压力测试了。所以关于更新的频率，可以用算法优化优化。</p>\n<p>然后就是feed的判定，订阅器应当有能力判断获取的feed中是否有更新内容，以往的内容是否失效，哪些内容应当被加入数据库，哪些应当从数据库中去除。</p>\n<h3 id=\"阅读器\"><a href=\"#阅读器\" class=\"headerlink\" title=\"阅读器\"></a>阅读器</h3><p>说到阅读，途径就多种多样了，随手枚举一下：网页，win客户端，linux客户端，Android客户端，iPhone客户端，各种平板，微信小程序。</p>\n<p>阅读的方式也有讲究，可以让用户打开链接（调用本地浏览器），或为用户提供一个阅读器，或是其他方式。</p>\n<h2 id=\"一种方案\"><a href=\"#一种方案\" class=\"headerlink\" title=\"一种方案\"></a>一种方案</h2><p>尝试提出一种方案来完成上述所有内容。</p>\n<p>向用户提供：</p>\n<ul>\n<li><p>各种格式的阅读器，包括网页端和微信小程序（写写前端），桌面客户端及平板客户端（qt跨平台完事），手机客户端（qt好像可以跨Android和ios）。</p>\n</li>\n<li><p>订阅工具，与阅读器集成，支持</p>\n<ul>\n<li>与RssHub接入</li>\n<li>添加自定义feed</li>\n<li>添加自定义非feed源</li>\n</ul>\n</li>\n</ul>\n<p>在服务端（不是服务器端）提供：</p>\n<ul>\n<li>feed获取工具，分为两类：<ul>\n<li>服务器端：记录用户的订阅要求后添加至数据库，获得新feed与旧feed对比后写入数据库</li>\n<li>本地端：支持手动或定时获取feed，以本地方式保存数据</li>\n</ul>\n</li>\n<li>feed解析工具，将feed解析为：<ul>\n<li>链接：用户可通过自己的浏览器阅读源内容</li>\n<li>内容：获取feed中的文本后，解析为便于阅读的格式，交由阅读器供用户阅读</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<p>尝试自制了一个rss阅读器，现在还在开发中。</p>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p><code>Rss</code>：简单信息聚合。</p>\n<p>互联网使我们得以接触到广泛的信息，而我们往往希望自己关注的创作者（某个网站）有更新时，自己能第一个被通知。Rss便是为此而生。</p>\n<p>Rss的概念其实很简单。它的使用过程大致如下</p>\n<ul>\n<li>创作者使用工具生成一个xml格式的feed。</li>\n<li>Rss订阅工具（一般是第三方提供）获取这些feed后解析其内容并生成易于阅读的内容，随后通知订阅者内容已经更新。</li>\n<li>订阅者得到阅读器提供的清单选择自己感兴趣的内容阅读。</li>\n</ul>\n<p>这个过程看起来简单，但这中间又有以下几个问题：</p>\n<ul>\n<li>创作者不一定会提供feed。</li>\n<li>Rss订阅工具一般由第三方的企业实现，它们会像爬虫一样（或者说就是爬虫）定时获取网站的feed。而使用服务器是有成本的。</li>\n<li>对订阅者的要求，订阅者需要将自己希望阅读的内容加入到订阅工具中。而获取feed对于很多订阅者来说是个难题。当然，浏览器插件一定程度上能解决一部分这个问题。</li>\n<li>阅读器的颜值，可能是因为rss凉了很久了，现在遗留下来的阅读器的ui都是一言难尽。</li>\n<li>阅读器的跨平台，移动设备近几年才普及开来，而rss在此之前就凉了。因此很少有好的rss跨平台解决方案。</li>\n</ul>\n<p>综上，我希望能有一款产品能完美完成我的Rss订阅问题。为何我要如此执着于Rss呢？</p>\n<ul>\n<li>Rss意味着我可以自己选择要看什么，不看什么，而不是被现代的推荐机制牵着鼻子走。</li>\n<li>Rss意味着我可以第一时间得到更新，而不是等到有人推送，或是选择性的推送，抑或是干脆得不到通知。</li>\n<li>好的Rss阅读工具意味着我可以舒服的阅读我想要阅读的内容，甚至可以让内容经过进一步处理后再阅读</li>\n<li>好的Rss阅读工具意味着我可以随时随地收到更新，并且在任意设备上进行阅读。</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>接下来讨论下具体的实现。</p>\n<h3 id=\"订阅源\"><a href=\"#订阅源\" class=\"headerlink\" title=\"订阅源\"></a>订阅源</h3><p>关于订阅源，<a href=\"https://docs.rsshub.app/\">RssHub</a>项目提供了不少有趣的订阅源。</p>\n<p>然后是对于一些不直接提供feed的网站，例如我想订阅B站某位up主的更新。<a href=\"http://irreader.fatecore.com/\">irreader</a>提供了一种不错的思路。让用户手动选择自己想要订阅的区块后，通过网页规则的匹配生成一个订阅规则（像是一种非xml格式的feed）。</p>\n<h3 id=\"订阅器\"><a href=\"#订阅器\" class=\"headerlink\" title=\"订阅器\"></a>订阅器</h3><p>这里的订阅器指定时获取feed的工具。前面提到了部署服务器软件来定时获取feed的做法，除了服务器端的软件外，在用户本地进行同步也是一种办法。</p>\n<p>关于定时获取feed，当然原则上是越频繁越好啦，但也不能使劲的访问，搞成压力测试了。所以关于更新的频率，可以用算法优化优化。</p>\n<p>然后就是feed的判定，订阅器应当有能力判断获取的feed中是否有更新内容，以往的内容是否失效，哪些内容应当被加入数据库，哪些应当从数据库中去除。</p>\n<h3 id=\"阅读器\"><a href=\"#阅读器\" class=\"headerlink\" title=\"阅读器\"></a>阅读器</h3><p>说到阅读，途径就多种多样了，随手枚举一下：网页，win客户端，linux客户端，Android客户端，iPhone客户端，各种平板，微信小程序。</p>\n<p>阅读的方式也有讲究，可以让用户打开链接（调用本地浏览器），或为用户提供一个阅读器，或是其他方式。</p>\n<h2 id=\"一种方案\"><a href=\"#一种方案\" class=\"headerlink\" title=\"一种方案\"></a>一种方案</h2><p>尝试提出一种方案来完成上述所有内容。</p>\n<p>向用户提供：</p>\n<ul>\n<li><p>各种格式的阅读器，包括网页端和微信小程序（写写前端），桌面客户端及平板客户端（qt跨平台完事），手机客户端（qt好像可以跨Android和ios）。</p>\n</li>\n<li><p>订阅工具，与阅读器集成，支持</p>\n<ul>\n<li>与RssHub接入</li>\n<li>添加自定义feed</li>\n<li>添加自定义非feed源</li>\n</ul>\n</li>\n</ul>\n<p>在服务端（不是服务器端）提供：</p>\n<ul>\n<li>feed获取工具，分为两类：<ul>\n<li>服务器端：记录用户的订阅要求后添加至数据库，获得新feed与旧feed对比后写入数据库</li>\n<li>本地端：支持手动或定时获取feed，以本地方式保存数据</li>\n</ul>\n</li>\n<li>feed解析工具，将feed解析为：<ul>\n<li>链接：用户可通过自己的浏览器阅读源内容</li>\n<li>内容：获取feed中的文本后，解析为便于阅读的格式，交由阅读器供用户阅读</li>\n</ul>\n</li>\n</ul>\n"},{"author":"kawhicurry","title":"修改2d球队的阵型","date":"2021-12-13T08:26:21.000Z","_content":"其实是很久之前写的了，现在拿过来发布一下\n\n# Formation after score.\n\n## Principle\n\nFormation files are saved in a separate folder with surfix .conf.\nIts form is like below:\n```\nFormation Static\n# move positions when playmode is BeforeKickOff or AfterGoal.\n1 Goalie     -49.0   0.0\n2 CenterBack -25.0  -7.0\n3 CenterBack -25.0   7.0\n4 SideBack   -25.0 -15.0\n5 SideBack   -25.0  15.0\n6 DefensiveHalf -20.0   0.0\n7 OffensiveHalf -10.0 -7.0\n8 OffensiveHalf -10.0  7.0\n9  SideForward  -5.0 -10.0\n10 SideForward -5.0  10.0\n11 CenterForward -2.0   0.0\n```\nThis is a static one,a dynamic one is like this:\n```\nFormation DelaunayTriangulation 2\nBegin Roles\n1 Goalie 0\n2 CenterBack -1\n3 CenterBack 2\n4 SideBack -1\n5 SideBack 4\n6 DefensiveHalf 0\n7 OffensiveHalf -1\n8 OffensiveHalf 7\n9 SideForward -1\n10 SideForward 9\n11 CenterForward 0\nEnd Roles\nBegin Samples 2 45\n----- 0 -----\nBall 0 0\n1 -50 0\n2 -13.63 -5.6\n3 -13.9 5.6\n4 -13.09 -16.13\n5 -13.01 14.51\n6 -11.18 -0.36\n7 -6.58 -8.2\n8 -7.57 8.29\n9 -1.26 -11.99\n10 -1.8 12.17\n11 11.72 0\n----- 1 -----\nBall -54.44 -20.73\n1 -50 0\n2 -47.41 -10.72\n3 -45.24 -5.14\n4 -50.02 -17.21\n5 -45.6 3.88\n6 -39.73 -9.8\n7 -40.83 -15.77\n8 -31.82 3.85\n9 -40.78 -29.47\n10 -27.69 21.98\n11 -14.9 -5.27\n```\nYou can figure out exact coordinate through a location picture in the user-manual.\n\nIn the `strategy.cpp` ,formation files was first read like this:\n```cpp\nconst std::string Strategy::BEFORE_KICK_OFF_CONF = \"before-kick-off.conf\";\nconst std::string Strategy::NORMAL_FORMATION_CONF = \"normal-formation.conf\";\n```\n\nThen,a function named `read()` will check whether formation files is available:\n```cpp\nbool\nStrategy::read( const std::string & formation_dir )\n{\n    static bool s_initialized = false;\n\n    if ( s_initialized )\n    {\n        std::cerr << __FILE__ << ' ' << __LINE__ << \": already initialized.\"\n                  << std::endl;\n        return false;\n    }\n    std::string configpath = formation_dir;\n    if ( ! configpath.empty()\n         && configpath[ configpath.length() - 1 ] != '/' )\n    {\n        configpath += '/';\n    }\n\n    // before kick off\n    M_before_kick_off_formation = readFormation( configpath + BEFORE_KICK_OFF_CONF );\n    if ( ! M_before_kick_off_formation )\n    {\n        std::cerr << \"Failed to read before_kick_off formation\" << std::endl;\n        return false;\n    }\n\n    //...\n\n    s_initialized = true;\n    return true;\n```\n\nAfter that,`getFormation()` will determine which formation to apply according to the worldmode.Mainly the `wm.gameMode().type()` and `wm.gameMode().side()`\n```cpp\n    //\n    // opponent indirect free kick\n    //\n    if ( ( wm.gameMode().type() == GameMode::BackPass_\n           && wm.gameMode().side() == wm.ourSide() )\n         || ( wm.gameMode().type() == GameMode::IndFreeKick_\n              && wm.gameMode().side() == wm.theirSide() ) )\n    {\n        return M_indirect_freekick_opp_formation;\n    }\n```\n\n## Operation\n\n1. add formation file `celebrate-1-L.conf` and `celebrate-1-R.conf`\n```\nFormation Static\n# ---------------------------------------------------------\n# move positions when playmode is AfterGoal.\n1 Goalie     -50.0   0.0\n2 CenterBack -45.0  0.0\n3 CenterBack -40.0   0.0\n4 SideBack   -35.0  0.0\n5 SideBack   -30.0  0.0\n6 DefensiveHalf -25.0   0.0\n7 OffensiveHalf -20.0  0.0\n8 OffensiveHalf -15.0  0.0\n9  SideForward  -10.0  0.0\n10 SideForward -5.0  0.0\n11 CenterForward -1.0   0.0\n# ---------------------------------------------------------\n```\n\n2. add formation object in `strategy.cpp` and `strategy.h`\n```cpp\n    //celebrate formation\n    static const std::string CELEBRATE_1_L_FORMATION_CONF;\n\n    //celebrate formation\n    rcsc::Formation::Ptr M_Celebrate_1_L_formation;\n```\n\n3. add logistic judge in functions\n```cpp\n//in read()\n    M_Celebrate_1_L_formation = readFormation( configpath + CELEBRATE_1_L_FORMATION_CONF);\n    if ( ! M_indirect_freekick_our_formation )\n    {\n        std::cerr << \"Failed to read celebrate-1-L-formation\" << std::endl;\n        return false;\n    }\n//in getFormation()\n    if (wm.gameMode().type() == GameMode::AfterGoal_ && wm.gameMode().side() == wm.ourSide())\n    {\n        if (wm.time().stopped() <= 20)\n        {\n            if (wm.ourSide() == LEFT)\n                return M_Celebrate_1_L_formation;\n            else\n                return M_Celebrate_1_R_formation;\n        }\n        if (wm.time().stopped() <= 40)\n        {\n        }\n    }\n```\nYou can change your formation at most twice according to rules.So a empty if is left.\nNotice: use wm.time().stopped() to make sure formation get normally in time\n\n\n\n\n\n\n","source":"_posts/Project/修改2d球队的阵型.md","raw":"---\nauthor: kawhicurry\ntitle: 修改2d球队的阵型\ncategories:\n  - Project\ntags: apollo\ndate: 2021-12-13 16:26:21\n---\n其实是很久之前写的了，现在拿过来发布一下\n\n# Formation after score.\n\n## Principle\n\nFormation files are saved in a separate folder with surfix .conf.\nIts form is like below:\n```\nFormation Static\n# move positions when playmode is BeforeKickOff or AfterGoal.\n1 Goalie     -49.0   0.0\n2 CenterBack -25.0  -7.0\n3 CenterBack -25.0   7.0\n4 SideBack   -25.0 -15.0\n5 SideBack   -25.0  15.0\n6 DefensiveHalf -20.0   0.0\n7 OffensiveHalf -10.0 -7.0\n8 OffensiveHalf -10.0  7.0\n9  SideForward  -5.0 -10.0\n10 SideForward -5.0  10.0\n11 CenterForward -2.0   0.0\n```\nThis is a static one,a dynamic one is like this:\n```\nFormation DelaunayTriangulation 2\nBegin Roles\n1 Goalie 0\n2 CenterBack -1\n3 CenterBack 2\n4 SideBack -1\n5 SideBack 4\n6 DefensiveHalf 0\n7 OffensiveHalf -1\n8 OffensiveHalf 7\n9 SideForward -1\n10 SideForward 9\n11 CenterForward 0\nEnd Roles\nBegin Samples 2 45\n----- 0 -----\nBall 0 0\n1 -50 0\n2 -13.63 -5.6\n3 -13.9 5.6\n4 -13.09 -16.13\n5 -13.01 14.51\n6 -11.18 -0.36\n7 -6.58 -8.2\n8 -7.57 8.29\n9 -1.26 -11.99\n10 -1.8 12.17\n11 11.72 0\n----- 1 -----\nBall -54.44 -20.73\n1 -50 0\n2 -47.41 -10.72\n3 -45.24 -5.14\n4 -50.02 -17.21\n5 -45.6 3.88\n6 -39.73 -9.8\n7 -40.83 -15.77\n8 -31.82 3.85\n9 -40.78 -29.47\n10 -27.69 21.98\n11 -14.9 -5.27\n```\nYou can figure out exact coordinate through a location picture in the user-manual.\n\nIn the `strategy.cpp` ,formation files was first read like this:\n```cpp\nconst std::string Strategy::BEFORE_KICK_OFF_CONF = \"before-kick-off.conf\";\nconst std::string Strategy::NORMAL_FORMATION_CONF = \"normal-formation.conf\";\n```\n\nThen,a function named `read()` will check whether formation files is available:\n```cpp\nbool\nStrategy::read( const std::string & formation_dir )\n{\n    static bool s_initialized = false;\n\n    if ( s_initialized )\n    {\n        std::cerr << __FILE__ << ' ' << __LINE__ << \": already initialized.\"\n                  << std::endl;\n        return false;\n    }\n    std::string configpath = formation_dir;\n    if ( ! configpath.empty()\n         && configpath[ configpath.length() - 1 ] != '/' )\n    {\n        configpath += '/';\n    }\n\n    // before kick off\n    M_before_kick_off_formation = readFormation( configpath + BEFORE_KICK_OFF_CONF );\n    if ( ! M_before_kick_off_formation )\n    {\n        std::cerr << \"Failed to read before_kick_off formation\" << std::endl;\n        return false;\n    }\n\n    //...\n\n    s_initialized = true;\n    return true;\n```\n\nAfter that,`getFormation()` will determine which formation to apply according to the worldmode.Mainly the `wm.gameMode().type()` and `wm.gameMode().side()`\n```cpp\n    //\n    // opponent indirect free kick\n    //\n    if ( ( wm.gameMode().type() == GameMode::BackPass_\n           && wm.gameMode().side() == wm.ourSide() )\n         || ( wm.gameMode().type() == GameMode::IndFreeKick_\n              && wm.gameMode().side() == wm.theirSide() ) )\n    {\n        return M_indirect_freekick_opp_formation;\n    }\n```\n\n## Operation\n\n1. add formation file `celebrate-1-L.conf` and `celebrate-1-R.conf`\n```\nFormation Static\n# ---------------------------------------------------------\n# move positions when playmode is AfterGoal.\n1 Goalie     -50.0   0.0\n2 CenterBack -45.0  0.0\n3 CenterBack -40.0   0.0\n4 SideBack   -35.0  0.0\n5 SideBack   -30.0  0.0\n6 DefensiveHalf -25.0   0.0\n7 OffensiveHalf -20.0  0.0\n8 OffensiveHalf -15.0  0.0\n9  SideForward  -10.0  0.0\n10 SideForward -5.0  0.0\n11 CenterForward -1.0   0.0\n# ---------------------------------------------------------\n```\n\n2. add formation object in `strategy.cpp` and `strategy.h`\n```cpp\n    //celebrate formation\n    static const std::string CELEBRATE_1_L_FORMATION_CONF;\n\n    //celebrate formation\n    rcsc::Formation::Ptr M_Celebrate_1_L_formation;\n```\n\n3. add logistic judge in functions\n```cpp\n//in read()\n    M_Celebrate_1_L_formation = readFormation( configpath + CELEBRATE_1_L_FORMATION_CONF);\n    if ( ! M_indirect_freekick_our_formation )\n    {\n        std::cerr << \"Failed to read celebrate-1-L-formation\" << std::endl;\n        return false;\n    }\n//in getFormation()\n    if (wm.gameMode().type() == GameMode::AfterGoal_ && wm.gameMode().side() == wm.ourSide())\n    {\n        if (wm.time().stopped() <= 20)\n        {\n            if (wm.ourSide() == LEFT)\n                return M_Celebrate_1_L_formation;\n            else\n                return M_Celebrate_1_R_formation;\n        }\n        if (wm.time().stopped() <= 40)\n        {\n        }\n    }\n```\nYou can change your formation at most twice according to rules.So a empty if is left.\nNotice: use wm.time().stopped() to make sure formation get normally in time\n\n\n\n\n\n\n","slug":"修改2d球队的阵型","published":1,"category":"Project","updated":"2021-12-23T13:31:28.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxlot1jt000h24ulch9w8ksk","content":"<p>其实是很久之前写的了，现在拿过来发布一下</p>\n<h1 id=\"Formation-after-score\"><a href=\"#Formation-after-score\" class=\"headerlink\" title=\"Formation after score.\"></a>Formation after score.</h1><h2 id=\"Principle\"><a href=\"#Principle\" class=\"headerlink\" title=\"Principle\"></a>Principle</h2><p>Formation files are saved in a separate folder with surfix .conf.<br>Its form is like below:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Formation Static\n# move positions when playmode is BeforeKickOff or AfterGoal.\n1 Goalie     -49.0   0.0\n2 CenterBack -25.0  -7.0\n3 CenterBack -25.0   7.0\n4 SideBack   -25.0 -15.0\n5 SideBack   -25.0  15.0\n6 DefensiveHalf -20.0   0.0\n7 OffensiveHalf -10.0 -7.0\n8 OffensiveHalf -10.0  7.0\n9  SideForward  -5.0 -10.0\n10 SideForward -5.0  10.0\n11 CenterForward -2.0   0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>This is a static one,a dynamic one is like this:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Formation DelaunayTriangulation 2\nBegin Roles\n1 Goalie 0\n2 CenterBack -1\n3 CenterBack 2\n4 SideBack -1\n5 SideBack 4\n6 DefensiveHalf 0\n7 OffensiveHalf -1\n8 OffensiveHalf 7\n9 SideForward -1\n10 SideForward 9\n11 CenterForward 0\nEnd Roles\nBegin Samples 2 45\n----- 0 -----\nBall 0 0\n1 -50 0\n2 -13.63 -5.6\n3 -13.9 5.6\n4 -13.09 -16.13\n5 -13.01 14.51\n6 -11.18 -0.36\n7 -6.58 -8.2\n8 -7.57 8.29\n9 -1.26 -11.99\n10 -1.8 12.17\n11 11.72 0\n----- 1 -----\nBall -54.44 -20.73\n1 -50 0\n2 -47.41 -10.72\n3 -45.24 -5.14\n4 -50.02 -17.21\n5 -45.6 3.88\n6 -39.73 -9.8\n7 -40.83 -15.77\n8 -31.82 3.85\n9 -40.78 -29.47\n10 -27.69 21.98\n11 -14.9 -5.27<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>You can figure out exact coordinate through a location picture in the user-manual.</p>\n<p>In the <code>strategy.cpp</code> ,formation files was first read like this:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string Strategy<span class=\"token double-colon punctuation\">::</span>BEFORE_KICK_OFF_CONF <span class=\"token operator\">=</span> <span class=\"token string\">\"before-kick-off.conf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string Strategy<span class=\"token double-colon punctuation\">::</span>NORMAL_FORMATION_CONF <span class=\"token operator\">=</span> <span class=\"token string\">\"normal-formation.conf\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>Then,a function named <code>read()</code> will check whether formation files is available:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span>\n<span class=\"token class-name\">Strategy</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span> formation_dir <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> s_initialized <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> s_initialized <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">__FILE__</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">' '</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">__LINE__</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": already initialized.\"</span>\n                  <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    std<span class=\"token double-colon punctuation\">::</span>string configpath <span class=\"token operator\">=</span> formation_dir<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span> configpath<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">&amp;&amp;</span> configpath<span class=\"token punctuation\">[</span> configpath<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        configpath <span class=\"token operator\">+=</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// before kick off</span>\n    M_before_kick_off_formation <span class=\"token operator\">=</span> <span class=\"token function\">readFormation</span><span class=\"token punctuation\">(</span> configpath <span class=\"token operator\">+</span> BEFORE_KICK_OFF_CONF <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span> M_before_kick_off_formation <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Failed to read before_kick_off formation\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//...</span>\n\n    s_initialized <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>After that,<code>getFormation()</code> will determine which formation to apply according to the worldmode.Mainly the <code>wm.gameMode().type()</code> and <code>wm.gameMode().side()</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// opponent indirect free kick</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GameMode<span class=\"token double-colon punctuation\">::</span>BackPass_\n       <span class=\"token operator\">&amp;&amp;</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">side</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">ourSide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n     <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GameMode<span class=\"token double-colon punctuation\">::</span>IndFreeKick_\n          <span class=\"token operator\">&amp;&amp;</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">side</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">theirSide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> M_indirect_freekick_opp_formation<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Operation\"><a href=\"#Operation\" class=\"headerlink\" title=\"Operation\"></a>Operation</h2><ol>\n<li><p>add formation file <code>celebrate-1-L.conf</code> and <code>celebrate-1-R.conf</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Formation Static\n# ---------------------------------------------------------\n# move positions when playmode is AfterGoal.\n1 Goalie     -50.0   0.0\n2 CenterBack -45.0  0.0\n3 CenterBack -40.0   0.0\n4 SideBack   -35.0  0.0\n5 SideBack   -30.0  0.0\n6 DefensiveHalf -25.0   0.0\n7 OffensiveHalf -20.0  0.0\n8 OffensiveHalf -15.0  0.0\n9  SideForward  -10.0  0.0\n10 SideForward -5.0  0.0\n11 CenterForward -1.0   0.0\n# ---------------------------------------------------------<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>add formation object in <code>strategy.cpp</code> and <code>strategy.h</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//celebrate formation</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string CELEBRATE_1_L_FORMATION_CONF<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//celebrate formation</span>\nrcsc<span class=\"token double-colon punctuation\">::</span>Formation<span class=\"token double-colon punctuation\">::</span>Ptr M_Celebrate_1_L_formation<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>add logistic judge in functions</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//in read()</span>\n    M_Celebrate_1_L_formation <span class=\"token operator\">=</span> <span class=\"token function\">readFormation</span><span class=\"token punctuation\">(</span> configpath <span class=\"token operator\">+</span> CELEBRATE_1_L_FORMATION_CONF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span> M_indirect_freekick_our_formation <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Failed to read celebrate-1-L-formation\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//in getFormation()</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GameMode<span class=\"token double-colon punctuation\">::</span>AfterGoal_ <span class=\"token operator\">&amp;&amp;</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">side</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">ourSide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wm<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stopped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wm<span class=\"token punctuation\">.</span><span class=\"token function\">ourSide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> LEFT<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> M_Celebrate_1_L_formation<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                <span class=\"token keyword\">return</span> M_Celebrate_1_R_formation<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wm<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stopped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>You can change your formation at most twice according to rules.So a empty if is left.<br>Notice: use wm.time().stopped() to make sure formation get normally in time</p>\n</li>\n</ol>\n","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<p>其实是很久之前写的了，现在拿过来发布一下</p>\n<h1 id=\"Formation-after-score\"><a href=\"#Formation-after-score\" class=\"headerlink\" title=\"Formation after score.\"></a>Formation after score.</h1><h2 id=\"Principle\"><a href=\"#Principle\" class=\"headerlink\" title=\"Principle\"></a>Principle</h2><p>Formation files are saved in a separate folder with surfix .conf.<br>Its form is like below:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Formation Static\n# move positions when playmode is BeforeKickOff or AfterGoal.\n1 Goalie     -49.0   0.0\n2 CenterBack -25.0  -7.0\n3 CenterBack -25.0   7.0\n4 SideBack   -25.0 -15.0\n5 SideBack   -25.0  15.0\n6 DefensiveHalf -20.0   0.0\n7 OffensiveHalf -10.0 -7.0\n8 OffensiveHalf -10.0  7.0\n9  SideForward  -5.0 -10.0\n10 SideForward -5.0  10.0\n11 CenterForward -2.0   0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>This is a static one,a dynamic one is like this:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Formation DelaunayTriangulation 2\nBegin Roles\n1 Goalie 0\n2 CenterBack -1\n3 CenterBack 2\n4 SideBack -1\n5 SideBack 4\n6 DefensiveHalf 0\n7 OffensiveHalf -1\n8 OffensiveHalf 7\n9 SideForward -1\n10 SideForward 9\n11 CenterForward 0\nEnd Roles\nBegin Samples 2 45\n----- 0 -----\nBall 0 0\n1 -50 0\n2 -13.63 -5.6\n3 -13.9 5.6\n4 -13.09 -16.13\n5 -13.01 14.51\n6 -11.18 -0.36\n7 -6.58 -8.2\n8 -7.57 8.29\n9 -1.26 -11.99\n10 -1.8 12.17\n11 11.72 0\n----- 1 -----\nBall -54.44 -20.73\n1 -50 0\n2 -47.41 -10.72\n3 -45.24 -5.14\n4 -50.02 -17.21\n5 -45.6 3.88\n6 -39.73 -9.8\n7 -40.83 -15.77\n8 -31.82 3.85\n9 -40.78 -29.47\n10 -27.69 21.98\n11 -14.9 -5.27<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>You can figure out exact coordinate through a location picture in the user-manual.</p>\n<p>In the <code>strategy.cpp</code> ,formation files was first read like this:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string Strategy<span class=\"token double-colon punctuation\">::</span>BEFORE_KICK_OFF_CONF <span class=\"token operator\">=</span> <span class=\"token string\">\"before-kick-off.conf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string Strategy<span class=\"token double-colon punctuation\">::</span>NORMAL_FORMATION_CONF <span class=\"token operator\">=</span> <span class=\"token string\">\"normal-formation.conf\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>Then,a function named <code>read()</code> will check whether formation files is available:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span>\n<span class=\"token class-name\">Strategy</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span> formation_dir <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> s_initialized <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> s_initialized <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">__FILE__</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">' '</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">__LINE__</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": already initialized.\"</span>\n                  <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    std<span class=\"token double-colon punctuation\">::</span>string configpath <span class=\"token operator\">=</span> formation_dir<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span> configpath<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">&amp;&amp;</span> configpath<span class=\"token punctuation\">[</span> configpath<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        configpath <span class=\"token operator\">+=</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// before kick off</span>\n    M_before_kick_off_formation <span class=\"token operator\">=</span> <span class=\"token function\">readFormation</span><span class=\"token punctuation\">(</span> configpath <span class=\"token operator\">+</span> BEFORE_KICK_OFF_CONF <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span> M_before_kick_off_formation <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Failed to read before_kick_off formation\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//...</span>\n\n    s_initialized <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>After that,<code>getFormation()</code> will determine which formation to apply according to the worldmode.Mainly the <code>wm.gameMode().type()</code> and <code>wm.gameMode().side()</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// opponent indirect free kick</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GameMode<span class=\"token double-colon punctuation\">::</span>BackPass_\n       <span class=\"token operator\">&amp;&amp;</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">side</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">ourSide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n     <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GameMode<span class=\"token double-colon punctuation\">::</span>IndFreeKick_\n          <span class=\"token operator\">&amp;&amp;</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">side</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">theirSide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> M_indirect_freekick_opp_formation<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Operation\"><a href=\"#Operation\" class=\"headerlink\" title=\"Operation\"></a>Operation</h2><ol>\n<li><p>add formation file <code>celebrate-1-L.conf</code> and <code>celebrate-1-R.conf</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Formation Static\n# ---------------------------------------------------------\n# move positions when playmode is AfterGoal.\n1 Goalie     -50.0   0.0\n2 CenterBack -45.0  0.0\n3 CenterBack -40.0   0.0\n4 SideBack   -35.0  0.0\n5 SideBack   -30.0  0.0\n6 DefensiveHalf -25.0   0.0\n7 OffensiveHalf -20.0  0.0\n8 OffensiveHalf -15.0  0.0\n9  SideForward  -10.0  0.0\n10 SideForward -5.0  0.0\n11 CenterForward -1.0   0.0\n# ---------------------------------------------------------<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>add formation object in <code>strategy.cpp</code> and <code>strategy.h</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//celebrate formation</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string CELEBRATE_1_L_FORMATION_CONF<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//celebrate formation</span>\nrcsc<span class=\"token double-colon punctuation\">::</span>Formation<span class=\"token double-colon punctuation\">::</span>Ptr M_Celebrate_1_L_formation<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>add logistic judge in functions</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//in read()</span>\n    M_Celebrate_1_L_formation <span class=\"token operator\">=</span> <span class=\"token function\">readFormation</span><span class=\"token punctuation\">(</span> configpath <span class=\"token operator\">+</span> CELEBRATE_1_L_FORMATION_CONF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span> M_indirect_freekick_our_formation <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Failed to read celebrate-1-L-formation\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//in getFormation()</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> GameMode<span class=\"token double-colon punctuation\">::</span>AfterGoal_ <span class=\"token operator\">&amp;&amp;</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">gameMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">side</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> wm<span class=\"token punctuation\">.</span><span class=\"token function\">ourSide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wm<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stopped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wm<span class=\"token punctuation\">.</span><span class=\"token function\">ourSide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> LEFT<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> M_Celebrate_1_L_formation<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n                <span class=\"token keyword\">return</span> M_Celebrate_1_R_formation<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wm<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stopped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>You can change your formation at most twice according to rules.So a empty if is left.<br>Notice: use wm.time().stopped() to make sure formation get normally in time</p>\n</li>\n</ol>\n"},{"author":"kawhicurry","title":"Magic-Macro","date":"2021-11-07T12:28:58.000Z","_content":"\n# The magic of macro\n最近在写c，遇到了这样一段逻辑，要根据接受的字符串\n```\n# The magic of macro\n\n最近在写c，遇到了这样一段逻辑，根据要接受的字符串，比如`name=ubuntu`来在结构体mirror中找到对应的mirror.name进行赋值，一开始是这样设计的：\n\n```c\nstatic const char* PARA_LIST[MAX_ARG_NUM] = {\"name\", \"cmd\", \"arg\", \"url\", \"timeout\"};\n//然后对'='前的值与上述值匹配，得到一个id，如name的id为0\nswitch(i){\n    case 0:\n      if (para_len > MAX_NAME_LEN) {\n        printf(\"name too long!\");\n        return;\n      }\n      memcpy(mirror->name, parameter + 1, MAX_NAME_LEN);\n      break;\n    case 1:\n      //...\n    case 4:\n      //...  \n}\n//然后switch进行匹配，在switch中都需要先做长度判断，再给结构体mirror赋值\n```\n\n对于每个case来说，这样的事情都要做一遍，而其中除了struct中的元素不同之外，其他基本都完全一致（除了最后一个timeout），于是我就想简化这个过程。一开始，我想到了写n个不同的函数，这样我就可以在每个case中用一个函数替换，但仔细一想，这样还不是要给每个case写一个函数。这时候我想起了宏，上网查找一番后发现的宏的拼接功能。于是我写出了这个：\n\n```c\n#define set_mirror(the_mirror, element, parameter)            \\\n  {                                                           \\\n    if (!strcmp(#element, \"timeout\")) {                       \\\n      the_mirror.timeout_len = strlen(parameter);             \\\n    }                                                         \\\n    memset(the_mirror.element, 0, strlen(parameter) + 1);     \\\n    memcpy(the_mirror.element, parameter, sizeof(parameter)); \\\n  }\n```\n\n其中的`#element`,会讲element替换成字符串，而`##`可以将set_mirror的参数和后面的内容进行拼接（在后面的版本有示范）。上面这个版本已经可以替换赋值的功能了，但还没对长度进行考察。然后我脑子一抽，写了个`#define len_set_mirror` 其实就是上面`set_mirror`加一个参数，然后再调用`set_mirror`的宏。当时是记住了宏的一种“延迟”的机制，可以在有限次数内对宏进行一个嵌套。后面发现length可以直接从parameter获取，于是就将两个宏合并成了一个：\n\n```c\n#define set_mirror(p_mirror, element, parameter, id)               \\\n  do {                                                             \\\n    if (length(parameter) > MAX_##element##_LEN) {                 \\\n      printf(\"##element too long!\");                               \\\n      return 0;                                                    \\\n    }                                                              \\\n    if (!strcmp(#element, \"timeout\")) {                            \\\n      (p_mirror)->timeout_len = length(parameter);                 \\\n    }                                                              \\\n    memset((p_mirror)->element, '\\0', length(parameter) + 1);      \\\n    memcpy((p_mirror)->element, parameter, length(parameter) - 1); \\\n    ((p_mirror)->available) << id;                                 \\\n  } while (0)\n\n```\n\n这次成功将所有功能合并了，并且学到了用do...while(0)来提高宏的安全性（其实我也想到了用大括号的方法来避免，但确实do...while(0)是一个更好的方案。这种写法之后我只需在case中写两行：\n\n```c\n    case 0:\n      set_mirror(p_mirror, name, parameter, id);\n      break;//break还是老老实实写吧，方便set_mirror复用\n```\n\n其实在第一个宏之前，我还写了个在宏中构造变量来接受值的做法，但我发现完全没有必要，毕竟传递进来的值都应该可以被直接操作的（宏展开后直接获得变量）。由此也引出一条经验，大可不必在宏中定义新变量来处理数据。\n\n我对宏最大的印象就是文本替换，关于上面这段逻辑，switch还可以进一步优化。而对于整个c来说，宏是底层库的基础，我后面试图去实现一个strlen函数时，发现这玩意就是靠宏和汇编来实现的，而像c中的attribute，__VA_ARGS__(可变参数)，更有一片天地。甚至可以做逻辑运算，过于离谱了。\n\n结论：宏是魔法，这是我第一次真正近距离接触它，它真的是c的魔法。","source":"_posts/Language/Magic-Macro.md","raw":"---\nauthor: kawhicurry\ntitle: Magic-Macro\ncategories:\n- Language\ndate: 2021-11-07 20:28:58\ntags: C\n---\n\n# The magic of macro\n最近在写c，遇到了这样一段逻辑，要根据接受的字符串\n```\n# The magic of macro\n\n最近在写c，遇到了这样一段逻辑，根据要接受的字符串，比如`name=ubuntu`来在结构体mirror中找到对应的mirror.name进行赋值，一开始是这样设计的：\n\n```c\nstatic const char* PARA_LIST[MAX_ARG_NUM] = {\"name\", \"cmd\", \"arg\", \"url\", \"timeout\"};\n//然后对'='前的值与上述值匹配，得到一个id，如name的id为0\nswitch(i){\n    case 0:\n      if (para_len > MAX_NAME_LEN) {\n        printf(\"name too long!\");\n        return;\n      }\n      memcpy(mirror->name, parameter + 1, MAX_NAME_LEN);\n      break;\n    case 1:\n      //...\n    case 4:\n      //...  \n}\n//然后switch进行匹配，在switch中都需要先做长度判断，再给结构体mirror赋值\n```\n\n对于每个case来说，这样的事情都要做一遍，而其中除了struct中的元素不同之外，其他基本都完全一致（除了最后一个timeout），于是我就想简化这个过程。一开始，我想到了写n个不同的函数，这样我就可以在每个case中用一个函数替换，但仔细一想，这样还不是要给每个case写一个函数。这时候我想起了宏，上网查找一番后发现的宏的拼接功能。于是我写出了这个：\n\n```c\n#define set_mirror(the_mirror, element, parameter)            \\\n  {                                                           \\\n    if (!strcmp(#element, \"timeout\")) {                       \\\n      the_mirror.timeout_len = strlen(parameter);             \\\n    }                                                         \\\n    memset(the_mirror.element, 0, strlen(parameter) + 1);     \\\n    memcpy(the_mirror.element, parameter, sizeof(parameter)); \\\n  }\n```\n\n其中的`#element`,会讲element替换成字符串，而`##`可以将set_mirror的参数和后面的内容进行拼接（在后面的版本有示范）。上面这个版本已经可以替换赋值的功能了，但还没对长度进行考察。然后我脑子一抽，写了个`#define len_set_mirror` 其实就是上面`set_mirror`加一个参数，然后再调用`set_mirror`的宏。当时是记住了宏的一种“延迟”的机制，可以在有限次数内对宏进行一个嵌套。后面发现length可以直接从parameter获取，于是就将两个宏合并成了一个：\n\n```c\n#define set_mirror(p_mirror, element, parameter, id)               \\\n  do {                                                             \\\n    if (length(parameter) > MAX_##element##_LEN) {                 \\\n      printf(\"##element too long!\");                               \\\n      return 0;                                                    \\\n    }                                                              \\\n    if (!strcmp(#element, \"timeout\")) {                            \\\n      (p_mirror)->timeout_len = length(parameter);                 \\\n    }                                                              \\\n    memset((p_mirror)->element, '\\0', length(parameter) + 1);      \\\n    memcpy((p_mirror)->element, parameter, length(parameter) - 1); \\\n    ((p_mirror)->available) << id;                                 \\\n  } while (0)\n\n```\n\n这次成功将所有功能合并了，并且学到了用do...while(0)来提高宏的安全性（其实我也想到了用大括号的方法来避免，但确实do...while(0)是一个更好的方案。这种写法之后我只需在case中写两行：\n\n```c\n    case 0:\n      set_mirror(p_mirror, name, parameter, id);\n      break;//break还是老老实实写吧，方便set_mirror复用\n```\n\n其实在第一个宏之前，我还写了个在宏中构造变量来接受值的做法，但我发现完全没有必要，毕竟传递进来的值都应该可以被直接操作的（宏展开后直接获得变量）。由此也引出一条经验，大可不必在宏中定义新变量来处理数据。\n\n我对宏最大的印象就是文本替换，关于上面这段逻辑，switch还可以进一步优化。而对于整个c来说，宏是底层库的基础，我后面试图去实现一个strlen函数时，发现这玩意就是靠宏和汇编来实现的，而像c中的attribute，__VA_ARGS__(可变参数)，更有一片天地。甚至可以做逻辑运算，过于离谱了。\n\n结论：宏是魔法，这是我第一次真正近距离接触它，它真的是c的魔法。","slug":"Magic-Macro","published":1,"category":"Language","updated":"2021-12-23T13:29:42.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxlot1jv000l24ul1lsb1ocd","content":"<h1 id=\"The-magic-of-macro\"><a href=\"#The-magic-of-macro\" class=\"headerlink\" title=\"The magic of macro\"></a>The magic of macro</h1><p>最近在写c，遇到了这样一段逻辑，要根据接受的字符串</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># The magic of macro\n\n最近在写c，遇到了这样一段逻辑，根据要接受的字符串，比如&#96;name&#x3D;ubuntu&#96;来在结构体mirror中找到对应的mirror.name进行赋值，一开始是这样设计的：\n\n&#96;&#96;&#96;c\nstatic const char* PARA_LIST[MAX_ARG_NUM] &#x3D; &#123;&quot;name&quot;, &quot;cmd&quot;, &quot;arg&quot;, &quot;url&quot;, &quot;timeout&quot;&#125;;\n&#x2F;&#x2F;然后对&#39;&#x3D;&#39;前的值与上述值匹配，得到一个id，如name的id为0\nswitch(i)&#123;\n    case 0:\n      if (para_len &gt; MAX_NAME_LEN) &#123;\n        printf(&quot;name too long!&quot;);\n        return;\n      &#125;\n      memcpy(mirror-&gt;name, parameter + 1, MAX_NAME_LEN);\n      break;\n    case 1:\n      &#x2F;&#x2F;...\n    case 4:\n      &#x2F;&#x2F;...  \n&#125;\n&#x2F;&#x2F;然后switch进行匹配，在switch中都需要先做长度判断，再给结构体mirror赋值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于每个case来说，这样的事情都要做一遍，而其中除了struct中的元素不同之外，其他基本都完全一致（除了最后一个timeout），于是我就想简化这个过程。一开始，我想到了写n个不同的函数，这样我就可以在每个case中用一个函数替换，但仔细一想，这样还不是要给每个case写一个函数。这时候我想起了宏，上网查找一番后发现的宏的拼接功能。于是我写出了这个：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">set_mirror</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>the_mirror<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">)</span>            </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token punctuation\">&#123;</span>                                                           </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>#element<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"timeout\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                       </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\">the_mirror<span class=\"token punctuation\">.</span>timeout_len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span>                                                         </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>the_mirror<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>the_mirror<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中的<code>#element</code>,会讲element替换成字符串，而<code>##</code>可以将set_mirror的参数和后面的内容进行拼接（在后面的版本有示范）。上面这个版本已经可以替换赋值的功能了，但还没对长度进行考察。然后我脑子一抽，写了个<code>#define len_set_mirror</code> 其实就是上面<code>set_mirror</code>加一个参数，然后再调用<code>set_mirror</code>的宏。当时是记住了宏的一种“延迟”的机制，可以在有限次数内对宏进行一个嵌套。后面发现length可以直接从parameter获取，于是就将两个宏合并成了一个：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">set_mirror</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>               </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>                                                             </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> MAX_</span><span class=\"token punctuation\">##</span><span class=\"token expression\">element</span><span class=\"token punctuation\">##</span><span class=\"token expression\">_LEN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                 </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"##element too long!\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                               </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\"><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                                                    </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span>                                                              </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>#element<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"timeout\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                            </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\"><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>timeout_len <span class=\"token operator\">=</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span>                                                              </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>element<span class=\"token punctuation\">,</span> </span><span class=\"token string\">'\\0'</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>element<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">,</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>available<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> id<span class=\"token punctuation\">;</span>                                 </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这次成功将所有功能合并了，并且学到了用do…while(0)来提高宏的安全性（其实我也想到了用大括号的方法来避免，但确实do…while(0)是一个更好的方案。这种写法之后我只需在case中写两行：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n  <span class=\"token function\">set_mirror</span><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//break还是老老实实写吧，方便set_mirror复用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>其实在第一个宏之前，我还写了个在宏中构造变量来接受值的做法，但我发现完全没有必要，毕竟传递进来的值都应该可以被直接操作的（宏展开后直接获得变量）。由此也引出一条经验，大可不必在宏中定义新变量来处理数据。</p>\n<p>我对宏最大的印象就是文本替换，关于上面这段逻辑，switch还可以进一步优化。而对于整个c来说，宏是底层库的基础，我后面试图去实现一个strlen函数时，发现这玩意就是靠宏和汇编来实现的，而像c中的attribute，<strong>VA_ARGS</strong>(可变参数)，更有一片天地。甚至可以做逻辑运算，过于离谱了。</p>\n<p>结论：宏是魔法，这是我第一次真正近距离接触它，它真的是c的魔法。</p>\n","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<h1 id=\"The-magic-of-macro\"><a href=\"#The-magic-of-macro\" class=\"headerlink\" title=\"The magic of macro\"></a>The magic of macro</h1><p>最近在写c，遇到了这样一段逻辑，要根据接受的字符串</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># The magic of macro\n\n最近在写c，遇到了这样一段逻辑，根据要接受的字符串，比如&#96;name&#x3D;ubuntu&#96;来在结构体mirror中找到对应的mirror.name进行赋值，一开始是这样设计的：\n\n&#96;&#96;&#96;c\nstatic const char* PARA_LIST[MAX_ARG_NUM] &#x3D; &#123;&quot;name&quot;, &quot;cmd&quot;, &quot;arg&quot;, &quot;url&quot;, &quot;timeout&quot;&#125;;\n&#x2F;&#x2F;然后对&#39;&#x3D;&#39;前的值与上述值匹配，得到一个id，如name的id为0\nswitch(i)&#123;\n    case 0:\n      if (para_len &gt; MAX_NAME_LEN) &#123;\n        printf(&quot;name too long!&quot;);\n        return;\n      &#125;\n      memcpy(mirror-&gt;name, parameter + 1, MAX_NAME_LEN);\n      break;\n    case 1:\n      &#x2F;&#x2F;...\n    case 4:\n      &#x2F;&#x2F;...  \n&#125;\n&#x2F;&#x2F;然后switch进行匹配，在switch中都需要先做长度判断，再给结构体mirror赋值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于每个case来说，这样的事情都要做一遍，而其中除了struct中的元素不同之外，其他基本都完全一致（除了最后一个timeout），于是我就想简化这个过程。一开始，我想到了写n个不同的函数，这样我就可以在每个case中用一个函数替换，但仔细一想，这样还不是要给每个case写一个函数。这时候我想起了宏，上网查找一番后发现的宏的拼接功能。于是我写出了这个：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">set_mirror</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>the_mirror<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">)</span>            </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token punctuation\">&#123;</span>                                                           </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>#element<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"timeout\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                       </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\">the_mirror<span class=\"token punctuation\">.</span>timeout_len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span>                                                         </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>the_mirror<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>the_mirror<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中的<code>#element</code>,会讲element替换成字符串，而<code>##</code>可以将set_mirror的参数和后面的内容进行拼接（在后面的版本有示范）。上面这个版本已经可以替换赋值的功能了，但还没对长度进行考察。然后我脑子一抽，写了个<code>#define len_set_mirror</code> 其实就是上面<code>set_mirror</code>加一个参数，然后再调用<code>set_mirror</code>的宏。当时是记住了宏的一种“延迟”的机制，可以在有限次数内对宏进行一个嵌套。后面发现length可以直接从parameter获取，于是就将两个宏合并成了一个：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">set_mirror</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>               </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>                                                             </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> MAX_</span><span class=\"token punctuation\">##</span><span class=\"token expression\">element</span><span class=\"token punctuation\">##</span><span class=\"token expression\">_LEN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                 </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"##element too long!\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                               </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\"><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                                                    </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span>                                                              </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>#element<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"timeout\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                            </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\"><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>timeout_len <span class=\"token operator\">=</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span>                                                              </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>element<span class=\"token punctuation\">,</span> </span><span class=\"token string\">'\\0'</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>element<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">,</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>available<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> id<span class=\"token punctuation\">;</span>                                 </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这次成功将所有功能合并了，并且学到了用do…while(0)来提高宏的安全性（其实我也想到了用大括号的方法来避免，但确实do…while(0)是一个更好的方案。这种写法之后我只需在case中写两行：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n  <span class=\"token function\">set_mirror</span><span class=\"token punctuation\">(</span>p_mirror<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//break还是老老实实写吧，方便set_mirror复用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>其实在第一个宏之前，我还写了个在宏中构造变量来接受值的做法，但我发现完全没有必要，毕竟传递进来的值都应该可以被直接操作的（宏展开后直接获得变量）。由此也引出一条经验，大可不必在宏中定义新变量来处理数据。</p>\n<p>我对宏最大的印象就是文本替换，关于上面这段逻辑，switch还可以进一步优化。而对于整个c来说，宏是底层库的基础，我后面试图去实现一个strlen函数时，发现这玩意就是靠宏和汇编来实现的，而像c中的attribute，<strong>VA_ARGS</strong>(可变参数)，更有一片天地。甚至可以做逻辑运算，过于离谱了。</p>\n<p>结论：宏是魔法，这是我第一次真正近距离接触它，它真的是c的魔法。</p>\n"},{"author":"kawhicurry","title":"给Apollo的面对对象课","cover":true,"date":"2021-11-21T11:21:13.000Z","_content":"\n# 课前提醒（给我自己的）\n\n1. 打开vscode，准备源码\n2. 准备好使用g++\n\n# 多文件编程\n\n## Why\n\n非结构化与结构化：`goto`满天飞的后果\n\n## How\n\n```cpp\n//fun.h\nvoid func();\n\n//fun.cpp\n#include \"fun.h\"\nvoid func(){\n\tstd::cout<<\"hello\"<<std::endl;//?\n}\n\n//main.cpp\n#include <stdio.h>\n#inlcude \"fun.h\"\nusing namespace std;\nint main(){\n    printf(\"hi\\n\");\n\tfunc();\n\treturn 0;\n}\n```\n\n**提问**：`iostream`头文件应该放在哪？\n\n```cpp\n//fun.h\n#include <iostream>\n```\n\n**提问**：`main.cpp` 如何找到func()的实现？\n\nVS（IDE）的编译过程：\n\n- 预处理\n- 编译，生成中间可执行文件\n- **链接**\n- 生成最终可执行文件\n\n---\n\n演示：https://zhuanlan.zhihu.com/p/106781089\n\n---\n\n更进一步：Make\n\n**提问**：如果把上面的`stdio.h`改成`iostream`，会怎么样\n\n```cpp\n//fun.h\n#ifndef _fun\n#define _fun\n\n#include <iostream>\n\n#endif\n```\n\n# 面对对象\n\n**提问**：计算机是用来干啥的？为何计算机今天能为我们带来如此多好处？一个词语，两个汉字。\n\n1. 面向过程：我让机器干啥就干啥\n2. 面向对象：以对象为中心，把问题分解成对象\n\n*举例*：卖书\n\n## C的对象\n\n```c\nstruct book{\n    char name[10];\n    char ISBN[20];\n    double price;\n}\n\ndouble getPrice(struct book* theBook){\n    return theBook->price;\n}\nvoid showPrice(struct book* theBook){\n    printf(\"%lf\",theBook->price);\n}\n```\n\n**提问**：考虑一另一把剑🗡\n\n```c\nstruct sword{\n    char name[10];\n    double price;\n}\ndouble getPrice(struct sword* theSword){\n    return theSword->price;\n}\nvoid showPrice(struct book* theSword){\n    printf(\"%lf\",theSword->price);\n}\n```\n\nC不允许同名函数，即使允许，你也不知道show了谁的price。如何解决这个问题？（其实可以同名，在后面的重载会讲到）\n\n把函数写在struct里面，让函数成为struct的“专属函数”。C不许我们这么做，但是C++可以\n\n```cpp\nstruct Book{\n    char name[10];\n    char ISBN[20];\n    double price;\n    \n    double getPrice(){\n    \treturn price;\n\t}\n\tvoid showPrice(){\n    \tprintf(\"%lf\",price);\n\t}\n    //...\n};\n\nstruct Book theBook=/*...*/;\ntheBook.showPrice();\n```\n\n**提问**：考虑price的合理性，如何正确的为price赋值？（price>0)\n\n```cpp\n//考虑这种用法\ntheBook.price=100;\n\nint setPrice(double value){\n    if(value<0){\n        return -1;\n    }else{\n        price=value;\n        return 0;\n    }\n}\n//还是没有解决问题，依然可以\ntheBook.price=100;\n```\n\n封装的必要性\n\n```cpp\nclass Book{\nprivate:\n    char name[10];\n    char ISBN[20];\n    double price;\npublic:\n\tint setPrice(double value){\n    \tif(value<0){\n        \treturn -1;\n    \t}else{\n        \tprice=value;\n    \t}\n\t}\n    double getPrice(){\n    \treturn price;\n\t}\n\tvoid showPrice(){\n    \tprintf(\"%lf\",price);\n\t}\n    //...\n};\n\n//无法直接修改price，必须通过公共成员函数\n```\n\n## 构造函数\n\nC中的`struct`如何创建对象？\n\n```c\ntypedef struct{\n\tint num;\n}Book;\n\nBook b;\n```\n\n考虑 `int a=1`，我们能不能`Book b`？\n\n我们可以如何创建一个对象？我们需要Constructor，构造函数。\n\n```cpp\nclass Book{\npublic:\n    Book(){}\n    //Book(double the_price):price(the_price){}\n    Book(double the_price){setPrice(the_price);}\n    Book(double the_price,char* the_name){\n        Book(the_price,the_name,\"0000\");\n    }\n    Book(double the_price=10.0,char* the_name=\"none\",char* ISBN){\n        setPrice(the_price);\n        memcpy(name,the_name,10);\n        memcpy(ISBN,the_ISBN,20);\n    }\n    \nprivate:\n    double price;\n    char name[10];\n    char ISBN[20];\n    //...\n};\n\nBook b0;\nBook b1(10);\nBook b2(10,\"Apollo\");\n```\n\n参考：\n\n1. 拷贝构造\n2. 移动构造\n3. 合成构造\n\n## 继承与多态\n\n**提问**：我希望有一个科幻书，科幻书有一个别人没有的成员：科幻程度(depth)。同时有一种传记，有一个独有的值来记录传记主人公的名字(person)。\n\n```cpp\nclass Book{\npublic:\n    //...\nprivate:\n    double price;\n    char name[10];\n    char ISBN[20];\n    int depth;\n    char* person;\n    //...\n    \n    //...\n};\n```\n\n有公共属性，也有独有的属性(attribute)\n\n```cpp\nclass Fiction:public Book{\npublic:\n    Fiction();\n    \n    int setPrice(double value){\n    \tif(value<10){\n        \treturn -1;\n    \t}else{\n        \tprice=value;\n    \t}\n\t}\nprivate:\n    //不用写，都继承过来了\n    //...\n};\nclass biography:public Book{\n  //现场要求写一个  \n};\n```\n\n继承的方式有三种：\n\n>当一个类派生自基类，该基类可以被继承为 **public、protected** 或 **private** 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。\n>\n>我们几乎不使用 **protected** 或 **private** 继承，通常使用 **public** 继承。当使用不同类型的继承时，遵循以下几个规则：\n>\n>- **公有继承（public）：**当一个类派生自**公有**基类时，基类的**公有**成员也是派生类的**公有**成员，基类的**保护**成员也是派生类的**保护**成员，基类的**私有**成员不能直接被派生类访问，但是可以通过调用基类的**公有**和**保护**成员来访问。\n>- **保护继承（protected）：** 当一个类派生自**保护**基类时，基类的**公有**和**保护**成员将成为派生类的**保护**成员。\n>- **私有继承（private）：**当一个类派生自**私有**基类时，基类的**公有**和**保护**成员将成为派生类的**私有**成员。\n\n现在，我希望所有书都是被分了类的（如果不知道怎么分，就分到“未知分类”里面去），我们现在不允许直接创建一个Book对象，必须要先从Book继承一个专门的分类，再创建该分类的对象。\n\n```cpp\nclass Book{\npublic:\n    virtual Book();\n    virtual Book(double the_price);\n    virtual Book(double the_price);\n    \n    virtual int setPrice(double value);\n    \nprivate:\n    char name[10];\n    char ISBN[20];\n    double price;\n    //...\n};\n```\n\n`virtual`意味着必须由子类来实现这些函数。这叫纯虚函数，关于virtual，还有更多用法。\n\n## 重载\n\n`virtual`要求必须由子类来实现，这就是重载。重载允许同名，但必须接受不同参数。\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nvoid func(int a) { cout << \"1\" << endl; }\nvoid func(char b) { cout << \"2\" << endl; }\n\nint main() {\n  func(1);\n  func('a');\n}\n```\n\n**提问**：\n\n```cpp\n//已经有了这个函数\nBook(double the_price,char* the_name){\n   setPrice(the_price);\n   memcpy(name,the_name,10);\n}\n//又有了这个\nBook(double the_price,char* the_ISBN){\n   setPrice(the_price);\n   memcpy(name,the_ISBN,10);\n}\n\nBook b3(10,\"Apollo\");\n//Apollo 会变成name还是ISBN？\n```\n\nC++编译器不允许这样的事情发生，会出现redefinition报错，编译器认为这两个是同一函数。因此，参数的类型应该有所区别。\n\n更进一步，考虑Book==Book\n\n```cpp\nBook a(1,\"apollo\");\nBook b(10,\"apollo\");\n\n//a.equal(b);\nif(a==b){}\n\nclass Book{\npublic:\n    //...\n    bool operator==(const Book) {\n      if (this->name == Book::name)\n        return true;\n      else\n        return false;\n    }\n    \nprivate:\n    char name[10];\n    char ISBN[20];\n    double price;\n    //...\n};\n//写一个重载+，当两本书相同时，价格相加\n```\n\n## 析构函数\n\n一个对象创建完成后，也要销毁，我们应当定义它如何被销毁。\n\n## 两种风格的对象\n\n- 使这个对象像个“东西”，示例如上\n- 使这个对象像个“指针”，先看看内存管理\n\n# 内存管理\n\n**提问**：a+b中的内存是如何分配的？\n\n>**栈区（stack）：**指那些由编译器在需要的时候分配，不需要时自动清除的变量所在的储存区，如函数执行时，函数的形参以及函数内的局部变量分配在栈区，函数运行结束后，形参和局部变量去栈（自动释放）。栈内存分配运算内置与处理器的指令集中，效率高但是分配的内存空间有限。\n>\n>**堆区（heap）：**指哪些由程序员手动分配释放的储存区，如果程序员不释放这块内存，内存将一直被占用，直到程序运行结束由系统自动收回，c语言中使用malloc，free申请和释放空间。\n>\n>**静态储存区（static）：**全局变量和静态变量的储存是放在一块的，其中初始化的全局变量和静态变量在一个区域，这块空间当程序运行结束后由系统释放。\n>\n>**常量储存区（const）：**常量字符串就是储存在这里的，如“ABC”字符串就储存在常量区，储存在常量区的只读不可写。const修饰的全局变量也储存在常量区，const修饰的局部变量依然在栈上。\n>\n>**程序代码区：**存放源程序的二进制代码。\n\n**提问**：如何创建一个长度不定的数组\n\n错误示范：\n\n```c\nint main(void) {\n    int N = 0;\n\n    printf(\"请输入数组的大小\\n\");\n    scanf(\"%d\", &N);\n    int arr[N] = { 0 };\n}\n```\n\n正确示范：\n\n```c\nint main(void) {\n\n    int arr[1000] = { 0 };\n    int N = 0;\n    int i = 0;\n\n    printf(\"请输入数组的大小\\n\");\n    scanf(\"%d\", &N);\n\n    printf(\"请输入%d个数\\n\", N);\n    for (i = 0; i < N; i++)\n        scanf(\"%d\", &arr[i]);\n\n    return 0;\n}\n```\n\n## 手动内存管理\n\nC 使用malloc 分配内存和 free释放内存。\n\n```c\n#include<stdlib.h>\n\nint main(void) {\n\n    int i = 0;\n    int N = 0;\n    int* arr;\n\n    printf(\"请输入数组的大小\\n\");\n    scanf(\"%d\", &N);\n\n    arr = (int*)malloc(sizeof(int) * N);\n\n    printf(\"请输入%d个数\\n\", N);\n    for (i = 0; i < N; i++)\n        scanf(\"%d\", &arr[i]);\n\n    free(arr);\n    return 0;\n}\n```\n\nC++ 使用封装好的new 和delete\n\n```cpp\nint main(void) {\n\n    int i = 0;\n    int N = 0;\n\n    printf(\"请输入数组的大小\\n\");\n    cin<<N;\n\n    int *arr = new int[N];\n\n    cin<<\"请输入%d个数\\n\"<<endl;\n    for (i = 0; i < N; i++)\n        cin<< arr[i]);\n\n    delete[] p;\n    return 0;\n}\n```\n\n **提问**：为什么不是delete p?\n\n## 内存泄漏\n\n画图\n\n*share_ptr* 的原理：对指针进行计数\n\n# 使用STL库\n\n## String\n\n- 创建string\n- string+\n- insert\n- substr\n\n## Vector\n\n- 创建vector\n- size\n- begin\n- end\n- resize\n\n## Algorithm\n\n- find\n- rotate\n- sort\n- min\n- max\n\n## Utility\n\n- swap\n- pari\n- tuple\n\n# 完整示例\n\n```cpp\n//book.h\n#ifndef _book\n#define _book\n\n#include <string>\n#include \"show.hpp\"\n\nclass Book{\npublic:\n    Book(){init();};\n    //Book(double the_price):price(the_price){}\n    Book(double the_price);\n    Book(std::string the_name)=delete;\n    //Book(double the_price,std::string the_name);\n    Book(double the_price,std::string the_name,std::string ISBN);\n    \n    Book(Book);\n    \n    Book(Book b);\n    \n    int set_price();\n    int set_name();\n    int set_ISBN();\n    \n    friend void show_price(Book);\n    \nprivate:\n    double price;\n    std::string name;\n    std::string ISBN;\n    \n    int init(double the_price=0,std::string the_name=\"\",std::string ISBN=\"\");\n};\n#endif\n```\n\n```cpp\n//book.cpp\n#include \"book.h\"\n\nBook::Book(double the_price){Book()}\n//Book::Book(double the_price=0,std::string the_name):Book(the_price,the_name,\"\"){}\nBook::Book(double the_price=0,std::string the_name=\"\",std::string the_ISBN=\"\"){\n    Book::init(the_price,the_name,the_ISBN);\n}\nBook::Book(Book the_book){}\n\nint Book::init(double the_price,std::string the_name,std::string the_ISBN){\n    return set_price(the_price) && set_name(the_name) && set_ISBN(the_ISBN);\n}\nint Book::set_price(double the_price){\n    if(the_price>=0){\n        this->price=the_price;\n        return 1;\n    }else{\n        return 0;\n    }\n}\n//set_name 和 set_ISBN 略\n```\n\n```cpp\n//show.hpp\nvoid show_price(Book the_book){\n    std::cout<<the_book.price<<std::endl;\n}\n```\n\n```cpp\n//main.cpp\n#include \"book.hpp\"\n\nint main(){\n    Book b;\n    b.set_price(10);\n    show_price(b);\n    Book bb(b);\n    //Book bb=b;\n    //Book bb{b};\n}\n```\n\n\n\n# Apollo2D\n\n//这里是Agent2d中的WorldModel","source":"_posts/Language/oop-for-apollo.md","raw":"---\nauthor: kawhicurry\ntitle: 给Apollo的面对对象课\ncategories:\n  - Language\ntags: cpp\ncover: true\ndate: 2021-11-21 19:21:13\n---\n\n# 课前提醒（给我自己的）\n\n1. 打开vscode，准备源码\n2. 准备好使用g++\n\n# 多文件编程\n\n## Why\n\n非结构化与结构化：`goto`满天飞的后果\n\n## How\n\n```cpp\n//fun.h\nvoid func();\n\n//fun.cpp\n#include \"fun.h\"\nvoid func(){\n\tstd::cout<<\"hello\"<<std::endl;//?\n}\n\n//main.cpp\n#include <stdio.h>\n#inlcude \"fun.h\"\nusing namespace std;\nint main(){\n    printf(\"hi\\n\");\n\tfunc();\n\treturn 0;\n}\n```\n\n**提问**：`iostream`头文件应该放在哪？\n\n```cpp\n//fun.h\n#include <iostream>\n```\n\n**提问**：`main.cpp` 如何找到func()的实现？\n\nVS（IDE）的编译过程：\n\n- 预处理\n- 编译，生成中间可执行文件\n- **链接**\n- 生成最终可执行文件\n\n---\n\n演示：https://zhuanlan.zhihu.com/p/106781089\n\n---\n\n更进一步：Make\n\n**提问**：如果把上面的`stdio.h`改成`iostream`，会怎么样\n\n```cpp\n//fun.h\n#ifndef _fun\n#define _fun\n\n#include <iostream>\n\n#endif\n```\n\n# 面对对象\n\n**提问**：计算机是用来干啥的？为何计算机今天能为我们带来如此多好处？一个词语，两个汉字。\n\n1. 面向过程：我让机器干啥就干啥\n2. 面向对象：以对象为中心，把问题分解成对象\n\n*举例*：卖书\n\n## C的对象\n\n```c\nstruct book{\n    char name[10];\n    char ISBN[20];\n    double price;\n}\n\ndouble getPrice(struct book* theBook){\n    return theBook->price;\n}\nvoid showPrice(struct book* theBook){\n    printf(\"%lf\",theBook->price);\n}\n```\n\n**提问**：考虑一另一把剑🗡\n\n```c\nstruct sword{\n    char name[10];\n    double price;\n}\ndouble getPrice(struct sword* theSword){\n    return theSword->price;\n}\nvoid showPrice(struct book* theSword){\n    printf(\"%lf\",theSword->price);\n}\n```\n\nC不允许同名函数，即使允许，你也不知道show了谁的price。如何解决这个问题？（其实可以同名，在后面的重载会讲到）\n\n把函数写在struct里面，让函数成为struct的“专属函数”。C不许我们这么做，但是C++可以\n\n```cpp\nstruct Book{\n    char name[10];\n    char ISBN[20];\n    double price;\n    \n    double getPrice(){\n    \treturn price;\n\t}\n\tvoid showPrice(){\n    \tprintf(\"%lf\",price);\n\t}\n    //...\n};\n\nstruct Book theBook=/*...*/;\ntheBook.showPrice();\n```\n\n**提问**：考虑price的合理性，如何正确的为price赋值？（price>0)\n\n```cpp\n//考虑这种用法\ntheBook.price=100;\n\nint setPrice(double value){\n    if(value<0){\n        return -1;\n    }else{\n        price=value;\n        return 0;\n    }\n}\n//还是没有解决问题，依然可以\ntheBook.price=100;\n```\n\n封装的必要性\n\n```cpp\nclass Book{\nprivate:\n    char name[10];\n    char ISBN[20];\n    double price;\npublic:\n\tint setPrice(double value){\n    \tif(value<0){\n        \treturn -1;\n    \t}else{\n        \tprice=value;\n    \t}\n\t}\n    double getPrice(){\n    \treturn price;\n\t}\n\tvoid showPrice(){\n    \tprintf(\"%lf\",price);\n\t}\n    //...\n};\n\n//无法直接修改price，必须通过公共成员函数\n```\n\n## 构造函数\n\nC中的`struct`如何创建对象？\n\n```c\ntypedef struct{\n\tint num;\n}Book;\n\nBook b;\n```\n\n考虑 `int a=1`，我们能不能`Book b`？\n\n我们可以如何创建一个对象？我们需要Constructor，构造函数。\n\n```cpp\nclass Book{\npublic:\n    Book(){}\n    //Book(double the_price):price(the_price){}\n    Book(double the_price){setPrice(the_price);}\n    Book(double the_price,char* the_name){\n        Book(the_price,the_name,\"0000\");\n    }\n    Book(double the_price=10.0,char* the_name=\"none\",char* ISBN){\n        setPrice(the_price);\n        memcpy(name,the_name,10);\n        memcpy(ISBN,the_ISBN,20);\n    }\n    \nprivate:\n    double price;\n    char name[10];\n    char ISBN[20];\n    //...\n};\n\nBook b0;\nBook b1(10);\nBook b2(10,\"Apollo\");\n```\n\n参考：\n\n1. 拷贝构造\n2. 移动构造\n3. 合成构造\n\n## 继承与多态\n\n**提问**：我希望有一个科幻书，科幻书有一个别人没有的成员：科幻程度(depth)。同时有一种传记，有一个独有的值来记录传记主人公的名字(person)。\n\n```cpp\nclass Book{\npublic:\n    //...\nprivate:\n    double price;\n    char name[10];\n    char ISBN[20];\n    int depth;\n    char* person;\n    //...\n    \n    //...\n};\n```\n\n有公共属性，也有独有的属性(attribute)\n\n```cpp\nclass Fiction:public Book{\npublic:\n    Fiction();\n    \n    int setPrice(double value){\n    \tif(value<10){\n        \treturn -1;\n    \t}else{\n        \tprice=value;\n    \t}\n\t}\nprivate:\n    //不用写，都继承过来了\n    //...\n};\nclass biography:public Book{\n  //现场要求写一个  \n};\n```\n\n继承的方式有三种：\n\n>当一个类派生自基类，该基类可以被继承为 **public、protected** 或 **private** 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。\n>\n>我们几乎不使用 **protected** 或 **private** 继承，通常使用 **public** 继承。当使用不同类型的继承时，遵循以下几个规则：\n>\n>- **公有继承（public）：**当一个类派生自**公有**基类时，基类的**公有**成员也是派生类的**公有**成员，基类的**保护**成员也是派生类的**保护**成员，基类的**私有**成员不能直接被派生类访问，但是可以通过调用基类的**公有**和**保护**成员来访问。\n>- **保护继承（protected）：** 当一个类派生自**保护**基类时，基类的**公有**和**保护**成员将成为派生类的**保护**成员。\n>- **私有继承（private）：**当一个类派生自**私有**基类时，基类的**公有**和**保护**成员将成为派生类的**私有**成员。\n\n现在，我希望所有书都是被分了类的（如果不知道怎么分，就分到“未知分类”里面去），我们现在不允许直接创建一个Book对象，必须要先从Book继承一个专门的分类，再创建该分类的对象。\n\n```cpp\nclass Book{\npublic:\n    virtual Book();\n    virtual Book(double the_price);\n    virtual Book(double the_price);\n    \n    virtual int setPrice(double value);\n    \nprivate:\n    char name[10];\n    char ISBN[20];\n    double price;\n    //...\n};\n```\n\n`virtual`意味着必须由子类来实现这些函数。这叫纯虚函数，关于virtual，还有更多用法。\n\n## 重载\n\n`virtual`要求必须由子类来实现，这就是重载。重载允许同名，但必须接受不同参数。\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nvoid func(int a) { cout << \"1\" << endl; }\nvoid func(char b) { cout << \"2\" << endl; }\n\nint main() {\n  func(1);\n  func('a');\n}\n```\n\n**提问**：\n\n```cpp\n//已经有了这个函数\nBook(double the_price,char* the_name){\n   setPrice(the_price);\n   memcpy(name,the_name,10);\n}\n//又有了这个\nBook(double the_price,char* the_ISBN){\n   setPrice(the_price);\n   memcpy(name,the_ISBN,10);\n}\n\nBook b3(10,\"Apollo\");\n//Apollo 会变成name还是ISBN？\n```\n\nC++编译器不允许这样的事情发生，会出现redefinition报错，编译器认为这两个是同一函数。因此，参数的类型应该有所区别。\n\n更进一步，考虑Book==Book\n\n```cpp\nBook a(1,\"apollo\");\nBook b(10,\"apollo\");\n\n//a.equal(b);\nif(a==b){}\n\nclass Book{\npublic:\n    //...\n    bool operator==(const Book) {\n      if (this->name == Book::name)\n        return true;\n      else\n        return false;\n    }\n    \nprivate:\n    char name[10];\n    char ISBN[20];\n    double price;\n    //...\n};\n//写一个重载+，当两本书相同时，价格相加\n```\n\n## 析构函数\n\n一个对象创建完成后，也要销毁，我们应当定义它如何被销毁。\n\n## 两种风格的对象\n\n- 使这个对象像个“东西”，示例如上\n- 使这个对象像个“指针”，先看看内存管理\n\n# 内存管理\n\n**提问**：a+b中的内存是如何分配的？\n\n>**栈区（stack）：**指那些由编译器在需要的时候分配，不需要时自动清除的变量所在的储存区，如函数执行时，函数的形参以及函数内的局部变量分配在栈区，函数运行结束后，形参和局部变量去栈（自动释放）。栈内存分配运算内置与处理器的指令集中，效率高但是分配的内存空间有限。\n>\n>**堆区（heap）：**指哪些由程序员手动分配释放的储存区，如果程序员不释放这块内存，内存将一直被占用，直到程序运行结束由系统自动收回，c语言中使用malloc，free申请和释放空间。\n>\n>**静态储存区（static）：**全局变量和静态变量的储存是放在一块的，其中初始化的全局变量和静态变量在一个区域，这块空间当程序运行结束后由系统释放。\n>\n>**常量储存区（const）：**常量字符串就是储存在这里的，如“ABC”字符串就储存在常量区，储存在常量区的只读不可写。const修饰的全局变量也储存在常量区，const修饰的局部变量依然在栈上。\n>\n>**程序代码区：**存放源程序的二进制代码。\n\n**提问**：如何创建一个长度不定的数组\n\n错误示范：\n\n```c\nint main(void) {\n    int N = 0;\n\n    printf(\"请输入数组的大小\\n\");\n    scanf(\"%d\", &N);\n    int arr[N] = { 0 };\n}\n```\n\n正确示范：\n\n```c\nint main(void) {\n\n    int arr[1000] = { 0 };\n    int N = 0;\n    int i = 0;\n\n    printf(\"请输入数组的大小\\n\");\n    scanf(\"%d\", &N);\n\n    printf(\"请输入%d个数\\n\", N);\n    for (i = 0; i < N; i++)\n        scanf(\"%d\", &arr[i]);\n\n    return 0;\n}\n```\n\n## 手动内存管理\n\nC 使用malloc 分配内存和 free释放内存。\n\n```c\n#include<stdlib.h>\n\nint main(void) {\n\n    int i = 0;\n    int N = 0;\n    int* arr;\n\n    printf(\"请输入数组的大小\\n\");\n    scanf(\"%d\", &N);\n\n    arr = (int*)malloc(sizeof(int) * N);\n\n    printf(\"请输入%d个数\\n\", N);\n    for (i = 0; i < N; i++)\n        scanf(\"%d\", &arr[i]);\n\n    free(arr);\n    return 0;\n}\n```\n\nC++ 使用封装好的new 和delete\n\n```cpp\nint main(void) {\n\n    int i = 0;\n    int N = 0;\n\n    printf(\"请输入数组的大小\\n\");\n    cin<<N;\n\n    int *arr = new int[N];\n\n    cin<<\"请输入%d个数\\n\"<<endl;\n    for (i = 0; i < N; i++)\n        cin<< arr[i]);\n\n    delete[] p;\n    return 0;\n}\n```\n\n **提问**：为什么不是delete p?\n\n## 内存泄漏\n\n画图\n\n*share_ptr* 的原理：对指针进行计数\n\n# 使用STL库\n\n## String\n\n- 创建string\n- string+\n- insert\n- substr\n\n## Vector\n\n- 创建vector\n- size\n- begin\n- end\n- resize\n\n## Algorithm\n\n- find\n- rotate\n- sort\n- min\n- max\n\n## Utility\n\n- swap\n- pari\n- tuple\n\n# 完整示例\n\n```cpp\n//book.h\n#ifndef _book\n#define _book\n\n#include <string>\n#include \"show.hpp\"\n\nclass Book{\npublic:\n    Book(){init();};\n    //Book(double the_price):price(the_price){}\n    Book(double the_price);\n    Book(std::string the_name)=delete;\n    //Book(double the_price,std::string the_name);\n    Book(double the_price,std::string the_name,std::string ISBN);\n    \n    Book(Book);\n    \n    Book(Book b);\n    \n    int set_price();\n    int set_name();\n    int set_ISBN();\n    \n    friend void show_price(Book);\n    \nprivate:\n    double price;\n    std::string name;\n    std::string ISBN;\n    \n    int init(double the_price=0,std::string the_name=\"\",std::string ISBN=\"\");\n};\n#endif\n```\n\n```cpp\n//book.cpp\n#include \"book.h\"\n\nBook::Book(double the_price){Book()}\n//Book::Book(double the_price=0,std::string the_name):Book(the_price,the_name,\"\"){}\nBook::Book(double the_price=0,std::string the_name=\"\",std::string the_ISBN=\"\"){\n    Book::init(the_price,the_name,the_ISBN);\n}\nBook::Book(Book the_book){}\n\nint Book::init(double the_price,std::string the_name,std::string the_ISBN){\n    return set_price(the_price) && set_name(the_name) && set_ISBN(the_ISBN);\n}\nint Book::set_price(double the_price){\n    if(the_price>=0){\n        this->price=the_price;\n        return 1;\n    }else{\n        return 0;\n    }\n}\n//set_name 和 set_ISBN 略\n```\n\n```cpp\n//show.hpp\nvoid show_price(Book the_book){\n    std::cout<<the_book.price<<std::endl;\n}\n```\n\n```cpp\n//main.cpp\n#include \"book.hpp\"\n\nint main(){\n    Book b;\n    b.set_price(10);\n    show_price(b);\n    Book bb(b);\n    //Book bb=b;\n    //Book bb{b};\n}\n```\n\n\n\n# Apollo2D\n\n//这里是Agent2d中的WorldModel","slug":"oop-for-apollo","published":1,"category":"Language","updated":"2021-12-25T09:52:38.439Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxlot1jw000o24ul6y0m3yg0","content":"<h1 id=\"课前提醒（给我自己的）\"><a href=\"#课前提醒（给我自己的）\" class=\"headerlink\" title=\"课前提醒（给我自己的）\"></a>课前提醒（给我自己的）</h1><ol>\n<li>打开vscode，准备源码</li>\n<li>准备好使用g++</li>\n</ol>\n<h1 id=\"多文件编程\"><a href=\"#多文件编程\" class=\"headerlink\" title=\"多文件编程\"></a>多文件编程</h1><h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><p>非结构化与结构化：<code>goto</code>满天飞的后果</p>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//fun.h</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//fun.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"fun.h\"</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"hello\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//?</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//main.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">inlcude</span> <span class=\"token string\">\"fun.h\"</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：<code>iostream</code>头文件应该放在哪？</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//fun.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：<code>main.cpp</code> 如何找到func()的实现？</p>\n<p>VS（IDE）的编译过程：</p>\n<ul>\n<li>预处理</li>\n<li>编译，生成中间可执行文件</li>\n<li><strong>链接</strong></li>\n<li>生成最终可执行文件</li>\n</ul>\n<hr>\n<p>演示：<a href=\"https://zhuanlan.zhihu.com/p/106781089\">https://zhuanlan.zhihu.com/p/106781089</a></p>\n<hr>\n<p>更进一步：Make</p>\n<p><strong>提问</strong>：如果把上面的<code>stdio.h</code>改成<code>iostream</code>，会怎么样</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//fun.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_fun</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_fun</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"面对对象\"><a href=\"#面对对象\" class=\"headerlink\" title=\"面对对象\"></a>面对对象</h1><p><strong>提问</strong>：计算机是用来干啥的？为何计算机今天能为我们带来如此多好处？一个词语，两个汉字。</p>\n<ol>\n<li>面向过程：我让机器干啥就干啥</li>\n<li>面向对象：以对象为中心，把问题分解成对象</li>\n</ol>\n<p><em>举例</em>：卖书</p>\n<h2 id=\"C的对象\"><a href=\"#C的对象\" class=\"headerlink\" title=\"C的对象\"></a>C的对象</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token operator\">*</span> theBook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> theBook<span class=\"token operator\">-></span>price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token operator\">*</span> theBook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\"</span><span class=\"token punctuation\">,</span>theBook<span class=\"token operator\">-></span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：考虑一另一把剑🗡</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sword</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sword</span><span class=\"token operator\">*</span> theSword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> theSword<span class=\"token operator\">-></span>price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token operator\">*</span> theSword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\"</span><span class=\"token punctuation\">,</span>theSword<span class=\"token operator\">-></span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>C不允许同名函数，即使允许，你也不知道show了谁的price。如何解决这个问题？（其实可以同名，在后面的重载会讲到）</p>\n<p>把函数写在struct里面，让函数成为struct的“专属函数”。C不许我们这么做，但是C++可以</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">double</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\"</span><span class=\"token punctuation\">,</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Book</span> theBook<span class=\"token operator\">=</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">;</span>\ntheBook<span class=\"token punctuation\">.</span><span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：考虑price的合理性，如何正确的为price赋值？（price&gt;0)</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//考虑这种用法</span>\ntheBook<span class=\"token punctuation\">.</span>price<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        price<span class=\"token operator\">=</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//还是没有解决问题，依然可以</span>\ntheBook<span class=\"token punctuation\">.</span>price<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>封装的必要性</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        \tprice<span class=\"token operator\">=</span>value<span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\"</span><span class=\"token punctuation\">,</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//无法直接修改price，必须通过公共成员函数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>C中的<code>struct</code>如何创建对象？</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>Book<span class=\"token punctuation\">;</span>\n\nBook b<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>考虑 <code>int a=1</code>，我们能不能<code>Book b</code>？</p>\n<p>我们可以如何创建一个对象？我们需要Constructor，构造函数。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//Book(double the_price):price(the_price)&#123;&#125;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> the_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">,</span>the_name<span class=\"token punctuation\">,</span><span class=\"token string\">\"0000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token operator\">=</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> the_name<span class=\"token operator\">=</span><span class=\"token string\">\"none\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>the_name<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>ISBN<span class=\"token punctuation\">,</span>the_ISBN<span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nBook b0<span class=\"token punctuation\">;</span>\nBook <span class=\"token function\">b1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nBook <span class=\"token function\">b2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Apollo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>参考：</p>\n<ol>\n<li>拷贝构造</li>\n<li>移动构造</li>\n<li>合成构造</li>\n</ol>\n<h2 id=\"继承与多态\"><a href=\"#继承与多态\" class=\"headerlink\" title=\"继承与多态\"></a>继承与多态</h2><p><strong>提问</strong>：我希望有一个科幻书，科幻书有一个别人没有的成员：科幻程度(depth)。同时有一种传记，有一个独有的值来记录传记主人公的名字(person)。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> person<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n    \n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>有公共属性，也有独有的属性(attribute)</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fiction</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span></span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Fiction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        \tprice<span class=\"token operator\">=</span>value<span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//不用写，都继承过来了</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">biography</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//现场要求写一个  </span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继承的方式有三种：</p>\n<blockquote>\n<p>当一个类派生自基类，该基类可以被继承为 <strong>public、protected</strong> 或 <strong>private</strong> 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。</p>\n<p>我们几乎不使用 <strong>protected</strong> 或 <strong>private</strong> 继承，通常使用 <strong>public</strong> 继承。当使用不同类型的继承时，遵循以下几个规则：</p>\n<ul>\n<li><strong>公有继承（public）：</strong>当一个类派生自<strong>公有</strong>基类时，基类的<strong>公有</strong>成员也是派生类的<strong>公有</strong>成员，基类的<strong>保护</strong>成员也是派生类的<strong>保护</strong>成员，基类的<strong>私有</strong>成员不能直接被派生类访问，但是可以通过调用基类的<strong>公有</strong>和<strong>保护</strong>成员来访问。</li>\n<li><strong>保护继承（protected）：</strong> 当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</li>\n<li><strong>私有继承（private）：</strong>当一个类派生自<strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>成员。</li>\n</ul>\n</blockquote>\n<p>现在，我希望所有书都是被分了类的（如果不知道怎么分，就分到“未知分类”里面去），我们现在不允许直接创建一个Book对象，必须要先从Book继承一个专门的分类，再创建该分类的对象。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>virtual</code>意味着必须由子类来实现这些函数。这叫纯虚函数，关于virtual，还有更多用法。</p>\n<h2 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h2><p><code>virtual</code>要求必须由子类来实现，这就是重载。重载允许同名，但必须接受不同参数。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"1\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//已经有了这个函数</span>\n<span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> the_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>the_name<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//又有了这个</span>\n<span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> the_ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>the_ISBN<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBook <span class=\"token function\">b3</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Apollo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Apollo 会变成name还是ISBN？</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>C++编译器不允许这样的事情发生，会出现redefinition报错，编译器认为这两个是同一函数。因此，参数的类型应该有所区别。</p>\n<p>更进一步，考虑Book==Book</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">Book <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"apollo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nBook <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"apollo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//a.equal(b);</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>name <span class=\"token operator\">==</span> Book<span class=\"token double-colon punctuation\">::</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//写一个重载+，当两本书相同时，价格相加</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h2><p>一个对象创建完成后，也要销毁，我们应当定义它如何被销毁。</p>\n<h2 id=\"两种风格的对象\"><a href=\"#两种风格的对象\" class=\"headerlink\" title=\"两种风格的对象\"></a>两种风格的对象</h2><ul>\n<li>使这个对象像个“东西”，示例如上</li>\n<li>使这个对象像个“指针”，先看看内存管理</li>\n</ul>\n<h1 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h1><p><strong>提问</strong>：a+b中的内存是如何分配的？</p>\n<blockquote>\n<p><strong>栈区（stack）：</strong>指那些由编译器在需要的时候分配，不需要时自动清除的变量所在的储存区，如函数执行时，函数的形参以及函数内的局部变量分配在栈区，函数运行结束后，形参和局部变量去栈（自动释放）。栈内存分配运算内置与处理器的指令集中，效率高但是分配的内存空间有限。</p>\n<p><strong>堆区（heap）：</strong>指哪些由程序员手动分配释放的储存区，如果程序员不释放这块内存，内存将一直被占用，直到程序运行结束由系统自动收回，c语言中使用malloc，free申请和释放空间。</p>\n<p><strong>静态储存区（static）：</strong>全局变量和静态变量的储存是放在一块的，其中初始化的全局变量和静态变量在一个区域，这块空间当程序运行结束后由系统释放。</p>\n<p><strong>常量储存区（const）：</strong>常量字符串就是储存在这里的，如“ABC”字符串就储存在常量区，储存在常量区的只读不可写。const修饰的全局变量也储存在常量区，const修饰的局部变量依然在栈上。</p>\n<p><strong>程序代码区：</strong>存放源程序的二进制代码。</p>\n</blockquote>\n<p><strong>提问</strong>：如何创建一个长度不定的数组</p>\n<p>错误示范：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入数组的大小\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>正确示范：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入数组的大小\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入%d个数\\n\"</span><span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"手动内存管理\"><a href=\"#手动内存管理\" class=\"headerlink\" title=\"手动内存管理\"></a>手动内存管理</h2><p>C 使用malloc 分配内存和 free释放内存。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入数组的大小\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入%d个数\\n\"</span><span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>C++ 使用封装好的new 和delete</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入数组的大小\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">&lt;&lt;</span>N<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    cin<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入%d个数\\n\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        cin<span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> <strong>提问</strong>：为什么不是delete p?</p>\n<h2 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h2><p>画图</p>\n<p><em>share_ptr</em> 的原理：对指针进行计数</p>\n<h1 id=\"使用STL库\"><a href=\"#使用STL库\" class=\"headerlink\" title=\"使用STL库\"></a>使用STL库</h1><h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><ul>\n<li>创建string</li>\n<li>string+</li>\n<li>insert</li>\n<li>substr</li>\n</ul>\n<h2 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h2><ul>\n<li>创建vector</li>\n<li>size</li>\n<li>begin</li>\n<li>end</li>\n<li>resize</li>\n</ul>\n<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><ul>\n<li>find</li>\n<li>rotate</li>\n<li>sort</li>\n<li>min</li>\n<li>max</li>\n</ul>\n<h2 id=\"Utility\"><a href=\"#Utility\" class=\"headerlink\" title=\"Utility\"></a>Utility</h2><ul>\n<li>swap</li>\n<li>pari</li>\n<li>tuple</li>\n</ul>\n<h1 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h1><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//book.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_book</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_book</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"show.hpp\"</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//Book(double the_price):price(the_price)&#123;&#125;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//Book(double the_price,std::string the_name);</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>Book b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> <span class=\"token function\">set_price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">set_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">set_ISBN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show_price</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>string name<span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>string ISBN<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string ISBN<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//book.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"book.h\"</span></span>\n\n<span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//Book::Book(double the_price=0,std::string the_name):Book(the_price,the_name,\"\")&#123;&#125;</span>\n<span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_ISBN<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">,</span>the_name<span class=\"token punctuation\">,</span>the_ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>Book the_book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">set_price</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">set_name</span><span class=\"token punctuation\">(</span>the_name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">set_ISBN</span><span class=\"token punctuation\">(</span>the_ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">set_price</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>the_price<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>price<span class=\"token operator\">=</span>the_price<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//set_name 和 set_ISBN 略</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//show.hpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_price</span><span class=\"token punctuation\">(</span>Book the_book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span>the_book<span class=\"token punctuation\">.</span>price<span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//main.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"book.hpp\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    Book b<span class=\"token punctuation\">;</span>\n    b<span class=\"token punctuation\">.</span><span class=\"token function\">set_price</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">show_price</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Book <span class=\"token function\">bb</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//Book bb=b;</span>\n    <span class=\"token comment\">//Book bb&#123;b&#125;;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"Apollo2D\"><a href=\"#Apollo2D\" class=\"headerlink\" title=\"Apollo2D\"></a>Apollo2D</h1><p>//这里是Agent2d中的WorldModel</p>\n","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<h1 id=\"课前提醒（给我自己的）\"><a href=\"#课前提醒（给我自己的）\" class=\"headerlink\" title=\"课前提醒（给我自己的）\"></a>课前提醒（给我自己的）</h1><ol>\n<li>打开vscode，准备源码</li>\n<li>准备好使用g++</li>\n</ol>\n<h1 id=\"多文件编程\"><a href=\"#多文件编程\" class=\"headerlink\" title=\"多文件编程\"></a>多文件编程</h1><h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><p>非结构化与结构化：<code>goto</code>满天飞的后果</p>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//fun.h</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//fun.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"fun.h\"</span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"hello\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span><span class=\"token comment\">//?</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//main.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">inlcude</span> <span class=\"token string\">\"fun.h\"</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：<code>iostream</code>头文件应该放在哪？</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//fun.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：<code>main.cpp</code> 如何找到func()的实现？</p>\n<p>VS（IDE）的编译过程：</p>\n<ul>\n<li>预处理</li>\n<li>编译，生成中间可执行文件</li>\n<li><strong>链接</strong></li>\n<li>生成最终可执行文件</li>\n</ul>\n<hr>\n<p>演示：<a href=\"https://zhuanlan.zhihu.com/p/106781089\">https://zhuanlan.zhihu.com/p/106781089</a></p>\n<hr>\n<p>更进一步：Make</p>\n<p><strong>提问</strong>：如果把上面的<code>stdio.h</code>改成<code>iostream</code>，会怎么样</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//fun.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_fun</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_fun</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"面对对象\"><a href=\"#面对对象\" class=\"headerlink\" title=\"面对对象\"></a>面对对象</h1><p><strong>提问</strong>：计算机是用来干啥的？为何计算机今天能为我们带来如此多好处？一个词语，两个汉字。</p>\n<ol>\n<li>面向过程：我让机器干啥就干啥</li>\n<li>面向对象：以对象为中心，把问题分解成对象</li>\n</ol>\n<p><em>举例</em>：卖书</p>\n<h2 id=\"C的对象\"><a href=\"#C的对象\" class=\"headerlink\" title=\"C的对象\"></a>C的对象</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token operator\">*</span> theBook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> theBook<span class=\"token operator\">-></span>price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token operator\">*</span> theBook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\"</span><span class=\"token punctuation\">,</span>theBook<span class=\"token operator\">-></span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：考虑一另一把剑🗡</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sword</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sword</span><span class=\"token operator\">*</span> theSword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> theSword<span class=\"token operator\">-></span>price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">book</span><span class=\"token operator\">*</span> theSword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\"</span><span class=\"token punctuation\">,</span>theSword<span class=\"token operator\">-></span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>C不允许同名函数，即使允许，你也不知道show了谁的price。如何解决这个问题？（其实可以同名，在后面的重载会讲到）</p>\n<p>把函数写在struct里面，让函数成为struct的“专属函数”。C不许我们这么做，但是C++可以</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">double</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\"</span><span class=\"token punctuation\">,</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Book</span> theBook<span class=\"token operator\">=</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">;</span>\ntheBook<span class=\"token punctuation\">.</span><span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：考虑price的合理性，如何正确的为price赋值？（price&gt;0)</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//考虑这种用法</span>\ntheBook<span class=\"token punctuation\">.</span>price<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        price<span class=\"token operator\">=</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//还是没有解决问题，依然可以</span>\ntheBook<span class=\"token punctuation\">.</span>price<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>封装的必要性</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        \tprice<span class=\"token operator\">=</span>value<span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">showPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf\"</span><span class=\"token punctuation\">,</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//无法直接修改price，必须通过公共成员函数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>C中的<code>struct</code>如何创建对象？</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>Book<span class=\"token punctuation\">;</span>\n\nBook b<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>考虑 <code>int a=1</code>，我们能不能<code>Book b</code>？</p>\n<p>我们可以如何创建一个对象？我们需要Constructor，构造函数。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//Book(double the_price):price(the_price)&#123;&#125;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> the_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">,</span>the_name<span class=\"token punctuation\">,</span><span class=\"token string\">\"0000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token operator\">=</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> the_name<span class=\"token operator\">=</span><span class=\"token string\">\"none\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>the_name<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>ISBN<span class=\"token punctuation\">,</span>the_ISBN<span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nBook b0<span class=\"token punctuation\">;</span>\nBook <span class=\"token function\">b1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nBook <span class=\"token function\">b2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Apollo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>参考：</p>\n<ol>\n<li>拷贝构造</li>\n<li>移动构造</li>\n<li>合成构造</li>\n</ol>\n<h2 id=\"继承与多态\"><a href=\"#继承与多态\" class=\"headerlink\" title=\"继承与多态\"></a>继承与多态</h2><p><strong>提问</strong>：我希望有一个科幻书，科幻书有一个别人没有的成员：科幻程度(depth)。同时有一种传记，有一个独有的值来记录传记主人公的名字(person)。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> depth<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> person<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n    \n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>有公共属性，也有独有的属性(attribute)</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fiction</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span></span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Fiction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        \tprice<span class=\"token operator\">=</span>value<span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//不用写，都继承过来了</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">biography</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//现场要求写一个  </span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>继承的方式有三种：</p>\n<blockquote>\n<p>当一个类派生自基类，该基类可以被继承为 <strong>public、protected</strong> 或 <strong>private</strong> 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。</p>\n<p>我们几乎不使用 <strong>protected</strong> 或 <strong>private</strong> 继承，通常使用 <strong>public</strong> 继承。当使用不同类型的继承时，遵循以下几个规则：</p>\n<ul>\n<li><strong>公有继承（public）：</strong>当一个类派生自<strong>公有</strong>基类时，基类的<strong>公有</strong>成员也是派生类的<strong>公有</strong>成员，基类的<strong>保护</strong>成员也是派生类的<strong>保护</strong>成员，基类的<strong>私有</strong>成员不能直接被派生类访问，但是可以通过调用基类的<strong>公有</strong>和<strong>保护</strong>成员来访问。</li>\n<li><strong>保护继承（protected）：</strong> 当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</li>\n<li><strong>私有继承（private）：</strong>当一个类派生自<strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>成员。</li>\n</ul>\n</blockquote>\n<p>现在，我希望所有书都是被分了类的（如果不知道怎么分，就分到“未知分类”里面去），我们现在不允许直接创建一个Book对象，必须要先从Book继承一个专门的分类，再创建该分类的对象。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span> <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>virtual</code>意味着必须由子类来实现这些函数。这叫纯虚函数，关于virtual，还有更多用法。</p>\n<h2 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h2><p><code>virtual</code>要求必须由子类来实现，这就是重载。重载允许同名，但必须接受不同参数。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"1\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>提问</strong>：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//已经有了这个函数</span>\n<span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> the_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>the_name<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//又有了这个</span>\n<span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> the_ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>the_ISBN<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nBook <span class=\"token function\">b3</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Apollo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Apollo 会变成name还是ISBN？</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>C++编译器不允许这样的事情发生，会出现redefinition报错，编译器认为这两个是同一函数。因此，参数的类型应该有所区别。</p>\n<p>更进一步，考虑Book==Book</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">Book <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"apollo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nBook <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"apollo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//a.equal(b);</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>name <span class=\"token operator\">==</span> Book<span class=\"token double-colon punctuation\">::</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ISBN<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//写一个重载+，当两本书相同时，价格相加</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h2><p>一个对象创建完成后，也要销毁，我们应当定义它如何被销毁。</p>\n<h2 id=\"两种风格的对象\"><a href=\"#两种风格的对象\" class=\"headerlink\" title=\"两种风格的对象\"></a>两种风格的对象</h2><ul>\n<li>使这个对象像个“东西”，示例如上</li>\n<li>使这个对象像个“指针”，先看看内存管理</li>\n</ul>\n<h1 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h1><p><strong>提问</strong>：a+b中的内存是如何分配的？</p>\n<blockquote>\n<p><strong>栈区（stack）：</strong>指那些由编译器在需要的时候分配，不需要时自动清除的变量所在的储存区，如函数执行时，函数的形参以及函数内的局部变量分配在栈区，函数运行结束后，形参和局部变量去栈（自动释放）。栈内存分配运算内置与处理器的指令集中，效率高但是分配的内存空间有限。</p>\n<p><strong>堆区（heap）：</strong>指哪些由程序员手动分配释放的储存区，如果程序员不释放这块内存，内存将一直被占用，直到程序运行结束由系统自动收回，c语言中使用malloc，free申请和释放空间。</p>\n<p><strong>静态储存区（static）：</strong>全局变量和静态变量的储存是放在一块的，其中初始化的全局变量和静态变量在一个区域，这块空间当程序运行结束后由系统释放。</p>\n<p><strong>常量储存区（const）：</strong>常量字符串就是储存在这里的，如“ABC”字符串就储存在常量区，储存在常量区的只读不可写。const修饰的全局变量也储存在常量区，const修饰的局部变量依然在栈上。</p>\n<p><strong>程序代码区：</strong>存放源程序的二进制代码。</p>\n</blockquote>\n<p><strong>提问</strong>：如何创建一个长度不定的数组</p>\n<p>错误示范：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入数组的大小\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>正确示范：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入数组的大小\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入%d个数\\n\"</span><span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"手动内存管理\"><a href=\"#手动内存管理\" class=\"headerlink\" title=\"手动内存管理\"></a>手动内存管理</h2><p>C 使用malloc 分配内存和 free释放内存。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入数组的大小\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入%d个数\\n\"</span><span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>C++ 使用封装好的new 和delete</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入数组的大小\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">&lt;&lt;</span>N<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    cin<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"请输入%d个数\\n\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        cin<span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> <strong>提问</strong>：为什么不是delete p?</p>\n<h2 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h2><p>画图</p>\n<p><em>share_ptr</em> 的原理：对指针进行计数</p>\n<h1 id=\"使用STL库\"><a href=\"#使用STL库\" class=\"headerlink\" title=\"使用STL库\"></a>使用STL库</h1><h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><ul>\n<li>创建string</li>\n<li>string+</li>\n<li>insert</li>\n<li>substr</li>\n</ul>\n<h2 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h2><ul>\n<li>创建vector</li>\n<li>size</li>\n<li>begin</li>\n<li>end</li>\n<li>resize</li>\n</ul>\n<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><ul>\n<li>find</li>\n<li>rotate</li>\n<li>sort</li>\n<li>min</li>\n<li>max</li>\n</ul>\n<h2 id=\"Utility\"><a href=\"#Utility\" class=\"headerlink\" title=\"Utility\"></a>Utility</h2><ul>\n<li>swap</li>\n<li>pari</li>\n<li>tuple</li>\n</ul>\n<h1 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h1><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//book.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">_book</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_book</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"show.hpp\"</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//Book(double the_price):price(the_price)&#123;&#125;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//Book(double the_price,std::string the_name);</span>\n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>Book b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> <span class=\"token function\">set_price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">set_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">set_ISBN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show_price</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>string name<span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>string ISBN<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string ISBN<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//book.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"book.h\"</span></span>\n\n<span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//Book::Book(double the_price=0,std::string the_name):Book(the_price,the_name,\"\")&#123;&#125;</span>\n<span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_ISBN<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">,</span>the_name<span class=\"token punctuation\">,</span>the_ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>Book the_book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_name<span class=\"token punctuation\">,</span>std<span class=\"token double-colon punctuation\">::</span>string the_ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">set_price</span><span class=\"token punctuation\">(</span>the_price<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">set_name</span><span class=\"token punctuation\">(</span>the_name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">set_ISBN</span><span class=\"token punctuation\">(</span>the_ISBN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token class-name\">Book</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">set_price</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> the_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>the_price<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>price<span class=\"token operator\">=</span>the_price<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//set_name 和 set_ISBN 略</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//show.hpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">show_price</span><span class=\"token punctuation\">(</span>Book the_book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span>the_book<span class=\"token punctuation\">.</span>price<span class=\"token operator\">&lt;&lt;</span>std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//main.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"book.hpp\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    Book b<span class=\"token punctuation\">;</span>\n    b<span class=\"token punctuation\">.</span><span class=\"token function\">set_price</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">show_price</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Book <span class=\"token function\">bb</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//Book bb=b;</span>\n    <span class=\"token comment\">//Book bb&#123;b&#125;;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"Apollo2D\"><a href=\"#Apollo2D\" class=\"headerlink\" title=\"Apollo2D\"></a>Apollo2D</h1><p>//这里是Agent2d中的WorldModel</p>\n"},{"author":"kawhicurry","title":"起一个mongodb","top":0,"cover":0,"date":"2021-12-23T04:58:30.000Z","img":null,"coverImg":null,"summary":null,"keywords":null,"_content":"\n第一件事：`mongodb` , 不是\n\n- mongdb\n- mogodb\n- ......\n\n为了给RssSubcriber起一个数据库，在阿里云上搭了一个，本来想着直接用阿里云的市场镜像的，拿下来之后发现根本不知道咋用。。。还不如自己起一个。\n\n官方文档中给了使用包管理工具按照的方法：<https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/>\n\n大概步骤就是添加仓库然后直接安装完事。\n\n然后是要改一下配置文件，mongodb的配置文件位于`/etc/mongo.conf`，主要是将其中的\n\n```\nnet:\n   bindIp: 127.0.0.1\n   port: 27017\n```\n\n这里的`bindIp`表示监听的地址，这里只监听了本地，我将其该外`0.0.0.0`即可保证外网随时访问。\n\n然后下面的`port`也要记得加入阿里云的安全组。\n","source":"_posts/Back-end/起一个mongodb.md","raw":"---\nauthor: kawhicurry\ntitle: 起一个mongodb\ncategories:\n  - Back-end\ntop: 0\ncover: 0\ntags: mongodb\ndate: 2021-12-23 12:58:30\nimg:\ncoverImg:\nsummary:\nkeywords:\n---\n\n第一件事：`mongodb` , 不是\n\n- mongdb\n- mogodb\n- ......\n\n为了给RssSubcriber起一个数据库，在阿里云上搭了一个，本来想着直接用阿里云的市场镜像的，拿下来之后发现根本不知道咋用。。。还不如自己起一个。\n\n官方文档中给了使用包管理工具按照的方法：<https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/>\n\n大概步骤就是添加仓库然后直接安装完事。\n\n然后是要改一下配置文件，mongodb的配置文件位于`/etc/mongo.conf`，主要是将其中的\n\n```\nnet:\n   bindIp: 127.0.0.1\n   port: 27017\n```\n\n这里的`bindIp`表示监听的地址，这里只监听了本地，我将其该外`0.0.0.0`即可保证外网随时访问。\n\n然后下面的`port`也要记得加入阿里云的安全组。\n","slug":"起一个mongodb","published":1,"category":"Back-end","updated":"2021-12-23T13:31:28.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxlot1jx000s24ulfeaedt7g","content":"<p>第一件事：<code>mongodb</code> , 不是</p>\n<ul>\n<li>mongdb</li>\n<li>mogodb</li>\n<li>……</li>\n</ul>\n<p>为了给RssSubcriber起一个数据库，在阿里云上搭了一个，本来想着直接用阿里云的市场镜像的，拿下来之后发现根本不知道咋用。。。还不如自己起一个。</p>\n<p>官方文档中给了使用包管理工具按照的方法：<a href=\"https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/\">https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/</a></p>\n<p>大概步骤就是添加仓库然后直接安装完事。</p>\n<p>然后是要改一下配置文件，mongodb的配置文件位于<code>/etc/mongo.conf</code>，主要是将其中的</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">net:\n   bindIp: 127.0.0.1\n   port: 27017<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这里的<code>bindIp</code>表示监听的地址，这里只监听了本地，我将其该外<code>0.0.0.0</code>即可保证外网随时访问。</p>\n<p>然后下面的<code>port</code>也要记得加入阿里云的安全组。</p>\n","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<p>第一件事：<code>mongodb</code> , 不是</p>\n<ul>\n<li>mongdb</li>\n<li>mogodb</li>\n<li>……</li>\n</ul>\n<p>为了给RssSubcriber起一个数据库，在阿里云上搭了一个，本来想着直接用阿里云的市场镜像的，拿下来之后发现根本不知道咋用。。。还不如自己起一个。</p>\n<p>官方文档中给了使用包管理工具按照的方法：<a href=\"https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/\">https://mongodb.net.cn/manual/tutorial/install-mongodb-on-red-hat/</a></p>\n<p>大概步骤就是添加仓库然后直接安装完事。</p>\n<p>然后是要改一下配置文件，mongodb的配置文件位于<code>/etc/mongo.conf</code>，主要是将其中的</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">net:\n   bindIp: 127.0.0.1\n   port: 27017<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这里的<code>bindIp</code>表示监听的地址，这里只监听了本地，我将其该外<code>0.0.0.0</code>即可保证外网随时访问。</p>\n<p>然后下面的<code>port</code>也要记得加入阿里云的安全组。</p>\n"},{"author":"kawhicurry","title":"log-a-git-error","date":"2021-11-10T12:01:01.000Z","_content":"\nWhen I tried to clone a repo from self-built gitlab. I met a error like this：\n\n```bash\n$> git clone https://git.qingyou.ren/KawhiCurry/ansible.git  Cloning into 'ansible'...\nfatal: unable to access 'https://git.qingyou.ren/KawhiCurry/ansible.git/': Failed to connect to 127.0.0.1 port 7890: Connection refused\n```\n\nAnyway, 7890 refuse me. Finally, I got this: [cnblogs](https://www.cnblogs.com/lfri/p/15377383.html)\n\nSeems my proxy(or vpn?)ruin it. It leads my git somewhere strange.\n\nrecord the operation here.\n\n```bash\ngit config --global -l\ngit config --global -e\n//delete or comment on the lines about port\n```\n\n","source":"_posts/Operation/log-a-git-error.md","raw":"---\nauthor: kawhicurry\ntitle: log-a-git-error\ncategories:\n  - Operation\ntags: git\ndate: 2021-11-10 20:01:01\n---\n\nWhen I tried to clone a repo from self-built gitlab. I met a error like this：\n\n```bash\n$> git clone https://git.qingyou.ren/KawhiCurry/ansible.git  Cloning into 'ansible'...\nfatal: unable to access 'https://git.qingyou.ren/KawhiCurry/ansible.git/': Failed to connect to 127.0.0.1 port 7890: Connection refused\n```\n\nAnyway, 7890 refuse me. Finally, I got this: [cnblogs](https://www.cnblogs.com/lfri/p/15377383.html)\n\nSeems my proxy(or vpn?)ruin it. It leads my git somewhere strange.\n\nrecord the operation here.\n\n```bash\ngit config --global -l\ngit config --global -e\n//delete or comment on the lines about port\n```\n\n","slug":"log-a-git-error","published":1,"category":"Operation","updated":"2021-12-23T13:31:28.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxlot1jy000u24ulg64t6tly","content":"<p>When I tried to clone a repo from self-built gitlab. I met a error like this：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$<span class=\"token operator\">></span> <span class=\"token function\">git</span> clone https://git.qingyou.ren/KawhiCurry/ansible.git  Cloning into <span class=\"token string\">'ansible'</span><span class=\"token punctuation\">..</span>.\nfatal: unable to access <span class=\"token string\">'https://git.qingyou.ren/KawhiCurry/ansible.git/'</span><span class=\"token builtin class-name\">:</span> Failed to connect to <span class=\"token number\">127.0</span>.0.1 port <span class=\"token number\">7890</span>: Connection refused<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>Anyway, 7890 refuse me. Finally, I got this: <a href=\"https://www.cnblogs.com/lfri/p/15377383.html\">cnblogs</a></p>\n<p>Seems my proxy(or vpn?)ruin it. It leads my git somewhere strange.</p>\n<p>record the operation here.</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global -l\n<span class=\"token function\">git</span> config --global -e\n//delete or comment on the lines about port<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<p>When I tried to clone a repo from self-built gitlab. I met a error like this：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$<span class=\"token operator\">></span> <span class=\"token function\">git</span> clone https://git.qingyou.ren/KawhiCurry/ansible.git  Cloning into <span class=\"token string\">'ansible'</span><span class=\"token punctuation\">..</span>.\nfatal: unable to access <span class=\"token string\">'https://git.qingyou.ren/KawhiCurry/ansible.git/'</span><span class=\"token builtin class-name\">:</span> Failed to connect to <span class=\"token number\">127.0</span>.0.1 port <span class=\"token number\">7890</span>: Connection refused<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>Anyway, 7890 refuse me. Finally, I got this: <a href=\"https://www.cnblogs.com/lfri/p/15377383.html\">cnblogs</a></p>\n<p>Seems my proxy(or vpn?)ruin it. It leads my git somewhere strange.</p>\n<p>record the operation here.</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global -l\n<span class=\"token function\">git</span> config --global -e\n//delete or comment on the lines about port<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n"},{"author":"kawhicurry","title":"log-a-rsync-mistake","date":"2021-12-03T08:16:26.000Z","_content":"\n# log a rsync mistake\n\nI want to sync some files from 2 directories `mirror1` and`mirror2`.So I run:\n\n```bash\nnohup rsync <src>/mirror1 ./tmp -a --delete &\nnohup rsync <src>/mirror2 ./tmp -a --delete &\n```\n\nthe argument `--delete` would delete all the file not exist in source directories. So only second command make effect.\n\nAvoid abusing of `--delete` when using `rsync`. \n","source":"_posts/Operation/log-a-rsync-mistake.md","raw":"---\nauthor: kawhicurry\ntitle: log-a-rsync-mistake\ncategories:\n  - Operation\ntags: rsync\ndate: 2021-12-03 16:16:26\n---\n\n# log a rsync mistake\n\nI want to sync some files from 2 directories `mirror1` and`mirror2`.So I run:\n\n```bash\nnohup rsync <src>/mirror1 ./tmp -a --delete &\nnohup rsync <src>/mirror2 ./tmp -a --delete &\n```\n\nthe argument `--delete` would delete all the file not exist in source directories. So only second command make effect.\n\nAvoid abusing of `--delete` when using `rsync`. \n","slug":"log-a-rsync-mistake","published":1,"category":"Operation","updated":"2021-12-23T13:31:28.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxlot1jz000y24ul3l3q30cz","content":"<h1 id=\"log-a-rsync-mistake\"><a href=\"#log-a-rsync-mistake\" class=\"headerlink\" title=\"log a rsync mistake\"></a>log a rsync mistake</h1><p>I want to sync some files from 2 directories <code>mirror1</code> and<code>mirror2</code>.So I run:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nohup</span> <span class=\"token function\">rsync</span> <span class=\"token operator\">&lt;</span>src<span class=\"token operator\">></span>/mirror1 ./tmp -a --delete <span class=\"token operator\">&amp;</span>\n<span class=\"token function\">nohup</span> <span class=\"token function\">rsync</span> <span class=\"token operator\">&lt;</span>src<span class=\"token operator\">></span>/mirror2 ./tmp -a --delete <span class=\"token operator\">&amp;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>the argument <code>--delete</code> would delete all the file not exist in source directories. So only second command make effect.</p>\n<p>Avoid abusing of <code>--delete</code> when using <code>rsync</code>. </p>\n","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<h1 id=\"log-a-rsync-mistake\"><a href=\"#log-a-rsync-mistake\" class=\"headerlink\" title=\"log a rsync mistake\"></a>log a rsync mistake</h1><p>I want to sync some files from 2 directories <code>mirror1</code> and<code>mirror2</code>.So I run:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nohup</span> <span class=\"token function\">rsync</span> <span class=\"token operator\">&lt;</span>src<span class=\"token operator\">></span>/mirror1 ./tmp -a --delete <span class=\"token operator\">&amp;</span>\n<span class=\"token function\">nohup</span> <span class=\"token function\">rsync</span> <span class=\"token operator\">&lt;</span>src<span class=\"token operator\">></span>/mirror2 ./tmp -a --delete <span class=\"token operator\">&amp;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>the argument <code>--delete</code> would delete all the file not exist in source directories. So only second command make effect.</p>\n<p>Avoid abusing of <code>--delete</code> when using <code>rsync</code>. </p>\n"},{"author":"kawhicurry","title":"Situation of operation technology","date":"2021-11-13T12:01:01.000Z","_content":"# 一个软件的诞生\n\n## 开发过程\n\n准备：市场调查、需求分析……\n\n确定方案：技术，平台\n\n开发：\n\n- 设计&前端：界面\n- 后端：业务逻辑\n\n上线：\n\n- 运营：宣传\n- 运维：服务器维护\n\n# 传统的运维方式\n\n把写好的软件部署到服务器上，跑就完事了。\n\n## 如果业务量大了呢？\n\n用一样的方式部署到很多服务器上，跑就完事了。\n\n## 有什么问题？\n\n- **必须时刻以最大业务量安排服务器数量**，成本高。\n- 每个公司都要有专职运维人员，招人难\n- 运维人员无论水平高低，所能管理的服务器数量有上限\n- 遇到突发状况，所需运维人员数量陡增，而保持一个大量运维团队需要高成本\n\n# 一种趋势\n\n所需管理的服务器数量庞大，但大部分工作都是重复的。所以……\n\n## CI/CD\n\n持续集成，持续交付，持续部署。让后端开发人员（数量庞大，不乏牛人）来完成运维工作\n\n## Devops\n\n运维开发，专门开发运维工具的人。试图将运维工作尽可能的自动化。\n\n# 另一种趋势\n\n## 虚拟化技术的进步\n\n最初的虚拟化：让windows的应用在mac上跑起来（纯举例），虚拟化的环境具有完整的系统，可以在另一个操作系统上跑起来。在性能上具有极大的开销（就是会很慢）\n\n容器化：让一个应用在一个容器中运行，该容器具有该应用所需的全部环境。一个容器就是一个进程，开销较小，与操作系统兼容良好（主要指linux）\n\n## 容器时代\n\n不再关注各式各样的环境问题，所需要的环境都可以打包成容器，并且可以使用别人打包好的容器。\n\n**docker**:第一个开源容器技术的公司，现在仍然是王者。\n\ndocker的开源使得任何人都可以轻松部署各式各样的服务，因为环境的配置已经不是难题。但是对于企业来说，问题仍然存在：每个服务器上都可以跑好几个容器，就像以前一个服务器上可以跑好几个应用一样。如果有几千台呢？几万台呢？\n\n## 容器编排\n\n能不能让不同的服务器上的容器连成一个整体？或者自动编排容器，让它们在合适的时间或者位置提供服务？\n\n**kubernetes**:来自google，简称k8s，容器编排唯一的标准，生态的中心。\n\n允许将多个提供同一服务的容器打包成一个pod（豆荚），将多个服务器设置为一个cluster（集群），由k8s来决定pod在哪台服务器上运行。并且k8s可以在不同服务器上启动相同的pod，当一台服务器出现故障时，k8s迅速在其他服务器上添加故障服务器上运行的pod，从而保证了服务的稳定性。\n\n即成事实：**k8s是生态的中心**\n\n围绕k8s的生态：监控，流水线部署，自动预警，网格化网关，容器化数据库以及**serverless**\n\n*k8s标志着云时代的正式开始*\n\n## 再进一步\n\n如果容器可以方便的创建和销毁，能不能更进一步？\n\n当有请求时才创建容器进行服务（而不是一直等着），请求结束就销毁容器，这便是**Serverless**，来自Amazon（亚马逊）\n\n**Serverless**，无服务器技术，只有有需求的时候才服务。\n\n试想一个秒杀系统，在短暂的几秒内，服务器收到了数以亿记的请求，服务器立刻反应，创建大量容器进行服务，每服务完就立即销毁，把资源留给下一个创建的容器。而在几秒前或几秒后，服务器也许还处于一个“清闲”的状态。当前的serverless按照请求数计费，小公司无需按最大并发量购置服务器，只需直接购买serverless服务。\n\n# 云服务现状\n\n自k8s被推出以后，大公司们成立了CNCF（云原生计算基金会）。示例成员：google、AWS（亚马逊，世界最大的云服务供应商，serverless的领头羊）、RedHat（红帽，世界上最大的服务器软件公司，负责的centos操作系统跑在世界上百分之五十以上，中国百分之八十以上的服务器上）、docker、apache基金会（最成熟的服务器软件apache拥有者）、github、gitlab（二者分别为最大的代码托管网站和最大的开源私有git服务提供商）、华为（独立的鲲鹏架构）。\n\n## 国内环境\n\n- 阿里云：全国最大的云服务供应商，对内为淘宝等提供服务，对外为各类企业提供云服务。\n- 腾讯云：对内有qq、微信、微信小程序等业务。拥有独立的小程序平台。\n- 华为云：有自产鲲鹏服务器，使用与绝大多数服务器不一样的arm架构（大部分服务器包括个人电脑都是amd64，也叫x86-64，但苹果的自研芯片M1是arm）。\n- 七牛云：阿里云出走大佬创办，有一定实力。\n- 青云：一个k8s开源集群管理系统的国内主导者。\n\n现状分析：\n\n> 一方面，围绕容器和容器编排的标准已经制定完成，但基于标准的各项指标仍有提升空间，各大公司仍然在试图在这些标准下做出更好的工具，比如容器和容器的构建工具。另一方面，围绕生态的工具也有许多不完善之处，比如一个让不懂运维的人也能轻松部署的自动部署平台，或是一个完善的部署到监控的工具链。这些被统称为“云基础设施”，云基础设施仍然有许多待完善之处。对于互联网行业来说，传统的运维会越来越少（但绝对不会消失），更多企业倾向于请云服务供应商来构建自己的服务，甚至直接将自身服务交给云供应商。反过来，云供应商也要开发更好的云平台给企业使用。\n\n# 一些其他的机会\n\n## 云与AI\n\n当服务器闲下来可以做什么？挖矿（划掉）。服务器被设计成可以不间断的运行，但很显然它并不会真的时刻运行，当它闲下来时，其算力就有大用途，比如用于机器学习。当然，对于专业的ai公司，他们也有自己的服务器集群，如何利用互联网的云服务来管理自己的集群，也成了一个不错的方向。\n\n## 云与物联网\n\n专业的物联网后端早就有了，尤其是近年来通信行业的进步，更加促进了“计算不一定非要在本地完成”这种概念的推广。对于传统控制行业来说，大多数计算会在嵌入式设备（看作是一个低性能的计算机）上完成，底层工程师们不得不想尽办法优化性能，确保其服务能稳定的运行在嵌入式设备中。而现在，这些计算有望在很远的云服务器上完成。（当然，嵌入式设备工程师并不会消失）\n\n这就是我对这个行业的一些了解。","source":"_posts/Operation/net-server-0.md","raw":"---\nauthor: kawhicurry\ntitle: Situation of operation technology\ncategories:\n  - Operation\ntags: git\ndate: 2021-11-13 20:01:01\n---\n# 一个软件的诞生\n\n## 开发过程\n\n准备：市场调查、需求分析……\n\n确定方案：技术，平台\n\n开发：\n\n- 设计&前端：界面\n- 后端：业务逻辑\n\n上线：\n\n- 运营：宣传\n- 运维：服务器维护\n\n# 传统的运维方式\n\n把写好的软件部署到服务器上，跑就完事了。\n\n## 如果业务量大了呢？\n\n用一样的方式部署到很多服务器上，跑就完事了。\n\n## 有什么问题？\n\n- **必须时刻以最大业务量安排服务器数量**，成本高。\n- 每个公司都要有专职运维人员，招人难\n- 运维人员无论水平高低，所能管理的服务器数量有上限\n- 遇到突发状况，所需运维人员数量陡增，而保持一个大量运维团队需要高成本\n\n# 一种趋势\n\n所需管理的服务器数量庞大，但大部分工作都是重复的。所以……\n\n## CI/CD\n\n持续集成，持续交付，持续部署。让后端开发人员（数量庞大，不乏牛人）来完成运维工作\n\n## Devops\n\n运维开发，专门开发运维工具的人。试图将运维工作尽可能的自动化。\n\n# 另一种趋势\n\n## 虚拟化技术的进步\n\n最初的虚拟化：让windows的应用在mac上跑起来（纯举例），虚拟化的环境具有完整的系统，可以在另一个操作系统上跑起来。在性能上具有极大的开销（就是会很慢）\n\n容器化：让一个应用在一个容器中运行，该容器具有该应用所需的全部环境。一个容器就是一个进程，开销较小，与操作系统兼容良好（主要指linux）\n\n## 容器时代\n\n不再关注各式各样的环境问题，所需要的环境都可以打包成容器，并且可以使用别人打包好的容器。\n\n**docker**:第一个开源容器技术的公司，现在仍然是王者。\n\ndocker的开源使得任何人都可以轻松部署各式各样的服务，因为环境的配置已经不是难题。但是对于企业来说，问题仍然存在：每个服务器上都可以跑好几个容器，就像以前一个服务器上可以跑好几个应用一样。如果有几千台呢？几万台呢？\n\n## 容器编排\n\n能不能让不同的服务器上的容器连成一个整体？或者自动编排容器，让它们在合适的时间或者位置提供服务？\n\n**kubernetes**:来自google，简称k8s，容器编排唯一的标准，生态的中心。\n\n允许将多个提供同一服务的容器打包成一个pod（豆荚），将多个服务器设置为一个cluster（集群），由k8s来决定pod在哪台服务器上运行。并且k8s可以在不同服务器上启动相同的pod，当一台服务器出现故障时，k8s迅速在其他服务器上添加故障服务器上运行的pod，从而保证了服务的稳定性。\n\n即成事实：**k8s是生态的中心**\n\n围绕k8s的生态：监控，流水线部署，自动预警，网格化网关，容器化数据库以及**serverless**\n\n*k8s标志着云时代的正式开始*\n\n## 再进一步\n\n如果容器可以方便的创建和销毁，能不能更进一步？\n\n当有请求时才创建容器进行服务（而不是一直等着），请求结束就销毁容器，这便是**Serverless**，来自Amazon（亚马逊）\n\n**Serverless**，无服务器技术，只有有需求的时候才服务。\n\n试想一个秒杀系统，在短暂的几秒内，服务器收到了数以亿记的请求，服务器立刻反应，创建大量容器进行服务，每服务完就立即销毁，把资源留给下一个创建的容器。而在几秒前或几秒后，服务器也许还处于一个“清闲”的状态。当前的serverless按照请求数计费，小公司无需按最大并发量购置服务器，只需直接购买serverless服务。\n\n# 云服务现状\n\n自k8s被推出以后，大公司们成立了CNCF（云原生计算基金会）。示例成员：google、AWS（亚马逊，世界最大的云服务供应商，serverless的领头羊）、RedHat（红帽，世界上最大的服务器软件公司，负责的centos操作系统跑在世界上百分之五十以上，中国百分之八十以上的服务器上）、docker、apache基金会（最成熟的服务器软件apache拥有者）、github、gitlab（二者分别为最大的代码托管网站和最大的开源私有git服务提供商）、华为（独立的鲲鹏架构）。\n\n## 国内环境\n\n- 阿里云：全国最大的云服务供应商，对内为淘宝等提供服务，对外为各类企业提供云服务。\n- 腾讯云：对内有qq、微信、微信小程序等业务。拥有独立的小程序平台。\n- 华为云：有自产鲲鹏服务器，使用与绝大多数服务器不一样的arm架构（大部分服务器包括个人电脑都是amd64，也叫x86-64，但苹果的自研芯片M1是arm）。\n- 七牛云：阿里云出走大佬创办，有一定实力。\n- 青云：一个k8s开源集群管理系统的国内主导者。\n\n现状分析：\n\n> 一方面，围绕容器和容器编排的标准已经制定完成，但基于标准的各项指标仍有提升空间，各大公司仍然在试图在这些标准下做出更好的工具，比如容器和容器的构建工具。另一方面，围绕生态的工具也有许多不完善之处，比如一个让不懂运维的人也能轻松部署的自动部署平台，或是一个完善的部署到监控的工具链。这些被统称为“云基础设施”，云基础设施仍然有许多待完善之处。对于互联网行业来说，传统的运维会越来越少（但绝对不会消失），更多企业倾向于请云服务供应商来构建自己的服务，甚至直接将自身服务交给云供应商。反过来，云供应商也要开发更好的云平台给企业使用。\n\n# 一些其他的机会\n\n## 云与AI\n\n当服务器闲下来可以做什么？挖矿（划掉）。服务器被设计成可以不间断的运行，但很显然它并不会真的时刻运行，当它闲下来时，其算力就有大用途，比如用于机器学习。当然，对于专业的ai公司，他们也有自己的服务器集群，如何利用互联网的云服务来管理自己的集群，也成了一个不错的方向。\n\n## 云与物联网\n\n专业的物联网后端早就有了，尤其是近年来通信行业的进步，更加促进了“计算不一定非要在本地完成”这种概念的推广。对于传统控制行业来说，大多数计算会在嵌入式设备（看作是一个低性能的计算机）上完成，底层工程师们不得不想尽办法优化性能，确保其服务能稳定的运行在嵌入式设备中。而现在，这些计算有望在很远的云服务器上完成。（当然，嵌入式设备工程师并不会消失）\n\n这就是我对这个行业的一些了解。","slug":"net-server-0","published":1,"category":"Operation","updated":"2021-12-23T13:31:28.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxlot1k0001024ulfiezgn2p","content":"<h1 id=\"一个软件的诞生\"><a href=\"#一个软件的诞生\" class=\"headerlink\" title=\"一个软件的诞生\"></a>一个软件的诞生</h1><h2 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h2><p>准备：市场调查、需求分析……</p>\n<p>确定方案：技术，平台</p>\n<p>开发：</p>\n<ul>\n<li>设计&amp;前端：界面</li>\n<li>后端：业务逻辑</li>\n</ul>\n<p>上线：</p>\n<ul>\n<li>运营：宣传</li>\n<li>运维：服务器维护</li>\n</ul>\n<h1 id=\"传统的运维方式\"><a href=\"#传统的运维方式\" class=\"headerlink\" title=\"传统的运维方式\"></a>传统的运维方式</h1><p>把写好的软件部署到服务器上，跑就完事了。</p>\n<h2 id=\"如果业务量大了呢？\"><a href=\"#如果业务量大了呢？\" class=\"headerlink\" title=\"如果业务量大了呢？\"></a>如果业务量大了呢？</h2><p>用一样的方式部署到很多服务器上，跑就完事了。</p>\n<h2 id=\"有什么问题？\"><a href=\"#有什么问题？\" class=\"headerlink\" title=\"有什么问题？\"></a>有什么问题？</h2><ul>\n<li><strong>必须时刻以最大业务量安排服务器数量</strong>，成本高。</li>\n<li>每个公司都要有专职运维人员，招人难</li>\n<li>运维人员无论水平高低，所能管理的服务器数量有上限</li>\n<li>遇到突发状况，所需运维人员数量陡增，而保持一个大量运维团队需要高成本</li>\n</ul>\n<h1 id=\"一种趋势\"><a href=\"#一种趋势\" class=\"headerlink\" title=\"一种趋势\"></a>一种趋势</h1><p>所需管理的服务器数量庞大，但大部分工作都是重复的。所以……</p>\n<h2 id=\"CI-CD\"><a href=\"#CI-CD\" class=\"headerlink\" title=\"CI/CD\"></a>CI/CD</h2><p>持续集成，持续交付，持续部署。让后端开发人员（数量庞大，不乏牛人）来完成运维工作</p>\n<h2 id=\"Devops\"><a href=\"#Devops\" class=\"headerlink\" title=\"Devops\"></a>Devops</h2><p>运维开发，专门开发运维工具的人。试图将运维工作尽可能的自动化。</p>\n<h1 id=\"另一种趋势\"><a href=\"#另一种趋势\" class=\"headerlink\" title=\"另一种趋势\"></a>另一种趋势</h1><h2 id=\"虚拟化技术的进步\"><a href=\"#虚拟化技术的进步\" class=\"headerlink\" title=\"虚拟化技术的进步\"></a>虚拟化技术的进步</h2><p>最初的虚拟化：让windows的应用在mac上跑起来（纯举例），虚拟化的环境具有完整的系统，可以在另一个操作系统上跑起来。在性能上具有极大的开销（就是会很慢）</p>\n<p>容器化：让一个应用在一个容器中运行，该容器具有该应用所需的全部环境。一个容器就是一个进程，开销较小，与操作系统兼容良好（主要指linux）</p>\n<h2 id=\"容器时代\"><a href=\"#容器时代\" class=\"headerlink\" title=\"容器时代\"></a>容器时代</h2><p>不再关注各式各样的环境问题，所需要的环境都可以打包成容器，并且可以使用别人打包好的容器。</p>\n<p><strong>docker</strong>:第一个开源容器技术的公司，现在仍然是王者。</p>\n<p>docker的开源使得任何人都可以轻松部署各式各样的服务，因为环境的配置已经不是难题。但是对于企业来说，问题仍然存在：每个服务器上都可以跑好几个容器，就像以前一个服务器上可以跑好几个应用一样。如果有几千台呢？几万台呢？</p>\n<h2 id=\"容器编排\"><a href=\"#容器编排\" class=\"headerlink\" title=\"容器编排\"></a>容器编排</h2><p>能不能让不同的服务器上的容器连成一个整体？或者自动编排容器，让它们在合适的时间或者位置提供服务？</p>\n<p><strong>kubernetes</strong>:来自google，简称k8s，容器编排唯一的标准，生态的中心。</p>\n<p>允许将多个提供同一服务的容器打包成一个pod（豆荚），将多个服务器设置为一个cluster（集群），由k8s来决定pod在哪台服务器上运行。并且k8s可以在不同服务器上启动相同的pod，当一台服务器出现故障时，k8s迅速在其他服务器上添加故障服务器上运行的pod，从而保证了服务的稳定性。</p>\n<p>即成事实：<strong>k8s是生态的中心</strong></p>\n<p>围绕k8s的生态：监控，流水线部署，自动预警，网格化网关，容器化数据库以及<strong>serverless</strong></p>\n<p><em>k8s标志着云时代的正式开始</em></p>\n<h2 id=\"再进一步\"><a href=\"#再进一步\" class=\"headerlink\" title=\"再进一步\"></a>再进一步</h2><p>如果容器可以方便的创建和销毁，能不能更进一步？</p>\n<p>当有请求时才创建容器进行服务（而不是一直等着），请求结束就销毁容器，这便是<strong>Serverless</strong>，来自Amazon（亚马逊）</p>\n<p><strong>Serverless</strong>，无服务器技术，只有有需求的时候才服务。</p>\n<p>试想一个秒杀系统，在短暂的几秒内，服务器收到了数以亿记的请求，服务器立刻反应，创建大量容器进行服务，每服务完就立即销毁，把资源留给下一个创建的容器。而在几秒前或几秒后，服务器也许还处于一个“清闲”的状态。当前的serverless按照请求数计费，小公司无需按最大并发量购置服务器，只需直接购买serverless服务。</p>\n<h1 id=\"云服务现状\"><a href=\"#云服务现状\" class=\"headerlink\" title=\"云服务现状\"></a>云服务现状</h1><p>自k8s被推出以后，大公司们成立了CNCF（云原生计算基金会）。示例成员：google、AWS（亚马逊，世界最大的云服务供应商，serverless的领头羊）、RedHat（红帽，世界上最大的服务器软件公司，负责的centos操作系统跑在世界上百分之五十以上，中国百分之八十以上的服务器上）、docker、apache基金会（最成熟的服务器软件apache拥有者）、github、gitlab（二者分别为最大的代码托管网站和最大的开源私有git服务提供商）、华为（独立的鲲鹏架构）。</p>\n<h2 id=\"国内环境\"><a href=\"#国内环境\" class=\"headerlink\" title=\"国内环境\"></a>国内环境</h2><ul>\n<li>阿里云：全国最大的云服务供应商，对内为淘宝等提供服务，对外为各类企业提供云服务。</li>\n<li>腾讯云：对内有qq、微信、微信小程序等业务。拥有独立的小程序平台。</li>\n<li>华为云：有自产鲲鹏服务器，使用与绝大多数服务器不一样的arm架构（大部分服务器包括个人电脑都是amd64，也叫x86-64，但苹果的自研芯片M1是arm）。</li>\n<li>七牛云：阿里云出走大佬创办，有一定实力。</li>\n<li>青云：一个k8s开源集群管理系统的国内主导者。</li>\n</ul>\n<p>现状分析：</p>\n<blockquote>\n<p>一方面，围绕容器和容器编排的标准已经制定完成，但基于标准的各项指标仍有提升空间，各大公司仍然在试图在这些标准下做出更好的工具，比如容器和容器的构建工具。另一方面，围绕生态的工具也有许多不完善之处，比如一个让不懂运维的人也能轻松部署的自动部署平台，或是一个完善的部署到监控的工具链。这些被统称为“云基础设施”，云基础设施仍然有许多待完善之处。对于互联网行业来说，传统的运维会越来越少（但绝对不会消失），更多企业倾向于请云服务供应商来构建自己的服务，甚至直接将自身服务交给云供应商。反过来，云供应商也要开发更好的云平台给企业使用。</p>\n</blockquote>\n<h1 id=\"一些其他的机会\"><a href=\"#一些其他的机会\" class=\"headerlink\" title=\"一些其他的机会\"></a>一些其他的机会</h1><h2 id=\"云与AI\"><a href=\"#云与AI\" class=\"headerlink\" title=\"云与AI\"></a>云与AI</h2><p>当服务器闲下来可以做什么？挖矿（划掉）。服务器被设计成可以不间断的运行，但很显然它并不会真的时刻运行，当它闲下来时，其算力就有大用途，比如用于机器学习。当然，对于专业的ai公司，他们也有自己的服务器集群，如何利用互联网的云服务来管理自己的集群，也成了一个不错的方向。</p>\n<h2 id=\"云与物联网\"><a href=\"#云与物联网\" class=\"headerlink\" title=\"云与物联网\"></a>云与物联网</h2><p>专业的物联网后端早就有了，尤其是近年来通信行业的进步，更加促进了“计算不一定非要在本地完成”这种概念的推广。对于传统控制行业来说，大多数计算会在嵌入式设备（看作是一个低性能的计算机）上完成，底层工程师们不得不想尽办法优化性能，确保其服务能稳定的运行在嵌入式设备中。而现在，这些计算有望在很远的云服务器上完成。（当然，嵌入式设备工程师并不会消失）</p>\n<p>这就是我对这个行业的一些了解。</p>\n","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<h1 id=\"一个软件的诞生\"><a href=\"#一个软件的诞生\" class=\"headerlink\" title=\"一个软件的诞生\"></a>一个软件的诞生</h1><h2 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h2><p>准备：市场调查、需求分析……</p>\n<p>确定方案：技术，平台</p>\n<p>开发：</p>\n<ul>\n<li>设计&amp;前端：界面</li>\n<li>后端：业务逻辑</li>\n</ul>\n<p>上线：</p>\n<ul>\n<li>运营：宣传</li>\n<li>运维：服务器维护</li>\n</ul>\n<h1 id=\"传统的运维方式\"><a href=\"#传统的运维方式\" class=\"headerlink\" title=\"传统的运维方式\"></a>传统的运维方式</h1><p>把写好的软件部署到服务器上，跑就完事了。</p>\n<h2 id=\"如果业务量大了呢？\"><a href=\"#如果业务量大了呢？\" class=\"headerlink\" title=\"如果业务量大了呢？\"></a>如果业务量大了呢？</h2><p>用一样的方式部署到很多服务器上，跑就完事了。</p>\n<h2 id=\"有什么问题？\"><a href=\"#有什么问题？\" class=\"headerlink\" title=\"有什么问题？\"></a>有什么问题？</h2><ul>\n<li><strong>必须时刻以最大业务量安排服务器数量</strong>，成本高。</li>\n<li>每个公司都要有专职运维人员，招人难</li>\n<li>运维人员无论水平高低，所能管理的服务器数量有上限</li>\n<li>遇到突发状况，所需运维人员数量陡增，而保持一个大量运维团队需要高成本</li>\n</ul>\n<h1 id=\"一种趋势\"><a href=\"#一种趋势\" class=\"headerlink\" title=\"一种趋势\"></a>一种趋势</h1><p>所需管理的服务器数量庞大，但大部分工作都是重复的。所以……</p>\n<h2 id=\"CI-CD\"><a href=\"#CI-CD\" class=\"headerlink\" title=\"CI/CD\"></a>CI/CD</h2><p>持续集成，持续交付，持续部署。让后端开发人员（数量庞大，不乏牛人）来完成运维工作</p>\n<h2 id=\"Devops\"><a href=\"#Devops\" class=\"headerlink\" title=\"Devops\"></a>Devops</h2><p>运维开发，专门开发运维工具的人。试图将运维工作尽可能的自动化。</p>\n<h1 id=\"另一种趋势\"><a href=\"#另一种趋势\" class=\"headerlink\" title=\"另一种趋势\"></a>另一种趋势</h1><h2 id=\"虚拟化技术的进步\"><a href=\"#虚拟化技术的进步\" class=\"headerlink\" title=\"虚拟化技术的进步\"></a>虚拟化技术的进步</h2><p>最初的虚拟化：让windows的应用在mac上跑起来（纯举例），虚拟化的环境具有完整的系统，可以在另一个操作系统上跑起来。在性能上具有极大的开销（就是会很慢）</p>\n<p>容器化：让一个应用在一个容器中运行，该容器具有该应用所需的全部环境。一个容器就是一个进程，开销较小，与操作系统兼容良好（主要指linux）</p>\n<h2 id=\"容器时代\"><a href=\"#容器时代\" class=\"headerlink\" title=\"容器时代\"></a>容器时代</h2><p>不再关注各式各样的环境问题，所需要的环境都可以打包成容器，并且可以使用别人打包好的容器。</p>\n<p><strong>docker</strong>:第一个开源容器技术的公司，现在仍然是王者。</p>\n<p>docker的开源使得任何人都可以轻松部署各式各样的服务，因为环境的配置已经不是难题。但是对于企业来说，问题仍然存在：每个服务器上都可以跑好几个容器，就像以前一个服务器上可以跑好几个应用一样。如果有几千台呢？几万台呢？</p>\n<h2 id=\"容器编排\"><a href=\"#容器编排\" class=\"headerlink\" title=\"容器编排\"></a>容器编排</h2><p>能不能让不同的服务器上的容器连成一个整体？或者自动编排容器，让它们在合适的时间或者位置提供服务？</p>\n<p><strong>kubernetes</strong>:来自google，简称k8s，容器编排唯一的标准，生态的中心。</p>\n<p>允许将多个提供同一服务的容器打包成一个pod（豆荚），将多个服务器设置为一个cluster（集群），由k8s来决定pod在哪台服务器上运行。并且k8s可以在不同服务器上启动相同的pod，当一台服务器出现故障时，k8s迅速在其他服务器上添加故障服务器上运行的pod，从而保证了服务的稳定性。</p>\n<p>即成事实：<strong>k8s是生态的中心</strong></p>\n<p>围绕k8s的生态：监控，流水线部署，自动预警，网格化网关，容器化数据库以及<strong>serverless</strong></p>\n<p><em>k8s标志着云时代的正式开始</em></p>\n<h2 id=\"再进一步\"><a href=\"#再进一步\" class=\"headerlink\" title=\"再进一步\"></a>再进一步</h2><p>如果容器可以方便的创建和销毁，能不能更进一步？</p>\n<p>当有请求时才创建容器进行服务（而不是一直等着），请求结束就销毁容器，这便是<strong>Serverless</strong>，来自Amazon（亚马逊）</p>\n<p><strong>Serverless</strong>，无服务器技术，只有有需求的时候才服务。</p>\n<p>试想一个秒杀系统，在短暂的几秒内，服务器收到了数以亿记的请求，服务器立刻反应，创建大量容器进行服务，每服务完就立即销毁，把资源留给下一个创建的容器。而在几秒前或几秒后，服务器也许还处于一个“清闲”的状态。当前的serverless按照请求数计费，小公司无需按最大并发量购置服务器，只需直接购买serverless服务。</p>\n<h1 id=\"云服务现状\"><a href=\"#云服务现状\" class=\"headerlink\" title=\"云服务现状\"></a>云服务现状</h1><p>自k8s被推出以后，大公司们成立了CNCF（云原生计算基金会）。示例成员：google、AWS（亚马逊，世界最大的云服务供应商，serverless的领头羊）、RedHat（红帽，世界上最大的服务器软件公司，负责的centos操作系统跑在世界上百分之五十以上，中国百分之八十以上的服务器上）、docker、apache基金会（最成熟的服务器软件apache拥有者）、github、gitlab（二者分别为最大的代码托管网站和最大的开源私有git服务提供商）、华为（独立的鲲鹏架构）。</p>\n<h2 id=\"国内环境\"><a href=\"#国内环境\" class=\"headerlink\" title=\"国内环境\"></a>国内环境</h2><ul>\n<li>阿里云：全国最大的云服务供应商，对内为淘宝等提供服务，对外为各类企业提供云服务。</li>\n<li>腾讯云：对内有qq、微信、微信小程序等业务。拥有独立的小程序平台。</li>\n<li>华为云：有自产鲲鹏服务器，使用与绝大多数服务器不一样的arm架构（大部分服务器包括个人电脑都是amd64，也叫x86-64，但苹果的自研芯片M1是arm）。</li>\n<li>七牛云：阿里云出走大佬创办，有一定实力。</li>\n<li>青云：一个k8s开源集群管理系统的国内主导者。</li>\n</ul>\n<p>现状分析：</p>\n<blockquote>\n<p>一方面，围绕容器和容器编排的标准已经制定完成，但基于标准的各项指标仍有提升空间，各大公司仍然在试图在这些标准下做出更好的工具，比如容器和容器的构建工具。另一方面，围绕生态的工具也有许多不完善之处，比如一个让不懂运维的人也能轻松部署的自动部署平台，或是一个完善的部署到监控的工具链。这些被统称为“云基础设施”，云基础设施仍然有许多待完善之处。对于互联网行业来说，传统的运维会越来越少（但绝对不会消失），更多企业倾向于请云服务供应商来构建自己的服务，甚至直接将自身服务交给云供应商。反过来，云供应商也要开发更好的云平台给企业使用。</p>\n</blockquote>\n<h1 id=\"一些其他的机会\"><a href=\"#一些其他的机会\" class=\"headerlink\" title=\"一些其他的机会\"></a>一些其他的机会</h1><h2 id=\"云与AI\"><a href=\"#云与AI\" class=\"headerlink\" title=\"云与AI\"></a>云与AI</h2><p>当服务器闲下来可以做什么？挖矿（划掉）。服务器被设计成可以不间断的运行，但很显然它并不会真的时刻运行，当它闲下来时，其算力就有大用途，比如用于机器学习。当然，对于专业的ai公司，他们也有自己的服务器集群，如何利用互联网的云服务来管理自己的集群，也成了一个不错的方向。</p>\n<h2 id=\"云与物联网\"><a href=\"#云与物联网\" class=\"headerlink\" title=\"云与物联网\"></a>云与物联网</h2><p>专业的物联网后端早就有了，尤其是近年来通信行业的进步，更加促进了“计算不一定非要在本地完成”这种概念的推广。对于传统控制行业来说，大多数计算会在嵌入式设备（看作是一个低性能的计算机）上完成，底层工程师们不得不想尽办法优化性能，确保其服务能稳定的运行在嵌入式设备中。而现在，这些计算有望在很远的云服务器上完成。（当然，嵌入式设备工程师并不会消失）</p>\n<p>这就是我对这个行业的一些了解。</p>\n"},{"author":"kawhicurry","title":"可以用来阅读源码的工具","date":"2021-12-15T07:55:21.000Z","_content":"\n今天突然想看看nginx的源码，于是随手下了一份，发现写的挺清楚的。不过看的时候还是有不少麻烦事，比如看着看着就记不得之前看到哪了。之前看robocup2d的代码也是这个问题，这里记录了一下这几天为了看源码找的工具。\n\n## Source Insight\n\n这个说是老牌IDE了，据说有很多好的功能，但是因为\n\n- 要钱\n- 古老的UI\n- 看起来很复杂\n\n所以就没用它了\n\n## Source trail\n\n就是因为它我才知道原来有专门看源码用的软件\n\n这个软件提供了\n\n- 对于各种结构（文件，类）的图形化展示\n- 对于各种component间相互作用的展示\n- 支持图形化和源码相互对照的功能\n\n但是也有这些缺点\n\n- 程序流程不够清晰（可能这点本来就是给人看的）\n- 对于宏的处理不够好，不能做到“把宏当变量”（也可能是我不会？）\n- 程序必须要能完全编译才能生成图形展示。\n\n上面这些都是看robocup的代码时候的感想，这个工程直接使用了makefile。而软件可能对cmake、vs、qt的工程更友好一些。\n\n## VScode\n\n最后还是拿vscode看了起来，goto来goto去还是很爽的。不过为了能更爽的看代码，搜了下插件\n\n### insight\n\n一个快捷搜索用的小插件，可以在左侧快速搜索勾选的word，但是只支持诸如google、stack overflow此类的网站（其实挺好的，但是我不是很方便。。。）\n\n我考虑考虑学学typescript帮忙更新下这个插件哈。感觉不难（\n\n### codetour\n\n好东西了属于是。可以按顺序记录每次看的内容并生成一个.tour文件（本质上是json），这玩意可以很轻松的记录我看某个东西的流程，并且支持修改我看的内容。比如我看的时候走错了地方，我还能倒回去）。更进一步，这个工具可以用来记录决策树。\n\n\n\n比起工具，还是更加注重代码本身吧，毕竟目的是“学习源码的精髓”而不是“学几个工具”。","source":"_posts/Tools/可以用来阅读源码的工具.md","raw":"---\nauthor: kawhicurry\ntitle: 可以用来阅读源码的工具\ncategories:\n  - Tools\ndate: 2021-12-15 15:55:21\ntags:\n---\n\n今天突然想看看nginx的源码，于是随手下了一份，发现写的挺清楚的。不过看的时候还是有不少麻烦事，比如看着看着就记不得之前看到哪了。之前看robocup2d的代码也是这个问题，这里记录了一下这几天为了看源码找的工具。\n\n## Source Insight\n\n这个说是老牌IDE了，据说有很多好的功能，但是因为\n\n- 要钱\n- 古老的UI\n- 看起来很复杂\n\n所以就没用它了\n\n## Source trail\n\n就是因为它我才知道原来有专门看源码用的软件\n\n这个软件提供了\n\n- 对于各种结构（文件，类）的图形化展示\n- 对于各种component间相互作用的展示\n- 支持图形化和源码相互对照的功能\n\n但是也有这些缺点\n\n- 程序流程不够清晰（可能这点本来就是给人看的）\n- 对于宏的处理不够好，不能做到“把宏当变量”（也可能是我不会？）\n- 程序必须要能完全编译才能生成图形展示。\n\n上面这些都是看robocup的代码时候的感想，这个工程直接使用了makefile。而软件可能对cmake、vs、qt的工程更友好一些。\n\n## VScode\n\n最后还是拿vscode看了起来，goto来goto去还是很爽的。不过为了能更爽的看代码，搜了下插件\n\n### insight\n\n一个快捷搜索用的小插件，可以在左侧快速搜索勾选的word，但是只支持诸如google、stack overflow此类的网站（其实挺好的，但是我不是很方便。。。）\n\n我考虑考虑学学typescript帮忙更新下这个插件哈。感觉不难（\n\n### codetour\n\n好东西了属于是。可以按顺序记录每次看的内容并生成一个.tour文件（本质上是json），这玩意可以很轻松的记录我看某个东西的流程，并且支持修改我看的内容。比如我看的时候走错了地方，我还能倒回去）。更进一步，这个工具可以用来记录决策树。\n\n\n\n比起工具，还是更加注重代码本身吧，毕竟目的是“学习源码的精髓”而不是“学几个工具”。","slug":"可以用来阅读源码的工具","published":1,"category":"Tools","updated":"2021-12-23T13:31:28.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxlot1k3001324ul0oce9tn5","content":"<p>今天突然想看看nginx的源码，于是随手下了一份，发现写的挺清楚的。不过看的时候还是有不少麻烦事，比如看着看着就记不得之前看到哪了。之前看robocup2d的代码也是这个问题，这里记录了一下这几天为了看源码找的工具。</p>\n<h2 id=\"Source-Insight\"><a href=\"#Source-Insight\" class=\"headerlink\" title=\"Source Insight\"></a>Source Insight</h2><p>这个说是老牌IDE了，据说有很多好的功能，但是因为</p>\n<ul>\n<li>要钱</li>\n<li>古老的UI</li>\n<li>看起来很复杂</li>\n</ul>\n<p>所以就没用它了</p>\n<h2 id=\"Source-trail\"><a href=\"#Source-trail\" class=\"headerlink\" title=\"Source trail\"></a>Source trail</h2><p>就是因为它我才知道原来有专门看源码用的软件</p>\n<p>这个软件提供了</p>\n<ul>\n<li>对于各种结构（文件，类）的图形化展示</li>\n<li>对于各种component间相互作用的展示</li>\n<li>支持图形化和源码相互对照的功能</li>\n</ul>\n<p>但是也有这些缺点</p>\n<ul>\n<li>程序流程不够清晰（可能这点本来就是给人看的）</li>\n<li>对于宏的处理不够好，不能做到“把宏当变量”（也可能是我不会？）</li>\n<li>程序必须要能完全编译才能生成图形展示。</li>\n</ul>\n<p>上面这些都是看robocup的代码时候的感想，这个工程直接使用了makefile。而软件可能对cmake、vs、qt的工程更友好一些。</p>\n<h2 id=\"VScode\"><a href=\"#VScode\" class=\"headerlink\" title=\"VScode\"></a>VScode</h2><p>最后还是拿vscode看了起来，goto来goto去还是很爽的。不过为了能更爽的看代码，搜了下插件</p>\n<h3 id=\"insight\"><a href=\"#insight\" class=\"headerlink\" title=\"insight\"></a>insight</h3><p>一个快捷搜索用的小插件，可以在左侧快速搜索勾选的word，但是只支持诸如google、stack overflow此类的网站（其实挺好的，但是我不是很方便。。。）</p>\n<p>我考虑考虑学学typescript帮忙更新下这个插件哈。感觉不难（</p>\n<h3 id=\"codetour\"><a href=\"#codetour\" class=\"headerlink\" title=\"codetour\"></a>codetour</h3><p>好东西了属于是。可以按顺序记录每次看的内容并生成一个.tour文件（本质上是json），这玩意可以很轻松的记录我看某个东西的流程，并且支持修改我看的内容。比如我看的时候走错了地方，我还能倒回去）。更进一步，这个工具可以用来记录决策树。</p>\n<p>比起工具，还是更加注重代码本身吧，毕竟目的是“学习源码的精髓”而不是“学几个工具”。</p>\n","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<p>今天突然想看看nginx的源码，于是随手下了一份，发现写的挺清楚的。不过看的时候还是有不少麻烦事，比如看着看着就记不得之前看到哪了。之前看robocup2d的代码也是这个问题，这里记录了一下这几天为了看源码找的工具。</p>\n<h2 id=\"Source-Insight\"><a href=\"#Source-Insight\" class=\"headerlink\" title=\"Source Insight\"></a>Source Insight</h2><p>这个说是老牌IDE了，据说有很多好的功能，但是因为</p>\n<ul>\n<li>要钱</li>\n<li>古老的UI</li>\n<li>看起来很复杂</li>\n</ul>\n<p>所以就没用它了</p>\n<h2 id=\"Source-trail\"><a href=\"#Source-trail\" class=\"headerlink\" title=\"Source trail\"></a>Source trail</h2><p>就是因为它我才知道原来有专门看源码用的软件</p>\n<p>这个软件提供了</p>\n<ul>\n<li>对于各种结构（文件，类）的图形化展示</li>\n<li>对于各种component间相互作用的展示</li>\n<li>支持图形化和源码相互对照的功能</li>\n</ul>\n<p>但是也有这些缺点</p>\n<ul>\n<li>程序流程不够清晰（可能这点本来就是给人看的）</li>\n<li>对于宏的处理不够好，不能做到“把宏当变量”（也可能是我不会？）</li>\n<li>程序必须要能完全编译才能生成图形展示。</li>\n</ul>\n<p>上面这些都是看robocup的代码时候的感想，这个工程直接使用了makefile。而软件可能对cmake、vs、qt的工程更友好一些。</p>\n<h2 id=\"VScode\"><a href=\"#VScode\" class=\"headerlink\" title=\"VScode\"></a>VScode</h2><p>最后还是拿vscode看了起来，goto来goto去还是很爽的。不过为了能更爽的看代码，搜了下插件</p>\n<h3 id=\"insight\"><a href=\"#insight\" class=\"headerlink\" title=\"insight\"></a>insight</h3><p>一个快捷搜索用的小插件，可以在左侧快速搜索勾选的word，但是只支持诸如google、stack overflow此类的网站（其实挺好的，但是我不是很方便。。。）</p>\n<p>我考虑考虑学学typescript帮忙更新下这个插件哈。感觉不难（</p>\n<h3 id=\"codetour\"><a href=\"#codetour\" class=\"headerlink\" title=\"codetour\"></a>codetour</h3><p>好东西了属于是。可以按顺序记录每次看的内容并生成一个.tour文件（本质上是json），这玩意可以很轻松的记录我看某个东西的流程，并且支持修改我看的内容。比如我看的时候走错了地方，我还能倒回去）。更进一步，这个工具可以用来记录决策树。</p>\n<p>比起工具，还是更加注重代码本身吧，毕竟目的是“学习源码的精髓”而不是“学几个工具”。</p>\n"},{"title":"Hello World","date":"2021-10-25T01:01:06.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/test/hello-world.md","raw":"---\ntitle: Hello World\ncategories:\n  - test\ndate: 2021-10-25 09:01:06\ntags:\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"category":"test","updated":"2021-12-23T13:20:05.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxlot1k4001624ul01p332po","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"author":"kawhicurry","title":"0xCalculator 16进制计算器","date":"2021-11-28T09:31:31.000Z","_content":"\n# 功能\n\n1. 对十六进制数进行双目、表达式运算\n2. 对运算结果进行保存和再读取，支持自动保存和手动保存\n3. 自定义运算结果储存位置\n4. 自定义字体大小\n5. 可更换窗口风格（换肤）\n6. 自动保存设置\n\n# 任务分配\n\n1. ：ui设计与qt框架\n2. ：核心算法\n3. ：文件读写\n\n# 开源地址\n<https://github.com/kawhicurry/0xCalculator>\n\n# 开发过程\n\n## Qt框架\n\nqt文件将会以平铺的方式放置在同一工程目录下，其组织结构由`.pro`文件记录，该文件类似于makefile（可以看作是qmakefile？）。其标准目录如下：\n\n> .pro：记录文件\n>\n> /Headers：略\n>\n> /Sources：略\n>\n> /Forms：存放`.ui`文件，实际为`xml`格式，但不建议直接编辑，所有操作应当在设计模块中完成\n>\n> /Resources：存放qt标准资源（可以qt方式引用的资源）\n>\n> /Other files\n\n## UI设计\n\n直接在qt creator的设计界面中打开`设计`模块。从画面左侧拖动组件，摆放至设计框中即可。\n\n*问题*：组件散乱\n\n- 左侧组件库中有`layout`组件,将其拖动至设计框中,再向layout中添加组件，即可使所有组件呈现一定规律。\n\n>布局类型：\n>\n>垂直：略\n>\n>水平：略\n>\n>栅格（grid）：上面俩合起来\n>\n>窗口：？存疑，不是很能理解这是啥\n\n*问题*：使用layout组件后无法布局固定，启动ui界面后拖动窗口改变其大小，layout组件位置不动。\n\n- 应当首先在右侧`对象`框中选中主窗口（mainwindow）中的中间部件（centralwidget），右键选择布局，为整个中间部分设定大的布局，（注：主窗口除了中间部件还初始化了一个菜单栏（menubar）），然后在该布局中嵌套布局或组件。本方案选择了栅格布局，虽然只需垂直布局即可，但为了可拓展性，还是选择栅格。接下来在整个中间部分的栅格布局中，嵌套了一个垂直布局（用于输入和输出）和一个栅格布局（用于存放按键）。\n\n接下来在主窗口中添加所需的组件，分别为输入框、输出框、5*6个按键。然后可以对其属性进行可视化的设计，以下是对`设计`界面中一些工具的解释：\n\n> 右侧下方为属性框，显示了所选定组件的属性，每个组件都是层层继承而来，因此要注意每一层的具体属性以及继承关系。\n>\n> 右侧上方为对象框，显示了当前ui文件中所有文件属性。\n>\n> 正中央下方的框实际上有两个可编辑区域，一个为action editor，即为组件添加动作（可方便设置快捷键）。另一个为信号与槽。\n>\n> 注：信号与槽是最Qt制作ui界面中最重要的机制。\n\n创建槽函数：在信号与槽编辑框中点击加号创建信号与槽，然后选择信号的发送对象、发送信号量、槽、响应函数。此处的创建**只支持内定的槽函数**，想要自定义槽函数，需在右侧对象中找到对象，然后右键选择转到槽，接下来选择信号量之后，Qt会跳转该ui文件对应的cpp文件下，并自动创建一个该槽函数的实现（.h文件中也会自动添加声明）。接下来只需在此槽函数中编写发送信号后（触发信号发送条件），所需只需的步骤即可。\n\n> 信号量是Qt类自带的属性，某个类既有自己的属性，也有继承而来的属性。如pushButton组件继承自QAbstractButton，后者又继承自QWidget，后者又继承自QObject。对于QAbstractButton，其自带的信号有`clicked()`,`pressed()`等，对于QWidget，有`windowIconChanged`等。具体解释请参考官方文档。\n\n`设计`界面支持大量的属性设置，如字体，背景等。并且可以直接在ui界面中即时显示，但并不推荐直接做修改。\n\n一种渲染方式：Qt提供了qss来进行类似css的样式渲染，只需选中对象然后右键改变样式表，修改某个组件的样式表即可。Qss还提供了选择器的功能，因此，只需在某个较大的组件中设置样式表，并对不同的渲染对象进行选择即可。本方案一开始的办法就是在centralwidget组件中设置样式表，完成了酷炫的按键风格。需要注意的是，改变样式表的方法在Qt中是存在一定问题的，并且，**任何写死的方法都可能在以后要修改时造成麻烦**。关于样式表后面还会再进一步设定。\n\n## 模拟按键\n\n一个计算器应当提供一系列的按键，因此要在栅格布局中拖入一定数量的按键。按键分为输入按键和功能按键。\n\n- 输入按键：0123456789ABCDEF+-*/（）\n- 功能按键：<- -> DEL CE UP DOWN =\n\n对于输入按键，按下按键后应当在输入框中显示对应的输入，同时这些按键应当有对应的键盘输入。\n\n对于输出按键，左移和右移是为了移动输入框中的光标。DEL清除一个字符，CE要同时清除输入和输出框。UP和DOWN提供了查看历史功能。等号是整个计算器的核心功能，按下等号后，应当读取输入框中的算式，进行计算后将结果字符串返回至输出框中。\n\n通过在组件上右键选择 转到槽 可以快捷创建槽函数。示例如图：\n\n```cpp\n//mainwindow.h\nvoid MainWindow::on_pushButton_left_bracket_clicked();\n//mainwindow.cpp\nvoid MainWindow::on_pushButton_left_bracket_clicked() {\n  ui->textBrowser_input->setFocus();\n  ui->textBrowser_input->insertPlainText(\"(\");\n}\n```\n\n手动创建几个后，就可以发现其规矩。一个槽函数的名称由`on_name_action`组成。`pushButton_left_bracket`是改按键的名称，这个名称需要在ui文件中指定，当拖动pushButton的时候，qt会按照12345依次给其一个默认名称，并且上面的默认文字都是pushButton。因此对于声明，可以用宏生成。\n\n```cpp\n//mainwindwo.h\n#define clicked_func(name) void on_pushButton_##name##_clicked();\n  clicked_func(0);\n  clicked_func(1);\n  clicked_func(2);\n  clicked_func(3);\n//...\n#define triggered_func(name) void on_action##name##_triggered();\n\n  triggered_func(Author);\n  triggered_func(Save) triggered_func(Read);\n  triggered_func(History_location);\n  triggered_func(Auto_Save);\n```\n\n对于实现，部分直接输入的槽函数也可以用宏生成\n\n```cpp\n//mainwindow.cpp\n#define set_insert_func(name)                         \\\n  void MainWindow::on_pushButton_##name##_clicked() { \\\n    ui->textBrowser_input->setFocus();                \\\n    ui->textBrowser_input->insertPlainText(#name);    \\\n  }\n\nset_insert_func(0);\nset_insert_func(1);\nset_insert_func(2);\nset_insert_func(3);\nset_insert_func(4);\n```\n\n剩下的就只能自己写咯。\n\n## 输入输出框\n\nqt为用户提供了`text Browser`,`text Edit`,`Plain text edit`,`line edit`等组件作为文本框。这里选择了text Browser，目的是屏蔽直接复制粘贴输入，防止非法字符进入。结果后面发现`text Browser`是由`text Edit`继承而来，因此browser也可以提供输入功能（离谱，read Only属性。\n\n所有的输入按键都将在输入框中插入一个对应的字符。这里只需要调用`text Browser`类中自带的public function member：`insertPlainText(QString)`。\n\n*问题*：文本框中的光标只有在选中文本框时才会显示，如果使用鼠标点击按键进行输入，输入框中的光标实际仍然存在但不显示。\n\n- 为了使得光标时刻存在，这里使用了一个简单粗暴的方法，为所有按键功能加上`setFocus()`。从而保证焦点始终在输入框中。\n\n对于输出框，每次显示结果都是更新所有内容（而不是插入），因此需要`setPlainText`。\n\n## 等号\n\n等号按键是计算器最核心的按键，以下为等号按键的槽函数\n\n```cpp\n//mainwindow.cpp\nvoid MainWindow::on_pushButton_equal_clicked() {\n  ui->textBrowser_input->setFocus();\n\n  Location::isRead = 0;\n\n  QString s = ui->textBrowser_input->toPlainText();\n  QString rst = parser(s);\n  ui->textBrowser_output->setPlainText(rst);\n  if (Location::autoSave) {\n    save(Location::filePath, s, rst);\n  }\n}\n```\n\n按下等号后，程序首先保证焦点仍然在输入框口上，然后讲是否正在读取历史记录按键设置为0（这讲在后面的历史记录读取中说到），然后获取输入框中的内容，交给由竞赛大佬@龚程昊编写的parser函数进行处理（这将在后面数据处理中说到），然后将parser函数返回的字符串（QString）显示到输出框中，然后在自动保存功能开启的情况下，保存至本地文件中。\n\n## 数据处理\n\n等会儿copy大佬写的东西，大致思路是使用栈和转化为前缀表达式。\n\n但大佬使用的使用的是std库，并且是作为一个单独的cpp程序书写的（方便调试）。因此，这里将源文件复制到parser文件中，并将main函数改写成接受`QString`作为参数，返回`QString`的parser()函数。这里用到了`QString::toStdString`和`QString::fromStdString`。\n\n记录几个当时测试出来的bug：\n\n1. 只写一个数后按等号，直接返回0\n2. 没有考虑负数\n3. 没有考虑溢出\n\n附上代码\n\n```cpp\n//parser.cpp\n#include \"parser.h\"\n\nusing namespace std;\n\nbool pd(char i) {\n  if ((i <= 57 && i >= 48) || (i >= 65 && i <= 70)) return 0;\n  return 1;\n}\n\nint pri(char i)  // priority\n{\n  if (i == '+' || i == '-') return 1;\n  if (i == '*' || i == '/') return 2;\n  if (i == '(') return 0;\n  if (i == ')') return -1;\n  return 255;\n}\nbool judge(char i)  //乱码\n{\n  if ((i <= 57 && i >= 48) || (i >= 65 && i <= 70) || i == '+' || i == '-' ||\n      i == '*' || i == '/' || i == '(' || i == ')') {\n    return 0;\n  }\n  return 1;\n}\n\nQString parser(QString expression) {\n  using namespace std;\n  const int N = 1007;\n  const long R = LONG_MAX;\n  char s[N], stack1[N];\n  long read[N], sta[N], stack2[N], stt[N];\n  bool f[N] = {0}, flag[N] = {0}, ff = 0, fff = 0;\n  string c, sc;\n  string str, as = expression.toStdString();\n  str = \"0+\" + as;\n  int l = str.length();\n  for (int i = 0; i < l; i++) {\n    s[i] = str[i];\n    if (judge(s[i])) {\n      ff = 1;\n    }\n    if (s[i] == '(' && (s[i + 1] == '*' || s[i + 1] == '/')) ff = 1;\n    if (s[i] == ')' && (s[i - 1] == '+' || s[i - 1] == '-' || s[i - 1] == '*' ||\n                        s[i - 1] == '/'))\n      ff = 1;\n  }\n  if (pd(s[l - 1]) && s[l - 1] != ')') ff = 1;\n  int st = 0;\n  for (int i = 0; i < l; i++)  //括号是否匹配\n  {\n    if (s[i] == '(') st++;\n    if (s[i] == ')') st--;\n  }\n  if (st != 0) ff = 1;\n  int j = 0, k = 0, m = 0;\n  while (j < l && ff == 0) {\n    if (!pd(s[j]))  //数字\n    {\n      if (s[j] <= 57 && s[j] >= 48) {\n        sta[k] = s[j] - 48;\n        j++;\n        k++;\n      } else if (s[j] >= 65 && s[j] <= 70) {\n        sta[k] = s[j] - 55;\n        j++;\n        k++;\n      }\n    } else if (pd(s[j]))  //符号\n    {\n      if (!pd(s[j - 1]) && j > 0)  //前面的数字\n      {\n        int cnt = 0;\n        char c = s[j];\n        for (int h = 0; k > 0; h++) {\n          cnt += sta[k - 1] * pow(16, h);\n          k--;\n        }\n        read[m] = cnt;\n        m++;\n        j++;\n        read[m] = c;\n        f[m] = 1;\n        m++;\n\n      } else {  //前面的符号\n        char c = s[j];\n        read[m] = c;\n        f[m] = 1;\n        m++;\n        j++;\n      }\n    }\n  }\n  if (!pd(s[l - 1]))  //数字\n  {\n    if (k > 9) {\n      return \"Detect Overflow\";\n    }\n    int cnt = 0;\n    for (int h = 0; k > 0; h++) {\n      cnt += sta[k - 1] * pow(16, h);\n      if (cnt > R) return \"Detect Overflow\";\n      k--;\n    }\n    read[m] = cnt;\n    m++;\n    j++;\n  }\n  for (int i = 0; i < m - 1; i++) {\n    if (i == 1) {\n      if (f[i] == 1 && f[i + 1] == 1 && pri(read[i]) >= 1 &&\n          pri(read[i + 1]) == 2) {\n        ff = 1;\n      }\n    } else if (f[i] == 1 && f[i + 1] == 1 && pri(read[i]) >= 1 &&\n               pri(read[i + 1]) >= 1) {\n      ff = 1;\n    }\n  }\n  int a = 0, b = 0;  //反缀表达式\n  for (int i = 0; i < m; i++) {\n    if (f[i] == 0) {\n      stack2[a] = read[i];\n      a++;\n    } else if (f[i] == 1) {\n      if (read[i] == '(') {\n        stack1[b] = '(';\n        b++;\n      } else if (pri(read[i]) == 1)  //+-\n      {\n        while (pri(stack1[b - 1]) >= 1 && b > 0) {\n          stack2[a] = stack1[b - 1];\n          flag[a] = 1;\n          b--;\n          a++;\n        }\n        stack1[b] = read[i];\n        b++;\n      } else if (pri(read[i]) == 2)  //*/\n      {\n        while (pri(stack1[b - 1]) == 2 && b > 0) {\n          stack2[a] = stack1[b - 1];\n          flag[a] = 1;\n          b--;\n          a++;\n        }\n        stack1[b] = read[i];\n        b++;\n      } else if (read[i] == ')') {\n        while (stack1[b - 1] != '(') {\n          stack2[a] = stack1[b - 1];\n          flag[a] = 1;\n          b--;\n          a++;\n        }\n        b--;\n      }\n    }\n  }\n  while (b > 0) {\n    stack2[a] = stack1[b - 1];\n    flag[a] = 1;\n    a++;\n    b--;\n  }\n  // calculation\n  int g = 0, cn = 0;\n  for (int i = 0; i < a; i++) {\n    if (!flag[i])  //数字\n    {\n      stt[g] = stack2[i];\n      g++;\n    } else if (flag[i])  //符号\n    {\n      switch (stack2[i]) {\n        case '+':\n          cn = stt[g - 2] + stt[g - 1];\n          if (cn > R) ff = 1;\n          break;\n        case '-':\n          cn = stt[g - 2] - stt[g - 1];\n          if (cn < -R) ff = 1;\n          break;\n        case '*':\n          cn = stt[g - 2] * stt[g - 1];\n          if (cn > R || cn < -R) ff = 1;\n          break;\n        case '/':\n          if (stt[g - 1] != 0) {\n            cn = stt[g - 2] / stt[g - 1];\n            break;\n          } else if (stt[g - 1] == 0) {\n            ff = 1;\n            break;\n          }\n      }\n      g -= 2;\n      stt[g] = cn;\n      g++;\n    }\n  }\n  int x;\n  int cnn = cn;\n  if (cn == 0 && !ff) {\n    //        cout<<str<<\"=\"<<cn<<endl;\n    return \"0\";\n    fff = 1;\n  }\n  while (cn != 0 && !ff)  //转十六进制\n  {\n    if (cn >= 0) {\n      x = cn % 16;\n      if (x < 10)\n        c = x + '0';\n      else\n        c = x + 'A' - 10;\n      sc = c + sc;\n      cn /= 16;\n    } else if (cn <= 0) {\n      x = cn % 16;\n      if (x > -10)\n        c = -x + '0';\n      else\n        c = -x + 'A' - 10;\n      sc = c + sc;\n      cn /= 16;\n    }\n  }\n  if (cnn < 0) {\n    sc = '-' + sc;\n  }\n  if (!ff && !fff) {\n    //        cout<<as<<\"=\";\n    //        cout<<sc<<endl;\n    if (sc == \"-80000000\") {\n      return \"Detect Overflow\";\n    }\n    return QString::fromStdString(sc);\n  }\n  return \"Formula Error\";\n}\n\n```\n\n贴代码的时候才发现大佬写了一个pd（判断）和一个judge（还是判断）。算了算了，能用就行（\n\n## 历史记录\n\n如果只是作为计算器，以上功能就已经可以算完成了。但大多数计算器都是有历史记录功能的，因此这个计算器也该有一个。\n\n这里将历史记录分为底层和顶层两部分来设计，顶层使用Qt框架，而底层使用c的基本库，从而实现更加原子化和方便的操作。\n\n顶层实现的用户接口功能：\n\n- 手动保存当前结果\n- 选择是否自动保存结果\n- 选择保存位置\n- 读取历史记录\n\n底层实现的文本的读写功能\n\n- 获取时间\n- 记录结果\n- 写入和读取\n\n### 底层设计细节\n\n保存功能被设计为，获取当前时间和本次运算的算式和结果，以新行的方式追加到某文件的结尾。保存功能的底层设计都被保存在`saving`文件下。\n\n为此底层使用std库设计了`save()`函数。该函数还调用了`getCurrentTime()`来获取当前时间。当然，这个函数也是由`main()`函数修改而来，由std框架接入了qt框架。源码如下：\n\n```cpp\n//saving.cpp\nstatic string getCurrentTime()  //输出当前时间\n{\n  time_t t = time(0);\n  char ch[64] = {0};\n  strftime(ch, sizeof(ch) - 1, \"%Y-%m-%d %H:%M:%S\", localtime(&t));\n  return ch;\n}\nbool save(QString location, QString fomula, QString data) {\n  string addr = location.toStdString();\n  fstream f;\n  f.open(addr, ios::out | ios::app);\n  f << getCurrentTime() << \" \" << fomula.toStdString() << \"=\"\n    << data.toStdString()\n    << endl;  //变量addr、以及gch的等式和输出结果变量还需加进去\n  f.close();\n  return 1;\n}\n```\n\n除了保存结果外，还需要读取结果，读取结果需要始终从最后一行开始往上读。经历了一系列讨论之后，本项目决定使用读取整个文件来获取所有的行数，并根据行数来获取内容。为此有了`CountLine()`和`readLine()`两个函数：\n\n```cpp\nint CountLines(QString filename) {\n  ifstream f;\n  int n = 0;\n  string tmp;\n  string stdfilename = filename.toStdString();\n  // ios::in 表示以只读的方式读取文件\n  f.open(stdfilename, ios::in);\n  //文件打开失败:返回0\n  if (f.fail()) {\n    return 0;\n  } else {\n    //文件存在\n    while (getline(f, tmp, '\\n')) {\n      n++;\n    }\n    f.close();\n    return n;\n  }\n}\nQString ReadLine(QString filename, int line)  //读取指定行文件\n{\n  // line行数限制 1 - lines\n  if (line > 0 && line <= CountLines(filename)) {\n    ifstream f;\n    string stdfilename = filename.toStdString();\n    f.open(stdfilename, ios::in);\n\n    vector<string> strVec;\n    //行0 - 行lines对应strvect[0] - strvect[lines]\n    while (!f.eof()) {\n      string inbuf;\n      getline(f, inbuf, '\\n');\n      strVec.push_back(inbuf);\n    }\n    return QString::fromStdString(strVec[line - 1]);\n  } else {\n    return NULL;\n  }\n}\n```\n\n读取整个文件并计算行数并不是一个效率高的方式，但在文件不大和不追求高效率的条件下，这是最好的实践方式。因为考虑这里还需要考虑到连续读取历史文件。\n\n当用户按下`UP`按键时，表示用户开始读取历史文件。用户首先查看的应该是历史文件的最后一行，当用户再次按下`UP`时，读取倒数第二行，依次类推。为了实现该功能，这里使用了一个全局变量`line`表示当前正在读取的行数，该行数被初始化为历史记录的总行数。然后再次读取将会`--line`后读取。当用户按下`DOWN`按键时，++line后读取。\n\n这里就要考虑到另一个问题，读取一定历史记录后，用户重新进行计算，然后再次查看历史记录，这样行数应当从新的历史记录最后一行开始计算。为此，这里引入了`isRead`变量，该变量初始化为`0`，表示现在未在读取。首次按下`UP`按键时，该变量置`1`，同时将`line`变量初始化为当前历史记录行数。当用户按下`UP`或`DOWN`按键时，正常修改`line`变量的值并进行读取即可。当用户按下`=`或手动保存时，需要将`isRead`置零。这样下一次按下`UP`时，将重新读取历史文件行数并为`line`赋值。\n\n```cpp\n//mainwindow.cpp\n//等号的槽函数在上面\nvoid MainWindow::on_pushButton_Up_clicked() {\n  ui->textBrowser_input->setFocus();\n  if (Location::isRead) {\n    --Location::line;\n  } else {\n    Location::line = CountLines(Location::filePath);\n    Location::isRead = 1;\n  }\n  ui->textBrowser_output->setText(ReadLine(Location::filePath, Location::line));\n}\nvoid MainWindow::on_pushButton_Down_clicked() {\n  ui->textBrowser_input->setFocus();\n  if (Location::isRead) {\n    ++Location::line;\n  }\n  ui->textBrowser_output->setText(ReadLine(Location::filePath, Location::line));\n}\n```\n\n保存和读取的路径将在`顶层设计细节`中进一步讨论。\n\n### 顶层设计细节\n\n这里在menubar中设置了一个`history location`按键，用于修改历史文件的存放位置。当按下此按键时，程序应当打开一个新的窗口，因此，需要首先在源文件中创建一个新的窗口。右键点击`项目`，选择`add new`，选择`qt设计师类`，然后会分别在三个文件夹中依次得到头文件、源文件、ui设计文件。然后需要在主窗口中设置点击`history location`按键打开新窗口。\n\n```cpp\n//mainwindow.cpp\nvoid MainWindow::on_actionHistory_location_triggered() {\n  Location *new_win = new Location();\n  new_win->show();\n}\n```\n\n**注意**：记得在`mainwindow.h`中include`location.h`，按下打开新窗口实际上就是创建一个新的Location窗口，然后展示。\n\n接下来就是在`location.ui`中修改和设计可视化窗口，此项目使用了栅格布局，在左侧设置了一个较大的`textBrowser`和较小的`lineEdit`（设为不可修改，用于给出提示），在右侧依次设置了`选择文件`，`选择文件夹`，`确定`，`取消` 四个按键。\n\n> 选择文件：调用Qt库，打开系统默认的文件选择框，设置必须选择.txt格式结尾的文件，将返回的结果输出至`textBrowser`。\n>\n> 选择文件夹：同上，但是选择的是文件夹，并且返回的是存在的文件夹的路径，将返回的结果加上`/result.txt`后输入至`textBrowser`。\n>\n> 确定：按下后，读取`textBrowser`中的路径，检查其合法性（因为一开始`textBrowser`设置了可以直接更改，因此可能会输入奇怪的路径），若不合法则在`lineEdit`中给出相应的报错（格式不合法或路径不合法）。若合法，则检查文件是否存在，不存在则创建。当一切都合理以后，将全局变量`filePath`设为文本框中的内容，并关闭`Location`窗口。\n>\n> 取消：直接关闭，不做任何修改。\n\n```cpp\n//location.cpp\nvoid Location::on_pushButton_path_clicked() {\n  QString file_name =\n      QFileDialog::getOpenFileName(NULL, \"选择txt文件\", \".\", \"*.txt\");\n  ui->textEdit->setText(file_name);\n}\n\nvoid Location::on_pushButton_dir_clicked() {\n  QString dir_name = QFileDialog::getExistingDirectory(NULL, \"选择文件夹\", \".\");\n  ui->textEdit->setText(dir_name + \"/result.txt\");\n}\n\nvoid Location::on_pushButton_cancel_clicked() { Location::close(); }\n\nvoid Location::on_pushButton_sure_clicked() {\n  QString new_path = ui->textEdit->toPlainText();\n  QFileInfo info(new_path);\n\n  if (!info.exists()) {\n    if (new_path.contains(\".txt\")) {\n      QFile f(new_path);\n      f.open(QIODevice::WriteOnly);\n      f.close();\n    } else {\n      ui->prompt->setText(\"路径或格式不合法，请重新输入\");\n    }\n  }\n  Location::filePath=new_path;\n  Location::close();\n}\n```\n\n自动保存功能被设计为主窗口中菜单栏中的一个按键，默认为开启状态，显示为`Auto Save On`，当点击该按键后，槽函数将该文本替换为`Auto Save Off`，并将全局变量`autoSave`置零。\n\n`filePath`和`autoSave`以及底层中的`isRead`和`line`都设计为一个全局变量，便于主窗口调用。\n\n```cpp\n//location.h\nclass Location : public QDialog {\n public:\n  static QString filePath;\n  static int line;\n  static bool isRead;\n  static bool autoSave;\n}\n\n//location.cpp\nQString Location::filePath = \"result.txt\";\nint Location::line = 0;\nbool Location::isRead = 0;\nbool Location::autoSave = 1;\n```\n\n在主窗口中，只有用户按下等号（并且自动保存功能开启）或手动保存（在`menubar`中设置了一个保存按键并且设置了快捷键）时，才会保存。因此只需在这些地方加入`save()`函数即可。当然，也要有对`autoSave`的判断。\n\n## 样式设定\n\n前面提到了可以在`ui`文件中直接修改样式，但这种方式并不利于后面的修改，因此我们选择直接调用函数的方式。如要为`centralWidget`设定样式，可以调用`setStyelSheet()`，后接一个QString，该字符串中直接书写qss内容。\n\n这里选择了另一种方式，使用qt的资源文件管理功能来存储单独的qss文件，然后以前缀引用的方式来调用这些文件。\n\n在`项目`中右键新建`qt resource file`，设定名称后打开管理界面，点击添加前缀`add prefix`。然后添加文件`add Files`。前缀决定了调用的方式（将会在源代码中演示）。文件可以新建一个`general file`后添加，也可以将其他方式创建的qss文件加入。\n\n引入的资源可以以`QFile`的方式引用。本项目在菜单栏中添加了一个黑色主题的选项，其槽函数如下\n\n```cpp\nvoid MainWindow::on_actionBlack_theme_triggered() {\n  globalQss = \":/Black.qss\";\n  QFile defaultQss(globalQss);\n  defaultQss.open(QFile::ReadOnly);\n  QString qssContent = defaultQss.readAll();\n  centralWidget()->setStyleSheet(qssContent);\n}\n```\n\n`/`为我设定的前缀，只需以冒号开头，加上前缀和文件，即表明在应用qt指定好的资源文件。接下来就只需打开该文件并读取其内容，然后为需要的组件设定qss样式即可。\n\n**注意**：使用qss的一些麻烦：后面我希望能设定字体的大小、样式等，但这时通过`setFont()`等函数并不起作用。原因估计是qss的优先级很高，直接设定将不起作用。这时我只能再写一个`changeStyle()`函数，通过qss样式表更新来进行样式更新\n\n```cpp\nvoid MainWindow::changeStyle(QString newStyle, QWidget *widget) {\n  QString oldStyle = widget->styleSheet();\n  oldStyle += newStyle;\n  widget->setStyleSheet(oldStyle);\n}\n```\n\n所以这里我只写了改变字体的函数。\n\n```cpp\nvoid MainWindow::on_actionLarge_font_size_triggered() {\n  changeStyle(\"*{font:30px;}\", MainWindow::centralWidget());\n}\n```\n\n## 保存设置\n\n类似于文件的保存位置，是否自动保存等功能，每次重新启动程序后都会按照程序的设定重新初始化。为了使得这些设定能被保存下来，需要使用一个文件将这些配置保存下来。恰好最近见到了许多`ini`格式文件，qt也提供了`QSetting`及配套的`ini`配置文件读写。\n\n配置文件应当在主窗口创建时被读取，在主窗口被销毁时被存入。因此只需在`mainwindow`的构造函数和析构函数中加入读写`ini`文件的步骤即可。需要注意的是，要考虑`ini`文件不存在的情况，不存在时需要使用程序的内置设定。\n\n ```cpp\n MainWindow::MainWindow(QWidget *parent)\n     : QMainWindow(parent), ui(new Ui::MainWindow) {\n   ui->setupUi(this);\n \n   this->grabKeyboard();\n \n   QSettings *iniRead = new QSettings(\"config.ini\", QSettings::IniFormat);\n   QString iniAuto = iniRead->value(\"autoSave\").toString();\n   QString iniPath = iniRead->value(\"filePath\").toString();\n   QString iniQss = iniRead->value(\"globalQss\").toString();\n   delete iniRead;\n \n   // init autoSave\n   if (!iniAuto.isEmpty() && !iniAuto.toInt()) {\n     Location::autoSave = 0;\n     ui->actionAuto_Save->setText(\"Auto Save Off\");\n   }\n \n   // init filePath\n   QFile iniPathFile(iniPath);\n   if (iniPathFile.open(QFile::WriteOnly)) {\n     Location::filePath = iniPath;\n   }\n \n   // init Qss file(theme)\n   QFile iniQssFile(iniQss);\n   QString qssContent;\n   if (iniQssFile.open(QFile::ReadOnly)) {\n     qssContent = iniQssFile.readAll();\n     globalQss = iniQss;\n   } else {\n     QFile defaultQss(\":/Black.qss\");\n     defaultQss.open(QFile::ReadOnly);\n     qssContent = defaultQss.readAll();\n   }\n   centralWidget()->setStyleSheet(qssContent);\n }\n \n MainWindow::~MainWindow() {\n   QSettings *IniWrite = new QSettings(\"config.ini\", QSettings::IniFormat);\n   IniWrite->setValue(\"autoSave\", Location::autoSave);\n   IniWrite->setValue(\"filePath\", Location::filePath);\n   IniWrite->setValue(\"globalQss\", globalQss);\n   delete IniWrite;\n \n   delete ui;\n }\n \n ```\n\n## 其他\n\n- 在主函数中为整个窗口设置了透明度，让它看起来酷炫一点点。\n- 在主函数中为窗口设定名称。\n- 在`.pro`文件中加入图标文件，使得生成的程序有图标\n\n# 感想\n\n## 收获\n\n- 不再害怕qt框架了，反而觉得它好用。\n- qt的窗口类很舒服，有清晰且层次分明的关系，有足够好用的成员函数。\n- qt的基本库也有不少可以讨论的，如QString的设计，不仅提供了基本的可变长度和操作符重载，还考虑到了和std库之间的转换。\n- qt的信号与槽机制是qt最精髓的东西之一，信号是一种非常不错的线程间通信方式，很遗憾我没有手动使用connect函数来创建信号与槽。但确实在写qt的过程中，qtcreator已经为我提供了足够的可视化信号与槽构建工具。\n- qss基本等于css\n- qt以易于制作ui界面出名，但用了之后发现，qt实际上是借鉴了很多现代浏览器（前端）的实现方式。我写的时候感觉自己像是在写js+css。对于一个web项目来说，前端工程师书写html，css，以及利用框架来写js。后端工程师则使用各种工具来构建web服务。但对于qt这样一种前后结合的一体化程序设计框架来说，前后的分离并不彻底（虽然对硬件工程师来说可能会很友好）。\n- 我还是支持“qt是一个平台而不只是一个ui框架”这种说法。qt在基本库中的内容一点也不比它在ui界面中的少。无论是基本库还是ui库，都有很多可以研究的东西。\n- 宏的自动扩展确实好用\n- qt毕竟还是封装的比较高层了，要是需要一些简单的功能，还是老老实实写原生的c和std吧。\n\n## 遗憾\n\n- 大佬说他使用了前缀表达式，求余和翻方功能不好实现，我懂的算法也不多，这两个功能没能实现。只能说算法能力有待提高了。\n","source":"_posts/Project/0xCalculator.md","raw":"---\nauthor: kawhicurry\ntitle: 0xCalculator 16进制计算器\ncategories:\n  - Project\ntags: cpp\ndate: 2021-11-28 17:31:31\n---\n\n# 功能\n\n1. 对十六进制数进行双目、表达式运算\n2. 对运算结果进行保存和再读取，支持自动保存和手动保存\n3. 自定义运算结果储存位置\n4. 自定义字体大小\n5. 可更换窗口风格（换肤）\n6. 自动保存设置\n\n# 任务分配\n\n1. ：ui设计与qt框架\n2. ：核心算法\n3. ：文件读写\n\n# 开源地址\n<https://github.com/kawhicurry/0xCalculator>\n\n# 开发过程\n\n## Qt框架\n\nqt文件将会以平铺的方式放置在同一工程目录下，其组织结构由`.pro`文件记录，该文件类似于makefile（可以看作是qmakefile？）。其标准目录如下：\n\n> .pro：记录文件\n>\n> /Headers：略\n>\n> /Sources：略\n>\n> /Forms：存放`.ui`文件，实际为`xml`格式，但不建议直接编辑，所有操作应当在设计模块中完成\n>\n> /Resources：存放qt标准资源（可以qt方式引用的资源）\n>\n> /Other files\n\n## UI设计\n\n直接在qt creator的设计界面中打开`设计`模块。从画面左侧拖动组件，摆放至设计框中即可。\n\n*问题*：组件散乱\n\n- 左侧组件库中有`layout`组件,将其拖动至设计框中,再向layout中添加组件，即可使所有组件呈现一定规律。\n\n>布局类型：\n>\n>垂直：略\n>\n>水平：略\n>\n>栅格（grid）：上面俩合起来\n>\n>窗口：？存疑，不是很能理解这是啥\n\n*问题*：使用layout组件后无法布局固定，启动ui界面后拖动窗口改变其大小，layout组件位置不动。\n\n- 应当首先在右侧`对象`框中选中主窗口（mainwindow）中的中间部件（centralwidget），右键选择布局，为整个中间部分设定大的布局，（注：主窗口除了中间部件还初始化了一个菜单栏（menubar）），然后在该布局中嵌套布局或组件。本方案选择了栅格布局，虽然只需垂直布局即可，但为了可拓展性，还是选择栅格。接下来在整个中间部分的栅格布局中，嵌套了一个垂直布局（用于输入和输出）和一个栅格布局（用于存放按键）。\n\n接下来在主窗口中添加所需的组件，分别为输入框、输出框、5*6个按键。然后可以对其属性进行可视化的设计，以下是对`设计`界面中一些工具的解释：\n\n> 右侧下方为属性框，显示了所选定组件的属性，每个组件都是层层继承而来，因此要注意每一层的具体属性以及继承关系。\n>\n> 右侧上方为对象框，显示了当前ui文件中所有文件属性。\n>\n> 正中央下方的框实际上有两个可编辑区域，一个为action editor，即为组件添加动作（可方便设置快捷键）。另一个为信号与槽。\n>\n> 注：信号与槽是最Qt制作ui界面中最重要的机制。\n\n创建槽函数：在信号与槽编辑框中点击加号创建信号与槽，然后选择信号的发送对象、发送信号量、槽、响应函数。此处的创建**只支持内定的槽函数**，想要自定义槽函数，需在右侧对象中找到对象，然后右键选择转到槽，接下来选择信号量之后，Qt会跳转该ui文件对应的cpp文件下，并自动创建一个该槽函数的实现（.h文件中也会自动添加声明）。接下来只需在此槽函数中编写发送信号后（触发信号发送条件），所需只需的步骤即可。\n\n> 信号量是Qt类自带的属性，某个类既有自己的属性，也有继承而来的属性。如pushButton组件继承自QAbstractButton，后者又继承自QWidget，后者又继承自QObject。对于QAbstractButton，其自带的信号有`clicked()`,`pressed()`等，对于QWidget，有`windowIconChanged`等。具体解释请参考官方文档。\n\n`设计`界面支持大量的属性设置，如字体，背景等。并且可以直接在ui界面中即时显示，但并不推荐直接做修改。\n\n一种渲染方式：Qt提供了qss来进行类似css的样式渲染，只需选中对象然后右键改变样式表，修改某个组件的样式表即可。Qss还提供了选择器的功能，因此，只需在某个较大的组件中设置样式表，并对不同的渲染对象进行选择即可。本方案一开始的办法就是在centralwidget组件中设置样式表，完成了酷炫的按键风格。需要注意的是，改变样式表的方法在Qt中是存在一定问题的，并且，**任何写死的方法都可能在以后要修改时造成麻烦**。关于样式表后面还会再进一步设定。\n\n## 模拟按键\n\n一个计算器应当提供一系列的按键，因此要在栅格布局中拖入一定数量的按键。按键分为输入按键和功能按键。\n\n- 输入按键：0123456789ABCDEF+-*/（）\n- 功能按键：<- -> DEL CE UP DOWN =\n\n对于输入按键，按下按键后应当在输入框中显示对应的输入，同时这些按键应当有对应的键盘输入。\n\n对于输出按键，左移和右移是为了移动输入框中的光标。DEL清除一个字符，CE要同时清除输入和输出框。UP和DOWN提供了查看历史功能。等号是整个计算器的核心功能，按下等号后，应当读取输入框中的算式，进行计算后将结果字符串返回至输出框中。\n\n通过在组件上右键选择 转到槽 可以快捷创建槽函数。示例如图：\n\n```cpp\n//mainwindow.h\nvoid MainWindow::on_pushButton_left_bracket_clicked();\n//mainwindow.cpp\nvoid MainWindow::on_pushButton_left_bracket_clicked() {\n  ui->textBrowser_input->setFocus();\n  ui->textBrowser_input->insertPlainText(\"(\");\n}\n```\n\n手动创建几个后，就可以发现其规矩。一个槽函数的名称由`on_name_action`组成。`pushButton_left_bracket`是改按键的名称，这个名称需要在ui文件中指定，当拖动pushButton的时候，qt会按照12345依次给其一个默认名称，并且上面的默认文字都是pushButton。因此对于声明，可以用宏生成。\n\n```cpp\n//mainwindwo.h\n#define clicked_func(name) void on_pushButton_##name##_clicked();\n  clicked_func(0);\n  clicked_func(1);\n  clicked_func(2);\n  clicked_func(3);\n//...\n#define triggered_func(name) void on_action##name##_triggered();\n\n  triggered_func(Author);\n  triggered_func(Save) triggered_func(Read);\n  triggered_func(History_location);\n  triggered_func(Auto_Save);\n```\n\n对于实现，部分直接输入的槽函数也可以用宏生成\n\n```cpp\n//mainwindow.cpp\n#define set_insert_func(name)                         \\\n  void MainWindow::on_pushButton_##name##_clicked() { \\\n    ui->textBrowser_input->setFocus();                \\\n    ui->textBrowser_input->insertPlainText(#name);    \\\n  }\n\nset_insert_func(0);\nset_insert_func(1);\nset_insert_func(2);\nset_insert_func(3);\nset_insert_func(4);\n```\n\n剩下的就只能自己写咯。\n\n## 输入输出框\n\nqt为用户提供了`text Browser`,`text Edit`,`Plain text edit`,`line edit`等组件作为文本框。这里选择了text Browser，目的是屏蔽直接复制粘贴输入，防止非法字符进入。结果后面发现`text Browser`是由`text Edit`继承而来，因此browser也可以提供输入功能（离谱，read Only属性。\n\n所有的输入按键都将在输入框中插入一个对应的字符。这里只需要调用`text Browser`类中自带的public function member：`insertPlainText(QString)`。\n\n*问题*：文本框中的光标只有在选中文本框时才会显示，如果使用鼠标点击按键进行输入，输入框中的光标实际仍然存在但不显示。\n\n- 为了使得光标时刻存在，这里使用了一个简单粗暴的方法，为所有按键功能加上`setFocus()`。从而保证焦点始终在输入框中。\n\n对于输出框，每次显示结果都是更新所有内容（而不是插入），因此需要`setPlainText`。\n\n## 等号\n\n等号按键是计算器最核心的按键，以下为等号按键的槽函数\n\n```cpp\n//mainwindow.cpp\nvoid MainWindow::on_pushButton_equal_clicked() {\n  ui->textBrowser_input->setFocus();\n\n  Location::isRead = 0;\n\n  QString s = ui->textBrowser_input->toPlainText();\n  QString rst = parser(s);\n  ui->textBrowser_output->setPlainText(rst);\n  if (Location::autoSave) {\n    save(Location::filePath, s, rst);\n  }\n}\n```\n\n按下等号后，程序首先保证焦点仍然在输入框口上，然后讲是否正在读取历史记录按键设置为0（这讲在后面的历史记录读取中说到），然后获取输入框中的内容，交给由竞赛大佬@龚程昊编写的parser函数进行处理（这将在后面数据处理中说到），然后将parser函数返回的字符串（QString）显示到输出框中，然后在自动保存功能开启的情况下，保存至本地文件中。\n\n## 数据处理\n\n等会儿copy大佬写的东西，大致思路是使用栈和转化为前缀表达式。\n\n但大佬使用的使用的是std库，并且是作为一个单独的cpp程序书写的（方便调试）。因此，这里将源文件复制到parser文件中，并将main函数改写成接受`QString`作为参数，返回`QString`的parser()函数。这里用到了`QString::toStdString`和`QString::fromStdString`。\n\n记录几个当时测试出来的bug：\n\n1. 只写一个数后按等号，直接返回0\n2. 没有考虑负数\n3. 没有考虑溢出\n\n附上代码\n\n```cpp\n//parser.cpp\n#include \"parser.h\"\n\nusing namespace std;\n\nbool pd(char i) {\n  if ((i <= 57 && i >= 48) || (i >= 65 && i <= 70)) return 0;\n  return 1;\n}\n\nint pri(char i)  // priority\n{\n  if (i == '+' || i == '-') return 1;\n  if (i == '*' || i == '/') return 2;\n  if (i == '(') return 0;\n  if (i == ')') return -1;\n  return 255;\n}\nbool judge(char i)  //乱码\n{\n  if ((i <= 57 && i >= 48) || (i >= 65 && i <= 70) || i == '+' || i == '-' ||\n      i == '*' || i == '/' || i == '(' || i == ')') {\n    return 0;\n  }\n  return 1;\n}\n\nQString parser(QString expression) {\n  using namespace std;\n  const int N = 1007;\n  const long R = LONG_MAX;\n  char s[N], stack1[N];\n  long read[N], sta[N], stack2[N], stt[N];\n  bool f[N] = {0}, flag[N] = {0}, ff = 0, fff = 0;\n  string c, sc;\n  string str, as = expression.toStdString();\n  str = \"0+\" + as;\n  int l = str.length();\n  for (int i = 0; i < l; i++) {\n    s[i] = str[i];\n    if (judge(s[i])) {\n      ff = 1;\n    }\n    if (s[i] == '(' && (s[i + 1] == '*' || s[i + 1] == '/')) ff = 1;\n    if (s[i] == ')' && (s[i - 1] == '+' || s[i - 1] == '-' || s[i - 1] == '*' ||\n                        s[i - 1] == '/'))\n      ff = 1;\n  }\n  if (pd(s[l - 1]) && s[l - 1] != ')') ff = 1;\n  int st = 0;\n  for (int i = 0; i < l; i++)  //括号是否匹配\n  {\n    if (s[i] == '(') st++;\n    if (s[i] == ')') st--;\n  }\n  if (st != 0) ff = 1;\n  int j = 0, k = 0, m = 0;\n  while (j < l && ff == 0) {\n    if (!pd(s[j]))  //数字\n    {\n      if (s[j] <= 57 && s[j] >= 48) {\n        sta[k] = s[j] - 48;\n        j++;\n        k++;\n      } else if (s[j] >= 65 && s[j] <= 70) {\n        sta[k] = s[j] - 55;\n        j++;\n        k++;\n      }\n    } else if (pd(s[j]))  //符号\n    {\n      if (!pd(s[j - 1]) && j > 0)  //前面的数字\n      {\n        int cnt = 0;\n        char c = s[j];\n        for (int h = 0; k > 0; h++) {\n          cnt += sta[k - 1] * pow(16, h);\n          k--;\n        }\n        read[m] = cnt;\n        m++;\n        j++;\n        read[m] = c;\n        f[m] = 1;\n        m++;\n\n      } else {  //前面的符号\n        char c = s[j];\n        read[m] = c;\n        f[m] = 1;\n        m++;\n        j++;\n      }\n    }\n  }\n  if (!pd(s[l - 1]))  //数字\n  {\n    if (k > 9) {\n      return \"Detect Overflow\";\n    }\n    int cnt = 0;\n    for (int h = 0; k > 0; h++) {\n      cnt += sta[k - 1] * pow(16, h);\n      if (cnt > R) return \"Detect Overflow\";\n      k--;\n    }\n    read[m] = cnt;\n    m++;\n    j++;\n  }\n  for (int i = 0; i < m - 1; i++) {\n    if (i == 1) {\n      if (f[i] == 1 && f[i + 1] == 1 && pri(read[i]) >= 1 &&\n          pri(read[i + 1]) == 2) {\n        ff = 1;\n      }\n    } else if (f[i] == 1 && f[i + 1] == 1 && pri(read[i]) >= 1 &&\n               pri(read[i + 1]) >= 1) {\n      ff = 1;\n    }\n  }\n  int a = 0, b = 0;  //反缀表达式\n  for (int i = 0; i < m; i++) {\n    if (f[i] == 0) {\n      stack2[a] = read[i];\n      a++;\n    } else if (f[i] == 1) {\n      if (read[i] == '(') {\n        stack1[b] = '(';\n        b++;\n      } else if (pri(read[i]) == 1)  //+-\n      {\n        while (pri(stack1[b - 1]) >= 1 && b > 0) {\n          stack2[a] = stack1[b - 1];\n          flag[a] = 1;\n          b--;\n          a++;\n        }\n        stack1[b] = read[i];\n        b++;\n      } else if (pri(read[i]) == 2)  //*/\n      {\n        while (pri(stack1[b - 1]) == 2 && b > 0) {\n          stack2[a] = stack1[b - 1];\n          flag[a] = 1;\n          b--;\n          a++;\n        }\n        stack1[b] = read[i];\n        b++;\n      } else if (read[i] == ')') {\n        while (stack1[b - 1] != '(') {\n          stack2[a] = stack1[b - 1];\n          flag[a] = 1;\n          b--;\n          a++;\n        }\n        b--;\n      }\n    }\n  }\n  while (b > 0) {\n    stack2[a] = stack1[b - 1];\n    flag[a] = 1;\n    a++;\n    b--;\n  }\n  // calculation\n  int g = 0, cn = 0;\n  for (int i = 0; i < a; i++) {\n    if (!flag[i])  //数字\n    {\n      stt[g] = stack2[i];\n      g++;\n    } else if (flag[i])  //符号\n    {\n      switch (stack2[i]) {\n        case '+':\n          cn = stt[g - 2] + stt[g - 1];\n          if (cn > R) ff = 1;\n          break;\n        case '-':\n          cn = stt[g - 2] - stt[g - 1];\n          if (cn < -R) ff = 1;\n          break;\n        case '*':\n          cn = stt[g - 2] * stt[g - 1];\n          if (cn > R || cn < -R) ff = 1;\n          break;\n        case '/':\n          if (stt[g - 1] != 0) {\n            cn = stt[g - 2] / stt[g - 1];\n            break;\n          } else if (stt[g - 1] == 0) {\n            ff = 1;\n            break;\n          }\n      }\n      g -= 2;\n      stt[g] = cn;\n      g++;\n    }\n  }\n  int x;\n  int cnn = cn;\n  if (cn == 0 && !ff) {\n    //        cout<<str<<\"=\"<<cn<<endl;\n    return \"0\";\n    fff = 1;\n  }\n  while (cn != 0 && !ff)  //转十六进制\n  {\n    if (cn >= 0) {\n      x = cn % 16;\n      if (x < 10)\n        c = x + '0';\n      else\n        c = x + 'A' - 10;\n      sc = c + sc;\n      cn /= 16;\n    } else if (cn <= 0) {\n      x = cn % 16;\n      if (x > -10)\n        c = -x + '0';\n      else\n        c = -x + 'A' - 10;\n      sc = c + sc;\n      cn /= 16;\n    }\n  }\n  if (cnn < 0) {\n    sc = '-' + sc;\n  }\n  if (!ff && !fff) {\n    //        cout<<as<<\"=\";\n    //        cout<<sc<<endl;\n    if (sc == \"-80000000\") {\n      return \"Detect Overflow\";\n    }\n    return QString::fromStdString(sc);\n  }\n  return \"Formula Error\";\n}\n\n```\n\n贴代码的时候才发现大佬写了一个pd（判断）和一个judge（还是判断）。算了算了，能用就行（\n\n## 历史记录\n\n如果只是作为计算器，以上功能就已经可以算完成了。但大多数计算器都是有历史记录功能的，因此这个计算器也该有一个。\n\n这里将历史记录分为底层和顶层两部分来设计，顶层使用Qt框架，而底层使用c的基本库，从而实现更加原子化和方便的操作。\n\n顶层实现的用户接口功能：\n\n- 手动保存当前结果\n- 选择是否自动保存结果\n- 选择保存位置\n- 读取历史记录\n\n底层实现的文本的读写功能\n\n- 获取时间\n- 记录结果\n- 写入和读取\n\n### 底层设计细节\n\n保存功能被设计为，获取当前时间和本次运算的算式和结果，以新行的方式追加到某文件的结尾。保存功能的底层设计都被保存在`saving`文件下。\n\n为此底层使用std库设计了`save()`函数。该函数还调用了`getCurrentTime()`来获取当前时间。当然，这个函数也是由`main()`函数修改而来，由std框架接入了qt框架。源码如下：\n\n```cpp\n//saving.cpp\nstatic string getCurrentTime()  //输出当前时间\n{\n  time_t t = time(0);\n  char ch[64] = {0};\n  strftime(ch, sizeof(ch) - 1, \"%Y-%m-%d %H:%M:%S\", localtime(&t));\n  return ch;\n}\nbool save(QString location, QString fomula, QString data) {\n  string addr = location.toStdString();\n  fstream f;\n  f.open(addr, ios::out | ios::app);\n  f << getCurrentTime() << \" \" << fomula.toStdString() << \"=\"\n    << data.toStdString()\n    << endl;  //变量addr、以及gch的等式和输出结果变量还需加进去\n  f.close();\n  return 1;\n}\n```\n\n除了保存结果外，还需要读取结果，读取结果需要始终从最后一行开始往上读。经历了一系列讨论之后，本项目决定使用读取整个文件来获取所有的行数，并根据行数来获取内容。为此有了`CountLine()`和`readLine()`两个函数：\n\n```cpp\nint CountLines(QString filename) {\n  ifstream f;\n  int n = 0;\n  string tmp;\n  string stdfilename = filename.toStdString();\n  // ios::in 表示以只读的方式读取文件\n  f.open(stdfilename, ios::in);\n  //文件打开失败:返回0\n  if (f.fail()) {\n    return 0;\n  } else {\n    //文件存在\n    while (getline(f, tmp, '\\n')) {\n      n++;\n    }\n    f.close();\n    return n;\n  }\n}\nQString ReadLine(QString filename, int line)  //读取指定行文件\n{\n  // line行数限制 1 - lines\n  if (line > 0 && line <= CountLines(filename)) {\n    ifstream f;\n    string stdfilename = filename.toStdString();\n    f.open(stdfilename, ios::in);\n\n    vector<string> strVec;\n    //行0 - 行lines对应strvect[0] - strvect[lines]\n    while (!f.eof()) {\n      string inbuf;\n      getline(f, inbuf, '\\n');\n      strVec.push_back(inbuf);\n    }\n    return QString::fromStdString(strVec[line - 1]);\n  } else {\n    return NULL;\n  }\n}\n```\n\n读取整个文件并计算行数并不是一个效率高的方式，但在文件不大和不追求高效率的条件下，这是最好的实践方式。因为考虑这里还需要考虑到连续读取历史文件。\n\n当用户按下`UP`按键时，表示用户开始读取历史文件。用户首先查看的应该是历史文件的最后一行，当用户再次按下`UP`时，读取倒数第二行，依次类推。为了实现该功能，这里使用了一个全局变量`line`表示当前正在读取的行数，该行数被初始化为历史记录的总行数。然后再次读取将会`--line`后读取。当用户按下`DOWN`按键时，++line后读取。\n\n这里就要考虑到另一个问题，读取一定历史记录后，用户重新进行计算，然后再次查看历史记录，这样行数应当从新的历史记录最后一行开始计算。为此，这里引入了`isRead`变量，该变量初始化为`0`，表示现在未在读取。首次按下`UP`按键时，该变量置`1`，同时将`line`变量初始化为当前历史记录行数。当用户按下`UP`或`DOWN`按键时，正常修改`line`变量的值并进行读取即可。当用户按下`=`或手动保存时，需要将`isRead`置零。这样下一次按下`UP`时，将重新读取历史文件行数并为`line`赋值。\n\n```cpp\n//mainwindow.cpp\n//等号的槽函数在上面\nvoid MainWindow::on_pushButton_Up_clicked() {\n  ui->textBrowser_input->setFocus();\n  if (Location::isRead) {\n    --Location::line;\n  } else {\n    Location::line = CountLines(Location::filePath);\n    Location::isRead = 1;\n  }\n  ui->textBrowser_output->setText(ReadLine(Location::filePath, Location::line));\n}\nvoid MainWindow::on_pushButton_Down_clicked() {\n  ui->textBrowser_input->setFocus();\n  if (Location::isRead) {\n    ++Location::line;\n  }\n  ui->textBrowser_output->setText(ReadLine(Location::filePath, Location::line));\n}\n```\n\n保存和读取的路径将在`顶层设计细节`中进一步讨论。\n\n### 顶层设计细节\n\n这里在menubar中设置了一个`history location`按键，用于修改历史文件的存放位置。当按下此按键时，程序应当打开一个新的窗口，因此，需要首先在源文件中创建一个新的窗口。右键点击`项目`，选择`add new`，选择`qt设计师类`，然后会分别在三个文件夹中依次得到头文件、源文件、ui设计文件。然后需要在主窗口中设置点击`history location`按键打开新窗口。\n\n```cpp\n//mainwindow.cpp\nvoid MainWindow::on_actionHistory_location_triggered() {\n  Location *new_win = new Location();\n  new_win->show();\n}\n```\n\n**注意**：记得在`mainwindow.h`中include`location.h`，按下打开新窗口实际上就是创建一个新的Location窗口，然后展示。\n\n接下来就是在`location.ui`中修改和设计可视化窗口，此项目使用了栅格布局，在左侧设置了一个较大的`textBrowser`和较小的`lineEdit`（设为不可修改，用于给出提示），在右侧依次设置了`选择文件`，`选择文件夹`，`确定`，`取消` 四个按键。\n\n> 选择文件：调用Qt库，打开系统默认的文件选择框，设置必须选择.txt格式结尾的文件，将返回的结果输出至`textBrowser`。\n>\n> 选择文件夹：同上，但是选择的是文件夹，并且返回的是存在的文件夹的路径，将返回的结果加上`/result.txt`后输入至`textBrowser`。\n>\n> 确定：按下后，读取`textBrowser`中的路径，检查其合法性（因为一开始`textBrowser`设置了可以直接更改，因此可能会输入奇怪的路径），若不合法则在`lineEdit`中给出相应的报错（格式不合法或路径不合法）。若合法，则检查文件是否存在，不存在则创建。当一切都合理以后，将全局变量`filePath`设为文本框中的内容，并关闭`Location`窗口。\n>\n> 取消：直接关闭，不做任何修改。\n\n```cpp\n//location.cpp\nvoid Location::on_pushButton_path_clicked() {\n  QString file_name =\n      QFileDialog::getOpenFileName(NULL, \"选择txt文件\", \".\", \"*.txt\");\n  ui->textEdit->setText(file_name);\n}\n\nvoid Location::on_pushButton_dir_clicked() {\n  QString dir_name = QFileDialog::getExistingDirectory(NULL, \"选择文件夹\", \".\");\n  ui->textEdit->setText(dir_name + \"/result.txt\");\n}\n\nvoid Location::on_pushButton_cancel_clicked() { Location::close(); }\n\nvoid Location::on_pushButton_sure_clicked() {\n  QString new_path = ui->textEdit->toPlainText();\n  QFileInfo info(new_path);\n\n  if (!info.exists()) {\n    if (new_path.contains(\".txt\")) {\n      QFile f(new_path);\n      f.open(QIODevice::WriteOnly);\n      f.close();\n    } else {\n      ui->prompt->setText(\"路径或格式不合法，请重新输入\");\n    }\n  }\n  Location::filePath=new_path;\n  Location::close();\n}\n```\n\n自动保存功能被设计为主窗口中菜单栏中的一个按键，默认为开启状态，显示为`Auto Save On`，当点击该按键后，槽函数将该文本替换为`Auto Save Off`，并将全局变量`autoSave`置零。\n\n`filePath`和`autoSave`以及底层中的`isRead`和`line`都设计为一个全局变量，便于主窗口调用。\n\n```cpp\n//location.h\nclass Location : public QDialog {\n public:\n  static QString filePath;\n  static int line;\n  static bool isRead;\n  static bool autoSave;\n}\n\n//location.cpp\nQString Location::filePath = \"result.txt\";\nint Location::line = 0;\nbool Location::isRead = 0;\nbool Location::autoSave = 1;\n```\n\n在主窗口中，只有用户按下等号（并且自动保存功能开启）或手动保存（在`menubar`中设置了一个保存按键并且设置了快捷键）时，才会保存。因此只需在这些地方加入`save()`函数即可。当然，也要有对`autoSave`的判断。\n\n## 样式设定\n\n前面提到了可以在`ui`文件中直接修改样式，但这种方式并不利于后面的修改，因此我们选择直接调用函数的方式。如要为`centralWidget`设定样式，可以调用`setStyelSheet()`，后接一个QString，该字符串中直接书写qss内容。\n\n这里选择了另一种方式，使用qt的资源文件管理功能来存储单独的qss文件，然后以前缀引用的方式来调用这些文件。\n\n在`项目`中右键新建`qt resource file`，设定名称后打开管理界面，点击添加前缀`add prefix`。然后添加文件`add Files`。前缀决定了调用的方式（将会在源代码中演示）。文件可以新建一个`general file`后添加，也可以将其他方式创建的qss文件加入。\n\n引入的资源可以以`QFile`的方式引用。本项目在菜单栏中添加了一个黑色主题的选项，其槽函数如下\n\n```cpp\nvoid MainWindow::on_actionBlack_theme_triggered() {\n  globalQss = \":/Black.qss\";\n  QFile defaultQss(globalQss);\n  defaultQss.open(QFile::ReadOnly);\n  QString qssContent = defaultQss.readAll();\n  centralWidget()->setStyleSheet(qssContent);\n}\n```\n\n`/`为我设定的前缀，只需以冒号开头，加上前缀和文件，即表明在应用qt指定好的资源文件。接下来就只需打开该文件并读取其内容，然后为需要的组件设定qss样式即可。\n\n**注意**：使用qss的一些麻烦：后面我希望能设定字体的大小、样式等，但这时通过`setFont()`等函数并不起作用。原因估计是qss的优先级很高，直接设定将不起作用。这时我只能再写一个`changeStyle()`函数，通过qss样式表更新来进行样式更新\n\n```cpp\nvoid MainWindow::changeStyle(QString newStyle, QWidget *widget) {\n  QString oldStyle = widget->styleSheet();\n  oldStyle += newStyle;\n  widget->setStyleSheet(oldStyle);\n}\n```\n\n所以这里我只写了改变字体的函数。\n\n```cpp\nvoid MainWindow::on_actionLarge_font_size_triggered() {\n  changeStyle(\"*{font:30px;}\", MainWindow::centralWidget());\n}\n```\n\n## 保存设置\n\n类似于文件的保存位置，是否自动保存等功能，每次重新启动程序后都会按照程序的设定重新初始化。为了使得这些设定能被保存下来，需要使用一个文件将这些配置保存下来。恰好最近见到了许多`ini`格式文件，qt也提供了`QSetting`及配套的`ini`配置文件读写。\n\n配置文件应当在主窗口创建时被读取，在主窗口被销毁时被存入。因此只需在`mainwindow`的构造函数和析构函数中加入读写`ini`文件的步骤即可。需要注意的是，要考虑`ini`文件不存在的情况，不存在时需要使用程序的内置设定。\n\n ```cpp\n MainWindow::MainWindow(QWidget *parent)\n     : QMainWindow(parent), ui(new Ui::MainWindow) {\n   ui->setupUi(this);\n \n   this->grabKeyboard();\n \n   QSettings *iniRead = new QSettings(\"config.ini\", QSettings::IniFormat);\n   QString iniAuto = iniRead->value(\"autoSave\").toString();\n   QString iniPath = iniRead->value(\"filePath\").toString();\n   QString iniQss = iniRead->value(\"globalQss\").toString();\n   delete iniRead;\n \n   // init autoSave\n   if (!iniAuto.isEmpty() && !iniAuto.toInt()) {\n     Location::autoSave = 0;\n     ui->actionAuto_Save->setText(\"Auto Save Off\");\n   }\n \n   // init filePath\n   QFile iniPathFile(iniPath);\n   if (iniPathFile.open(QFile::WriteOnly)) {\n     Location::filePath = iniPath;\n   }\n \n   // init Qss file(theme)\n   QFile iniQssFile(iniQss);\n   QString qssContent;\n   if (iniQssFile.open(QFile::ReadOnly)) {\n     qssContent = iniQssFile.readAll();\n     globalQss = iniQss;\n   } else {\n     QFile defaultQss(\":/Black.qss\");\n     defaultQss.open(QFile::ReadOnly);\n     qssContent = defaultQss.readAll();\n   }\n   centralWidget()->setStyleSheet(qssContent);\n }\n \n MainWindow::~MainWindow() {\n   QSettings *IniWrite = new QSettings(\"config.ini\", QSettings::IniFormat);\n   IniWrite->setValue(\"autoSave\", Location::autoSave);\n   IniWrite->setValue(\"filePath\", Location::filePath);\n   IniWrite->setValue(\"globalQss\", globalQss);\n   delete IniWrite;\n \n   delete ui;\n }\n \n ```\n\n## 其他\n\n- 在主函数中为整个窗口设置了透明度，让它看起来酷炫一点点。\n- 在主函数中为窗口设定名称。\n- 在`.pro`文件中加入图标文件，使得生成的程序有图标\n\n# 感想\n\n## 收获\n\n- 不再害怕qt框架了，反而觉得它好用。\n- qt的窗口类很舒服，有清晰且层次分明的关系，有足够好用的成员函数。\n- qt的基本库也有不少可以讨论的，如QString的设计，不仅提供了基本的可变长度和操作符重载，还考虑到了和std库之间的转换。\n- qt的信号与槽机制是qt最精髓的东西之一，信号是一种非常不错的线程间通信方式，很遗憾我没有手动使用connect函数来创建信号与槽。但确实在写qt的过程中，qtcreator已经为我提供了足够的可视化信号与槽构建工具。\n- qss基本等于css\n- qt以易于制作ui界面出名，但用了之后发现，qt实际上是借鉴了很多现代浏览器（前端）的实现方式。我写的时候感觉自己像是在写js+css。对于一个web项目来说，前端工程师书写html，css，以及利用框架来写js。后端工程师则使用各种工具来构建web服务。但对于qt这样一种前后结合的一体化程序设计框架来说，前后的分离并不彻底（虽然对硬件工程师来说可能会很友好）。\n- 我还是支持“qt是一个平台而不只是一个ui框架”这种说法。qt在基本库中的内容一点也不比它在ui界面中的少。无论是基本库还是ui库，都有很多可以研究的东西。\n- 宏的自动扩展确实好用\n- qt毕竟还是封装的比较高层了，要是需要一些简单的功能，还是老老实实写原生的c和std吧。\n\n## 遗憾\n\n- 大佬说他使用了前缀表达式，求余和翻方功能不好实现，我懂的算法也不多，这两个功能没能实现。只能说算法能力有待提高了。\n","slug":"0xCalculator","published":1,"category":"Project","updated":"2021-12-23T13:31:28.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxlot1kp002024uldm051i5p","content":"<h1 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h1><ol>\n<li>对十六进制数进行双目、表达式运算</li>\n<li>对运算结果进行保存和再读取，支持自动保存和手动保存</li>\n<li>自定义运算结果储存位置</li>\n<li>自定义字体大小</li>\n<li>可更换窗口风格（换肤）</li>\n<li>自动保存设置</li>\n</ol>\n<h1 id=\"任务分配\"><a href=\"#任务分配\" class=\"headerlink\" title=\"任务分配\"></a>任务分配</h1><ol>\n<li>：ui设计与qt框架</li>\n<li>：核心算法</li>\n<li>：文件读写</li>\n</ol>\n<h1 id=\"开源地址\"><a href=\"#开源地址\" class=\"headerlink\" title=\"开源地址\"></a>开源地址</h1><p><a href=\"https://github.com/kawhicurry/0xCalculator\">https://github.com/kawhicurry/0xCalculator</a></p>\n<h1 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h1><h2 id=\"Qt框架\"><a href=\"#Qt框架\" class=\"headerlink\" title=\"Qt框架\"></a>Qt框架</h2><p>qt文件将会以平铺的方式放置在同一工程目录下，其组织结构由<code>.pro</code>文件记录，该文件类似于makefile（可以看作是qmakefile？）。其标准目录如下：</p>\n<blockquote>\n<p>.pro：记录文件</p>\n<p>/Headers：略</p>\n<p>/Sources：略</p>\n<p>/Forms：存放<code>.ui</code>文件，实际为<code>xml</code>格式，但不建议直接编辑，所有操作应当在设计模块中完成</p>\n<p>/Resources：存放qt标准资源（可以qt方式引用的资源）</p>\n<p>/Other files</p>\n</blockquote>\n<h2 id=\"UI设计\"><a href=\"#UI设计\" class=\"headerlink\" title=\"UI设计\"></a>UI设计</h2><p>直接在qt creator的设计界面中打开<code>设计</code>模块。从画面左侧拖动组件，摆放至设计框中即可。</p>\n<p><em>问题</em>：组件散乱</p>\n<ul>\n<li>左侧组件库中有<code>layout</code>组件,将其拖动至设计框中,再向layout中添加组件，即可使所有组件呈现一定规律。</li>\n</ul>\n<blockquote>\n<p>布局类型：</p>\n<p>垂直：略</p>\n<p>水平：略</p>\n<p>栅格（grid）：上面俩合起来</p>\n<p>窗口：？存疑，不是很能理解这是啥</p>\n</blockquote>\n<p><em>问题</em>：使用layout组件后无法布局固定，启动ui界面后拖动窗口改变其大小，layout组件位置不动。</p>\n<ul>\n<li>应当首先在右侧<code>对象</code>框中选中主窗口（mainwindow）中的中间部件（centralwidget），右键选择布局，为整个中间部分设定大的布局，（注：主窗口除了中间部件还初始化了一个菜单栏（menubar）），然后在该布局中嵌套布局或组件。本方案选择了栅格布局，虽然只需垂直布局即可，但为了可拓展性，还是选择栅格。接下来在整个中间部分的栅格布局中，嵌套了一个垂直布局（用于输入和输出）和一个栅格布局（用于存放按键）。</li>\n</ul>\n<p>接下来在主窗口中添加所需的组件，分别为输入框、输出框、5*6个按键。然后可以对其属性进行可视化的设计，以下是对<code>设计</code>界面中一些工具的解释：</p>\n<blockquote>\n<p>右侧下方为属性框，显示了所选定组件的属性，每个组件都是层层继承而来，因此要注意每一层的具体属性以及继承关系。</p>\n<p>右侧上方为对象框，显示了当前ui文件中所有文件属性。</p>\n<p>正中央下方的框实际上有两个可编辑区域，一个为action editor，即为组件添加动作（可方便设置快捷键）。另一个为信号与槽。</p>\n<p>注：信号与槽是最Qt制作ui界面中最重要的机制。</p>\n</blockquote>\n<p>创建槽函数：在信号与槽编辑框中点击加号创建信号与槽，然后选择信号的发送对象、发送信号量、槽、响应函数。此处的创建<strong>只支持内定的槽函数</strong>，想要自定义槽函数，需在右侧对象中找到对象，然后右键选择转到槽，接下来选择信号量之后，Qt会跳转该ui文件对应的cpp文件下，并自动创建一个该槽函数的实现（.h文件中也会自动添加声明）。接下来只需在此槽函数中编写发送信号后（触发信号发送条件），所需只需的步骤即可。</p>\n<blockquote>\n<p>信号量是Qt类自带的属性，某个类既有自己的属性，也有继承而来的属性。如pushButton组件继承自QAbstractButton，后者又继承自QWidget，后者又继承自QObject。对于QAbstractButton，其自带的信号有<code>clicked()</code>,<code>pressed()</code>等，对于QWidget，有<code>windowIconChanged</code>等。具体解释请参考官方文档。</p>\n</blockquote>\n<p><code>设计</code>界面支持大量的属性设置，如字体，背景等。并且可以直接在ui界面中即时显示，但并不推荐直接做修改。</p>\n<p>一种渲染方式：Qt提供了qss来进行类似css的样式渲染，只需选中对象然后右键改变样式表，修改某个组件的样式表即可。Qss还提供了选择器的功能，因此，只需在某个较大的组件中设置样式表，并对不同的渲染对象进行选择即可。本方案一开始的办法就是在centralwidget组件中设置样式表，完成了酷炫的按键风格。需要注意的是，改变样式表的方法在Qt中是存在一定问题的，并且，<strong>任何写死的方法都可能在以后要修改时造成麻烦</strong>。关于样式表后面还会再进一步设定。</p>\n<h2 id=\"模拟按键\"><a href=\"#模拟按键\" class=\"headerlink\" title=\"模拟按键\"></a>模拟按键</h2><p>一个计算器应当提供一系列的按键，因此要在栅格布局中拖入一定数量的按键。按键分为输入按键和功能按键。</p>\n<ul>\n<li>输入按键：0123456789ABCDEF+-*/（）</li>\n<li>功能按键：&lt;- -&gt; DEL CE UP DOWN =</li>\n</ul>\n<p>对于输入按键，按下按键后应当在输入框中显示对应的输入，同时这些按键应当有对应的键盘输入。</p>\n<p>对于输出按键，左移和右移是为了移动输入框中的光标。DEL清除一个字符，CE要同时清除输入和输出框。UP和DOWN提供了查看历史功能。等号是整个计算器的核心功能，按下等号后，应当读取输入框中的算式，进行计算后将结果字符串返回至输出框中。</p>\n<p>通过在组件上右键选择 转到槽 可以快捷创建槽函数。示例如图：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.h</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_left_bracket_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_left_bracket_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">insertPlainText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>手动创建几个后，就可以发现其规矩。一个槽函数的名称由<code>on_name_action</code>组成。<code>pushButton_left_bracket</code>是改按键的名称，这个名称需要在ui文件中指定，当拖动pushButton的时候，qt会按照12345依次给其一个默认名称，并且上面的默认文字都是pushButton。因此对于声明，可以用宏生成。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindwo.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">clicked_func</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> on_pushButton_</span><span class=\"token punctuation\">##</span><span class=\"token expression\">name</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token function\">_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n  <span class=\"token function\">clicked_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">clicked_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">clicked_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">clicked_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//...</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">triggered_func</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> on_action</span><span class=\"token punctuation\">##</span><span class=\"token expression\">name</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token function\">_triggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n\n  <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>Author<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>Save<span class=\"token punctuation\">)</span> <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>Read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>History_location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>Auto_Save<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于实现，部分直接输入的槽函数也可以用宏生成</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">set_insert_func</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>                         </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token keyword\">void</span> MainWindow<span class=\"token double-colon punctuation\">::</span>on_pushButton_</span><span class=\"token punctuation\">##</span><span class=\"token expression\">name</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token function\">_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\">ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\">ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">insertPlainText</span><span class=\"token punctuation\">(</span>#name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span>\n\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>剩下的就只能自己写咯。</p>\n<h2 id=\"输入输出框\"><a href=\"#输入输出框\" class=\"headerlink\" title=\"输入输出框\"></a>输入输出框</h2><p>qt为用户提供了<code>text Browser</code>,<code>text Edit</code>,<code>Plain text edit</code>,<code>line edit</code>等组件作为文本框。这里选择了text Browser，目的是屏蔽直接复制粘贴输入，防止非法字符进入。结果后面发现<code>text Browser</code>是由<code>text Edit</code>继承而来，因此browser也可以提供输入功能（离谱，read Only属性。</p>\n<p>所有的输入按键都将在输入框中插入一个对应的字符。这里只需要调用<code>text Browser</code>类中自带的public function member：<code>insertPlainText(QString)</code>。</p>\n<p><em>问题</em>：文本框中的光标只有在选中文本框时才会显示，如果使用鼠标点击按键进行输入，输入框中的光标实际仍然存在但不显示。</p>\n<ul>\n<li>为了使得光标时刻存在，这里使用了一个简单粗暴的方法，为所有按键功能加上<code>setFocus()</code>。从而保证焦点始终在输入框中。</li>\n</ul>\n<p>对于输出框，每次显示结果都是更新所有内容（而不是插入），因此需要<code>setPlainText</code>。</p>\n<h2 id=\"等号\"><a href=\"#等号\" class=\"headerlink\" title=\"等号\"></a>等号</h2><p>等号按键是计算器最核心的按键，以下为等号按键的槽函数</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_equal_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  Location<span class=\"token double-colon punctuation\">::</span>isRead <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  QString s <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">toPlainText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString rst <span class=\"token operator\">=</span> <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_output<span class=\"token operator\">-></span><span class=\"token function\">setPlainText</span><span class=\"token punctuation\">(</span>rst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>autoSave<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> rst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>按下等号后，程序首先保证焦点仍然在输入框口上，然后讲是否正在读取历史记录按键设置为0（这讲在后面的历史记录读取中说到），然后获取输入框中的内容，交给由竞赛大佬@龚程昊编写的parser函数进行处理（这将在后面数据处理中说到），然后将parser函数返回的字符串（QString）显示到输出框中，然后在自动保存功能开启的情况下，保存至本地文件中。</p>\n<h2 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a>数据处理</h2><p>等会儿copy大佬写的东西，大致思路是使用栈和转化为前缀表达式。</p>\n<p>但大佬使用的使用的是std库，并且是作为一个单独的cpp程序书写的（方便调试）。因此，这里将源文件复制到parser文件中，并将main函数改写成接受<code>QString</code>作为参数，返回<code>QString</code>的parser()函数。这里用到了<code>QString::toStdString</code>和<code>QString::fromStdString</code>。</p>\n<p>记录几个当时测试出来的bug：</p>\n<ol>\n<li>只写一个数后按等号，直接返回0</li>\n<li>没有考虑负数</li>\n<li>没有考虑溢出</li>\n</ol>\n<p>附上代码</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//parser.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"parser.h\"</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">pd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">57</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> i<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// priority</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> i<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//乱码</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">57</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">||</span>\n      i <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token string\">'('</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nQString <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>QString expression<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1007</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span> R <span class=\"token operator\">=</span> LONG_MAX<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stack1<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">long</span> read<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sta<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stack2<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stt<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">bool</span> f<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fff <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  string c<span class=\"token punctuation\">,</span> sc<span class=\"token punctuation\">;</span>\n  string str<span class=\"token punctuation\">,</span> as <span class=\"token operator\">=</span> expression<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  str <span class=\"token operator\">=</span> <span class=\"token string\">\"0+\"</span> <span class=\"token operator\">+</span> as<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">judge</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'('</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">')'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span> <span class=\"token operator\">||</span>\n                        s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>l <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> st <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//括号是否匹配</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> st<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> st<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> l <span class=\"token operator\">&amp;&amp;</span> ff <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//数字</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">57</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        sta<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">48</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        sta<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">55</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//符号</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//前面的数字</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> h<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          cnt <span class=\"token operator\">+=</span> sta<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          k<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        read<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cnt<span class=\"token punctuation\">;</span>\n        m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        read<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//前面的符号</span>\n        <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        read<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//数字</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Detect Overflow\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> h<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      cnt <span class=\"token operator\">+=</span> sta<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">></span> R<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Detect Overflow\"</span><span class=\"token punctuation\">;</span>\n      k<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    read<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cnt<span class=\"token punctuation\">;</span>\n    m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span>\n          <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span>\n               <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//反缀表达式</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        stack1<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//+-</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          flag<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n          a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        stack1<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//*/</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          flag<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n          a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        stack1<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          flag<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n          a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    flag<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// calculation</span>\n  <span class=\"token keyword\">int</span> g <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> cn <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//数字</span>\n    <span class=\"token punctuation\">&#123;</span>\n      stt<span class=\"token punctuation\">[</span>g<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      g<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//符号</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>stack2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token operator\">:</span>\n          cn <span class=\"token operator\">=</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">></span> R<span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token operator\">:</span>\n          cn <span class=\"token operator\">=</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span>R<span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token operator\">:</span>\n          cn <span class=\"token operator\">=</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">></span> R <span class=\"token operator\">||</span> cn <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span>R<span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token operator\">:</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            cn <span class=\"token operator\">=</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      g <span class=\"token operator\">-=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n      stt<span class=\"token punctuation\">[</span>g<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cn<span class=\"token punctuation\">;</span>\n      g<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> cnn <span class=\"token operator\">=</span> cn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>ff<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//        cout&lt;&lt;str&lt;&lt;\"=\"&lt;&lt;cn&lt;&lt;endl;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n    fff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>ff<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//转十六进制</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      x <span class=\"token operator\">=</span> cn <span class=\"token operator\">%</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        c <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span>\n        c <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n      sc <span class=\"token operator\">=</span> c <span class=\"token operator\">+</span> sc<span class=\"token punctuation\">;</span>\n      cn <span class=\"token operator\">/=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      x <span class=\"token operator\">=</span> cn <span class=\"token operator\">%</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        c <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span>\n        c <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x <span class=\"token operator\">+</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n      sc <span class=\"token operator\">=</span> c <span class=\"token operator\">+</span> sc<span class=\"token punctuation\">;</span>\n      cn <span class=\"token operator\">/=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnn <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    sc <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">+</span> sc<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ff <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>fff<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//        cout&lt;&lt;as&lt;&lt;\"=\";</span>\n    <span class=\"token comment\">//        cout&lt;&lt;sc&lt;&lt;endl;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sc <span class=\"token operator\">==</span> <span class=\"token string\">\"-80000000\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Detect Overflow\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromStdString</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Formula Error\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>贴代码的时候才发现大佬写了一个pd（判断）和一个judge（还是判断）。算了算了，能用就行（</p>\n<h2 id=\"历史记录\"><a href=\"#历史记录\" class=\"headerlink\" title=\"历史记录\"></a>历史记录</h2><p>如果只是作为计算器，以上功能就已经可以算完成了。但大多数计算器都是有历史记录功能的，因此这个计算器也该有一个。</p>\n<p>这里将历史记录分为底层和顶层两部分来设计，顶层使用Qt框架，而底层使用c的基本库，从而实现更加原子化和方便的操作。</p>\n<p>顶层实现的用户接口功能：</p>\n<ul>\n<li>手动保存当前结果</li>\n<li>选择是否自动保存结果</li>\n<li>选择保存位置</li>\n<li>读取历史记录</li>\n</ul>\n<p>底层实现的文本的读写功能</p>\n<ul>\n<li>获取时间</li>\n<li>记录结果</li>\n<li>写入和读取</li>\n</ul>\n<h3 id=\"底层设计细节\"><a href=\"#底层设计细节\" class=\"headerlink\" title=\"底层设计细节\"></a>底层设计细节</h3><p>保存功能被设计为，获取当前时间和本次运算的算式和结果，以新行的方式追加到某文件的结尾。保存功能的底层设计都被保存在<code>saving</code>文件下。</p>\n<p>为此底层使用std库设计了<code>save()</code>函数。该函数还调用了<code>getCurrentTime()</code>来获取当前时间。当然，这个函数也是由<code>main()</code>函数修改而来，由std框架接入了qt框架。源码如下：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//saving.cpp</span>\n<span class=\"token keyword\">static</span> string <span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//输出当前时间</span>\n<span class=\"token punctuation\">&#123;</span>\n  time_t t <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">strftime</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%Y-%m-%d %H:%M:%S\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ch<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>QString location<span class=\"token punctuation\">,</span> QString fomula<span class=\"token punctuation\">,</span> QString data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  string addr <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  fstream f<span class=\"token punctuation\">;</span>\n  f<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>out <span class=\"token operator\">|</span> ios<span class=\"token double-colon punctuation\">::</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  f <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> fomula<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"=\"</span>\n    <span class=\"token operator\">&lt;&lt;</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//变量addr、以及gch的等式和输出结果变量还需加进去</span>\n  f<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>除了保存结果外，还需要读取结果，读取结果需要始终从最后一行开始往上读。经历了一系列讨论之后，本项目决定使用读取整个文件来获取所有的行数，并根据行数来获取内容。为此有了<code>CountLine()</code>和<code>readLine()</code>两个函数：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">CountLines</span><span class=\"token punctuation\">(</span>QString filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ifstream f<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  string tmp<span class=\"token punctuation\">;</span>\n  string stdfilename <span class=\"token operator\">=</span> filename<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ios::in 表示以只读的方式读取文件</span>\n  f<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>stdfilename<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//文件打开失败:返回0</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//文件存在</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nQString <span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span>QString filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//读取指定行文件</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// line行数限制 1 - lines</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>line <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> line <span class=\"token operator\">&lt;=</span> <span class=\"token function\">CountLines</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    ifstream f<span class=\"token punctuation\">;</span>\n    string stdfilename <span class=\"token operator\">=</span> filename<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>stdfilename<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> strVec<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//行0 - 行lines对应strvect[0] - strvect[lines]</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">eof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      string inbuf<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> inbuf<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      strVec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>inbuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromStdString</span><span class=\"token punctuation\">(</span>strVec<span class=\"token punctuation\">[</span>line <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>读取整个文件并计算行数并不是一个效率高的方式，但在文件不大和不追求高效率的条件下，这是最好的实践方式。因为考虑这里还需要考虑到连续读取历史文件。</p>\n<p>当用户按下<code>UP</code>按键时，表示用户开始读取历史文件。用户首先查看的应该是历史文件的最后一行，当用户再次按下<code>UP</code>时，读取倒数第二行，依次类推。为了实现该功能，这里使用了一个全局变量<code>line</code>表示当前正在读取的行数，该行数被初始化为历史记录的总行数。然后再次读取将会<code>--line</code>后读取。当用户按下<code>DOWN</code>按键时，++line后读取。</p>\n<p>这里就要考虑到另一个问题，读取一定历史记录后，用户重新进行计算，然后再次查看历史记录，这样行数应当从新的历史记录最后一行开始计算。为此，这里引入了<code>isRead</code>变量，该变量初始化为<code>0</code>，表示现在未在读取。首次按下<code>UP</code>按键时，该变量置<code>1</code>，同时将<code>line</code>变量初始化为当前历史记录行数。当用户按下<code>UP</code>或<code>DOWN</code>按键时，正常修改<code>line</code>变量的值并进行读取即可。当用户按下<code>=</code>或手动保存时，需要将<code>isRead</code>置零。这样下一次按下<code>UP</code>时，将重新读取历史文件行数并为<code>line</code>赋值。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token comment\">//等号的槽函数在上面</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_Up_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>isRead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">--</span>Location<span class=\"token double-colon punctuation\">::</span>line<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    Location<span class=\"token double-colon punctuation\">::</span>line <span class=\"token operator\">=</span> <span class=\"token function\">CountLines</span><span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Location<span class=\"token double-colon punctuation\">::</span>isRead <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_output<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">,</span> Location<span class=\"token double-colon punctuation\">::</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_Down_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>isRead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">++</span>Location<span class=\"token double-colon punctuation\">::</span>line<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_output<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">,</span> Location<span class=\"token double-colon punctuation\">::</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>保存和读取的路径将在<code>顶层设计细节</code>中进一步讨论。</p>\n<h3 id=\"顶层设计细节\"><a href=\"#顶层设计细节\" class=\"headerlink\" title=\"顶层设计细节\"></a>顶层设计细节</h3><p>这里在menubar中设置了一个<code>history location</code>按键，用于修改历史文件的存放位置。当按下此按键时，程序应当打开一个新的窗口，因此，需要首先在源文件中创建一个新的窗口。右键点击<code>项目</code>，选择<code>add new</code>，选择<code>qt设计师类</code>，然后会分别在三个文件夹中依次得到头文件、源文件、ui设计文件。然后需要在主窗口中设置点击<code>history location</code>按键打开新窗口。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_actionHistory_location_triggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  Location <span class=\"token operator\">*</span>new_win <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Location</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  new_win<span class=\"token operator\">-></span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注意</strong>：记得在<code>mainwindow.h</code>中include<code>location.h</code>，按下打开新窗口实际上就是创建一个新的Location窗口，然后展示。</p>\n<p>接下来就是在<code>location.ui</code>中修改和设计可视化窗口，此项目使用了栅格布局，在左侧设置了一个较大的<code>textBrowser</code>和较小的<code>lineEdit</code>（设为不可修改，用于给出提示），在右侧依次设置了<code>选择文件</code>，<code>选择文件夹</code>，<code>确定</code>，<code>取消</code> 四个按键。</p>\n<blockquote>\n<p>选择文件：调用Qt库，打开系统默认的文件选择框，设置必须选择.txt格式结尾的文件，将返回的结果输出至<code>textBrowser</code>。</p>\n<p>选择文件夹：同上，但是选择的是文件夹，并且返回的是存在的文件夹的路径，将返回的结果加上<code>/result.txt</code>后输入至<code>textBrowser</code>。</p>\n<p>确定：按下后，读取<code>textBrowser</code>中的路径，检查其合法性（因为一开始<code>textBrowser</code>设置了可以直接更改，因此可能会输入奇怪的路径），若不合法则在<code>lineEdit</code>中给出相应的报错（格式不合法或路径不合法）。若合法，则检查文件是否存在，不存在则创建。当一切都合理以后，将全局变量<code>filePath</code>设为文本框中的内容，并关闭<code>Location</code>窗口。</p>\n<p>取消：直接关闭，不做任何修改。</p>\n</blockquote>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//location.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_path_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QString file_name <span class=\"token operator\">=</span>\n      <span class=\"token class-name\">QFileDialog</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getOpenFileName</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"选择txt文件\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ui<span class=\"token operator\">-></span>textEdit<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_dir_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QString dir_name <span class=\"token operator\">=</span> <span class=\"token class-name\">QFileDialog</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getExistingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"选择文件夹\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ui<span class=\"token operator\">-></span>textEdit<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>dir_name <span class=\"token operator\">+</span> <span class=\"token string\">\"/result.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_cancel_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_sure_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QString new_path <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>textEdit<span class=\"token operator\">-></span><span class=\"token function\">toPlainText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QFileInfo <span class=\"token function\">info</span><span class=\"token punctuation\">(</span>new_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>new_path<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      QFile <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>new_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      f<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QIODevice<span class=\"token double-colon punctuation\">::</span>WriteOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      f<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      ui<span class=\"token operator\">-></span>prompt<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路径或格式不合法，请重新输入\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token operator\">=</span>new_path<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>自动保存功能被设计为主窗口中菜单栏中的一个按键，默认为开启状态，显示为<code>Auto Save On</code>，当点击该按键后，槽函数将该文本替换为<code>Auto Save Off</code>，并将全局变量<code>autoSave</code>置零。</p>\n<p><code>filePath</code>和<code>autoSave</code>以及底层中的<code>isRead</code>和<code>line</code>都设计为一个全局变量，便于主窗口调用。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//location.h</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Location</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QDialog</span></span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">static</span> QString filePath<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> isRead<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> autoSave<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//location.cpp</span>\nQString Location<span class=\"token double-colon punctuation\">::</span>filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"result.txt\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> Location<span class=\"token double-colon punctuation\">::</span>line <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> Location<span class=\"token double-colon punctuation\">::</span>isRead <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> Location<span class=\"token double-colon punctuation\">::</span>autoSave <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在主窗口中，只有用户按下等号（并且自动保存功能开启）或手动保存（在<code>menubar</code>中设置了一个保存按键并且设置了快捷键）时，才会保存。因此只需在这些地方加入<code>save()</code>函数即可。当然，也要有对<code>autoSave</code>的判断。</p>\n<h2 id=\"样式设定\"><a href=\"#样式设定\" class=\"headerlink\" title=\"样式设定\"></a>样式设定</h2><p>前面提到了可以在<code>ui</code>文件中直接修改样式，但这种方式并不利于后面的修改，因此我们选择直接调用函数的方式。如要为<code>centralWidget</code>设定样式，可以调用<code>setStyelSheet()</code>，后接一个QString，该字符串中直接书写qss内容。</p>\n<p>这里选择了另一种方式，使用qt的资源文件管理功能来存储单独的qss文件，然后以前缀引用的方式来调用这些文件。</p>\n<p>在<code>项目</code>中右键新建<code>qt resource file</code>，设定名称后打开管理界面，点击添加前缀<code>add prefix</code>。然后添加文件<code>add Files</code>。前缀决定了调用的方式（将会在源代码中演示）。文件可以新建一个<code>general file</code>后添加，也可以将其他方式创建的qss文件加入。</p>\n<p>引入的资源可以以<code>QFile</code>的方式引用。本项目在菜单栏中添加了一个黑色主题的选项，其槽函数如下</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_actionBlack_theme_triggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  globalQss <span class=\"token operator\">=</span> <span class=\"token string\">\":/Black.qss\"</span><span class=\"token punctuation\">;</span>\n  QFile <span class=\"token function\">defaultQss</span><span class=\"token punctuation\">(</span>globalQss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  defaultQss<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QFile<span class=\"token double-colon punctuation\">::</span>ReadOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString qssContent <span class=\"token operator\">=</span> defaultQss<span class=\"token punctuation\">.</span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">centralWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">setStyleSheet</span><span class=\"token punctuation\">(</span>qssContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>/</code>为我设定的前缀，只需以冒号开头，加上前缀和文件，即表明在应用qt指定好的资源文件。接下来就只需打开该文件并读取其内容，然后为需要的组件设定qss样式即可。</p>\n<p><strong>注意</strong>：使用qss的一些麻烦：后面我希望能设定字体的大小、样式等，但这时通过<code>setFont()</code>等函数并不起作用。原因估计是qss的优先级很高，直接设定将不起作用。这时我只能再写一个<code>changeStyle()</code>函数，通过qss样式表更新来进行样式更新</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">changeStyle</span><span class=\"token punctuation\">(</span>QString newStyle<span class=\"token punctuation\">,</span> QWidget <span class=\"token operator\">*</span>widget<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QString oldStyle <span class=\"token operator\">=</span> widget<span class=\"token operator\">-></span><span class=\"token function\">styleSheet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  oldStyle <span class=\"token operator\">+=</span> newStyle<span class=\"token punctuation\">;</span>\n  widget<span class=\"token operator\">-></span><span class=\"token function\">setStyleSheet</span><span class=\"token punctuation\">(</span>oldStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以这里我只写了改变字体的函数。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_actionLarge_font_size_triggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">changeStyle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*&#123;font:30px;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">centralWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"保存设置\"><a href=\"#保存设置\" class=\"headerlink\" title=\"保存设置\"></a>保存设置</h2><p>类似于文件的保存位置，是否自动保存等功能，每次重新启动程序后都会按照程序的设定重新初始化。为了使得这些设定能被保存下来，需要使用一个文件将这些配置保存下来。恰好最近见到了许多<code>ini</code>格式文件，qt也提供了<code>QSetting</code>及配套的<code>ini</code>配置文件读写。</p>\n<p>配置文件应当在主窗口创建时被读取，在主窗口被销毁时被存入。因此只需在<code>mainwindow</code>的构造函数和析构函数中加入读写<code>ini</code>文件的步骤即可。需要注意的是，要考虑<code>ini</code>文件不存在的情况，不存在时需要使用程序的内置设定。</p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>MainWindow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">grabKeyboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  QSettings <span class=\"token operator\">*</span>iniRead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QSettings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.ini\"</span><span class=\"token punctuation\">,</span> QSettings<span class=\"token double-colon punctuation\">::</span>IniFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString iniAuto <span class=\"token operator\">=</span> iniRead<span class=\"token operator\">-></span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"autoSave\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString iniPath <span class=\"token operator\">=</span> iniRead<span class=\"token operator\">-></span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filePath\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString iniQss <span class=\"token operator\">=</span> iniRead<span class=\"token operator\">-></span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"globalQss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> iniRead<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// init autoSave</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>iniAuto<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>iniAuto<span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Location<span class=\"token double-colon punctuation\">::</span>autoSave <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    ui<span class=\"token operator\">-></span>actionAuto_Save<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Auto Save Off\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// init filePath</span>\n  QFile <span class=\"token function\">iniPathFile</span><span class=\"token punctuation\">(</span>iniPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iniPathFile<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QFile<span class=\"token double-colon punctuation\">::</span>WriteOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Location<span class=\"token double-colon punctuation\">::</span>filePath <span class=\"token operator\">=</span> iniPath<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// init Qss file(theme)</span>\n  QFile <span class=\"token function\">iniQssFile</span><span class=\"token punctuation\">(</span>iniQss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString qssContent<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iniQssFile<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QFile<span class=\"token double-colon punctuation\">::</span>ReadOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    qssContent <span class=\"token operator\">=</span> iniQssFile<span class=\"token punctuation\">.</span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    globalQss <span class=\"token operator\">=</span> iniQss<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    QFile <span class=\"token function\">defaultQss</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":/Black.qss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    defaultQss<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QFile<span class=\"token double-colon punctuation\">::</span>ReadOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    qssContent <span class=\"token operator\">=</span> defaultQss<span class=\"token punctuation\">.</span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">centralWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">setStyleSheet</span><span class=\"token punctuation\">(</span>qssContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QSettings <span class=\"token operator\">*</span>IniWrite <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QSettings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.ini\"</span><span class=\"token punctuation\">,</span> QSettings<span class=\"token double-colon punctuation\">::</span>IniFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  IniWrite<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"autoSave\"</span><span class=\"token punctuation\">,</span> Location<span class=\"token double-colon punctuation\">::</span>autoSave<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  IniWrite<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filePath\"</span><span class=\"token punctuation\">,</span> Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  IniWrite<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"globalQss\"</span><span class=\"token punctuation\">,</span> globalQss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> IniWrite<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>在主函数中为整个窗口设置了透明度，让它看起来酷炫一点点。</li>\n<li>在主函数中为窗口设定名称。</li>\n<li>在<code>.pro</code>文件中加入图标文件，使得生成的程序有图标</li>\n</ul>\n<h1 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h1><h2 id=\"收获\"><a href=\"#收获\" class=\"headerlink\" title=\"收获\"></a>收获</h2><ul>\n<li>不再害怕qt框架了，反而觉得它好用。</li>\n<li>qt的窗口类很舒服，有清晰且层次分明的关系，有足够好用的成员函数。</li>\n<li>qt的基本库也有不少可以讨论的，如QString的设计，不仅提供了基本的可变长度和操作符重载，还考虑到了和std库之间的转换。</li>\n<li>qt的信号与槽机制是qt最精髓的东西之一，信号是一种非常不错的线程间通信方式，很遗憾我没有手动使用connect函数来创建信号与槽。但确实在写qt的过程中，qtcreator已经为我提供了足够的可视化信号与槽构建工具。</li>\n<li>qss基本等于css</li>\n<li>qt以易于制作ui界面出名，但用了之后发现，qt实际上是借鉴了很多现代浏览器（前端）的实现方式。我写的时候感觉自己像是在写js+css。对于一个web项目来说，前端工程师书写html，css，以及利用框架来写js。后端工程师则使用各种工具来构建web服务。但对于qt这样一种前后结合的一体化程序设计框架来说，前后的分离并不彻底（虽然对硬件工程师来说可能会很友好）。</li>\n<li>我还是支持“qt是一个平台而不只是一个ui框架”这种说法。qt在基本库中的内容一点也不比它在ui界面中的少。无论是基本库还是ui库，都有很多可以研究的东西。</li>\n<li>宏的自动扩展确实好用</li>\n<li>qt毕竟还是封装的比较高层了，要是需要一些简单的功能，还是老老实实写原生的c和std吧。</li>\n</ul>\n<h2 id=\"遗憾\"><a href=\"#遗憾\" class=\"headerlink\" title=\"遗憾\"></a>遗憾</h2><ul>\n<li>大佬说他使用了前缀表达式，求余和翻方功能不好实现，我懂的算法也不多，这两个功能没能实现。只能说算法能力有待提高了。</li>\n</ul>\n","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<h1 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h1><ol>\n<li>对十六进制数进行双目、表达式运算</li>\n<li>对运算结果进行保存和再读取，支持自动保存和手动保存</li>\n<li>自定义运算结果储存位置</li>\n<li>自定义字体大小</li>\n<li>可更换窗口风格（换肤）</li>\n<li>自动保存设置</li>\n</ol>\n<h1 id=\"任务分配\"><a href=\"#任务分配\" class=\"headerlink\" title=\"任务分配\"></a>任务分配</h1><ol>\n<li>：ui设计与qt框架</li>\n<li>：核心算法</li>\n<li>：文件读写</li>\n</ol>\n<h1 id=\"开源地址\"><a href=\"#开源地址\" class=\"headerlink\" title=\"开源地址\"></a>开源地址</h1><p><a href=\"https://github.com/kawhicurry/0xCalculator\">https://github.com/kawhicurry/0xCalculator</a></p>\n<h1 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" title=\"开发过程\"></a>开发过程</h1><h2 id=\"Qt框架\"><a href=\"#Qt框架\" class=\"headerlink\" title=\"Qt框架\"></a>Qt框架</h2><p>qt文件将会以平铺的方式放置在同一工程目录下，其组织结构由<code>.pro</code>文件记录，该文件类似于makefile（可以看作是qmakefile？）。其标准目录如下：</p>\n<blockquote>\n<p>.pro：记录文件</p>\n<p>/Headers：略</p>\n<p>/Sources：略</p>\n<p>/Forms：存放<code>.ui</code>文件，实际为<code>xml</code>格式，但不建议直接编辑，所有操作应当在设计模块中完成</p>\n<p>/Resources：存放qt标准资源（可以qt方式引用的资源）</p>\n<p>/Other files</p>\n</blockquote>\n<h2 id=\"UI设计\"><a href=\"#UI设计\" class=\"headerlink\" title=\"UI设计\"></a>UI设计</h2><p>直接在qt creator的设计界面中打开<code>设计</code>模块。从画面左侧拖动组件，摆放至设计框中即可。</p>\n<p><em>问题</em>：组件散乱</p>\n<ul>\n<li>左侧组件库中有<code>layout</code>组件,将其拖动至设计框中,再向layout中添加组件，即可使所有组件呈现一定规律。</li>\n</ul>\n<blockquote>\n<p>布局类型：</p>\n<p>垂直：略</p>\n<p>水平：略</p>\n<p>栅格（grid）：上面俩合起来</p>\n<p>窗口：？存疑，不是很能理解这是啥</p>\n</blockquote>\n<p><em>问题</em>：使用layout组件后无法布局固定，启动ui界面后拖动窗口改变其大小，layout组件位置不动。</p>\n<ul>\n<li>应当首先在右侧<code>对象</code>框中选中主窗口（mainwindow）中的中间部件（centralwidget），右键选择布局，为整个中间部分设定大的布局，（注：主窗口除了中间部件还初始化了一个菜单栏（menubar）），然后在该布局中嵌套布局或组件。本方案选择了栅格布局，虽然只需垂直布局即可，但为了可拓展性，还是选择栅格。接下来在整个中间部分的栅格布局中，嵌套了一个垂直布局（用于输入和输出）和一个栅格布局（用于存放按键）。</li>\n</ul>\n<p>接下来在主窗口中添加所需的组件，分别为输入框、输出框、5*6个按键。然后可以对其属性进行可视化的设计，以下是对<code>设计</code>界面中一些工具的解释：</p>\n<blockquote>\n<p>右侧下方为属性框，显示了所选定组件的属性，每个组件都是层层继承而来，因此要注意每一层的具体属性以及继承关系。</p>\n<p>右侧上方为对象框，显示了当前ui文件中所有文件属性。</p>\n<p>正中央下方的框实际上有两个可编辑区域，一个为action editor，即为组件添加动作（可方便设置快捷键）。另一个为信号与槽。</p>\n<p>注：信号与槽是最Qt制作ui界面中最重要的机制。</p>\n</blockquote>\n<p>创建槽函数：在信号与槽编辑框中点击加号创建信号与槽，然后选择信号的发送对象、发送信号量、槽、响应函数。此处的创建<strong>只支持内定的槽函数</strong>，想要自定义槽函数，需在右侧对象中找到对象，然后右键选择转到槽，接下来选择信号量之后，Qt会跳转该ui文件对应的cpp文件下，并自动创建一个该槽函数的实现（.h文件中也会自动添加声明）。接下来只需在此槽函数中编写发送信号后（触发信号发送条件），所需只需的步骤即可。</p>\n<blockquote>\n<p>信号量是Qt类自带的属性，某个类既有自己的属性，也有继承而来的属性。如pushButton组件继承自QAbstractButton，后者又继承自QWidget，后者又继承自QObject。对于QAbstractButton，其自带的信号有<code>clicked()</code>,<code>pressed()</code>等，对于QWidget，有<code>windowIconChanged</code>等。具体解释请参考官方文档。</p>\n</blockquote>\n<p><code>设计</code>界面支持大量的属性设置，如字体，背景等。并且可以直接在ui界面中即时显示，但并不推荐直接做修改。</p>\n<p>一种渲染方式：Qt提供了qss来进行类似css的样式渲染，只需选中对象然后右键改变样式表，修改某个组件的样式表即可。Qss还提供了选择器的功能，因此，只需在某个较大的组件中设置样式表，并对不同的渲染对象进行选择即可。本方案一开始的办法就是在centralwidget组件中设置样式表，完成了酷炫的按键风格。需要注意的是，改变样式表的方法在Qt中是存在一定问题的，并且，<strong>任何写死的方法都可能在以后要修改时造成麻烦</strong>。关于样式表后面还会再进一步设定。</p>\n<h2 id=\"模拟按键\"><a href=\"#模拟按键\" class=\"headerlink\" title=\"模拟按键\"></a>模拟按键</h2><p>一个计算器应当提供一系列的按键，因此要在栅格布局中拖入一定数量的按键。按键分为输入按键和功能按键。</p>\n<ul>\n<li>输入按键：0123456789ABCDEF+-*/（）</li>\n<li>功能按键：&lt;- -&gt; DEL CE UP DOWN =</li>\n</ul>\n<p>对于输入按键，按下按键后应当在输入框中显示对应的输入，同时这些按键应当有对应的键盘输入。</p>\n<p>对于输出按键，左移和右移是为了移动输入框中的光标。DEL清除一个字符，CE要同时清除输入和输出框。UP和DOWN提供了查看历史功能。等号是整个计算器的核心功能，按下等号后，应当读取输入框中的算式，进行计算后将结果字符串返回至输出框中。</p>\n<p>通过在组件上右键选择 转到槽 可以快捷创建槽函数。示例如图：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.h</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_left_bracket_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_left_bracket_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">insertPlainText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>手动创建几个后，就可以发现其规矩。一个槽函数的名称由<code>on_name_action</code>组成。<code>pushButton_left_bracket</code>是改按键的名称，这个名称需要在ui文件中指定，当拖动pushButton的时候，qt会按照12345依次给其一个默认名称，并且上面的默认文字都是pushButton。因此对于声明，可以用宏生成。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindwo.h</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">clicked_func</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> on_pushButton_</span><span class=\"token punctuation\">##</span><span class=\"token expression\">name</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token function\">_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n  <span class=\"token function\">clicked_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">clicked_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">clicked_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">clicked_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//...</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">triggered_func</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> on_action</span><span class=\"token punctuation\">##</span><span class=\"token expression\">name</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token function\">_triggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n\n  <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>Author<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>Save<span class=\"token punctuation\">)</span> <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>Read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>History_location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">triggered_func</span><span class=\"token punctuation\">(</span>Auto_Save<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于实现，部分直接输入的槽函数也可以用宏生成</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">set_insert_func</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>                         </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token keyword\">void</span> MainWindow<span class=\"token double-colon punctuation\">::</span>on_pushButton_</span><span class=\"token punctuation\">##</span><span class=\"token expression\">name</span><span class=\"token punctuation\">##</span><span class=\"token expression\"><span class=\"token function\">_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\">ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                </span><span class=\"token punctuation\">\\</span>\n    <span class=\"token expression\">ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">insertPlainText</span><span class=\"token punctuation\">(</span>#name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </span><span class=\"token punctuation\">\\</span>\n  <span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span>\n\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">set_insert_func</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>剩下的就只能自己写咯。</p>\n<h2 id=\"输入输出框\"><a href=\"#输入输出框\" class=\"headerlink\" title=\"输入输出框\"></a>输入输出框</h2><p>qt为用户提供了<code>text Browser</code>,<code>text Edit</code>,<code>Plain text edit</code>,<code>line edit</code>等组件作为文本框。这里选择了text Browser，目的是屏蔽直接复制粘贴输入，防止非法字符进入。结果后面发现<code>text Browser</code>是由<code>text Edit</code>继承而来，因此browser也可以提供输入功能（离谱，read Only属性。</p>\n<p>所有的输入按键都将在输入框中插入一个对应的字符。这里只需要调用<code>text Browser</code>类中自带的public function member：<code>insertPlainText(QString)</code>。</p>\n<p><em>问题</em>：文本框中的光标只有在选中文本框时才会显示，如果使用鼠标点击按键进行输入，输入框中的光标实际仍然存在但不显示。</p>\n<ul>\n<li>为了使得光标时刻存在，这里使用了一个简单粗暴的方法，为所有按键功能加上<code>setFocus()</code>。从而保证焦点始终在输入框中。</li>\n</ul>\n<p>对于输出框，每次显示结果都是更新所有内容（而不是插入），因此需要<code>setPlainText</code>。</p>\n<h2 id=\"等号\"><a href=\"#等号\" class=\"headerlink\" title=\"等号\"></a>等号</h2><p>等号按键是计算器最核心的按键，以下为等号按键的槽函数</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_equal_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  Location<span class=\"token double-colon punctuation\">::</span>isRead <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  QString s <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">toPlainText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString rst <span class=\"token operator\">=</span> <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_output<span class=\"token operator\">-></span><span class=\"token function\">setPlainText</span><span class=\"token punctuation\">(</span>rst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>autoSave<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> rst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>按下等号后，程序首先保证焦点仍然在输入框口上，然后讲是否正在读取历史记录按键设置为0（这讲在后面的历史记录读取中说到），然后获取输入框中的内容，交给由竞赛大佬@龚程昊编写的parser函数进行处理（这将在后面数据处理中说到），然后将parser函数返回的字符串（QString）显示到输出框中，然后在自动保存功能开启的情况下，保存至本地文件中。</p>\n<h2 id=\"数据处理\"><a href=\"#数据处理\" class=\"headerlink\" title=\"数据处理\"></a>数据处理</h2><p>等会儿copy大佬写的东西，大致思路是使用栈和转化为前缀表达式。</p>\n<p>但大佬使用的使用的是std库，并且是作为一个单独的cpp程序书写的（方便调试）。因此，这里将源文件复制到parser文件中，并将main函数改写成接受<code>QString</code>作为参数，返回<code>QString</code>的parser()函数。这里用到了<code>QString::toStdString</code>和<code>QString::fromStdString</code>。</p>\n<p>记录几个当时测试出来的bug：</p>\n<ol>\n<li>只写一个数后按等号，直接返回0</li>\n<li>没有考虑负数</li>\n<li>没有考虑溢出</li>\n</ol>\n<p>附上代码</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//parser.cpp</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"parser.h\"</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">pd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">57</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> i<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// priority</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">judge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> i<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//乱码</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">57</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">||</span>\n      i <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token string\">'('</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nQString <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>QString expression<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1007</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">long</span> R <span class=\"token operator\">=</span> LONG_MAX<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stack1<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">long</span> read<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sta<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stack2<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stt<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">bool</span> f<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fff <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  string c<span class=\"token punctuation\">,</span> sc<span class=\"token punctuation\">;</span>\n  string str<span class=\"token punctuation\">,</span> as <span class=\"token operator\">=</span> expression<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  str <span class=\"token operator\">=</span> <span class=\"token string\">\"0+\"</span> <span class=\"token operator\">+</span> as<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">judge</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'('</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">')'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'*'</span> <span class=\"token operator\">||</span>\n                        s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>l <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> st <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//括号是否匹配</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> st<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> st<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> l <span class=\"token operator\">&amp;&amp;</span> ff <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//数字</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">57</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">48</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        sta<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">48</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">65</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        sta<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">55</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//符号</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//前面的数字</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> h<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          cnt <span class=\"token operator\">+=</span> sta<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          k<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        read<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cnt<span class=\"token punctuation\">;</span>\n        m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        read<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//前面的符号</span>\n        <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        read<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">pd</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//数字</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Detect Overflow\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> h<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      cnt <span class=\"token operator\">+=</span> sta<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">></span> R<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Detect Overflow\"</span><span class=\"token punctuation\">;</span>\n      k<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    read<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cnt<span class=\"token punctuation\">;</span>\n    m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span>\n          <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span>\n               <span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//反缀表达式</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        stack1<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//+-</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          flag<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n          a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        stack1<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//*/</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pri</span><span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          flag<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n          a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        stack1<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>read<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          flag<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n          a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    stack2<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack1<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    flag<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// calculation</span>\n  <span class=\"token keyword\">int</span> g <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> cn <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//数字</span>\n    <span class=\"token punctuation\">&#123;</span>\n      stt<span class=\"token punctuation\">[</span>g<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stack2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      g<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//符号</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>stack2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token operator\">:</span>\n          cn <span class=\"token operator\">=</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">></span> R<span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token operator\">:</span>\n          cn <span class=\"token operator\">=</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span>R<span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token operator\">:</span>\n          cn <span class=\"token operator\">=</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">></span> R <span class=\"token operator\">||</span> cn <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span>R<span class=\"token punctuation\">)</span> ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token operator\">:</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            cn <span class=\"token operator\">=</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stt<span class=\"token punctuation\">[</span>g <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            ff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      g <span class=\"token operator\">-=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n      stt<span class=\"token punctuation\">[</span>g<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cn<span class=\"token punctuation\">;</span>\n      g<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> cnn <span class=\"token operator\">=</span> cn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>ff<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//        cout&lt;&lt;str&lt;&lt;\"=\"&lt;&lt;cn&lt;&lt;endl;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n    fff <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>ff<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//转十六进制</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      x <span class=\"token operator\">=</span> cn <span class=\"token operator\">%</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        c <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span>\n        c <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n      sc <span class=\"token operator\">=</span> c <span class=\"token operator\">+</span> sc<span class=\"token punctuation\">;</span>\n      cn <span class=\"token operator\">/=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cn <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      x <span class=\"token operator\">=</span> cn <span class=\"token operator\">%</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        c <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span>\n        c <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x <span class=\"token operator\">+</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n      sc <span class=\"token operator\">=</span> c <span class=\"token operator\">+</span> sc<span class=\"token punctuation\">;</span>\n      cn <span class=\"token operator\">/=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnn <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    sc <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">+</span> sc<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ff <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>fff<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//        cout&lt;&lt;as&lt;&lt;\"=\";</span>\n    <span class=\"token comment\">//        cout&lt;&lt;sc&lt;&lt;endl;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sc <span class=\"token operator\">==</span> <span class=\"token string\">\"-80000000\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Detect Overflow\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromStdString</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Formula Error\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>贴代码的时候才发现大佬写了一个pd（判断）和一个judge（还是判断）。算了算了，能用就行（</p>\n<h2 id=\"历史记录\"><a href=\"#历史记录\" class=\"headerlink\" title=\"历史记录\"></a>历史记录</h2><p>如果只是作为计算器，以上功能就已经可以算完成了。但大多数计算器都是有历史记录功能的，因此这个计算器也该有一个。</p>\n<p>这里将历史记录分为底层和顶层两部分来设计，顶层使用Qt框架，而底层使用c的基本库，从而实现更加原子化和方便的操作。</p>\n<p>顶层实现的用户接口功能：</p>\n<ul>\n<li>手动保存当前结果</li>\n<li>选择是否自动保存结果</li>\n<li>选择保存位置</li>\n<li>读取历史记录</li>\n</ul>\n<p>底层实现的文本的读写功能</p>\n<ul>\n<li>获取时间</li>\n<li>记录结果</li>\n<li>写入和读取</li>\n</ul>\n<h3 id=\"底层设计细节\"><a href=\"#底层设计细节\" class=\"headerlink\" title=\"底层设计细节\"></a>底层设计细节</h3><p>保存功能被设计为，获取当前时间和本次运算的算式和结果，以新行的方式追加到某文件的结尾。保存功能的底层设计都被保存在<code>saving</code>文件下。</p>\n<p>为此底层使用std库设计了<code>save()</code>函数。该函数还调用了<code>getCurrentTime()</code>来获取当前时间。当然，这个函数也是由<code>main()</code>函数修改而来，由std框架接入了qt框架。源码如下：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//saving.cpp</span>\n<span class=\"token keyword\">static</span> string <span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//输出当前时间</span>\n<span class=\"token punctuation\">&#123;</span>\n  time_t t <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">strftime</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%Y-%m-%d %H:%M:%S\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ch<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>QString location<span class=\"token punctuation\">,</span> QString fomula<span class=\"token punctuation\">,</span> QString data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  string addr <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  fstream f<span class=\"token punctuation\">;</span>\n  f<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>out <span class=\"token operator\">|</span> ios<span class=\"token double-colon punctuation\">::</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  f <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getCurrentTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> fomula<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"=\"</span>\n    <span class=\"token operator\">&lt;&lt;</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//变量addr、以及gch的等式和输出结果变量还需加进去</span>\n  f<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>除了保存结果外，还需要读取结果，读取结果需要始终从最后一行开始往上读。经历了一系列讨论之后，本项目决定使用读取整个文件来获取所有的行数，并根据行数来获取内容。为此有了<code>CountLine()</code>和<code>readLine()</code>两个函数：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">CountLines</span><span class=\"token punctuation\">(</span>QString filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ifstream f<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  string tmp<span class=\"token punctuation\">;</span>\n  string stdfilename <span class=\"token operator\">=</span> filename<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ios::in 表示以只读的方式读取文件</span>\n  f<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>stdfilename<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//文件打开失败:返回0</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//文件存在</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nQString <span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span>QString filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//读取指定行文件</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// line行数限制 1 - lines</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>line <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> line <span class=\"token operator\">&lt;=</span> <span class=\"token function\">CountLines</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    ifstream f<span class=\"token punctuation\">;</span>\n    string stdfilename <span class=\"token operator\">=</span> filename<span class=\"token punctuation\">.</span><span class=\"token function\">toStdString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    f<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>stdfilename<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> strVec<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//行0 - 行lines对应strvect[0] - strvect[lines]</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">eof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      string inbuf<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> inbuf<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      strVec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>inbuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">QString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">fromStdString</span><span class=\"token punctuation\">(</span>strVec<span class=\"token punctuation\">[</span>line <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>读取整个文件并计算行数并不是一个效率高的方式，但在文件不大和不追求高效率的条件下，这是最好的实践方式。因为考虑这里还需要考虑到连续读取历史文件。</p>\n<p>当用户按下<code>UP</code>按键时，表示用户开始读取历史文件。用户首先查看的应该是历史文件的最后一行，当用户再次按下<code>UP</code>时，读取倒数第二行，依次类推。为了实现该功能，这里使用了一个全局变量<code>line</code>表示当前正在读取的行数，该行数被初始化为历史记录的总行数。然后再次读取将会<code>--line</code>后读取。当用户按下<code>DOWN</code>按键时，++line后读取。</p>\n<p>这里就要考虑到另一个问题，读取一定历史记录后，用户重新进行计算，然后再次查看历史记录，这样行数应当从新的历史记录最后一行开始计算。为此，这里引入了<code>isRead</code>变量，该变量初始化为<code>0</code>，表示现在未在读取。首次按下<code>UP</code>按键时，该变量置<code>1</code>，同时将<code>line</code>变量初始化为当前历史记录行数。当用户按下<code>UP</code>或<code>DOWN</code>按键时，正常修改<code>line</code>变量的值并进行读取即可。当用户按下<code>=</code>或手动保存时，需要将<code>isRead</code>置零。这样下一次按下<code>UP</code>时，将重新读取历史文件行数并为<code>line</code>赋值。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token comment\">//等号的槽函数在上面</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_Up_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>isRead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">--</span>Location<span class=\"token double-colon punctuation\">::</span>line<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    Location<span class=\"token double-colon punctuation\">::</span>line <span class=\"token operator\">=</span> <span class=\"token function\">CountLines</span><span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Location<span class=\"token double-colon punctuation\">::</span>isRead <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_output<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">,</span> Location<span class=\"token double-colon punctuation\">::</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_Down_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_input<span class=\"token operator\">-></span><span class=\"token function\">setFocus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>isRead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">++</span>Location<span class=\"token double-colon punctuation\">::</span>line<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  ui<span class=\"token operator\">-></span>textBrowser_output<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span>Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">,</span> Location<span class=\"token double-colon punctuation\">::</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>保存和读取的路径将在<code>顶层设计细节</code>中进一步讨论。</p>\n<h3 id=\"顶层设计细节\"><a href=\"#顶层设计细节\" class=\"headerlink\" title=\"顶层设计细节\"></a>顶层设计细节</h3><p>这里在menubar中设置了一个<code>history location</code>按键，用于修改历史文件的存放位置。当按下此按键时，程序应当打开一个新的窗口，因此，需要首先在源文件中创建一个新的窗口。右键点击<code>项目</code>，选择<code>add new</code>，选择<code>qt设计师类</code>，然后会分别在三个文件夹中依次得到头文件、源文件、ui设计文件。然后需要在主窗口中设置点击<code>history location</code>按键打开新窗口。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainwindow.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_actionHistory_location_triggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  Location <span class=\"token operator\">*</span>new_win <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Location</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  new_win<span class=\"token operator\">-></span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注意</strong>：记得在<code>mainwindow.h</code>中include<code>location.h</code>，按下打开新窗口实际上就是创建一个新的Location窗口，然后展示。</p>\n<p>接下来就是在<code>location.ui</code>中修改和设计可视化窗口，此项目使用了栅格布局，在左侧设置了一个较大的<code>textBrowser</code>和较小的<code>lineEdit</code>（设为不可修改，用于给出提示），在右侧依次设置了<code>选择文件</code>，<code>选择文件夹</code>，<code>确定</code>，<code>取消</code> 四个按键。</p>\n<blockquote>\n<p>选择文件：调用Qt库，打开系统默认的文件选择框，设置必须选择.txt格式结尾的文件，将返回的结果输出至<code>textBrowser</code>。</p>\n<p>选择文件夹：同上，但是选择的是文件夹，并且返回的是存在的文件夹的路径，将返回的结果加上<code>/result.txt</code>后输入至<code>textBrowser</code>。</p>\n<p>确定：按下后，读取<code>textBrowser</code>中的路径，检查其合法性（因为一开始<code>textBrowser</code>设置了可以直接更改，因此可能会输入奇怪的路径），若不合法则在<code>lineEdit</code>中给出相应的报错（格式不合法或路径不合法）。若合法，则检查文件是否存在，不存在则创建。当一切都合理以后，将全局变量<code>filePath</code>设为文本框中的内容，并关闭<code>Location</code>窗口。</p>\n<p>取消：直接关闭，不做任何修改。</p>\n</blockquote>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//location.cpp</span>\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_path_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QString file_name <span class=\"token operator\">=</span>\n      <span class=\"token class-name\">QFileDialog</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getOpenFileName</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"选择txt文件\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ui<span class=\"token operator\">-></span>textEdit<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_dir_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QString dir_name <span class=\"token operator\">=</span> <span class=\"token class-name\">QFileDialog</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getExistingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"选择文件夹\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ui<span class=\"token operator\">-></span>textEdit<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>dir_name <span class=\"token operator\">+</span> <span class=\"token string\">\"/result.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_cancel_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_pushButton_sure_clicked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QString new_path <span class=\"token operator\">=</span> ui<span class=\"token operator\">-></span>textEdit<span class=\"token operator\">-></span><span class=\"token function\">toPlainText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QFileInfo <span class=\"token function\">info</span><span class=\"token punctuation\">(</span>new_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>new_path<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      QFile <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>new_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      f<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QIODevice<span class=\"token double-colon punctuation\">::</span>WriteOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      f<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      ui<span class=\"token operator\">-></span>prompt<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"路径或格式不合法，请重新输入\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token operator\">=</span>new_path<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Location</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>自动保存功能被设计为主窗口中菜单栏中的一个按键，默认为开启状态，显示为<code>Auto Save On</code>，当点击该按键后，槽函数将该文本替换为<code>Auto Save Off</code>，并将全局变量<code>autoSave</code>置零。</p>\n<p><code>filePath</code>和<code>autoSave</code>以及底层中的<code>isRead</code>和<code>line</code>都设计为一个全局变量，便于主窗口调用。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//location.h</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Location</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">QDialog</span></span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">static</span> QString filePath<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> isRead<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> autoSave<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//location.cpp</span>\nQString Location<span class=\"token double-colon punctuation\">::</span>filePath <span class=\"token operator\">=</span> <span class=\"token string\">\"result.txt\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> Location<span class=\"token double-colon punctuation\">::</span>line <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> Location<span class=\"token double-colon punctuation\">::</span>isRead <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> Location<span class=\"token double-colon punctuation\">::</span>autoSave <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在主窗口中，只有用户按下等号（并且自动保存功能开启）或手动保存（在<code>menubar</code>中设置了一个保存按键并且设置了快捷键）时，才会保存。因此只需在这些地方加入<code>save()</code>函数即可。当然，也要有对<code>autoSave</code>的判断。</p>\n<h2 id=\"样式设定\"><a href=\"#样式设定\" class=\"headerlink\" title=\"样式设定\"></a>样式设定</h2><p>前面提到了可以在<code>ui</code>文件中直接修改样式，但这种方式并不利于后面的修改，因此我们选择直接调用函数的方式。如要为<code>centralWidget</code>设定样式，可以调用<code>setStyelSheet()</code>，后接一个QString，该字符串中直接书写qss内容。</p>\n<p>这里选择了另一种方式，使用qt的资源文件管理功能来存储单独的qss文件，然后以前缀引用的方式来调用这些文件。</p>\n<p>在<code>项目</code>中右键新建<code>qt resource file</code>，设定名称后打开管理界面，点击添加前缀<code>add prefix</code>。然后添加文件<code>add Files</code>。前缀决定了调用的方式（将会在源代码中演示）。文件可以新建一个<code>general file</code>后添加，也可以将其他方式创建的qss文件加入。</p>\n<p>引入的资源可以以<code>QFile</code>的方式引用。本项目在菜单栏中添加了一个黑色主题的选项，其槽函数如下</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_actionBlack_theme_triggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  globalQss <span class=\"token operator\">=</span> <span class=\"token string\">\":/Black.qss\"</span><span class=\"token punctuation\">;</span>\n  QFile <span class=\"token function\">defaultQss</span><span class=\"token punctuation\">(</span>globalQss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  defaultQss<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QFile<span class=\"token double-colon punctuation\">::</span>ReadOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString qssContent <span class=\"token operator\">=</span> defaultQss<span class=\"token punctuation\">.</span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">centralWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">setStyleSheet</span><span class=\"token punctuation\">(</span>qssContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>/</code>为我设定的前缀，只需以冒号开头，加上前缀和文件，即表明在应用qt指定好的资源文件。接下来就只需打开该文件并读取其内容，然后为需要的组件设定qss样式即可。</p>\n<p><strong>注意</strong>：使用qss的一些麻烦：后面我希望能设定字体的大小、样式等，但这时通过<code>setFont()</code>等函数并不起作用。原因估计是qss的优先级很高，直接设定将不起作用。这时我只能再写一个<code>changeStyle()</code>函数，通过qss样式表更新来进行样式更新</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">changeStyle</span><span class=\"token punctuation\">(</span>QString newStyle<span class=\"token punctuation\">,</span> QWidget <span class=\"token operator\">*</span>widget<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QString oldStyle <span class=\"token operator\">=</span> widget<span class=\"token operator\">-></span><span class=\"token function\">styleSheet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  oldStyle <span class=\"token operator\">+=</span> newStyle<span class=\"token punctuation\">;</span>\n  widget<span class=\"token operator\">-></span><span class=\"token function\">setStyleSheet</span><span class=\"token punctuation\">(</span>oldStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以这里我只写了改变字体的函数。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">on_actionLarge_font_size_triggered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">changeStyle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*&#123;font:30px;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">centralWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"保存设置\"><a href=\"#保存设置\" class=\"headerlink\" title=\"保存设置\"></a>保存设置</h2><p>类似于文件的保存位置，是否自动保存等功能，每次重新启动程序后都会按照程序的设定重新初始化。为了使得这些设定能被保存下来，需要使用一个文件将这些配置保存下来。恰好最近见到了许多<code>ini</code>格式文件，qt也提供了<code>QSetting</code>及配套的<code>ini</code>配置文件读写。</p>\n<p>配置文件应当在主窗口创建时被读取，在主窗口被销毁时被存入。因此只需在<code>mainwindow</code>的构造函数和析构函数中加入读写<code>ini</code>文件的步骤即可。需要注意的是，要考虑<code>ini</code>文件不存在的情况，不存在时需要使用程序的内置设定。</p>\n <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span>QWidget <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> <span class=\"token function\">QMainWindow</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ui</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Ui<span class=\"token double-colon punctuation\">::</span>MainWindow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ui<span class=\"token operator\">-></span><span class=\"token function\">setupUi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">grabKeyboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  QSettings <span class=\"token operator\">*</span>iniRead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QSettings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.ini\"</span><span class=\"token punctuation\">,</span> QSettings<span class=\"token double-colon punctuation\">::</span>IniFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString iniAuto <span class=\"token operator\">=</span> iniRead<span class=\"token operator\">-></span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"autoSave\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString iniPath <span class=\"token operator\">=</span> iniRead<span class=\"token operator\">-></span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filePath\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString iniQss <span class=\"token operator\">=</span> iniRead<span class=\"token operator\">-></span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"globalQss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> iniRead<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// init autoSave</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>iniAuto<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>iniAuto<span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Location<span class=\"token double-colon punctuation\">::</span>autoSave <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    ui<span class=\"token operator\">-></span>actionAuto_Save<span class=\"token operator\">-></span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Auto Save Off\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// init filePath</span>\n  QFile <span class=\"token function\">iniPathFile</span><span class=\"token punctuation\">(</span>iniPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iniPathFile<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QFile<span class=\"token double-colon punctuation\">::</span>WriteOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Location<span class=\"token double-colon punctuation\">::</span>filePath <span class=\"token operator\">=</span> iniPath<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// init Qss file(theme)</span>\n  QFile <span class=\"token function\">iniQssFile</span><span class=\"token punctuation\">(</span>iniQss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  QString qssContent<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iniQssFile<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QFile<span class=\"token double-colon punctuation\">::</span>ReadOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    qssContent <span class=\"token operator\">=</span> iniQssFile<span class=\"token punctuation\">.</span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    globalQss <span class=\"token operator\">=</span> iniQss<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    QFile <span class=\"token function\">defaultQss</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":/Black.qss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    defaultQss<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>QFile<span class=\"token double-colon punctuation\">::</span>ReadOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    qssContent <span class=\"token operator\">=</span> defaultQss<span class=\"token punctuation\">.</span><span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">centralWidget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">setStyleSheet</span><span class=\"token punctuation\">(</span>qssContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">MainWindow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">MainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  QSettings <span class=\"token operator\">*</span>IniWrite <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">QSettings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config.ini\"</span><span class=\"token punctuation\">,</span> QSettings<span class=\"token double-colon punctuation\">::</span>IniFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  IniWrite<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"autoSave\"</span><span class=\"token punctuation\">,</span> Location<span class=\"token double-colon punctuation\">::</span>autoSave<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  IniWrite<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filePath\"</span><span class=\"token punctuation\">,</span> Location<span class=\"token double-colon punctuation\">::</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  IniWrite<span class=\"token operator\">-></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"globalQss\"</span><span class=\"token punctuation\">,</span> globalQss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> IniWrite<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">delete</span> ui<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>在主函数中为整个窗口设置了透明度，让它看起来酷炫一点点。</li>\n<li>在主函数中为窗口设定名称。</li>\n<li>在<code>.pro</code>文件中加入图标文件，使得生成的程序有图标</li>\n</ul>\n<h1 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h1><h2 id=\"收获\"><a href=\"#收获\" class=\"headerlink\" title=\"收获\"></a>收获</h2><ul>\n<li>不再害怕qt框架了，反而觉得它好用。</li>\n<li>qt的窗口类很舒服，有清晰且层次分明的关系，有足够好用的成员函数。</li>\n<li>qt的基本库也有不少可以讨论的，如QString的设计，不仅提供了基本的可变长度和操作符重载，还考虑到了和std库之间的转换。</li>\n<li>qt的信号与槽机制是qt最精髓的东西之一，信号是一种非常不错的线程间通信方式，很遗憾我没有手动使用connect函数来创建信号与槽。但确实在写qt的过程中，qtcreator已经为我提供了足够的可视化信号与槽构建工具。</li>\n<li>qss基本等于css</li>\n<li>qt以易于制作ui界面出名，但用了之后发现，qt实际上是借鉴了很多现代浏览器（前端）的实现方式。我写的时候感觉自己像是在写js+css。对于一个web项目来说，前端工程师书写html，css，以及利用框架来写js。后端工程师则使用各种工具来构建web服务。但对于qt这样一种前后结合的一体化程序设计框架来说，前后的分离并不彻底（虽然对硬件工程师来说可能会很友好）。</li>\n<li>我还是支持“qt是一个平台而不只是一个ui框架”这种说法。qt在基本库中的内容一点也不比它在ui界面中的少。无论是基本库还是ui库，都有很多可以研究的东西。</li>\n<li>宏的自动扩展确实好用</li>\n<li>qt毕竟还是封装的比较高层了，要是需要一些简单的功能，还是老老实实写原生的c和std吧。</li>\n</ul>\n<h2 id=\"遗憾\"><a href=\"#遗憾\" class=\"headerlink\" title=\"遗憾\"></a>遗憾</h2><ul>\n<li>大佬说他使用了前缀表达式，求余和翻方功能不好实现，我懂的算法也不多，这两个功能没能实现。只能说算法能力有待提高了。</li>\n</ul>\n"},{"author":"kawhicurry","title":"基于虚拟机的开发机搭建","description":"记录如何基于虚拟机搭建自己的开发机","top":0,"cover":0,"date":"2021-12-28T11:21:00.000Z","img":null,"coverImg":null,"summary":null,"keywords":null,"_content":"\n## 前言\n\n最近想装上boost库，写写cpp。捣鼓了半天之后boost才勉强能用。期间不仅要解决安装方式问题，还由vscode的提示、配置等等一大堆问题。这时我又又又又又产生了把win换成linux的冲动。\n\n但毕竟不是第一次上linux了，win和linux的好坏我多多少少还是清楚的。\n\nwindows的优点\n\n- 键鼠协同操作舒服，支持轻微的自定义\n- 便于查资料，敲代码，有大量现成的工具。\n- 稳定且高效，笔记本对win还是做了优化的。\n\n但也有一些我不太能忍受的缺点\n\n- 装环境麻烦，安装位置灵活多变，且安装后不便于删除\n- 自定义程度差，win不支持过于深入的自定义，比如我想搞个全局快捷键都不行，除非我想使用第三方工具，比如`quicker`，而这又回归了第一点。\n- 路径中反人类的反斜杠\n\n反过来，我想用linux正是因为win的这些缺点\n\n- 装环境往往只要一行\n- 高度自定义\n- 更加熟悉的文件系统和配套的脚本\n\n而阻止我用linux的也正好是win的优点\n\n- linux的gui大多都不太好使，甚至gui的自定义程度不如win\n- 中文输入法缺少较好的支持\n- 由上面这两点，linux查资料也不方便\n- 笔记本没有专门的优化，稳定性欠佳\n- ide不稳定，缺少一些通用工具\n\n而在win上的wsl现在还远远不够健全，更何况我想偶尔开个linux的gui踢踢robocup。\n\n这时我想到了远程开发机。先是考虑了云服务器，云服务器没有gui。又想到了台式机，台式机不能保证24小时开机，而且做内网穿透之后速度会跟不上。这时我又想到，为啥不直接开虚拟机。于是乎我又又又开了台虚拟机，并搭建起了开发环境。\n\n## 初步设置\n\n因为`virtualbox`始终是免费的，所以我还是坚持用它而不是`vmware`，\n\n//todo:（因为时间问题，这个坑后面再填）","source":"_posts/Operation/基于虚拟机的开发机搭建.md","raw":"---\nauthor: kawhicurry\ntitle: 基于虚拟机的开发机搭建\ncategories: Operation\ndescription: 记录如何基于虚拟机搭建自己的开发机\ntop: 0\ncover: 0\ndate: 2021-12-28 19:21:00\ntags:\n- linux\nimg:\ncoverImg:\nsummary:\nkeywords:\n---\n\n## 前言\n\n最近想装上boost库，写写cpp。捣鼓了半天之后boost才勉强能用。期间不仅要解决安装方式问题，还由vscode的提示、配置等等一大堆问题。这时我又又又又又产生了把win换成linux的冲动。\n\n但毕竟不是第一次上linux了，win和linux的好坏我多多少少还是清楚的。\n\nwindows的优点\n\n- 键鼠协同操作舒服，支持轻微的自定义\n- 便于查资料，敲代码，有大量现成的工具。\n- 稳定且高效，笔记本对win还是做了优化的。\n\n但也有一些我不太能忍受的缺点\n\n- 装环境麻烦，安装位置灵活多变，且安装后不便于删除\n- 自定义程度差，win不支持过于深入的自定义，比如我想搞个全局快捷键都不行，除非我想使用第三方工具，比如`quicker`，而这又回归了第一点。\n- 路径中反人类的反斜杠\n\n反过来，我想用linux正是因为win的这些缺点\n\n- 装环境往往只要一行\n- 高度自定义\n- 更加熟悉的文件系统和配套的脚本\n\n而阻止我用linux的也正好是win的优点\n\n- linux的gui大多都不太好使，甚至gui的自定义程度不如win\n- 中文输入法缺少较好的支持\n- 由上面这两点，linux查资料也不方便\n- 笔记本没有专门的优化，稳定性欠佳\n- ide不稳定，缺少一些通用工具\n\n而在win上的wsl现在还远远不够健全，更何况我想偶尔开个linux的gui踢踢robocup。\n\n这时我想到了远程开发机。先是考虑了云服务器，云服务器没有gui。又想到了台式机，台式机不能保证24小时开机，而且做内网穿透之后速度会跟不上。这时我又想到，为啥不直接开虚拟机。于是乎我又又又开了台虚拟机，并搭建起了开发环境。\n\n## 初步设置\n\n因为`virtualbox`始终是免费的，所以我还是坚持用它而不是`vmware`，\n\n//todo:（因为时间问题，这个坑后面再填）","slug":"基于虚拟机的开发机搭建","published":1,"category":"Operation","updated":"2021-12-28T12:11:11.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxq2jdvy00006wul63d9h0gm","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近想装上boost库，写写cpp。捣鼓了半天之后boost才勉强能用。期间不仅要解决安装方式问题，还由vscode的提示、配置等等一大堆问题。这时我又又又又又产生了把win换成linux的冲动。</p>\n<p>但毕竟不是第一次上linux了，win和linux的好坏我多多少少还是清楚的。</p>\n<p>windows的优点</p>\n<ul>\n<li>键鼠协同操作舒服，支持轻微的自定义</li>\n<li>便于查资料，敲代码，有大量现成的工具。</li>\n<li>稳定且高效，笔记本对win还是做了优化的。</li>\n</ul>\n<p>但也有一些我不太能忍受的缺点</p>\n<ul>\n<li>装环境麻烦，安装位置灵活多变，且安装后不便于删除</li>\n<li>自定义程度差，win不支持过于深入的自定义，比如我想搞个全局快捷键都不行，除非我想使用第三方工具，比如<code>quicker</code>，而这又回归了第一点。</li>\n<li>路径中反人类的反斜杠</li>\n</ul>\n<p>反过来，我想用linux正是因为win的这些缺点</p>\n<ul>\n<li>装环境往往只要一行</li>\n<li>高度自定义</li>\n<li>更加熟悉的文件系统和配套的脚本</li>\n</ul>\n<p>而阻止我用linux的也正好是win的优点</p>\n<ul>\n<li>linux的gui大多都不太好使，甚至gui的自定义程度不如win</li>\n<li>中文输入法缺少较好的支持</li>\n<li>由上面这两点，linux查资料也不方便</li>\n<li>笔记本没有专门的优化，稳定性欠佳</li>\n<li>ide不稳定，缺少一些通用工具</li>\n</ul>\n<p>而在win上的wsl现在还远远不够健全，更何况我想偶尔开个linux的gui踢踢robocup。</p>\n<p>这时我想到了远程开发机。先是考虑了云服务器，云服务器没有gui。又想到了台式机，台式机不能保证24小时开机，而且做内网穿透之后速度会跟不上。这时我又想到，为啥不直接开虚拟机。于是乎我又又又开了台虚拟机，并搭建起了开发环境。</p>\n<h2 id=\"初步设置\"><a href=\"#初步设置\" class=\"headerlink\" title=\"初步设置\"></a>初步设置</h2><p>因为<code>virtualbox</code>始终是免费的，所以我还是坚持用它而不是<code>vmware</code>，</p>\n<p>//todo:（因为时间问题，这个坑后面再填）</p>\n","site":{"data":{"test":"","friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近想装上boost库，写写cpp。捣鼓了半天之后boost才勉强能用。期间不仅要解决安装方式问题，还由vscode的提示、配置等等一大堆问题。这时我又又又又又产生了把win换成linux的冲动。</p>\n<p>但毕竟不是第一次上linux了，win和linux的好坏我多多少少还是清楚的。</p>\n<p>windows的优点</p>\n<ul>\n<li>键鼠协同操作舒服，支持轻微的自定义</li>\n<li>便于查资料，敲代码，有大量现成的工具。</li>\n<li>稳定且高效，笔记本对win还是做了优化的。</li>\n</ul>\n<p>但也有一些我不太能忍受的缺点</p>\n<ul>\n<li>装环境麻烦，安装位置灵活多变，且安装后不便于删除</li>\n<li>自定义程度差，win不支持过于深入的自定义，比如我想搞个全局快捷键都不行，除非我想使用第三方工具，比如<code>quicker</code>，而这又回归了第一点。</li>\n<li>路径中反人类的反斜杠</li>\n</ul>\n<p>反过来，我想用linux正是因为win的这些缺点</p>\n<ul>\n<li>装环境往往只要一行</li>\n<li>高度自定义</li>\n<li>更加熟悉的文件系统和配套的脚本</li>\n</ul>\n<p>而阻止我用linux的也正好是win的优点</p>\n<ul>\n<li>linux的gui大多都不太好使，甚至gui的自定义程度不如win</li>\n<li>中文输入法缺少较好的支持</li>\n<li>由上面这两点，linux查资料也不方便</li>\n<li>笔记本没有专门的优化，稳定性欠佳</li>\n<li>ide不稳定，缺少一些通用工具</li>\n</ul>\n<p>而在win上的wsl现在还远远不够健全，更何况我想偶尔开个linux的gui踢踢robocup。</p>\n<p>这时我想到了远程开发机。先是考虑了云服务器，云服务器没有gui。又想到了台式机，台式机不能保证24小时开机，而且做内网穿透之后速度会跟不上。这时我又想到，为啥不直接开虚拟机。于是乎我又又又开了台虚拟机，并搭建起了开发环境。</p>\n<h2 id=\"初步设置\"><a href=\"#初步设置\" class=\"headerlink\" title=\"初步设置\"></a>初步设置</h2><p>因为<code>virtualbox</code>始终是免费的，所以我还是坚持用它而不是<code>vmware</code>，</p>\n<p>//todo:（因为时间问题，这个坑后面再填）</p>\n"},{"author":"kawhicurry","title":"2021-2022寒假apollo2d划","description":"2021-2022寒假apollo2d计划","top":1,"cover":1,"date":"2022-01-08T09:02:25.000Z","img":null,"coverImg":null,"summary":null,"keywords":null,"_content":"\n\n\n# 概述\n\n加入apollo已经一个学期了，相比于勤奋的3d组，2d这边感觉推进的确实很慢。一方面确实新队员的基础确实有差距，另一方面也确实没怎么催。但毕竟robocup是个很不错的比赛，还是要好好抽时间看一看，学习学习。\n\n目前已知要用到的一些必要知识有：\n\n- cpp\n  - 基础语法\n  - 面对对象编程\n  - 多文件（主要使用原生的makefile，可能会考虑CMake和xmake）\n  - 少量设计模式\n- linux\n  - shell\n  - 虚拟机\n- 足球的基本规则和战术\n\n以及一些可选但最好还是学一学的知识：\n\n- markdown\n- git\n- python\n\n以及很有用但是不会用的东西：\n\n- 马尔科夫链\n- 遗传算法\n\n# 寒假指南\n\n这个寒假预计在三个方面做推进：\n\n1. 让cpp基础不好的同学从`bhv*`文件看起，基础稍好的同学看完后看看决策树。\n\n2. 让会python的同学看看已有的优化工具。\n3. 让搞linux的同学研究研究代码的可移植性。\n\n本假期的目的有三：\n\n1. 选拔出能看懂cpp代码的正式队员\n2. 搞清楚具体要优化的方向\n3. 完善文档\n\n# 已知情况\n\n预计春天就会开始国赛，时间不等人。不过对国赛也没有什么特别大的期望，毕竟现在开始其实很晚了，至于世界赛肯定会更难啦。\n\n## 一些通用技能\n\n我这里应该贴一份[计算机教育中缺失的一课](https://missing-semester-cn.github.io/)，看完这门课，至少也要了解以下这里的工具，后面的路会轻松许多。\n\n## 关于Cpp\n\n已知我们使用的是来自日本的`helios base`，世界霸主的底层，相应的底层还有中科大的`wrighteable`和其他的自研底层。底层方面`helios`已经提供了相当丰富的选项，基于它的`agent2d`也是一份刚好能用的初始球队。所以对于还不熟悉cpp的同学来说，这份底层以及`agent2d`将会是最好的学习项目。\n\n根据传统（？），`agent2d`最好从`bhv`文件看起，每个`bhv`文件封装了某种动作链，我们通过定义、修改和调用这些动作链，来让球员执行某些行为。这些文件往往封装的不错，所以可以从这里看起。\n\n相对应的，从`main`函数开始，去看决策树也是一种思路，这样可以了解球员的大体执行流程。\n\n在阅读相关代码时，趁手的工具相当重要。如果你只是单纯的看看代码，那么你可以选择在windows系统下任何一件趁手的工具来做这件事，我个人推荐的有：\n\n- vscode\n- vs\n\n> 注意，这样做的话，可能会找不到某些依赖，因为agent2d是被设计为在ubuntu操作系统上运行的（虽然理论上win也可以跑，但是环境可能会比较难搞定）\n\n但如果你想要让球队跑起来，那还是选择在ubuntu下跑起来比较好。关于操作系统，ubuntu可以选择虚拟机安装或双系统安装，这里推荐虚拟机。而在ubuntu下推荐的工具有：\n\n- vscode\n- kdevelop（来自apollo2d组组长的推荐）\n- Clion（来自电子部副部长的推荐）\n\n我们推荐使用这些现代化的IDE或编辑器以优化读者的源码阅读体验。对于你感兴趣的流程，使用`goto`功能去往任何函数或变量的调用，声明，实现的位置。（这段怎么听起来这么像英文翻译过来的）\n\n## 关于Python\n\n我们已经搜集到了一部分基于python实现的球队优化工具，但我们对于它们如何运行以及有何效果完全没有概念，因此我希望能有人来告诉我们这些工具做了什么。\n\n## 关于linux\n\n这项工作是留给我自己的，我希望这份代码所需要的编译环境等可以“相当不错”的运行下去。因此需要对其编译过程，以及依赖的包有更深入的了解。同时需要配合做python的同学完成优化工具的开发。\n\n## 结语\n\n这个假期应该会相当的漫长，希望在这个假期结束后，2d能真正“上道”。","source":"_posts/Project/2021-2022寒假apollo2d准备计划.md","raw":"---\nauthor: kawhicurry\ntitle: 2021-2022寒假apollo2d划\ntags:\n  - apollo\n  - robucup\ndescription: 2021-2022寒假apollo2d计划\ntop: 1\ncover: 1\ncategories:\n  - Project\ndate: 2022-01-08 17:02:25\nimg:\ncoverImg:\nsummary:\nkeywords:\n---\n\n\n\n# 概述\n\n加入apollo已经一个学期了，相比于勤奋的3d组，2d这边感觉推进的确实很慢。一方面确实新队员的基础确实有差距，另一方面也确实没怎么催。但毕竟robocup是个很不错的比赛，还是要好好抽时间看一看，学习学习。\n\n目前已知要用到的一些必要知识有：\n\n- cpp\n  - 基础语法\n  - 面对对象编程\n  - 多文件（主要使用原生的makefile，可能会考虑CMake和xmake）\n  - 少量设计模式\n- linux\n  - shell\n  - 虚拟机\n- 足球的基本规则和战术\n\n以及一些可选但最好还是学一学的知识：\n\n- markdown\n- git\n- python\n\n以及很有用但是不会用的东西：\n\n- 马尔科夫链\n- 遗传算法\n\n# 寒假指南\n\n这个寒假预计在三个方面做推进：\n\n1. 让cpp基础不好的同学从`bhv*`文件看起，基础稍好的同学看完后看看决策树。\n\n2. 让会python的同学看看已有的优化工具。\n3. 让搞linux的同学研究研究代码的可移植性。\n\n本假期的目的有三：\n\n1. 选拔出能看懂cpp代码的正式队员\n2. 搞清楚具体要优化的方向\n3. 完善文档\n\n# 已知情况\n\n预计春天就会开始国赛，时间不等人。不过对国赛也没有什么特别大的期望，毕竟现在开始其实很晚了，至于世界赛肯定会更难啦。\n\n## 一些通用技能\n\n我这里应该贴一份[计算机教育中缺失的一课](https://missing-semester-cn.github.io/)，看完这门课，至少也要了解以下这里的工具，后面的路会轻松许多。\n\n## 关于Cpp\n\n已知我们使用的是来自日本的`helios base`，世界霸主的底层，相应的底层还有中科大的`wrighteable`和其他的自研底层。底层方面`helios`已经提供了相当丰富的选项，基于它的`agent2d`也是一份刚好能用的初始球队。所以对于还不熟悉cpp的同学来说，这份底层以及`agent2d`将会是最好的学习项目。\n\n根据传统（？），`agent2d`最好从`bhv`文件看起，每个`bhv`文件封装了某种动作链，我们通过定义、修改和调用这些动作链，来让球员执行某些行为。这些文件往往封装的不错，所以可以从这里看起。\n\n相对应的，从`main`函数开始，去看决策树也是一种思路，这样可以了解球员的大体执行流程。\n\n在阅读相关代码时，趁手的工具相当重要。如果你只是单纯的看看代码，那么你可以选择在windows系统下任何一件趁手的工具来做这件事，我个人推荐的有：\n\n- vscode\n- vs\n\n> 注意，这样做的话，可能会找不到某些依赖，因为agent2d是被设计为在ubuntu操作系统上运行的（虽然理论上win也可以跑，但是环境可能会比较难搞定）\n\n但如果你想要让球队跑起来，那还是选择在ubuntu下跑起来比较好。关于操作系统，ubuntu可以选择虚拟机安装或双系统安装，这里推荐虚拟机。而在ubuntu下推荐的工具有：\n\n- vscode\n- kdevelop（来自apollo2d组组长的推荐）\n- Clion（来自电子部副部长的推荐）\n\n我们推荐使用这些现代化的IDE或编辑器以优化读者的源码阅读体验。对于你感兴趣的流程，使用`goto`功能去往任何函数或变量的调用，声明，实现的位置。（这段怎么听起来这么像英文翻译过来的）\n\n## 关于Python\n\n我们已经搜集到了一部分基于python实现的球队优化工具，但我们对于它们如何运行以及有何效果完全没有概念，因此我希望能有人来告诉我们这些工具做了什么。\n\n## 关于linux\n\n这项工作是留给我自己的，我希望这份代码所需要的编译环境等可以“相当不错”的运行下去。因此需要对其编译过程，以及依赖的包有更深入的了解。同时需要配合做python的同学完成优化工具的开发。\n\n## 结语\n\n这个假期应该会相当的漫长，希望在这个假期结束后，2d能真正“上道”。","slug":"2021-2022寒假apollo2d准备计划","published":1,"category":"Project","updated":"2022-01-11T07:49:31.249Z","_id":"cky5nbw6v0000t8ula69vbe8k","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>加入apollo已经一个学期了，相比于勤奋的3d组，2d这边感觉推进的确实很慢。一方面确实新队员的基础确实有差距，另一方面也确实没怎么催。但毕竟robocup是个很不错的比赛，还是要好好抽时间看一看，学习学习。</p>\n<p>目前已知要用到的一些必要知识有：</p>\n<ul>\n<li>cpp<ul>\n<li>基础语法</li>\n<li>面对对象编程</li>\n<li>多文件（主要使用原生的makefile，可能会考虑CMake和xmake）</li>\n<li>少量设计模式</li>\n</ul>\n</li>\n<li>linux<ul>\n<li>shell</li>\n<li>虚拟机</li>\n</ul>\n</li>\n<li>足球的基本规则和战术</li>\n</ul>\n<p>以及一些可选但最好还是学一学的知识：</p>\n<ul>\n<li>markdown</li>\n<li>git</li>\n<li>python</li>\n</ul>\n<p>以及很有用但是不会用的东西：</p>\n<ul>\n<li>马尔科夫链</li>\n<li>遗传算法</li>\n</ul>\n<h1 id=\"寒假指南\"><a href=\"#寒假指南\" class=\"headerlink\" title=\"寒假指南\"></a>寒假指南</h1><p>这个寒假预计在三个方面做推进：</p>\n<ol>\n<li><p>让cpp基础不好的同学从<code>bhv*</code>文件看起，基础稍好的同学看完后看看决策树。</p>\n</li>\n<li><p>让会python的同学看看已有的优化工具。</p>\n</li>\n<li><p>让搞linux的同学研究研究代码的可移植性。</p>\n</li>\n</ol>\n<p>本假期的目的有三：</p>\n<ol>\n<li>选拔出能看懂cpp代码的正式队员</li>\n<li>搞清楚具体要优化的方向</li>\n<li>完善文档</li>\n</ol>\n<h1 id=\"已知情况\"><a href=\"#已知情况\" class=\"headerlink\" title=\"已知情况\"></a>已知情况</h1><p>预计春天就会开始国赛，时间不等人。不过对国赛也没有什么特别大的期望，毕竟现在开始其实很晚了，至于世界赛肯定会更难啦。</p>\n<h2 id=\"一些通用技能\"><a href=\"#一些通用技能\" class=\"headerlink\" title=\"一些通用技能\"></a>一些通用技能</h2><p>我这里应该贴一份<a href=\"https://missing-semester-cn.github.io/\">计算机教育中缺失的一课</a>，看完这门课，至少也要了解以下这里的工具，后面的路会轻松许多。</p>\n<h2 id=\"关于Cpp\"><a href=\"#关于Cpp\" class=\"headerlink\" title=\"关于Cpp\"></a>关于Cpp</h2><p>已知我们使用的是来自日本的<code>helios base</code>，世界霸主的底层，相应的底层还有中科大的<code>wrighteable</code>和其他的自研底层。底层方面<code>helios</code>已经提供了相当丰富的选项，基于它的<code>agent2d</code>也是一份刚好能用的初始球队。所以对于还不熟悉cpp的同学来说，这份底层以及<code>agent2d</code>将会是最好的学习项目。</p>\n<p>根据传统（？），<code>agent2d</code>最好从<code>bhv</code>文件看起，每个<code>bhv</code>文件封装了某种动作链，我们通过定义、修改和调用这些动作链，来让球员执行某些行为。这些文件往往封装的不错，所以可以从这里看起。</p>\n<p>相对应的，从<code>main</code>函数开始，去看决策树也是一种思路，这样可以了解球员的大体执行流程。</p>\n<p>在阅读相关代码时，趁手的工具相当重要。如果你只是单纯的看看代码，那么你可以选择在windows系统下任何一件趁手的工具来做这件事，我个人推荐的有：</p>\n<ul>\n<li>vscode</li>\n<li>vs</li>\n</ul>\n<blockquote>\n<p>注意，这样做的话，可能会找不到某些依赖，因为agent2d是被设计为在ubuntu操作系统上运行的（虽然理论上win也可以跑，但是环境可能会比较难搞定）</p>\n</blockquote>\n<p>但如果你想要让球队跑起来，那还是选择在ubuntu下跑起来比较好。关于操作系统，ubuntu可以选择虚拟机安装或双系统安装，这里推荐虚拟机。而在ubuntu下推荐的工具有：</p>\n<ul>\n<li>vscode</li>\n<li>kdevelop（来自apollo2d组组长的推荐）</li>\n<li>Clion（来自电子部副部长的推荐）</li>\n</ul>\n<p>我们推荐使用这些现代化的IDE或编辑器以优化读者的源码阅读体验。对于你感兴趣的流程，使用<code>goto</code>功能去往任何函数或变量的调用，声明，实现的位置。（这段怎么听起来这么像英文翻译过来的）</p>\n<h2 id=\"关于Python\"><a href=\"#关于Python\" class=\"headerlink\" title=\"关于Python\"></a>关于Python</h2><p>我们已经搜集到了一部分基于python实现的球队优化工具，但我们对于它们如何运行以及有何效果完全没有概念，因此我希望能有人来告诉我们这些工具做了什么。</p>\n<h2 id=\"关于linux\"><a href=\"#关于linux\" class=\"headerlink\" title=\"关于linux\"></a>关于linux</h2><p>这项工作是留给我自己的，我希望这份代码所需要的编译环境等可以“相当不错”的运行下去。因此需要对其编译过程，以及依赖的包有更深入的了解。同时需要配合做python的同学完成优化工具的开发。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>这个假期应该会相当的漫长，希望在这个假期结束后，2d能真正“上道”。</p>\n","site":{"data":{"friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","introduction":"来自青柚的运营大佬","url":"https://cfy73.github.io/","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>加入apollo已经一个学期了，相比于勤奋的3d组，2d这边感觉推进的确实很慢。一方面确实新队员的基础确实有差距，另一方面也确实没怎么催。但毕竟robocup是个很不错的比赛，还是要好好抽时间看一看，学习学习。</p>\n<p>目前已知要用到的一些必要知识有：</p>\n<ul>\n<li>cpp<ul>\n<li>基础语法</li>\n<li>面对对象编程</li>\n<li>多文件（主要使用原生的makefile，可能会考虑CMake和xmake）</li>\n<li>少量设计模式</li>\n</ul>\n</li>\n<li>linux<ul>\n<li>shell</li>\n<li>虚拟机</li>\n</ul>\n</li>\n<li>足球的基本规则和战术</li>\n</ul>\n<p>以及一些可选但最好还是学一学的知识：</p>\n<ul>\n<li>markdown</li>\n<li>git</li>\n<li>python</li>\n</ul>\n<p>以及很有用但是不会用的东西：</p>\n<ul>\n<li>马尔科夫链</li>\n<li>遗传算法</li>\n</ul>\n<h1 id=\"寒假指南\"><a href=\"#寒假指南\" class=\"headerlink\" title=\"寒假指南\"></a>寒假指南</h1><p>这个寒假预计在三个方面做推进：</p>\n<ol>\n<li><p>让cpp基础不好的同学从<code>bhv*</code>文件看起，基础稍好的同学看完后看看决策树。</p>\n</li>\n<li><p>让会python的同学看看已有的优化工具。</p>\n</li>\n<li><p>让搞linux的同学研究研究代码的可移植性。</p>\n</li>\n</ol>\n<p>本假期的目的有三：</p>\n<ol>\n<li>选拔出能看懂cpp代码的正式队员</li>\n<li>搞清楚具体要优化的方向</li>\n<li>完善文档</li>\n</ol>\n<h1 id=\"已知情况\"><a href=\"#已知情况\" class=\"headerlink\" title=\"已知情况\"></a>已知情况</h1><p>预计春天就会开始国赛，时间不等人。不过对国赛也没有什么特别大的期望，毕竟现在开始其实很晚了，至于世界赛肯定会更难啦。</p>\n<h2 id=\"一些通用技能\"><a href=\"#一些通用技能\" class=\"headerlink\" title=\"一些通用技能\"></a>一些通用技能</h2><p>我这里应该贴一份<a href=\"https://missing-semester-cn.github.io/\">计算机教育中缺失的一课</a>，看完这门课，至少也要了解以下这里的工具，后面的路会轻松许多。</p>\n<h2 id=\"关于Cpp\"><a href=\"#关于Cpp\" class=\"headerlink\" title=\"关于Cpp\"></a>关于Cpp</h2><p>已知我们使用的是来自日本的<code>helios base</code>，世界霸主的底层，相应的底层还有中科大的<code>wrighteable</code>和其他的自研底层。底层方面<code>helios</code>已经提供了相当丰富的选项，基于它的<code>agent2d</code>也是一份刚好能用的初始球队。所以对于还不熟悉cpp的同学来说，这份底层以及<code>agent2d</code>将会是最好的学习项目。</p>\n<p>根据传统（？），<code>agent2d</code>最好从<code>bhv</code>文件看起，每个<code>bhv</code>文件封装了某种动作链，我们通过定义、修改和调用这些动作链，来让球员执行某些行为。这些文件往往封装的不错，所以可以从这里看起。</p>\n<p>相对应的，从<code>main</code>函数开始，去看决策树也是一种思路，这样可以了解球员的大体执行流程。</p>\n<p>在阅读相关代码时，趁手的工具相当重要。如果你只是单纯的看看代码，那么你可以选择在windows系统下任何一件趁手的工具来做这件事，我个人推荐的有：</p>\n<ul>\n<li>vscode</li>\n<li>vs</li>\n</ul>\n<blockquote>\n<p>注意，这样做的话，可能会找不到某些依赖，因为agent2d是被设计为在ubuntu操作系统上运行的（虽然理论上win也可以跑，但是环境可能会比较难搞定）</p>\n</blockquote>\n<p>但如果你想要让球队跑起来，那还是选择在ubuntu下跑起来比较好。关于操作系统，ubuntu可以选择虚拟机安装或双系统安装，这里推荐虚拟机。而在ubuntu下推荐的工具有：</p>\n<ul>\n<li>vscode</li>\n<li>kdevelop（来自apollo2d组组长的推荐）</li>\n<li>Clion（来自电子部副部长的推荐）</li>\n</ul>\n<p>我们推荐使用这些现代化的IDE或编辑器以优化读者的源码阅读体验。对于你感兴趣的流程，使用<code>goto</code>功能去往任何函数或变量的调用，声明，实现的位置。（这段怎么听起来这么像英文翻译过来的）</p>\n<h2 id=\"关于Python\"><a href=\"#关于Python\" class=\"headerlink\" title=\"关于Python\"></a>关于Python</h2><p>我们已经搜集到了一部分基于python实现的球队优化工具，但我们对于它们如何运行以及有何效果完全没有概念，因此我希望能有人来告诉我们这些工具做了什么。</p>\n<h2 id=\"关于linux\"><a href=\"#关于linux\" class=\"headerlink\" title=\"关于linux\"></a>关于linux</h2><p>这项工作是留给我自己的，我希望这份代码所需要的编译环境等可以“相当不错”的运行下去。因此需要对其编译过程，以及依赖的包有更深入的了解。同时需要配合做python的同学完成优化工具的开发。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>这个假期应该会相当的漫长，希望在这个假期结束后，2d能真正“上道”。</p>\n"},{"author":"kawhicurry","title":"记录一次ssh登录的问题","description":"记录一次ssh登录的问题","top":0,"cover":0,"date":"2022-01-12T05:22:03.000Z","img":null,"coverImg":null,"summary":null,"keywords":null,"_content":"\n## 问题描述\n\n本想使用rsa公钥的ssh免密登录，发现无论如何都要我输密码。\n\n## 问题排查\n\n首先是常规思路查看文件权限\n\n```bash\n# ~/.ssh/authorized_keys\n-rw-------. 1 root root 1307 Jan 12 12:59 authorized_keys # 600\n# ~/.ssh\n-rw-------. 1 root root 1307 Jan 12 12:59 authorized_keys # 600\n# ~\ndrwx------.   6 root   root    147 Jan 12 13:29 root # 700\n\n```\n\n接下来查看ssh-server的配置文件`/etc/ssh/sshd_config`，主要查看以下几项\n```bash\nRSAAuthentication yes\nPubkeyAuthentication yes\n\nPermitRootLogin yes\n```\n\n接下来查看登录日志`/var/log/secure`，注意该文件后面会跟上日期，找最近的即可。\n\n再然后使用本地ssh加上参数vvv尝试登录，查看输出的debug信息，找到如下信息\n```bash\ndebug3: send packet: type 50\ndebug2: we sent a publickey packet, wait for reply\ndebug3: receive packet: type 51\n```\n该信息说明密钥发送成功，但不匹配。重新复制密钥后仍然无法免密。\n\n这时候顾神上线了发现，我的`/root`目录权限是这样的：\n```bash\ndrwx------.   6 root   1006    147 Jan 12 13:29 root\n```\n\n不知道为什么root的权限变成了1006。把1006改回root后可正常使用。\n\n## 结论和启示\n无法免密登录是由于目录权限不够导致的，但这次权限问题出在`group of the owner`上面。因此，以后看权限不能只盯着777看，也要注意`owner`和`group`。\n","source":"_posts/Operation/记录一次ssh登录的问题.md","raw":"---\nauthor: kawhicurry\ntitle: 记录一次ssh登录的问题\ntags:\n  - tag1\n  - tag2\ndescription: 记录一次ssh登录的问题\ntop: 0\ncover: 0\ncategories:\n  - Operation\ndate: 2022-01-12 13:22:03\nimg:\ncoverImg:\nsummary:\nkeywords:\n---\n\n## 问题描述\n\n本想使用rsa公钥的ssh免密登录，发现无论如何都要我输密码。\n\n## 问题排查\n\n首先是常规思路查看文件权限\n\n```bash\n# ~/.ssh/authorized_keys\n-rw-------. 1 root root 1307 Jan 12 12:59 authorized_keys # 600\n# ~/.ssh\n-rw-------. 1 root root 1307 Jan 12 12:59 authorized_keys # 600\n# ~\ndrwx------.   6 root   root    147 Jan 12 13:29 root # 700\n\n```\n\n接下来查看ssh-server的配置文件`/etc/ssh/sshd_config`，主要查看以下几项\n```bash\nRSAAuthentication yes\nPubkeyAuthentication yes\n\nPermitRootLogin yes\n```\n\n接下来查看登录日志`/var/log/secure`，注意该文件后面会跟上日期，找最近的即可。\n\n再然后使用本地ssh加上参数vvv尝试登录，查看输出的debug信息，找到如下信息\n```bash\ndebug3: send packet: type 50\ndebug2: we sent a publickey packet, wait for reply\ndebug3: receive packet: type 51\n```\n该信息说明密钥发送成功，但不匹配。重新复制密钥后仍然无法免密。\n\n这时候顾神上线了发现，我的`/root`目录权限是这样的：\n```bash\ndrwx------.   6 root   1006    147 Jan 12 13:29 root\n```\n\n不知道为什么root的权限变成了1006。把1006改回root后可正常使用。\n\n## 结论和启示\n无法免密登录是由于目录权限不够导致的，但这次权限问题出在`group of the owner`上面。因此，以后看权限不能只盯着777看，也要注意`owner`和`group`。\n","slug":"记录一次ssh登录的问题","published":1,"category":"Operation","updated":"2022-01-12T05:43:33.494Z","_id":"ckyb4aenh0000ksulcvt9e9yo","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>本想使用rsa公钥的ssh免密登录，发现无论如何都要我输密码。</p>\n<h2 id=\"问题排查\"><a href=\"#问题排查\" class=\"headerlink\" title=\"问题排查\"></a>问题排查</h2><p>首先是常规思路查看文件权限</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># ~/.ssh/authorized_keys</span>\n-rw-------. <span class=\"token number\">1</span> root root <span class=\"token number\">1307</span> Jan <span class=\"token number\">12</span> <span class=\"token number\">12</span>:59 authorized_keys <span class=\"token comment\"># 600</span>\n<span class=\"token comment\"># ~/.ssh</span>\n-rw-------. <span class=\"token number\">1</span> root root <span class=\"token number\">1307</span> Jan <span class=\"token number\">12</span> <span class=\"token number\">12</span>:59 authorized_keys <span class=\"token comment\"># 600</span>\n<span class=\"token comment\"># ~</span>\ndrwx------.   <span class=\"token number\">6</span> root   root    <span class=\"token number\">147</span> Jan <span class=\"token number\">12</span> <span class=\"token number\">13</span>:29 root <span class=\"token comment\"># 700</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来查看ssh-server的配置文件<code>/etc/ssh/sshd_config</code>，主要查看以下几项</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">RSAAuthentication <span class=\"token function\">yes</span>\nPubkeyAuthentication <span class=\"token function\">yes</span>\n\nPermitRootLogin <span class=\"token function\">yes</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来查看登录日志<code>/var/log/secure</code>，注意该文件后面会跟上日期，找最近的即可。</p>\n<p>再然后使用本地ssh加上参数vvv尝试登录，查看输出的debug信息，找到如下信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">debug3: send packet: <span class=\"token builtin class-name\">type</span> <span class=\"token number\">50</span>\ndebug2: we sent a publickey packet, <span class=\"token function\">wait</span> <span class=\"token keyword\">for</span> reply\ndebug3: receive packet: <span class=\"token builtin class-name\">type</span> <span class=\"token number\">51</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>该信息说明密钥发送成功，但不匹配。重新复制密钥后仍然无法免密。</p>\n<p>这时候顾神上线了发现，我的<code>/root</code>目录权限是这样的：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">drwx------.   <span class=\"token number\">6</span> root   <span class=\"token number\">1006</span>    <span class=\"token number\">147</span> Jan <span class=\"token number\">12</span> <span class=\"token number\">13</span>:29 root<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>不知道为什么root的权限变成了1006。把1006改回root后可正常使用。</p>\n<h2 id=\"结论和启示\"><a href=\"#结论和启示\" class=\"headerlink\" title=\"结论和启示\"></a>结论和启示</h2><p>无法免密登录是由于目录权限不够导致的，但这次权限问题出在<code>group of the owner</code>上面。因此，以后看权限不能只盯着777看，也要注意<code>owner</code>和<code>group</code>。</p>\n","site":{"data":{"friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","introduction":"来自青柚的运营大佬","url":"https://cfy73.github.io/","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>本想使用rsa公钥的ssh免密登录，发现无论如何都要我输密码。</p>\n<h2 id=\"问题排查\"><a href=\"#问题排查\" class=\"headerlink\" title=\"问题排查\"></a>问题排查</h2><p>首先是常规思路查看文件权限</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># ~/.ssh/authorized_keys</span>\n-rw-------. <span class=\"token number\">1</span> root root <span class=\"token number\">1307</span> Jan <span class=\"token number\">12</span> <span class=\"token number\">12</span>:59 authorized_keys <span class=\"token comment\"># 600</span>\n<span class=\"token comment\"># ~/.ssh</span>\n-rw-------. <span class=\"token number\">1</span> root root <span class=\"token number\">1307</span> Jan <span class=\"token number\">12</span> <span class=\"token number\">12</span>:59 authorized_keys <span class=\"token comment\"># 600</span>\n<span class=\"token comment\"># ~</span>\ndrwx------.   <span class=\"token number\">6</span> root   root    <span class=\"token number\">147</span> Jan <span class=\"token number\">12</span> <span class=\"token number\">13</span>:29 root <span class=\"token comment\"># 700</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来查看ssh-server的配置文件<code>/etc/ssh/sshd_config</code>，主要查看以下几项</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">RSAAuthentication <span class=\"token function\">yes</span>\nPubkeyAuthentication <span class=\"token function\">yes</span>\n\nPermitRootLogin <span class=\"token function\">yes</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来查看登录日志<code>/var/log/secure</code>，注意该文件后面会跟上日期，找最近的即可。</p>\n<p>再然后使用本地ssh加上参数vvv尝试登录，查看输出的debug信息，找到如下信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">debug3: send packet: <span class=\"token builtin class-name\">type</span> <span class=\"token number\">50</span>\ndebug2: we sent a publickey packet, <span class=\"token function\">wait</span> <span class=\"token keyword\">for</span> reply\ndebug3: receive packet: <span class=\"token builtin class-name\">type</span> <span class=\"token number\">51</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>该信息说明密钥发送成功，但不匹配。重新复制密钥后仍然无法免密。</p>\n<p>这时候顾神上线了发现，我的<code>/root</code>目录权限是这样的：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">drwx------.   <span class=\"token number\">6</span> root   <span class=\"token number\">1006</span>    <span class=\"token number\">147</span> Jan <span class=\"token number\">12</span> <span class=\"token number\">13</span>:29 root<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>不知道为什么root的权限变成了1006。把1006改回root后可正常使用。</p>\n<h2 id=\"结论和启示\"><a href=\"#结论和启示\" class=\"headerlink\" title=\"结论和启示\"></a>结论和启示</h2><p>无法免密登录是由于目录权限不够导致的，但这次权限问题出在<code>group of the owner</code>上面。因此，以后看权限不能只盯着777看，也要注意<code>owner</code>和<code>group</code>。</p>\n"},{"author":"kawhicurry","title":"记录一次docker迁移","description":"记录一次docker迁移","top":0,"cover":0,"date":"2022-01-13T05:55:28.000Z","img":null,"coverImg":null,"summary":null,"keywords":null,"_content":"\n最近碰上一次小小的迁移任务，需要在新机器上起docker，并让原来的docker容器在新机器上跑起来。\n\n这里就涉及到，要查看已经跑起来的容器在启动时输入了哪些参数。实际操作起来有以下几个方法：\n\n## docker ps -a --no-trunc\n\n一个简单的方法，但只能看到部分信息\n\n## docker inspect \"container\"\n\n可以看到许多详细的信息，但过于详细了，不容易提取出关键信息\n\n## runlike\n\n```bash\npip install runlike\n```\n一个小工具，只需`runlike \"container id\"`即可获取其启动时的参数\n\n唯一需要注意的是，runlike不会复原是否会以交互或后台方式启动的参数，所以应该按需要加入`-itd`选项","source":"_posts/Operation/记录一次docker迁移.md","raw":"---\nauthor: kawhicurry\ntitle: 记录一次docker迁移\ntags:\n  - docker\n  - mirror\ndescription: 记录一次docker迁移\ntop: 0\ncover: 0\ncategories:\n  - Operation\ndate: 2022-01-13 13:55:28\nimg:\ncoverImg:\nsummary:\nkeywords:\n---\n\n最近碰上一次小小的迁移任务，需要在新机器上起docker，并让原来的docker容器在新机器上跑起来。\n\n这里就涉及到，要查看已经跑起来的容器在启动时输入了哪些参数。实际操作起来有以下几个方法：\n\n## docker ps -a --no-trunc\n\n一个简单的方法，但只能看到部分信息\n\n## docker inspect \"container\"\n\n可以看到许多详细的信息，但过于详细了，不容易提取出关键信息\n\n## runlike\n\n```bash\npip install runlike\n```\n一个小工具，只需`runlike \"container id\"`即可获取其启动时的参数\n\n唯一需要注意的是，runlike不会复原是否会以交互或后台方式启动的参数，所以应该按需要加入`-itd`选项","slug":"记录一次docker迁移","published":1,"category":"Operation","updated":"2022-01-13T06:08:19.110Z","_id":"ckyckm3lg0000l0uldsev34fm","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近碰上一次小小的迁移任务，需要在新机器上起docker，并让原来的docker容器在新机器上跑起来。</p>\n<p>这里就涉及到，要查看已经跑起来的容器在启动时输入了哪些参数。实际操作起来有以下几个方法：</p>\n<h2 id=\"docker-ps-a-–no-trunc\"><a href=\"#docker-ps-a-–no-trunc\" class=\"headerlink\" title=\"docker ps -a –no-trunc\"></a>docker ps -a –no-trunc</h2><p>一个简单的方法，但只能看到部分信息</p>\n<h2 id=\"docker-inspect-“container”\"><a href=\"#docker-inspect-“container”\" class=\"headerlink\" title=\"docker inspect “container”\"></a>docker inspect “container”</h2><p>可以看到许多详细的信息，但过于详细了，不容易提取出关键信息</p>\n<h2 id=\"runlike\"><a href=\"#runlike\" class=\"headerlink\" title=\"runlike\"></a>runlike</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> runlike<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>一个小工具，只需<code>runlike &quot;container id&quot;</code>即可获取其启动时的参数</p>\n<p>唯一需要注意的是，runlike不会复原是否会以交互或后台方式启动的参数，所以应该按需要加入<code>-itd</code>选项</p>\n","site":{"data":{"friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","introduction":"来自青柚的运营大佬","url":"https://cfy73.github.io/","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<p>最近碰上一次小小的迁移任务，需要在新机器上起docker，并让原来的docker容器在新机器上跑起来。</p>\n<p>这里就涉及到，要查看已经跑起来的容器在启动时输入了哪些参数。实际操作起来有以下几个方法：</p>\n<h2 id=\"docker-ps-a-–no-trunc\"><a href=\"#docker-ps-a-–no-trunc\" class=\"headerlink\" title=\"docker ps -a –no-trunc\"></a>docker ps -a –no-trunc</h2><p>一个简单的方法，但只能看到部分信息</p>\n<h2 id=\"docker-inspect-“container”\"><a href=\"#docker-inspect-“container”\" class=\"headerlink\" title=\"docker inspect “container”\"></a>docker inspect “container”</h2><p>可以看到许多详细的信息，但过于详细了，不容易提取出关键信息</p>\n<h2 id=\"runlike\"><a href=\"#runlike\" class=\"headerlink\" title=\"runlike\"></a>runlike</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> runlike<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>一个小工具，只需<code>runlike &quot;container id&quot;</code>即可获取其启动时的参数</p>\n<p>唯一需要注意的是，runlike不会复原是否会以交互或后台方式启动的参数，所以应该按需要加入<code>-itd</code>选项</p>\n"},{"author":"kawhicurry","title":"从2021到2022","description":"回首2021，展望2022","top":0,"cover":0,"date":"2022-01-15T05:59:32.000Z","img":null,"coverImg":null,"summary":null,"keywords":null,"_content":"\n哇，写了东西的，没保存，不想写了，算了，装作这里有东西吧。","source":"_posts/Daily/从2021到2022.md","raw":"---\nauthor: kawhicurry\ntitle: 从2021到2022\ntags:\n  - daily\n  - summary\ndescription: 回首2021，展望2022\ntop: 0\ncover: 0\ncategories:\n  - Daily\ndate: 2022-01-15 13:59:32\nimg:\ncoverImg:\nsummary:\nkeywords:\n---\n\n哇，写了东西的，没保存，不想写了，算了，装作这里有东西吧。","slug":"从2021到2022","published":1,"category":"Daily","updated":"2022-01-15T11:05:24.429Z","_id":"ckyfmnymg0000wkulan7n0064","comments":1,"layout":"post","photos":[],"link":"","content":"<p>哇，写了东西的，没保存，不想写了，算了，装作这里有东西吧。</p>\n","site":{"data":{"friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","introduction":"来自青柚的运营大佬","url":"https://cfy73.github.io/","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<p>哇，写了东西的，没保存，不想写了，算了，装作这里有东西吧。</p>\n"},{"author":"kawhicurry","title":"ROS学习笔记（0）","description":"ROS学习笔记（0）","top":0,"cover":0,"date":"2022-01-15T06:51:00.000Z","img":null,"coverImg":null,"summary":null,"keywords":null,"_content":"\n# 开始\n\n要开始学机器人咯，从ros开始的那种。有人说不要通过ros来学机器人，没有关系撒。先看看机器人咋样再说。\n\n官网：<https://www.ros.org/>\n\n文档：<http://wiki.ros.org/>\n\n教程：<http://wiki.ros.org/ROS/Tutorials>\n\n# 装环境\n\n看官方教程，据李总说有很多坑，不过目前看来感觉还好（虽然确实踩了一脚）。\n\n首先是选发行版吧，ros其实就是一堆工具包，底层还是要依赖别的Operation System的。我选择的方案是先上虚拟机，用apollo那台ubuntu18.04来配。这里李总给的建议是用`ROS Melodic Morenia`，就是melodic这个版本，它确实也说了这句\n\n> ROS Melodic Morenia is primarily targeted at the Ubuntu 18.04 (Bionic) release, though other Linux systems as well as Mac OS X, Android, and Windows are supported to varying degrees.\n\n整挺好，专门适配18.04，那就不客气了。上链接<http://wiki.ros.org/melodic/Installation/Ubuntu>\n\n这玩意一上来就坑人，他让我用他的源，结果公钥匹配过不了。还好有经验，点了那个mirror发现有清华源。把整个ubuntu的源换成清华源并按照清华源官方的文档加入`source.list`之后就可以直接`apt install`了。第一次装毫无疑问是无脑`full installation`。\n\n然后按照它说的environment setup把脚本加入`./.bashrc`里（完全不知道这步在干什么呢，晚点回来看一眼）\n\n后面的`Dependencies for building packages`又来坑人了。他给的\n\n```bash\nsudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential\n```\n\n确实是能跑的，但下一步\n\n```bash\nsudo rosdep init\nrosdep update\n```\n\n就出问题了，`sudo rosdep init`会说ubuntu版本不对。查了下发现另一篇文章里是这么写的\n\n```bash\nsudo apt install python3-rosdep\n```\n\n好家伙有python3为啥不用3，然后直接这么输会发现无法安装，因为`python3-rosdep`要依赖`python3-rosinstall`，也就是说我装了python2的都得换成python3，彳亍。我还得把上面的包全给删了，然后重新输\n\n```bash\nsudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool\n```\n\n然后就回到上面`init`那一步了，这步据说会出网络问题，随便贴个网上的解决方案吧：<https://blog.csdn.net/qq_41484927/article/details/107494715>，网上一搜一大把。我选择直接挂梯子（\n\n这里需要注意的一点是`sudo rosdep init`，是要加`sudo`的，而`rosdep update`是万万不能加的，虽然不知道会怎么样，但毕竟官方文档说了这事：\n\n> Do **NOT** run `rosdep update` with sudo. It is not required and will result in permission errors later on.\n\n这玩意前面还有个大感叹号呢，注意点。\n\n先到这里，收拾东西准备回家去了。\n","source":"_posts/Project/ROS学习笔记（0）.md","raw":"author: kawhicurry\ntitle: ROS学习笔记（0）\ntags:\n  - linux\n  - 专栏：ros学习笔记\ndescription: ROS学习笔记（0）\ntop: 0\ncover: 0\ncategories:\n  - Project\ndate: 2022-01-15 14:51:00\nimg:\ncoverImg:\nsummary:\nkeywords:\n---\n\n# 开始\n\n要开始学机器人咯，从ros开始的那种。有人说不要通过ros来学机器人，没有关系撒。先看看机器人咋样再说。\n\n官网：<https://www.ros.org/>\n\n文档：<http://wiki.ros.org/>\n\n教程：<http://wiki.ros.org/ROS/Tutorials>\n\n# 装环境\n\n看官方教程，据李总说有很多坑，不过目前看来感觉还好（虽然确实踩了一脚）。\n\n首先是选发行版吧，ros其实就是一堆工具包，底层还是要依赖别的Operation System的。我选择的方案是先上虚拟机，用apollo那台ubuntu18.04来配。这里李总给的建议是用`ROS Melodic Morenia`，就是melodic这个版本，它确实也说了这句\n\n> ROS Melodic Morenia is primarily targeted at the Ubuntu 18.04 (Bionic) release, though other Linux systems as well as Mac OS X, Android, and Windows are supported to varying degrees.\n\n整挺好，专门适配18.04，那就不客气了。上链接<http://wiki.ros.org/melodic/Installation/Ubuntu>\n\n这玩意一上来就坑人，他让我用他的源，结果公钥匹配过不了。还好有经验，点了那个mirror发现有清华源。把整个ubuntu的源换成清华源并按照清华源官方的文档加入`source.list`之后就可以直接`apt install`了。第一次装毫无疑问是无脑`full installation`。\n\n然后按照它说的environment setup把脚本加入`./.bashrc`里（完全不知道这步在干什么呢，晚点回来看一眼）\n\n后面的`Dependencies for building packages`又来坑人了。他给的\n\n```bash\nsudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential\n```\n\n确实是能跑的，但下一步\n\n```bash\nsudo rosdep init\nrosdep update\n```\n\n就出问题了，`sudo rosdep init`会说ubuntu版本不对。查了下发现另一篇文章里是这么写的\n\n```bash\nsudo apt install python3-rosdep\n```\n\n好家伙有python3为啥不用3，然后直接这么输会发现无法安装，因为`python3-rosdep`要依赖`python3-rosinstall`，也就是说我装了python2的都得换成python3，彳亍。我还得把上面的包全给删了，然后重新输\n\n```bash\nsudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool\n```\n\n然后就回到上面`init`那一步了，这步据说会出网络问题，随便贴个网上的解决方案吧：<https://blog.csdn.net/qq_41484927/article/details/107494715>，网上一搜一大把。我选择直接挂梯子（\n\n这里需要注意的一点是`sudo rosdep init`，是要加`sudo`的，而`rosdep update`是万万不能加的，虽然不知道会怎么样，但毕竟官方文档说了这事：\n\n> Do **NOT** run `rosdep update` with sudo. It is not required and will result in permission errors later on.\n\n这玩意前面还有个大感叹号呢，注意点。\n\n先到这里，收拾东西准备回家去了。\n","slug":"ROS学习笔记（0）","published":1,"category":"Project","updated":"2022-01-17T05:21:22.487Z","_id":"ckyfmoudn00021sul1qms4gl6","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><p>要开始学机器人咯，从ros开始的那种。有人说不要通过ros来学机器人，没有关系撒。先看看机器人咋样再说。</p>\n<p>官网：<a href=\"https://www.ros.org/\">https://www.ros.org/</a></p>\n<p>文档：<a href=\"http://wiki.ros.org/\">http://wiki.ros.org/</a></p>\n<p>教程：<a href=\"http://wiki.ros.org/ROS/Tutorials\">http://wiki.ros.org/ROS/Tutorials</a></p>\n<h1 id=\"装环境\"><a href=\"#装环境\" class=\"headerlink\" title=\"装环境\"></a>装环境</h1><p>看官方教程，据李总说有很多坑，不过目前看来感觉还好（虽然确实踩了一脚）。</p>\n<p>首先是选发行版吧，ros其实就是一堆工具包，底层还是要依赖别的Operation System的。我选择的方案是先上虚拟机，用apollo那台ubuntu18.04来配。这里李总给的建议是用<code>ROS Melodic Morenia</code>，就是melodic这个版本，它确实也说了这句</p>\n<blockquote>\n<p>ROS Melodic Morenia is primarily targeted at the Ubuntu 18.04 (Bionic) release, though other Linux systems as well as Mac OS X, Android, and Windows are supported to varying degrees.</p>\n</blockquote>\n<p>整挺好，专门适配18.04，那就不客气了。上链接<a href=\"http://wiki.ros.org/melodic/Installation/Ubuntu\">http://wiki.ros.org/melodic/Installation/Ubuntu</a></p>\n<p>这玩意一上来就坑人，他让我用他的源，结果公钥匹配过不了。还好有经验，点了那个mirror发现有清华源。把整个ubuntu的源换成清华源并按照清华源官方的文档加入<code>source.list</code>之后就可以直接<code>apt install</code>了。第一次装毫无疑问是无脑<code>full installation</code>。</p>\n<p>然后按照它说的environment setup把脚本加入<code>./.bashrc</code>里（完全不知道这步在干什么呢，晚点回来看一眼）</p>\n<p>后面的<code>Dependencies for building packages</code>又来坑人了。他给的</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>确实是能跑的，但下一步</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> rosdep init\nrosdep update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>就出问题了，<code>sudo rosdep init</code>会说ubuntu版本不对。查了下发现另一篇文章里是这么写的</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> python3-rosdep<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>好家伙有python3为啥不用3，然后直接这么输会发现无法安装，因为<code>python3-rosdep</code>要依赖<code>python3-rosinstall</code>，也就是说我装了python2的都得换成python3，彳亍。我还得把上面的包全给删了，然后重新输</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后就回到上面<code>init</code>那一步了，这步据说会出网络问题，随便贴个网上的解决方案吧：<a href=\"https://blog.csdn.net/qq_41484927/article/details/107494715\">https://blog.csdn.net/qq_41484927/article/details/107494715</a>，网上一搜一大把。我选择直接挂梯子（</p>\n<p>这里需要注意的一点是<code>sudo rosdep init</code>，是要加<code>sudo</code>的，而<code>rosdep update</code>是万万不能加的，虽然不知道会怎么样，但毕竟官方文档说了这事：</p>\n<blockquote>\n<p>Do <strong>NOT</strong> run <code>rosdep update</code> with sudo. It is not required and will result in permission errors later on.</p>\n</blockquote>\n<p>这玩意前面还有个大感叹号呢，注意点。</p>\n<p>先到这里，收拾东西准备回家去了。</p>\n","site":{"data":{"friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","introduction":"来自青柚的运营大佬","url":"https://cfy73.github.io/","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><p>要开始学机器人咯，从ros开始的那种。有人说不要通过ros来学机器人，没有关系撒。先看看机器人咋样再说。</p>\n<p>官网：<a href=\"https://www.ros.org/\">https://www.ros.org/</a></p>\n<p>文档：<a href=\"http://wiki.ros.org/\">http://wiki.ros.org/</a></p>\n<p>教程：<a href=\"http://wiki.ros.org/ROS/Tutorials\">http://wiki.ros.org/ROS/Tutorials</a></p>\n<h1 id=\"装环境\"><a href=\"#装环境\" class=\"headerlink\" title=\"装环境\"></a>装环境</h1><p>看官方教程，据李总说有很多坑，不过目前看来感觉还好（虽然确实踩了一脚）。</p>\n<p>首先是选发行版吧，ros其实就是一堆工具包，底层还是要依赖别的Operation System的。我选择的方案是先上虚拟机，用apollo那台ubuntu18.04来配。这里李总给的建议是用<code>ROS Melodic Morenia</code>，就是melodic这个版本，它确实也说了这句</p>\n<blockquote>\n<p>ROS Melodic Morenia is primarily targeted at the Ubuntu 18.04 (Bionic) release, though other Linux systems as well as Mac OS X, Android, and Windows are supported to varying degrees.</p>\n</blockquote>\n<p>整挺好，专门适配18.04，那就不客气了。上链接<a href=\"http://wiki.ros.org/melodic/Installation/Ubuntu\">http://wiki.ros.org/melodic/Installation/Ubuntu</a></p>\n<p>这玩意一上来就坑人，他让我用他的源，结果公钥匹配过不了。还好有经验，点了那个mirror发现有清华源。把整个ubuntu的源换成清华源并按照清华源官方的文档加入<code>source.list</code>之后就可以直接<code>apt install</code>了。第一次装毫无疑问是无脑<code>full installation</code>。</p>\n<p>然后按照它说的environment setup把脚本加入<code>./.bashrc</code>里（完全不知道这步在干什么呢，晚点回来看一眼）</p>\n<p>后面的<code>Dependencies for building packages</code>又来坑人了。他给的</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>确实是能跑的，但下一步</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> rosdep init\nrosdep update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>就出问题了，<code>sudo rosdep init</code>会说ubuntu版本不对。查了下发现另一篇文章里是这么写的</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> python3-rosdep<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>好家伙有python3为啥不用3，然后直接这么输会发现无法安装，因为<code>python3-rosdep</code>要依赖<code>python3-rosinstall</code>，也就是说我装了python2的都得换成python3，彳亍。我还得把上面的包全给删了，然后重新输</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后就回到上面<code>init</code>那一步了，这步据说会出网络问题，随便贴个网上的解决方案吧：<a href=\"https://blog.csdn.net/qq_41484927/article/details/107494715\">https://blog.csdn.net/qq_41484927/article/details/107494715</a>，网上一搜一大把。我选择直接挂梯子（</p>\n<p>这里需要注意的一点是<code>sudo rosdep init</code>，是要加<code>sudo</code>的，而<code>rosdep update</code>是万万不能加的，虽然不知道会怎么样，但毕竟官方文档说了这事：</p>\n<blockquote>\n<p>Do <strong>NOT</strong> run <code>rosdep update</code> with sudo. It is not required and will result in permission errors later on.</p>\n</blockquote>\n<p>这玩意前面还有个大感叹号呢，注意点。</p>\n<p>先到这里，收拾东西准备回家去了。</p>\n"},{"_content":"# Flowchart\n\n```mermaid\nflowchart BT\nid1([1111])\nid2[2222]\nid3(3333)\nid4((4444))\nid5[[5555]]\nid6>6666]\nid7{7777}\nid8{{8888}}\nid9[/9999/]\nid10[\\10101010\\]\nid11[/11111111\\]\nid12[\\12121212/]\n\n```\n\n```mermaid\nflowchart LR\nA-->B---C--A text oftest---D---|text too|E-->|text|F--text-->G-.->H-.text.->I==>J==text==>K\n```\n\n```mermaid\nflowchart LR\na-->b & c-->d\nA & B-->C & D\nE o--o F <--> G x--x H\n```\n\n```mermaid\nflowchart TD\nA[start]-->B{is it?};\nB-->|YES| C[Ok];\nC-->D[Rethink];\nD-->B;\nB---->|NO| E[End];\n```\n\n```mermaid\nflowchart LR\nA[\"A double quote:#quot;\"]-->B[\"A dec char :#9829;\"]\n```\n\n```mermaid\nflowchart TB\nc1-->a2\nsubgraph one\na1-->a2\nend\nsubgraph two\nb1-->b2\nend\nsubgraph three\nc1-->c2\nend\none-->two\n```\n\n```mermaid\nflowchart LR;\n    A-->B;\n    B-->C;\n    C-->D;\nstyle A fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n# Sequence Diagram\n\n```mermaid\nsequenceDiagram\nparticipant Alice\nparticipant Bob\nAlice->>Bob: Hi Bob\nBob->>Alice: Hi Alice\n```\n\n```mermaid\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n    \n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!\n```\n\n\n\n","source":"_drafts/LearnMermaid.md","raw":"# Flowchart\n\n```mermaid\nflowchart BT\nid1([1111])\nid2[2222]\nid3(3333)\nid4((4444))\nid5[[5555]]\nid6>6666]\nid7{7777}\nid8{{8888}}\nid9[/9999/]\nid10[\\10101010\\]\nid11[/11111111\\]\nid12[\\12121212/]\n\n```\n\n```mermaid\nflowchart LR\nA-->B---C--A text oftest---D---|text too|E-->|text|F--text-->G-.->H-.text.->I==>J==text==>K\n```\n\n```mermaid\nflowchart LR\na-->b & c-->d\nA & B-->C & D\nE o--o F <--> G x--x H\n```\n\n```mermaid\nflowchart TD\nA[start]-->B{is it?};\nB-->|YES| C[Ok];\nC-->D[Rethink];\nD-->B;\nB---->|NO| E[End];\n```\n\n```mermaid\nflowchart LR\nA[\"A double quote:#quot;\"]-->B[\"A dec char :#9829;\"]\n```\n\n```mermaid\nflowchart TB\nc1-->a2\nsubgraph one\na1-->a2\nend\nsubgraph two\nb1-->b2\nend\nsubgraph three\nc1-->c2\nend\none-->two\n```\n\n```mermaid\nflowchart LR;\n    A-->B;\n    B-->C;\n    C-->D;\nstyle A fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n# Sequence Diagram\n\n```mermaid\nsequenceDiagram\nparticipant Alice\nparticipant Bob\nAlice->>Bob: Hi Bob\nBob->>Alice: Hi Alice\n```\n\n```mermaid\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n    \n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!\n```\n\n\n\n","slug":"LearnMermaid","published":0,"date":"2021-11-28T10:01:56.665Z","updated":"2022-01-18T02:12:31.445Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyjq4ums0000esulhf1d88ta","content":"<h1 id=\"Flowchart\"><a href=\"#Flowchart\" class=\"headerlink\" title=\"Flowchart\"></a>Flowchart</h1><pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">flowchart</span> BT\nid1<span class=\"token text string\">([1111])</span>\nid2<span class=\"token text string\">[2222]</span>\nid3<span class=\"token text string\">(3333)</span>\nid4<span class=\"token text string\">((4444))</span>\nid5<span class=\"token text string\">[[5555]]</span>\nid6<span class=\"token text string\">>6666]</span>\nid7<span class=\"token text string\">&#123;7777&#125;</span>\nid8<span class=\"token text string\">&#123;&#123;8888&#125;&#125;</span>\nid9<span class=\"token text string\">[/9999/]</span>\nid10<span class=\"token text string\">[\\10101010\\]</span>\nid11<span class=\"token text string\">[/11111111\\]</span>\nid12<span class=\"token text string\">[\\12121212/]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">flowchart</span> LR\nA<span class=\"token arrow operator\">--></span>B<span class=\"token arrow operator\">---</span>C<span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span><span class=\"token label property\">A text oftest</span><span class=\"token arrow operator\">---</span></span>D<span class=\"token arrow operator\">---</span><span class=\"token label property\">|text too|</span>E<span class=\"token arrow operator\">--></span><span class=\"token label property\">|text|</span>F<span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span><span class=\"token label property\">text</span><span class=\"token arrow operator\">--></span></span>G<span class=\"token arrow operator\">-.-></span>H<span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">-.</span><span class=\"token label property\">text</span><span class=\"token arrow operator\">.-></span></span>I<span class=\"token arrow operator\">==></span>J<span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">==</span><span class=\"token label property\">text</span><span class=\"token arrow operator\">==></span></span>K<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">flowchart</span> LR\na<span class=\"token arrow operator\">--></span>b <span class=\"token operator\">&amp;</span> c<span class=\"token arrow operator\">--></span>d\nA <span class=\"token operator\">&amp;</span> B<span class=\"token arrow operator\">--></span>C <span class=\"token operator\">&amp;</span> D\nE <span class=\"token arrow operator\">o--o</span> F <span class=\"token arrow operator\">&lt;--></span> G <span class=\"token arrow operator\">x--x</span> H<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">flowchart</span> TD\nA<span class=\"token text string\">[start]</span><span class=\"token arrow operator\">--></span>B<span class=\"token text string\">&#123;is it?&#125;</span><span class=\"token punctuation\">;</span>\nB<span class=\"token arrow operator\">--></span><span class=\"token label property\">|YES|</span> C<span class=\"token text string\">[Ok]</span><span class=\"token punctuation\">;</span>\nC<span class=\"token arrow operator\">--></span>D<span class=\"token text string\">[Rethink]</span><span class=\"token punctuation\">;</span>\nD<span class=\"token arrow operator\">--></span>B<span class=\"token punctuation\">;</span>\nB<span class=\"token arrow operator\">----></span><span class=\"token label property\">|NO|</span> E<span class=\"token text string\">[End]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">flowchart</span> LR\nA<span class=\"token text string\">[\"A double quote:#quot;\"]</span><span class=\"token arrow operator\">--></span>B<span class=\"token text string\">[\"A dec char :#9829;\"]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">flowchart</span> TB\nc1<span class=\"token arrow operator\">--></span>a2\n<span class=\"token keyword\">subgraph</span> one\na1<span class=\"token arrow operator\">--></span>a2\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">subgraph</span> two\nb1<span class=\"token arrow operator\">--></span>b2\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">subgraph</span> three\nc1<span class=\"token arrow operator\">--></span>c2\n<span class=\"token keyword\">end</span>\none<span class=\"token arrow operator\">--></span>two<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">flowchart</span> LR<span class=\"token punctuation\">;</span>\n    A<span class=\"token arrow operator\">--></span>B<span class=\"token punctuation\">;</span>\n    B<span class=\"token arrow operator\">--></span>C<span class=\"token punctuation\">;</span>\n    C<span class=\"token arrow operator\">--></span>D<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">style</span> A <span class=\"token style\"><span class=\"token property\">fill</span><span class=\"token operator\">:</span>#f9f<span class=\"token punctuation\">,</span><span class=\"token property\">stroke</span><span class=\"token operator\">:</span>#333<span class=\"token punctuation\">,</span><span class=\"token property\">stroke-width</span><span class=\"token operator\">:</span>4px</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Sequence-Diagram\"><a href=\"#Sequence-Diagram\" class=\"headerlink\" title=\"Sequence Diagram\"></a>Sequence Diagram</h1><pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">sequenceDiagram</span>\n<span class=\"token keyword\">participant</span> Alice\n<span class=\"token keyword\">participant</span> Bob\nAlice<span class=\"token arrow operator\">->></span>Bob<span class=\"token operator\">:</span> Hi Bob\nBob<span class=\"token arrow operator\">->></span>Alice<span class=\"token operator\">:</span> Hi Alice<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">sequenceDiagram</span>\n    Alice<span class=\"token arrow operator\">->></span>John<span class=\"token operator\">:</span> Hello John, how are you?\n    <span class=\"token keyword\">activate</span> John\n    John<span class=\"token arrow operator\">-->></span>Alice<span class=\"token operator\">:</span> Great!\n    <span class=\"token keyword\">deactivate</span> John\n    \n    Alice<span class=\"token arrow operator\">->></span>+John<span class=\"token operator\">:</span> Hello John, how are you?\n    John<span class=\"token arrow operator\">-->></span>-Alice<span class=\"token operator\">:</span> Great!<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n","site":{"data":{"friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","introduction":"来自青柚的运营大佬","url":"https://cfy73.github.io/","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<h1 id=\"Flowchart\"><a href=\"#Flowchart\" class=\"headerlink\" title=\"Flowchart\"></a>Flowchart</h1><pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">flowchart</span> BT\nid1<span class=\"token text string\">([1111])</span>\nid2<span class=\"token text string\">[2222]</span>\nid3<span class=\"token text string\">(3333)</span>\nid4<span class=\"token text string\">((4444))</span>\nid5<span class=\"token text string\">[[5555]]</span>\nid6<span class=\"token text string\">>6666]</span>\nid7<span class=\"token text string\">&#123;7777&#125;</span>\nid8<span class=\"token text string\">&#123;&#123;8888&#125;&#125;</span>\nid9<span class=\"token text string\">[/9999/]</span>\nid10<span class=\"token text string\">[\\10101010\\]</span>\nid11<span class=\"token text string\">[/11111111\\]</span>\nid12<span class=\"token text string\">[\\12121212/]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">flowchart</span> LR\nA<span class=\"token arrow operator\">--></span>B<span class=\"token arrow operator\">---</span>C<span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span><span class=\"token label property\">A text oftest</span><span class=\"token arrow operator\">---</span></span>D<span class=\"token arrow operator\">---</span><span class=\"token label property\">|text too|</span>E<span class=\"token arrow operator\">--></span><span class=\"token label property\">|text|</span>F<span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span><span class=\"token label property\">text</span><span class=\"token arrow operator\">--></span></span>G<span class=\"token arrow operator\">-.-></span>H<span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">-.</span><span class=\"token label property\">text</span><span class=\"token arrow operator\">.-></span></span>I<span class=\"token arrow operator\">==></span>J<span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">==</span><span class=\"token label property\">text</span><span class=\"token arrow operator\">==></span></span>K<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">flowchart</span> LR\na<span class=\"token arrow operator\">--></span>b <span class=\"token operator\">&amp;</span> c<span class=\"token arrow operator\">--></span>d\nA <span class=\"token operator\">&amp;</span> B<span class=\"token arrow operator\">--></span>C <span class=\"token operator\">&amp;</span> D\nE <span class=\"token arrow operator\">o--o</span> F <span class=\"token arrow operator\">&lt;--></span> G <span class=\"token arrow operator\">x--x</span> H<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">flowchart</span> TD\nA<span class=\"token text string\">[start]</span><span class=\"token arrow operator\">--></span>B<span class=\"token text string\">&#123;is it?&#125;</span><span class=\"token punctuation\">;</span>\nB<span class=\"token arrow operator\">--></span><span class=\"token label property\">|YES|</span> C<span class=\"token text string\">[Ok]</span><span class=\"token punctuation\">;</span>\nC<span class=\"token arrow operator\">--></span>D<span class=\"token text string\">[Rethink]</span><span class=\"token punctuation\">;</span>\nD<span class=\"token arrow operator\">--></span>B<span class=\"token punctuation\">;</span>\nB<span class=\"token arrow operator\">----></span><span class=\"token label property\">|NO|</span> E<span class=\"token text string\">[End]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">flowchart</span> LR\nA<span class=\"token text string\">[\"A double quote:#quot;\"]</span><span class=\"token arrow operator\">--></span>B<span class=\"token text string\">[\"A dec char :#9829;\"]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">flowchart</span> TB\nc1<span class=\"token arrow operator\">--></span>a2\n<span class=\"token keyword\">subgraph</span> one\na1<span class=\"token arrow operator\">--></span>a2\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">subgraph</span> two\nb1<span class=\"token arrow operator\">--></span>b2\n<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">subgraph</span> three\nc1<span class=\"token arrow operator\">--></span>c2\n<span class=\"token keyword\">end</span>\none<span class=\"token arrow operator\">--></span>two<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">flowchart</span> LR<span class=\"token punctuation\">;</span>\n    A<span class=\"token arrow operator\">--></span>B<span class=\"token punctuation\">;</span>\n    B<span class=\"token arrow operator\">--></span>C<span class=\"token punctuation\">;</span>\n    C<span class=\"token arrow operator\">--></span>D<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">style</span> A <span class=\"token style\"><span class=\"token property\">fill</span><span class=\"token operator\">:</span>#f9f<span class=\"token punctuation\">,</span><span class=\"token property\">stroke</span><span class=\"token operator\">:</span>#333<span class=\"token punctuation\">,</span><span class=\"token property\">stroke-width</span><span class=\"token operator\">:</span>4px</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Sequence-Diagram\"><a href=\"#Sequence-Diagram\" class=\"headerlink\" title=\"Sequence Diagram\"></a>Sequence Diagram</h1><pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">sequenceDiagram</span>\n<span class=\"token keyword\">participant</span> Alice\n<span class=\"token keyword\">participant</span> Bob\nAlice<span class=\"token arrow operator\">->></span>Bob<span class=\"token operator\">:</span> Hi Bob\nBob<span class=\"token arrow operator\">->></span>Alice<span class=\"token operator\">:</span> Hi Alice<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">sequenceDiagram</span>\n    Alice<span class=\"token arrow operator\">->></span>John<span class=\"token operator\">:</span> Hello John, how are you?\n    <span class=\"token keyword\">activate</span> John\n    John<span class=\"token arrow operator\">-->></span>Alice<span class=\"token operator\">:</span> Great!\n    <span class=\"token keyword\">deactivate</span> John\n    \n    Alice<span class=\"token arrow operator\">->></span>+John<span class=\"token operator\">:</span> Hello John, how are you?\n    John<span class=\"token arrow operator\">-->></span>-Alice<span class=\"token operator\">:</span> Great!<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n"},{"author":"kawhicurry","title":"重学linux（1）","description":"重学linux（1）","top":0,"cover":0,"date":"2022-01-18T02:58:15.000Z","img":null,"coverImg":null,"summary":null,"keywords":null,"_content":"\n# 文件权限与目录配置\n\n## 文件权限\n\n| 权限        | 链接数 | 拥有者 | 用户组 | 大小 | 修改日期     | 文件名 |\n| ----------- | ------ | ------ | ------ | ---- | ------------ | ------ |\n| dr-xrw-r--- | 5      | root   | root   | 1864 | May 19 12:01 | 1.cfg  |\n\n### 权限的第一个字符\n\n| 字符 | 类型                           |\n| ---- | ------------------------------ |\n| d    | 目录                           |\n| -    | 文件                           |\n| l    | 链接                           |\n| b    | 块设备（可随机读写的存储设备） |\n| c    | 串口设备（一次性读取的设备）   |\n| p    | 管道（pipe）                   |\n| s    | socket                         |\n\n### 三组权限\n\n- 拥有者\n- 用户组\n- 其他人\n\n### 时间\n\n太久远会被折叠，使用`ls -l --full-time`查看具体时间\n\n### 其他\n\n文件名长度：255个字符，128个汉字\n\n文件名限制：少用特殊符号，如果有特殊符号，使用单引号\n\n## 修改权限\n\n### chgrp\n\n```bash\nchgrp [-R] dirname/filename ...\n```\n\n### chown\n\n```bash\nchown [-R] username:groupname dirname/filename ...\n```\n\n### chmod\n\n```bash\n# x,y,z = 4/2/1\nchmod [-R] xyz dirname/filename ...\n# id = u g o a; ac = r w x\nchmod [-R] u+r dirname/filename ...\n```\n\n## 目录配置\n\n标准：FHS\n\n### FHS要求存在的目录\n\n| 目录   | 内容                                                 |\n| ------ | ---------------------------------------------------- |\n| /bin   | 单人维护下仍然可以正常使用的可执行文件               |\n| /boot  | 启动所需，包括内核文件，启动选项，grub2              |\n| /dev   | 块设备，包括硬盘、外设，以及特有的/dev/null /dev/tty |\n| /etc   | 系统的主要配置文件，**建议不要放可执行文件进来**     |\n| /lib   | 函数库，/lib/modules中有主要的内核中驱动程序         |\n| /media | 可删除的设备，软盘光盘                               |\n| /mnt   | 用于临时挂载                                         |\n| /opt   | 第三方独立软件，如kde                                |\n| /run   | 系统启动后所生成的各项信息，该目录又内存来模拟       |\n| /sbin  | 启动过程中，启动、修复、还原系统的命令               |\n| /srv   | 网络服务的数据目录                                   |\n| /tmp   | 正在执行的程序暂时存放文件的位置，建议定期清理       |\n| /usr   | 稍后介绍                                             |\n| /var   | 稍后介绍                                             |\n\n### FHS建议存在的目录\n\n| 目录       | 内容                                         |\n| ---------- | -------------------------------------------- |\n| /home      | 家目录，使用~来表示自己，~123表示123的家目录 |\n| /lib<qual> | 存放与/lib不同格式的函数库                   |\n| /root      | root的家目录                                 |\n\n### FHS未要求但也很重要的目录\n\n| 目录        | 内容                                                         |\n| ----------- | ------------------------------------------------------------ |\n| /lost+found | 文件系统发生错误时，用于找回的目录                           |\n| /proc       | 虚拟的文件系统，存放在内存中，包括系统内核，进程信息，外设和网络的状态 |\n| /sys        | 虚拟文件系统，记录内核和系统硬件的信息，包括已加载的内核模块和检测到的硬件的信息 |\n\n### /usr目录\n\nusr的全称不是user，而是`UNIX Software Resource`\n\n#### FHS要求必须存在的目录\n\n| 目录       | 内容                                                         |\n| ---------- | ------------------------------------------------------------ |\n| /usr/bin   | 一般用户能使用的命令，/bin目录也被链接至此，FHS建议此目录下不要有子目录（为了加快查找速度？） |\n| /usr/lib   | 同上，/lib也被链接至此                                       |\n| /usr/local | 自己下载的软件安装至此                                       |\n| /usr/sbin  | 非系统正常运行所需的系统命令，常见的是网络服务器中的daemo，/sbin被链接至此 |\n| /usr/share | 存放只读的数据文件，尤其是共享文件，如man，doc，zoneinfo（时区文件） |\n\n#### FHS建议存在的目录\n\n| 目录           | 内容                                                     |\n| -------------- | -------------------------------------------------------- |\n| /usr/games     | 游戏（woc？？？                                          |\n| /usr/include   | c和c++的头文件与包含文件，用于tarball                    |\n| /usr/libexec   | 某些不被一般用户常用的执行文件或脚本，如x window下的指令 |\n| /usr/lib<qual> | 同前                                                     |\n| /usr/src       | 存放源码，比如内核源码                                   |\n\n### /var目录\n\n /var存放流动的文件，如缓存、日志、以及某些软件运行产生的文件\n\n#### FHS要求必须存在的目录\n\n| 目录       | 内容                                  |\n| ---------- | ------------------------------------- |\n| /var/cache | 程序运行过程中的缓存                  |\n| /var/lib   | 程序运行中，用到的链接库              |\n| /var/lock  | 锁的存放位置                          |\n| /var/log   | 日志                                  |\n| /var/mail  | 邮件目录，也会存放到/var/spool/mail中 |\n| /var/run   | 程序启动后PID的存放位置               |\n| /var/spool | 队列数据                              |\n\n这里鸟哥推荐再去看看FHS的官方文档，有空去研读一下。\n\n## 相对路径与绝对路径\n\n略\n\n## linux的标准\n\nFHS之外，还有LSB（Linux Standard Base）。\n\n需要使用包管理工具安装lsb后，使用`lsb_release -a`来查看系统信息\n","source":"_posts/Operation/重学linux（1）.md","raw":"---\nauthor: kawhicurry\ntitle: 重学linux（1）\ntags:\n  - 专栏：重学linux\n  - linux\ndescription: 重学linux（1）\ntop: 0\ncover: 0\ncategories:\n  - Operation\ndate: 2022-01-18 10:58:15\nimg:\ncoverImg:\nsummary:\nkeywords:\n---\n\n# 文件权限与目录配置\n\n## 文件权限\n\n| 权限        | 链接数 | 拥有者 | 用户组 | 大小 | 修改日期     | 文件名 |\n| ----------- | ------ | ------ | ------ | ---- | ------------ | ------ |\n| dr-xrw-r--- | 5      | root   | root   | 1864 | May 19 12:01 | 1.cfg  |\n\n### 权限的第一个字符\n\n| 字符 | 类型                           |\n| ---- | ------------------------------ |\n| d    | 目录                           |\n| -    | 文件                           |\n| l    | 链接                           |\n| b    | 块设备（可随机读写的存储设备） |\n| c    | 串口设备（一次性读取的设备）   |\n| p    | 管道（pipe）                   |\n| s    | socket                         |\n\n### 三组权限\n\n- 拥有者\n- 用户组\n- 其他人\n\n### 时间\n\n太久远会被折叠，使用`ls -l --full-time`查看具体时间\n\n### 其他\n\n文件名长度：255个字符，128个汉字\n\n文件名限制：少用特殊符号，如果有特殊符号，使用单引号\n\n## 修改权限\n\n### chgrp\n\n```bash\nchgrp [-R] dirname/filename ...\n```\n\n### chown\n\n```bash\nchown [-R] username:groupname dirname/filename ...\n```\n\n### chmod\n\n```bash\n# x,y,z = 4/2/1\nchmod [-R] xyz dirname/filename ...\n# id = u g o a; ac = r w x\nchmod [-R] u+r dirname/filename ...\n```\n\n## 目录配置\n\n标准：FHS\n\n### FHS要求存在的目录\n\n| 目录   | 内容                                                 |\n| ------ | ---------------------------------------------------- |\n| /bin   | 单人维护下仍然可以正常使用的可执行文件               |\n| /boot  | 启动所需，包括内核文件，启动选项，grub2              |\n| /dev   | 块设备，包括硬盘、外设，以及特有的/dev/null /dev/tty |\n| /etc   | 系统的主要配置文件，**建议不要放可执行文件进来**     |\n| /lib   | 函数库，/lib/modules中有主要的内核中驱动程序         |\n| /media | 可删除的设备，软盘光盘                               |\n| /mnt   | 用于临时挂载                                         |\n| /opt   | 第三方独立软件，如kde                                |\n| /run   | 系统启动后所生成的各项信息，该目录又内存来模拟       |\n| /sbin  | 启动过程中，启动、修复、还原系统的命令               |\n| /srv   | 网络服务的数据目录                                   |\n| /tmp   | 正在执行的程序暂时存放文件的位置，建议定期清理       |\n| /usr   | 稍后介绍                                             |\n| /var   | 稍后介绍                                             |\n\n### FHS建议存在的目录\n\n| 目录       | 内容                                         |\n| ---------- | -------------------------------------------- |\n| /home      | 家目录，使用~来表示自己，~123表示123的家目录 |\n| /lib<qual> | 存放与/lib不同格式的函数库                   |\n| /root      | root的家目录                                 |\n\n### FHS未要求但也很重要的目录\n\n| 目录        | 内容                                                         |\n| ----------- | ------------------------------------------------------------ |\n| /lost+found | 文件系统发生错误时，用于找回的目录                           |\n| /proc       | 虚拟的文件系统，存放在内存中，包括系统内核，进程信息，外设和网络的状态 |\n| /sys        | 虚拟文件系统，记录内核和系统硬件的信息，包括已加载的内核模块和检测到的硬件的信息 |\n\n### /usr目录\n\nusr的全称不是user，而是`UNIX Software Resource`\n\n#### FHS要求必须存在的目录\n\n| 目录       | 内容                                                         |\n| ---------- | ------------------------------------------------------------ |\n| /usr/bin   | 一般用户能使用的命令，/bin目录也被链接至此，FHS建议此目录下不要有子目录（为了加快查找速度？） |\n| /usr/lib   | 同上，/lib也被链接至此                                       |\n| /usr/local | 自己下载的软件安装至此                                       |\n| /usr/sbin  | 非系统正常运行所需的系统命令，常见的是网络服务器中的daemo，/sbin被链接至此 |\n| /usr/share | 存放只读的数据文件，尤其是共享文件，如man，doc，zoneinfo（时区文件） |\n\n#### FHS建议存在的目录\n\n| 目录           | 内容                                                     |\n| -------------- | -------------------------------------------------------- |\n| /usr/games     | 游戏（woc？？？                                          |\n| /usr/include   | c和c++的头文件与包含文件，用于tarball                    |\n| /usr/libexec   | 某些不被一般用户常用的执行文件或脚本，如x window下的指令 |\n| /usr/lib<qual> | 同前                                                     |\n| /usr/src       | 存放源码，比如内核源码                                   |\n\n### /var目录\n\n /var存放流动的文件，如缓存、日志、以及某些软件运行产生的文件\n\n#### FHS要求必须存在的目录\n\n| 目录       | 内容                                  |\n| ---------- | ------------------------------------- |\n| /var/cache | 程序运行过程中的缓存                  |\n| /var/lib   | 程序运行中，用到的链接库              |\n| /var/lock  | 锁的存放位置                          |\n| /var/log   | 日志                                  |\n| /var/mail  | 邮件目录，也会存放到/var/spool/mail中 |\n| /var/run   | 程序启动后PID的存放位置               |\n| /var/spool | 队列数据                              |\n\n这里鸟哥推荐再去看看FHS的官方文档，有空去研读一下。\n\n## 相对路径与绝对路径\n\n略\n\n## linux的标准\n\nFHS之外，还有LSB（Linux Standard Base）。\n\n需要使用包管理工具安装lsb后，使用`lsb_release -a`来查看系统信息\n","slug":"重学linux（1）","published":1,"category":"Operation","updated":"2022-01-18T06:17:15.457Z","_id":"ckyjq4unj0001esul0hrp3m3c","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"文件权限与目录配置\"><a href=\"#文件权限与目录配置\" class=\"headerlink\" title=\"文件权限与目录配置\"></a>文件权限与目录配置</h1><h2 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h2><table>\n<thead>\n<tr>\n<th>权限</th>\n<th>链接数</th>\n<th>拥有者</th>\n<th>用户组</th>\n<th>大小</th>\n<th>修改日期</th>\n<th>文件名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dr-xrw-r—</td>\n<td>5</td>\n<td>root</td>\n<td>root</td>\n<td>1864</td>\n<td>May 19 12:01</td>\n<td>1.cfg</td>\n</tr>\n</tbody></table>\n<h3 id=\"权限的第一个字符\"><a href=\"#权限的第一个字符\" class=\"headerlink\" title=\"权限的第一个字符\"></a>权限的第一个字符</h3><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>d</td>\n<td>目录</td>\n</tr>\n<tr>\n<td>-</td>\n<td>文件</td>\n</tr>\n<tr>\n<td>l</td>\n<td>链接</td>\n</tr>\n<tr>\n<td>b</td>\n<td>块设备（可随机读写的存储设备）</td>\n</tr>\n<tr>\n<td>c</td>\n<td>串口设备（一次性读取的设备）</td>\n</tr>\n<tr>\n<td>p</td>\n<td>管道（pipe）</td>\n</tr>\n<tr>\n<td>s</td>\n<td>socket</td>\n</tr>\n</tbody></table>\n<h3 id=\"三组权限\"><a href=\"#三组权限\" class=\"headerlink\" title=\"三组权限\"></a>三组权限</h3><ul>\n<li>拥有者</li>\n<li>用户组</li>\n<li>其他人</li>\n</ul>\n<h3 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h3><p>太久远会被折叠，使用<code>ls -l --full-time</code>查看具体时间</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>文件名长度：255个字符，128个汉字</p>\n<p>文件名限制：少用特殊符号，如果有特殊符号，使用单引号</p>\n<h2 id=\"修改权限\"><a href=\"#修改权限\" class=\"headerlink\" title=\"修改权限\"></a>修改权限</h2><h3 id=\"chgrp\"><a href=\"#chgrp\" class=\"headerlink\" title=\"chgrp\"></a>chgrp</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chgrp</span> <span class=\"token punctuation\">[</span>-R<span class=\"token punctuation\">]</span> dirname/filename <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chown</span> <span class=\"token punctuation\">[</span>-R<span class=\"token punctuation\">]</span> username:groupname dirname/filename <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"chmod\"><a href=\"#chmod\" class=\"headerlink\" title=\"chmod\"></a>chmod</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># x,y,z = 4/2/1</span>\n<span class=\"token function\">chmod</span> <span class=\"token punctuation\">[</span>-R<span class=\"token punctuation\">]</span> xyz dirname/filename <span class=\"token punctuation\">..</span>.\n<span class=\"token comment\"># id = u g o a; ac = r w x</span>\n<span class=\"token function\">chmod</span> <span class=\"token punctuation\">[</span>-R<span class=\"token punctuation\">]</span> u+r dirname/filename <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"目录配置\"><a href=\"#目录配置\" class=\"headerlink\" title=\"目录配置\"></a>目录配置</h2><p>标准：FHS</p>\n<h3 id=\"FHS要求存在的目录\"><a href=\"#FHS要求存在的目录\" class=\"headerlink\" title=\"FHS要求存在的目录\"></a>FHS要求存在的目录</h3><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/bin</td>\n<td>单人维护下仍然可以正常使用的可执行文件</td>\n</tr>\n<tr>\n<td>/boot</td>\n<td>启动所需，包括内核文件，启动选项，grub2</td>\n</tr>\n<tr>\n<td>/dev</td>\n<td>块设备，包括硬盘、外设，以及特有的/dev/null /dev/tty</td>\n</tr>\n<tr>\n<td>/etc</td>\n<td>系统的主要配置文件，<strong>建议不要放可执行文件进来</strong></td>\n</tr>\n<tr>\n<td>/lib</td>\n<td>函数库，/lib/modules中有主要的内核中驱动程序</td>\n</tr>\n<tr>\n<td>/media</td>\n<td>可删除的设备，软盘光盘</td>\n</tr>\n<tr>\n<td>/mnt</td>\n<td>用于临时挂载</td>\n</tr>\n<tr>\n<td>/opt</td>\n<td>第三方独立软件，如kde</td>\n</tr>\n<tr>\n<td>/run</td>\n<td>系统启动后所生成的各项信息，该目录又内存来模拟</td>\n</tr>\n<tr>\n<td>/sbin</td>\n<td>启动过程中，启动、修复、还原系统的命令</td>\n</tr>\n<tr>\n<td>/srv</td>\n<td>网络服务的数据目录</td>\n</tr>\n<tr>\n<td>/tmp</td>\n<td>正在执行的程序暂时存放文件的位置，建议定期清理</td>\n</tr>\n<tr>\n<td>/usr</td>\n<td>稍后介绍</td>\n</tr>\n<tr>\n<td>/var</td>\n<td>稍后介绍</td>\n</tr>\n</tbody></table>\n<h3 id=\"FHS建议存在的目录\"><a href=\"#FHS建议存在的目录\" class=\"headerlink\" title=\"FHS建议存在的目录\"></a>FHS建议存在的目录</h3><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/home</td>\n<td>家目录，使用<del>来表示自己，</del>123表示123的家目录</td>\n</tr>\n<tr>\n<td>/lib<qual></td>\n<td>存放与/lib不同格式的函数库</td>\n</tr>\n<tr>\n<td>/root</td>\n<td>root的家目录</td>\n</tr>\n</tbody></table>\n<h3 id=\"FHS未要求但也很重要的目录\"><a href=\"#FHS未要求但也很重要的目录\" class=\"headerlink\" title=\"FHS未要求但也很重要的目录\"></a>FHS未要求但也很重要的目录</h3><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/lost+found</td>\n<td>文件系统发生错误时，用于找回的目录</td>\n</tr>\n<tr>\n<td>/proc</td>\n<td>虚拟的文件系统，存放在内存中，包括系统内核，进程信息，外设和网络的状态</td>\n</tr>\n<tr>\n<td>/sys</td>\n<td>虚拟文件系统，记录内核和系统硬件的信息，包括已加载的内核模块和检测到的硬件的信息</td>\n</tr>\n</tbody></table>\n<h3 id=\"usr目录\"><a href=\"#usr目录\" class=\"headerlink\" title=\"/usr目录\"></a>/usr目录</h3><p>usr的全称不是user，而是<code>UNIX Software Resource</code></p>\n<h4 id=\"FHS要求必须存在的目录\"><a href=\"#FHS要求必须存在的目录\" class=\"headerlink\" title=\"FHS要求必须存在的目录\"></a>FHS要求必须存在的目录</h4><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/usr/bin</td>\n<td>一般用户能使用的命令，/bin目录也被链接至此，FHS建议此目录下不要有子目录（为了加快查找速度？）</td>\n</tr>\n<tr>\n<td>/usr/lib</td>\n<td>同上，/lib也被链接至此</td>\n</tr>\n<tr>\n<td>/usr/local</td>\n<td>自己下载的软件安装至此</td>\n</tr>\n<tr>\n<td>/usr/sbin</td>\n<td>非系统正常运行所需的系统命令，常见的是网络服务器中的daemo，/sbin被链接至此</td>\n</tr>\n<tr>\n<td>/usr/share</td>\n<td>存放只读的数据文件，尤其是共享文件，如man，doc，zoneinfo（时区文件）</td>\n</tr>\n</tbody></table>\n<h4 id=\"FHS建议存在的目录-1\"><a href=\"#FHS建议存在的目录-1\" class=\"headerlink\" title=\"FHS建议存在的目录\"></a>FHS建议存在的目录</h4><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/usr/games</td>\n<td>游戏（woc？？？</td>\n</tr>\n<tr>\n<td>/usr/include</td>\n<td>c和c++的头文件与包含文件，用于tarball</td>\n</tr>\n<tr>\n<td>/usr/libexec</td>\n<td>某些不被一般用户常用的执行文件或脚本，如x window下的指令</td>\n</tr>\n<tr>\n<td>/usr/lib<qual></td>\n<td>同前</td>\n</tr>\n<tr>\n<td>/usr/src</td>\n<td>存放源码，比如内核源码</td>\n</tr>\n</tbody></table>\n<h3 id=\"var目录\"><a href=\"#var目录\" class=\"headerlink\" title=\"/var目录\"></a>/var目录</h3><p> /var存放流动的文件，如缓存、日志、以及某些软件运行产生的文件</p>\n<h4 id=\"FHS要求必须存在的目录-1\"><a href=\"#FHS要求必须存在的目录-1\" class=\"headerlink\" title=\"FHS要求必须存在的目录\"></a>FHS要求必须存在的目录</h4><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/var/cache</td>\n<td>程序运行过程中的缓存</td>\n</tr>\n<tr>\n<td>/var/lib</td>\n<td>程序运行中，用到的链接库</td>\n</tr>\n<tr>\n<td>/var/lock</td>\n<td>锁的存放位置</td>\n</tr>\n<tr>\n<td>/var/log</td>\n<td>日志</td>\n</tr>\n<tr>\n<td>/var/mail</td>\n<td>邮件目录，也会存放到/var/spool/mail中</td>\n</tr>\n<tr>\n<td>/var/run</td>\n<td>程序启动后PID的存放位置</td>\n</tr>\n<tr>\n<td>/var/spool</td>\n<td>队列数据</td>\n</tr>\n</tbody></table>\n<p>这里鸟哥推荐再去看看FHS的官方文档，有空去研读一下。</p>\n<h2 id=\"相对路径与绝对路径\"><a href=\"#相对路径与绝对路径\" class=\"headerlink\" title=\"相对路径与绝对路径\"></a>相对路径与绝对路径</h2><p>略</p>\n<h2 id=\"linux的标准\"><a href=\"#linux的标准\" class=\"headerlink\" title=\"linux的标准\"></a>linux的标准</h2><p>FHS之外，还有LSB（Linux Standard Base）。</p>\n<p>需要使用包管理工具安装lsb后，使用<code>lsb_release -a</code>来查看系统信息</p>\n","site":{"data":{"friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","introduction":"来自青柚的运营大佬","url":"https://cfy73.github.io/","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<h1 id=\"文件权限与目录配置\"><a href=\"#文件权限与目录配置\" class=\"headerlink\" title=\"文件权限与目录配置\"></a>文件权限与目录配置</h1><h2 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h2><table>\n<thead>\n<tr>\n<th>权限</th>\n<th>链接数</th>\n<th>拥有者</th>\n<th>用户组</th>\n<th>大小</th>\n<th>修改日期</th>\n<th>文件名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dr-xrw-r—</td>\n<td>5</td>\n<td>root</td>\n<td>root</td>\n<td>1864</td>\n<td>May 19 12:01</td>\n<td>1.cfg</td>\n</tr>\n</tbody></table>\n<h3 id=\"权限的第一个字符\"><a href=\"#权限的第一个字符\" class=\"headerlink\" title=\"权限的第一个字符\"></a>权限的第一个字符</h3><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>d</td>\n<td>目录</td>\n</tr>\n<tr>\n<td>-</td>\n<td>文件</td>\n</tr>\n<tr>\n<td>l</td>\n<td>链接</td>\n</tr>\n<tr>\n<td>b</td>\n<td>块设备（可随机读写的存储设备）</td>\n</tr>\n<tr>\n<td>c</td>\n<td>串口设备（一次性读取的设备）</td>\n</tr>\n<tr>\n<td>p</td>\n<td>管道（pipe）</td>\n</tr>\n<tr>\n<td>s</td>\n<td>socket</td>\n</tr>\n</tbody></table>\n<h3 id=\"三组权限\"><a href=\"#三组权限\" class=\"headerlink\" title=\"三组权限\"></a>三组权限</h3><ul>\n<li>拥有者</li>\n<li>用户组</li>\n<li>其他人</li>\n</ul>\n<h3 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h3><p>太久远会被折叠，使用<code>ls -l --full-time</code>查看具体时间</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>文件名长度：255个字符，128个汉字</p>\n<p>文件名限制：少用特殊符号，如果有特殊符号，使用单引号</p>\n<h2 id=\"修改权限\"><a href=\"#修改权限\" class=\"headerlink\" title=\"修改权限\"></a>修改权限</h2><h3 id=\"chgrp\"><a href=\"#chgrp\" class=\"headerlink\" title=\"chgrp\"></a>chgrp</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chgrp</span> <span class=\"token punctuation\">[</span>-R<span class=\"token punctuation\">]</span> dirname/filename <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chown</span> <span class=\"token punctuation\">[</span>-R<span class=\"token punctuation\">]</span> username:groupname dirname/filename <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"chmod\"><a href=\"#chmod\" class=\"headerlink\" title=\"chmod\"></a>chmod</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># x,y,z = 4/2/1</span>\n<span class=\"token function\">chmod</span> <span class=\"token punctuation\">[</span>-R<span class=\"token punctuation\">]</span> xyz dirname/filename <span class=\"token punctuation\">..</span>.\n<span class=\"token comment\"># id = u g o a; ac = r w x</span>\n<span class=\"token function\">chmod</span> <span class=\"token punctuation\">[</span>-R<span class=\"token punctuation\">]</span> u+r dirname/filename <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"目录配置\"><a href=\"#目录配置\" class=\"headerlink\" title=\"目录配置\"></a>目录配置</h2><p>标准：FHS</p>\n<h3 id=\"FHS要求存在的目录\"><a href=\"#FHS要求存在的目录\" class=\"headerlink\" title=\"FHS要求存在的目录\"></a>FHS要求存在的目录</h3><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/bin</td>\n<td>单人维护下仍然可以正常使用的可执行文件</td>\n</tr>\n<tr>\n<td>/boot</td>\n<td>启动所需，包括内核文件，启动选项，grub2</td>\n</tr>\n<tr>\n<td>/dev</td>\n<td>块设备，包括硬盘、外设，以及特有的/dev/null /dev/tty</td>\n</tr>\n<tr>\n<td>/etc</td>\n<td>系统的主要配置文件，<strong>建议不要放可执行文件进来</strong></td>\n</tr>\n<tr>\n<td>/lib</td>\n<td>函数库，/lib/modules中有主要的内核中驱动程序</td>\n</tr>\n<tr>\n<td>/media</td>\n<td>可删除的设备，软盘光盘</td>\n</tr>\n<tr>\n<td>/mnt</td>\n<td>用于临时挂载</td>\n</tr>\n<tr>\n<td>/opt</td>\n<td>第三方独立软件，如kde</td>\n</tr>\n<tr>\n<td>/run</td>\n<td>系统启动后所生成的各项信息，该目录又内存来模拟</td>\n</tr>\n<tr>\n<td>/sbin</td>\n<td>启动过程中，启动、修复、还原系统的命令</td>\n</tr>\n<tr>\n<td>/srv</td>\n<td>网络服务的数据目录</td>\n</tr>\n<tr>\n<td>/tmp</td>\n<td>正在执行的程序暂时存放文件的位置，建议定期清理</td>\n</tr>\n<tr>\n<td>/usr</td>\n<td>稍后介绍</td>\n</tr>\n<tr>\n<td>/var</td>\n<td>稍后介绍</td>\n</tr>\n</tbody></table>\n<h3 id=\"FHS建议存在的目录\"><a href=\"#FHS建议存在的目录\" class=\"headerlink\" title=\"FHS建议存在的目录\"></a>FHS建议存在的目录</h3><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/home</td>\n<td>家目录，使用<del>来表示自己，</del>123表示123的家目录</td>\n</tr>\n<tr>\n<td>/lib<qual></td>\n<td>存放与/lib不同格式的函数库</td>\n</tr>\n<tr>\n<td>/root</td>\n<td>root的家目录</td>\n</tr>\n</tbody></table>\n<h3 id=\"FHS未要求但也很重要的目录\"><a href=\"#FHS未要求但也很重要的目录\" class=\"headerlink\" title=\"FHS未要求但也很重要的目录\"></a>FHS未要求但也很重要的目录</h3><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/lost+found</td>\n<td>文件系统发生错误时，用于找回的目录</td>\n</tr>\n<tr>\n<td>/proc</td>\n<td>虚拟的文件系统，存放在内存中，包括系统内核，进程信息，外设和网络的状态</td>\n</tr>\n<tr>\n<td>/sys</td>\n<td>虚拟文件系统，记录内核和系统硬件的信息，包括已加载的内核模块和检测到的硬件的信息</td>\n</tr>\n</tbody></table>\n<h3 id=\"usr目录\"><a href=\"#usr目录\" class=\"headerlink\" title=\"/usr目录\"></a>/usr目录</h3><p>usr的全称不是user，而是<code>UNIX Software Resource</code></p>\n<h4 id=\"FHS要求必须存在的目录\"><a href=\"#FHS要求必须存在的目录\" class=\"headerlink\" title=\"FHS要求必须存在的目录\"></a>FHS要求必须存在的目录</h4><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/usr/bin</td>\n<td>一般用户能使用的命令，/bin目录也被链接至此，FHS建议此目录下不要有子目录（为了加快查找速度？）</td>\n</tr>\n<tr>\n<td>/usr/lib</td>\n<td>同上，/lib也被链接至此</td>\n</tr>\n<tr>\n<td>/usr/local</td>\n<td>自己下载的软件安装至此</td>\n</tr>\n<tr>\n<td>/usr/sbin</td>\n<td>非系统正常运行所需的系统命令，常见的是网络服务器中的daemo，/sbin被链接至此</td>\n</tr>\n<tr>\n<td>/usr/share</td>\n<td>存放只读的数据文件，尤其是共享文件，如man，doc，zoneinfo（时区文件）</td>\n</tr>\n</tbody></table>\n<h4 id=\"FHS建议存在的目录-1\"><a href=\"#FHS建议存在的目录-1\" class=\"headerlink\" title=\"FHS建议存在的目录\"></a>FHS建议存在的目录</h4><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/usr/games</td>\n<td>游戏（woc？？？</td>\n</tr>\n<tr>\n<td>/usr/include</td>\n<td>c和c++的头文件与包含文件，用于tarball</td>\n</tr>\n<tr>\n<td>/usr/libexec</td>\n<td>某些不被一般用户常用的执行文件或脚本，如x window下的指令</td>\n</tr>\n<tr>\n<td>/usr/lib<qual></td>\n<td>同前</td>\n</tr>\n<tr>\n<td>/usr/src</td>\n<td>存放源码，比如内核源码</td>\n</tr>\n</tbody></table>\n<h3 id=\"var目录\"><a href=\"#var目录\" class=\"headerlink\" title=\"/var目录\"></a>/var目录</h3><p> /var存放流动的文件，如缓存、日志、以及某些软件运行产生的文件</p>\n<h4 id=\"FHS要求必须存在的目录-1\"><a href=\"#FHS要求必须存在的目录-1\" class=\"headerlink\" title=\"FHS要求必须存在的目录\"></a>FHS要求必须存在的目录</h4><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/var/cache</td>\n<td>程序运行过程中的缓存</td>\n</tr>\n<tr>\n<td>/var/lib</td>\n<td>程序运行中，用到的链接库</td>\n</tr>\n<tr>\n<td>/var/lock</td>\n<td>锁的存放位置</td>\n</tr>\n<tr>\n<td>/var/log</td>\n<td>日志</td>\n</tr>\n<tr>\n<td>/var/mail</td>\n<td>邮件目录，也会存放到/var/spool/mail中</td>\n</tr>\n<tr>\n<td>/var/run</td>\n<td>程序启动后PID的存放位置</td>\n</tr>\n<tr>\n<td>/var/spool</td>\n<td>队列数据</td>\n</tr>\n</tbody></table>\n<p>这里鸟哥推荐再去看看FHS的官方文档，有空去研读一下。</p>\n<h2 id=\"相对路径与绝对路径\"><a href=\"#相对路径与绝对路径\" class=\"headerlink\" title=\"相对路径与绝对路径\"></a>相对路径与绝对路径</h2><p>略</p>\n<h2 id=\"linux的标准\"><a href=\"#linux的标准\" class=\"headerlink\" title=\"linux的标准\"></a>linux的标准</h2><p>FHS之外，还有LSB（Linux Standard Base）。</p>\n<p>需要使用包管理工具安装lsb后，使用<code>lsb_release -a</code>来查看系统信息</p>\n"},{"author":"kawhicurry","title":"重学linux（0）","description":"重学linux","top":0,"cover":0,"date":"2022-01-18T02:12:01.000Z","img":null,"coverImg":null,"summary":null,"keywords":null,"_content":"\n# 把linux的操作再学一遍！\n\n感受到了之前运维工作中的力不从心，于是乎决定再学一遍\n\n路线是从鸟哥私房菜的第四章开始，跳过基础知识和安装的章节。\n\n# 首次登录与在线求助\n\n## 图形界面\n\n这个略了，不是很想用。\n\n只要记得有个`startx`用来启动`X Window`就行了。\n\n## 初识命令行\n\n### 登录提示\n\n文件位于`/etc/issue`。使用`man issue`查看帮助，可知文件中反斜杠（escape）内容来自`agetty`，使用`man agetty`查询语义后可自定义该文件，示例：\n\n```bash\nUbuntu 18.04.6 LTS \\n \\l\n\n```\n\n### prompt\n\n小知识：\n\nroot的提示符为`#`\n\n普通用户为`$`\n\n### 查看语言支持\n\n```bash\necho $LANG # 现在在用的语言\nlocale # 语言相关的设定\n```\n\n### 几个小工具，复习一下：\n\n1. date：看时间\n2. cal：看日历\n3. bc：计算器\n\n### 几个快捷键\n\n1. tab：补全\n2. ctrl+c：中断\n3. ctrl+d：EOF（也相当于exit）\n4. shift+page up/down：命令行中翻页\n\n## 查看帮助\n\n1. --help\n2. man page（使用vim的操作模式）\n3. info page（linux独有，使用节点的操作模式）\n4. 查看`/usr/share/doc`\n\n### 关于info page\n\n1. 使用tab和上下移动\n2. enter进入菜单，u键返回\n3. n和p在子菜单之间移动\n4. b和e跳到子菜单的第一个node和最后的node\n\n## 最简单的文本编辑器\n\nnano，反正我是不会用的\n\n## 关机\n\n### sync\n\n手动同步到硬盘\n\n### shutdown\n\n冷知识：`/sbin/shutdown`\n\n常用参数：\n\n```bash\n-k # 不是真关机，只是通知其他用户\n-r # 重启\n-h # 立即关机\n-c # 取消关机\n[time] # 设定时间，默认一分钟，举例：+10或10（10分钟），20:25（定时），now（现在）\n```\n\n### reboot/halt/poweroff\n\n都是关机或重启\n\n冷知识：`init 0`关机，`init 6`重启\n\n区别\n\n```bash\nreboot # 重启\nhalt # 系统停止，但屏幕上会有系统停止的输出\npoweroff # 系统关机，没电自然屏幕为空\n```\n\n\n\n\n\n","source":"_posts/Operation/重学linux（0）.md","raw":"---\nauthor: kawhicurry\ntitle: 重学linux（0）\ntags:\n  - 专栏：重学linux\n  - linux\ndescription: 重学linux\ntop: 0\ncover: 0\ncategories:\n  - Operation\ndate: 2022-01-18 10:12:01\nimg:\ncoverImg:\nsummary:\nkeywords:\n---\n\n# 把linux的操作再学一遍！\n\n感受到了之前运维工作中的力不从心，于是乎决定再学一遍\n\n路线是从鸟哥私房菜的第四章开始，跳过基础知识和安装的章节。\n\n# 首次登录与在线求助\n\n## 图形界面\n\n这个略了，不是很想用。\n\n只要记得有个`startx`用来启动`X Window`就行了。\n\n## 初识命令行\n\n### 登录提示\n\n文件位于`/etc/issue`。使用`man issue`查看帮助，可知文件中反斜杠（escape）内容来自`agetty`，使用`man agetty`查询语义后可自定义该文件，示例：\n\n```bash\nUbuntu 18.04.6 LTS \\n \\l\n\n```\n\n### prompt\n\n小知识：\n\nroot的提示符为`#`\n\n普通用户为`$`\n\n### 查看语言支持\n\n```bash\necho $LANG # 现在在用的语言\nlocale # 语言相关的设定\n```\n\n### 几个小工具，复习一下：\n\n1. date：看时间\n2. cal：看日历\n3. bc：计算器\n\n### 几个快捷键\n\n1. tab：补全\n2. ctrl+c：中断\n3. ctrl+d：EOF（也相当于exit）\n4. shift+page up/down：命令行中翻页\n\n## 查看帮助\n\n1. --help\n2. man page（使用vim的操作模式）\n3. info page（linux独有，使用节点的操作模式）\n4. 查看`/usr/share/doc`\n\n### 关于info page\n\n1. 使用tab和上下移动\n2. enter进入菜单，u键返回\n3. n和p在子菜单之间移动\n4. b和e跳到子菜单的第一个node和最后的node\n\n## 最简单的文本编辑器\n\nnano，反正我是不会用的\n\n## 关机\n\n### sync\n\n手动同步到硬盘\n\n### shutdown\n\n冷知识：`/sbin/shutdown`\n\n常用参数：\n\n```bash\n-k # 不是真关机，只是通知其他用户\n-r # 重启\n-h # 立即关机\n-c # 取消关机\n[time] # 设定时间，默认一分钟，举例：+10或10（10分钟），20:25（定时），now（现在）\n```\n\n### reboot/halt/poweroff\n\n都是关机或重启\n\n冷知识：`init 0`关机，`init 6`重启\n\n区别\n\n```bash\nreboot # 重启\nhalt # 系统停止，但屏幕上会有系统停止的输出\npoweroff # 系统关机，没电自然屏幕为空\n```\n\n\n\n\n\n","slug":"重学linux（0）","published":1,"category":"Operation","updated":"2022-01-18T06:17:15.457Z","_id":"ckyjq4unn0002esulgx171gvv","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"把linux的操作再学一遍！\"><a href=\"#把linux的操作再学一遍！\" class=\"headerlink\" title=\"把linux的操作再学一遍！\"></a>把linux的操作再学一遍！</h1><p>感受到了之前运维工作中的力不从心，于是乎决定再学一遍</p>\n<p>路线是从鸟哥私房菜的第四章开始，跳过基础知识和安装的章节。</p>\n<h1 id=\"首次登录与在线求助\"><a href=\"#首次登录与在线求助\" class=\"headerlink\" title=\"首次登录与在线求助\"></a>首次登录与在线求助</h1><h2 id=\"图形界面\"><a href=\"#图形界面\" class=\"headerlink\" title=\"图形界面\"></a>图形界面</h2><p>这个略了，不是很想用。</p>\n<p>只要记得有个<code>startx</code>用来启动<code>X Window</code>就行了。</p>\n<h2 id=\"初识命令行\"><a href=\"#初识命令行\" class=\"headerlink\" title=\"初识命令行\"></a>初识命令行</h2><h3 id=\"登录提示\"><a href=\"#登录提示\" class=\"headerlink\" title=\"登录提示\"></a>登录提示</h3><p>文件位于<code>/etc/issue</code>。使用<code>man issue</code>查看帮助，可知文件中反斜杠（escape）内容来自<code>agetty</code>，使用<code>man agetty</code>查询语义后可自定义该文件，示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Ubuntu <span class=\"token number\">18.04</span>.6 LTS <span class=\"token punctuation\">\\</span>n <span class=\"token punctuation\">\\</span>l\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"prompt\"><a href=\"#prompt\" class=\"headerlink\" title=\"prompt\"></a>prompt</h3><p>小知识：</p>\n<p>root的提示符为<code>#</code></p>\n<p>普通用户为<code>$</code></p>\n<h3 id=\"查看语言支持\"><a href=\"#查看语言支持\" class=\"headerlink\" title=\"查看语言支持\"></a>查看语言支持</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$LANG</span> <span class=\"token comment\"># 现在在用的语言</span>\nlocale <span class=\"token comment\"># 语言相关的设定</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"几个小工具，复习一下：\"><a href=\"#几个小工具，复习一下：\" class=\"headerlink\" title=\"几个小工具，复习一下：\"></a>几个小工具，复习一下：</h3><ol>\n<li>date：看时间</li>\n<li>cal：看日历</li>\n<li>bc：计算器</li>\n</ol>\n<h3 id=\"几个快捷键\"><a href=\"#几个快捷键\" class=\"headerlink\" title=\"几个快捷键\"></a>几个快捷键</h3><ol>\n<li>tab：补全</li>\n<li>ctrl+c：中断</li>\n<li>ctrl+d：EOF（也相当于exit）</li>\n<li>shift+page up/down：命令行中翻页</li>\n</ol>\n<h2 id=\"查看帮助\"><a href=\"#查看帮助\" class=\"headerlink\" title=\"查看帮助\"></a>查看帮助</h2><ol>\n<li>–help</li>\n<li>man page（使用vim的操作模式）</li>\n<li>info page（linux独有，使用节点的操作模式）</li>\n<li>查看<code>/usr/share/doc</code></li>\n</ol>\n<h3 id=\"关于info-page\"><a href=\"#关于info-page\" class=\"headerlink\" title=\"关于info page\"></a>关于info page</h3><ol>\n<li>使用tab和上下移动</li>\n<li>enter进入菜单，u键返回</li>\n<li>n和p在子菜单之间移动</li>\n<li>b和e跳到子菜单的第一个node和最后的node</li>\n</ol>\n<h2 id=\"最简单的文本编辑器\"><a href=\"#最简单的文本编辑器\" class=\"headerlink\" title=\"最简单的文本编辑器\"></a>最简单的文本编辑器</h2><p>nano，反正我是不会用的</p>\n<h2 id=\"关机\"><a href=\"#关机\" class=\"headerlink\" title=\"关机\"></a>关机</h2><h3 id=\"sync\"><a href=\"#sync\" class=\"headerlink\" title=\"sync\"></a>sync</h3><p>手动同步到硬盘</p>\n<h3 id=\"shutdown\"><a href=\"#shutdown\" class=\"headerlink\" title=\"shutdown\"></a>shutdown</h3><p>冷知识：<code>/sbin/shutdown</code></p>\n<p>常用参数：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">-k <span class=\"token comment\"># 不是真关机，只是通知其他用户</span>\n-r <span class=\"token comment\"># 重启</span>\n-h <span class=\"token comment\"># 立即关机</span>\n-c <span class=\"token comment\"># 取消关机</span>\n<span class=\"token punctuation\">[</span>time<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 设定时间，默认一分钟，举例：+10或10（10分钟），20:25（定时），now（现在）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"reboot-halt-poweroff\"><a href=\"#reboot-halt-poweroff\" class=\"headerlink\" title=\"reboot/halt/poweroff\"></a>reboot/halt/poweroff</h3><p>都是关机或重启</p>\n<p>冷知识：<code>init 0</code>关机，<code>init 6</code>重启</p>\n<p>区别</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">reboot</span> <span class=\"token comment\"># 重启</span>\n<span class=\"token function\">halt</span> <span class=\"token comment\"># 系统停止，但屏幕上会有系统停止的输出</span>\npoweroff <span class=\"token comment\"># 系统关机，没电自然屏幕为空</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n","site":{"data":{"friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","introduction":"来自青柚的运营大佬","url":"https://cfy73.github.io/","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<h1 id=\"把linux的操作再学一遍！\"><a href=\"#把linux的操作再学一遍！\" class=\"headerlink\" title=\"把linux的操作再学一遍！\"></a>把linux的操作再学一遍！</h1><p>感受到了之前运维工作中的力不从心，于是乎决定再学一遍</p>\n<p>路线是从鸟哥私房菜的第四章开始，跳过基础知识和安装的章节。</p>\n<h1 id=\"首次登录与在线求助\"><a href=\"#首次登录与在线求助\" class=\"headerlink\" title=\"首次登录与在线求助\"></a>首次登录与在线求助</h1><h2 id=\"图形界面\"><a href=\"#图形界面\" class=\"headerlink\" title=\"图形界面\"></a>图形界面</h2><p>这个略了，不是很想用。</p>\n<p>只要记得有个<code>startx</code>用来启动<code>X Window</code>就行了。</p>\n<h2 id=\"初识命令行\"><a href=\"#初识命令行\" class=\"headerlink\" title=\"初识命令行\"></a>初识命令行</h2><h3 id=\"登录提示\"><a href=\"#登录提示\" class=\"headerlink\" title=\"登录提示\"></a>登录提示</h3><p>文件位于<code>/etc/issue</code>。使用<code>man issue</code>查看帮助，可知文件中反斜杠（escape）内容来自<code>agetty</code>，使用<code>man agetty</code>查询语义后可自定义该文件，示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Ubuntu <span class=\"token number\">18.04</span>.6 LTS <span class=\"token punctuation\">\\</span>n <span class=\"token punctuation\">\\</span>l\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"prompt\"><a href=\"#prompt\" class=\"headerlink\" title=\"prompt\"></a>prompt</h3><p>小知识：</p>\n<p>root的提示符为<code>#</code></p>\n<p>普通用户为<code>$</code></p>\n<h3 id=\"查看语言支持\"><a href=\"#查看语言支持\" class=\"headerlink\" title=\"查看语言支持\"></a>查看语言支持</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$LANG</span> <span class=\"token comment\"># 现在在用的语言</span>\nlocale <span class=\"token comment\"># 语言相关的设定</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"几个小工具，复习一下：\"><a href=\"#几个小工具，复习一下：\" class=\"headerlink\" title=\"几个小工具，复习一下：\"></a>几个小工具，复习一下：</h3><ol>\n<li>date：看时间</li>\n<li>cal：看日历</li>\n<li>bc：计算器</li>\n</ol>\n<h3 id=\"几个快捷键\"><a href=\"#几个快捷键\" class=\"headerlink\" title=\"几个快捷键\"></a>几个快捷键</h3><ol>\n<li>tab：补全</li>\n<li>ctrl+c：中断</li>\n<li>ctrl+d：EOF（也相当于exit）</li>\n<li>shift+page up/down：命令行中翻页</li>\n</ol>\n<h2 id=\"查看帮助\"><a href=\"#查看帮助\" class=\"headerlink\" title=\"查看帮助\"></a>查看帮助</h2><ol>\n<li>–help</li>\n<li>man page（使用vim的操作模式）</li>\n<li>info page（linux独有，使用节点的操作模式）</li>\n<li>查看<code>/usr/share/doc</code></li>\n</ol>\n<h3 id=\"关于info-page\"><a href=\"#关于info-page\" class=\"headerlink\" title=\"关于info page\"></a>关于info page</h3><ol>\n<li>使用tab和上下移动</li>\n<li>enter进入菜单，u键返回</li>\n<li>n和p在子菜单之间移动</li>\n<li>b和e跳到子菜单的第一个node和最后的node</li>\n</ol>\n<h2 id=\"最简单的文本编辑器\"><a href=\"#最简单的文本编辑器\" class=\"headerlink\" title=\"最简单的文本编辑器\"></a>最简单的文本编辑器</h2><p>nano，反正我是不会用的</p>\n<h2 id=\"关机\"><a href=\"#关机\" class=\"headerlink\" title=\"关机\"></a>关机</h2><h3 id=\"sync\"><a href=\"#sync\" class=\"headerlink\" title=\"sync\"></a>sync</h3><p>手动同步到硬盘</p>\n<h3 id=\"shutdown\"><a href=\"#shutdown\" class=\"headerlink\" title=\"shutdown\"></a>shutdown</h3><p>冷知识：<code>/sbin/shutdown</code></p>\n<p>常用参数：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">-k <span class=\"token comment\"># 不是真关机，只是通知其他用户</span>\n-r <span class=\"token comment\"># 重启</span>\n-h <span class=\"token comment\"># 立即关机</span>\n-c <span class=\"token comment\"># 取消关机</span>\n<span class=\"token punctuation\">[</span>time<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 设定时间，默认一分钟，举例：+10或10（10分钟），20:25（定时），now（现在）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"reboot-halt-poweroff\"><a href=\"#reboot-halt-poweroff\" class=\"headerlink\" title=\"reboot/halt/poweroff\"></a>reboot/halt/poweroff</h3><p>都是关机或重启</p>\n<p>冷知识：<code>init 0</code>关机，<code>init 6</code>重启</p>\n<p>区别</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">reboot</span> <span class=\"token comment\"># 重启</span>\n<span class=\"token function\">halt</span> <span class=\"token comment\"># 系统停止，但屏幕上会有系统停止的输出</span>\npoweroff <span class=\"token comment\"># 系统关机，没电自然屏幕为空</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n"},{"author":"kawhicurry","title":"k8s权威指南学习笔记（0）","description":"k8s权威指南学习笔记（0）","top":0,"cover":0,"date":"2022-01-18T06:21:00.000Z","img":null,"coverImg":null,"summary":null,"keywords":null,"_content":"\n# k8s入门\n\n## 了解k8s\n\n来自google的borg\n\nk8s中，**service**是分布式集群架构的核心。\n\n```mermaid\ngraph LR;\ncontainer-->pod-->node-->cluster;\n```\n\n其中：\n\n- pod是k8s调度的最小单位\n- pod是service的载体\n\n## 术语\n\n略\n\n## 网络问题\n\n三个IP\n\n- node ip\n- pod ip\n- service ip\n\n### 三种服务类型\n\n- 无状态（大多数）\n- 有状态（需配合operator使用）\n- 批处理（job）\n\n\n\n第一章可以说是TLDR，下章见吧。\n","source":"_posts/Operation/k8s权威指南学习笔记（0）.md","raw":"---\nauthor: kawhicurry\ntitle: k8s权威指南学习笔记（0）\ntags:\n  - 专栏：k8s权威指南学习笔记\n  - k8s\ndescription: k8s权威指南学习笔记（0）\ntop: 0\ncover: 0\ncategories:\n  - Operation\ndate: 2022-01-18 14:21:00\nimg:\ncoverImg:\nsummary:\nkeywords:\n---\n\n# k8s入门\n\n## 了解k8s\n\n来自google的borg\n\nk8s中，**service**是分布式集群架构的核心。\n\n```mermaid\ngraph LR;\ncontainer-->pod-->node-->cluster;\n```\n\n其中：\n\n- pod是k8s调度的最小单位\n- pod是service的载体\n\n## 术语\n\n略\n\n## 网络问题\n\n三个IP\n\n- node ip\n- pod ip\n- service ip\n\n### 三种服务类型\n\n- 无状态（大多数）\n- 有状态（需配合operator使用）\n- 批处理（job）\n\n\n\n第一章可以说是TLDR，下章见吧。\n","slug":"k8s权威指南学习笔记（0）","published":1,"category":"Operation","updated":"2022-01-18T11:52:30.526Z","_id":"ckyk23zlx0000coul2h5vc7te","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"k8s入门\"><a href=\"#k8s入门\" class=\"headerlink\" title=\"k8s入门\"></a>k8s入门</h1><h2 id=\"了解k8s\"><a href=\"#了解k8s\" class=\"headerlink\" title=\"了解k8s\"></a>了解k8s</h2><p>来自google的borg</p>\n<p>k8s中，<strong>service</strong>是分布式集群架构的核心。</p>\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">graph</span> LR<span class=\"token punctuation\">;</span>\ncontainer<span class=\"token arrow operator\">--></span>pod<span class=\"token arrow operator\">--></span>node<span class=\"token arrow operator\">--></span>cluster<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>其中：</p>\n<ul>\n<li>pod是k8s调度的最小单位</li>\n<li>pod是service的载体</li>\n</ul>\n<h2 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h2><p>略</p>\n<h2 id=\"网络问题\"><a href=\"#网络问题\" class=\"headerlink\" title=\"网络问题\"></a>网络问题</h2><p>三个IP</p>\n<ul>\n<li>node ip</li>\n<li>pod ip</li>\n<li>service ip</li>\n</ul>\n<h3 id=\"三种服务类型\"><a href=\"#三种服务类型\" class=\"headerlink\" title=\"三种服务类型\"></a>三种服务类型</h3><ul>\n<li>无状态（大多数）</li>\n<li>有状态（需配合operator使用）</li>\n<li>批处理（job）</li>\n</ul>\n<p>第一章可以说是TLDR，下章见吧。</p>\n","site":{"data":{"friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","introduction":"来自青柚的运营大佬","url":"https://cfy73.github.io/","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<h1 id=\"k8s入门\"><a href=\"#k8s入门\" class=\"headerlink\" title=\"k8s入门\"></a>k8s入门</h1><h2 id=\"了解k8s\"><a href=\"#了解k8s\" class=\"headerlink\" title=\"了解k8s\"></a>了解k8s</h2><p>来自google的borg</p>\n<p>k8s中，<strong>service</strong>是分布式集群架构的核心。</p>\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">graph</span> LR<span class=\"token punctuation\">;</span>\ncontainer<span class=\"token arrow operator\">--></span>pod<span class=\"token arrow operator\">--></span>node<span class=\"token arrow operator\">--></span>cluster<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>其中：</p>\n<ul>\n<li>pod是k8s调度的最小单位</li>\n<li>pod是service的载体</li>\n</ul>\n<h2 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h2><p>略</p>\n<h2 id=\"网络问题\"><a href=\"#网络问题\" class=\"headerlink\" title=\"网络问题\"></a>网络问题</h2><p>三个IP</p>\n<ul>\n<li>node ip</li>\n<li>pod ip</li>\n<li>service ip</li>\n</ul>\n<h3 id=\"三种服务类型\"><a href=\"#三种服务类型\" class=\"headerlink\" title=\"三种服务类型\"></a>三种服务类型</h3><ul>\n<li>无状态（大多数）</li>\n<li>有状态（需配合operator使用）</li>\n<li>批处理（job）</li>\n</ul>\n<p>第一章可以说是TLDR，下章见吧。</p>\n"},{"author":"kawhicurry","title":"k8s权威指南学习笔记（1）","description":"k8s权威指南学习笔记（1）","top":0,"cover":0,"date":"2022-01-18T07:00:53.000Z","img":null,"coverImg":null,"summary":null,"keywords":null,"_content":"\n# k8s安装配置指南\n\n## kubeadm安装\n\n### 安装kubeadm\n\nkubeadm是为了简化集群安装过程引入的工具\n\n大致步骤为换源，然后包管理工具安装以下套件\n\n```bash\nyum install -y kubelet kubeadm kubectl\n```\n\n### 修改kubeadm的默认配置\n\n```bash\nkubeadm config print init-defaults # 输出kubeadm init默认参数\nkubeadm config print join-defaults # 输出kubeadm join的默认参数\n```\n\n使用以下命令将默认配置保存备用\n\n```bash\nkubeadm config print init-defaults > init.default.yaml\n```\n\n### 下载kubenetes相关镜像\n\n为了加快k8s创建集群过程，可预先下载images\n\n```bash\nkubeadm config images list # 查看镜像列表\nkubeadm config images pull --config=init-config.yaml# 预下载镜像\nkubeadm config images pull --image-repository=http://registry.cn-hangzhou.aliyuncs.com/google_containers  # 或者这样\n```\n\n**注**：如果访问不了[k8s.gcr.io](k8s.gcr.io)，则需修改`/etc/docker/daemon.json`中的`registry-mirrors`项，改为国内地址。\n\n换源是个很麻烦的问题，以下是另一种方案\n\n```bash\nkubeadm config images list # 查看所需镜像列表\nimages=(  # 下面的镜像应该去除\"k8s.gcr.io/\"的前缀，版本换成上面获取到的版本\n    kube-apiserver:v1.12.1\n    kube-controller-manager:v1.12.1\n    kube-scheduler:v1.12.1\n    kube-proxy:v1.12.1\n    pause:3.1\n    etcd:3.2.24\n    coredns:1.2.2\n)\n\nfor imageName in ${images[@]} ; do\n    docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName\n    docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName\n    docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName\ndone\n# 使用脚本拉取\n```\n\n该方案来源：<https://zhuanlan.zhihu.com/p/46341911>\n\n### 使用kube init 安装master节点\n\n```bash\nkubeadm init # 初始化\nkubeadm init phase preflight # 只做预检查\nkubeadm init --ignore-preflight-errors # 跳过预检查进行初始化\n```\n\n**注意**：如果是在启动了kubelet之后再拉取的镜像，请重启kubelet。不然kubeadm会识别不到刚刚拉取的镜像\n\n*ps：最后还是挂梯子init完了，有个镜像的名字和要求的不一样，懒得改tag了*\n\n对于root用户，直接键入`export KUBECONFIG=/etc/kubernetes/admin.conf`后即可使用kubectl查看control plane的信息，对于其他用户，需要使用另外的步骤，这些步骤都会在安装完成后显示出来，我贴在下面\n\n```bash\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nAlternatively, if you are the root user, you can run:\n\n  export KUBECONFIG=/etc/kubernetes/admin.conf\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 10.0.2.15:6443 --token sddm7y.7eebnrzpl2koekx1 \\\n        --discovery-token-ca-cert-hash sha256:77ed4804b2c367c1f3eb0b3e7114fdbed2bc94748d26d04d14d22af67fbb7e7e\n```\n\n如果不执行这些步骤，会出现以下报错\n\n```bash\nThe connection to the server localhost:8080 was refused - did you specify the right host or port?\n```\n\n还要注意的一点是，kubeadm默认的安装过程不包含网络插件（CNI）的初始化，这些需要另外的步骤了。\n\n### 加入节点\n\n在节点配置好环境后，将上面的`kubeadm join`输入到另一节点即可。\n","source":"_posts/Operation/k8s权威指南学习笔记（1）.md","raw":"---\nauthor: kawhicurry\ntitle: k8s权威指南学习笔记（1）\ntags:\n  - k8s权威指南学习笔记\n  - k8s\ndescription: k8s权威指南学习笔记（1）\ntop: 0\ncover: 0\ncategories:\n  - undefined\ndate: 2022-01-18 15:00:53\nimg:\ncoverImg:\nsummary:\nkeywords:\n---\n\n# k8s安装配置指南\n\n## kubeadm安装\n\n### 安装kubeadm\n\nkubeadm是为了简化集群安装过程引入的工具\n\n大致步骤为换源，然后包管理工具安装以下套件\n\n```bash\nyum install -y kubelet kubeadm kubectl\n```\n\n### 修改kubeadm的默认配置\n\n```bash\nkubeadm config print init-defaults # 输出kubeadm init默认参数\nkubeadm config print join-defaults # 输出kubeadm join的默认参数\n```\n\n使用以下命令将默认配置保存备用\n\n```bash\nkubeadm config print init-defaults > init.default.yaml\n```\n\n### 下载kubenetes相关镜像\n\n为了加快k8s创建集群过程，可预先下载images\n\n```bash\nkubeadm config images list # 查看镜像列表\nkubeadm config images pull --config=init-config.yaml# 预下载镜像\nkubeadm config images pull --image-repository=http://registry.cn-hangzhou.aliyuncs.com/google_containers  # 或者这样\n```\n\n**注**：如果访问不了[k8s.gcr.io](k8s.gcr.io)，则需修改`/etc/docker/daemon.json`中的`registry-mirrors`项，改为国内地址。\n\n换源是个很麻烦的问题，以下是另一种方案\n\n```bash\nkubeadm config images list # 查看所需镜像列表\nimages=(  # 下面的镜像应该去除\"k8s.gcr.io/\"的前缀，版本换成上面获取到的版本\n    kube-apiserver:v1.12.1\n    kube-controller-manager:v1.12.1\n    kube-scheduler:v1.12.1\n    kube-proxy:v1.12.1\n    pause:3.1\n    etcd:3.2.24\n    coredns:1.2.2\n)\n\nfor imageName in ${images[@]} ; do\n    docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName\n    docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName\n    docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName\ndone\n# 使用脚本拉取\n```\n\n该方案来源：<https://zhuanlan.zhihu.com/p/46341911>\n\n### 使用kube init 安装master节点\n\n```bash\nkubeadm init # 初始化\nkubeadm init phase preflight # 只做预检查\nkubeadm init --ignore-preflight-errors # 跳过预检查进行初始化\n```\n\n**注意**：如果是在启动了kubelet之后再拉取的镜像，请重启kubelet。不然kubeadm会识别不到刚刚拉取的镜像\n\n*ps：最后还是挂梯子init完了，有个镜像的名字和要求的不一样，懒得改tag了*\n\n对于root用户，直接键入`export KUBECONFIG=/etc/kubernetes/admin.conf`后即可使用kubectl查看control plane的信息，对于其他用户，需要使用另外的步骤，这些步骤都会在安装完成后显示出来，我贴在下面\n\n```bash\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nAlternatively, if you are the root user, you can run:\n\n  export KUBECONFIG=/etc/kubernetes/admin.conf\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 10.0.2.15:6443 --token sddm7y.7eebnrzpl2koekx1 \\\n        --discovery-token-ca-cert-hash sha256:77ed4804b2c367c1f3eb0b3e7114fdbed2bc94748d26d04d14d22af67fbb7e7e\n```\n\n如果不执行这些步骤，会出现以下报错\n\n```bash\nThe connection to the server localhost:8080 was refused - did you specify the right host or port?\n```\n\n还要注意的一点是，kubeadm默认的安装过程不包含网络插件（CNI）的初始化，这些需要另外的步骤了。\n\n### 加入节点\n\n在节点配置好环境后，将上面的`kubeadm join`输入到另一节点即可。\n","slug":"k8s权威指南学习笔记（1）","published":1,"category":"Operation","updated":"2022-01-18T11:52:36.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckyk2484700002kul0esybaug","content":"<h1 id=\"k8s安装配置指南\"><a href=\"#k8s安装配置指南\" class=\"headerlink\" title=\"k8s安装配置指南\"></a>k8s安装配置指南</h1><h2 id=\"kubeadm安装\"><a href=\"#kubeadm安装\" class=\"headerlink\" title=\"kubeadm安装\"></a>kubeadm安装</h2><h3 id=\"安装kubeadm\"><a href=\"#安装kubeadm\" class=\"headerlink\" title=\"安装kubeadm\"></a>安装kubeadm</h3><p>kubeadm是为了简化集群安装过程引入的工具</p>\n<p>大致步骤为换源，然后包管理工具安装以下套件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> -y kubelet kubeadm kubectl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"修改kubeadm的默认配置\"><a href=\"#修改kubeadm的默认配置\" class=\"headerlink\" title=\"修改kubeadm的默认配置\"></a>修改kubeadm的默认配置</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm config print init-defaults <span class=\"token comment\"># 输出kubeadm init默认参数</span>\nkubeadm config print join-defaults <span class=\"token comment\"># 输出kubeadm join的默认参数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>使用以下命令将默认配置保存备用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm config print init-defaults <span class=\"token operator\">></span> init.default.yaml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"下载kubenetes相关镜像\"><a href=\"#下载kubenetes相关镜像\" class=\"headerlink\" title=\"下载kubenetes相关镜像\"></a>下载kubenetes相关镜像</h3><p>为了加快k8s创建集群过程，可预先下载images</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm config images list <span class=\"token comment\"># 查看镜像列表</span>\nkubeadm config images pull --config<span class=\"token operator\">=</span>init-config.yaml<span class=\"token comment\"># 预下载镜像</span>\nkubeadm config images pull --image-repository<span class=\"token operator\">=</span>http://registry.cn-hangzhou.aliyuncs.com/google_containers  <span class=\"token comment\"># 或者这样</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注</strong>：如果访问不了<a href=\"k8s.gcr.io\">k8s.gcr.io</a>，则需修改<code>/etc/docker/daemon.json</code>中的<code>registry-mirrors</code>项，改为国内地址。</p>\n<p>换源是个很麻烦的问题，以下是另一种方案</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm config images list <span class=\"token comment\"># 查看所需镜像列表</span>\n<span class=\"token assign-left variable\">images</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>  <span class=\"token comment\"># 下面的镜像应该去除\"k8s.gcr.io/\"的前缀，版本换成上面获取到的版本</span>\n    kube-apiserver:v1.12.1\n    kube-controller-manager:v1.12.1\n    kube-scheduler:v1.12.1\n    kube-proxy:v1.12.1\n    pause:3.1\n    etcd:3.2.24\n    coredns:1.2.2\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">imageName</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">$&#123;images<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/<span class=\"token variable\">$imageName</span>\n    docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/<span class=\"token variable\">$imageName</span> k8s.gcr.io/<span class=\"token variable\">$imageName</span>\n    docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n<span class=\"token comment\"># 使用脚本拉取</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>该方案来源：<a href=\"https://zhuanlan.zhihu.com/p/46341911\">https://zhuanlan.zhihu.com/p/46341911</a></p>\n<h3 id=\"使用kube-init-安装master节点\"><a href=\"#使用kube-init-安装master节点\" class=\"headerlink\" title=\"使用kube init 安装master节点\"></a>使用kube init 安装master节点</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm init <span class=\"token comment\"># 初始化</span>\nkubeadm init phase preflight <span class=\"token comment\"># 只做预检查</span>\nkubeadm init --ignore-preflight-errors <span class=\"token comment\"># 跳过预检查进行初始化</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注意</strong>：如果是在启动了kubelet之后再拉取的镜像，请重启kubelet。不然kubeadm会识别不到刚刚拉取的镜像</p>\n<p><em>ps：最后还是挂梯子init完了，有个镜像的名字和要求的不一样，懒得改tag了</em></p>\n<p>对于root用户，直接键入<code>export KUBECONFIG=/etc/kubernetes/admin.conf</code>后即可使用kubectl查看control plane的信息，对于其他用户，需要使用另外的步骤，这些步骤都会在安装完成后显示出来，我贴在下面</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Your Kubernetes control-plane has initialized successfully<span class=\"token operator\">!</span>\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  <span class=\"token function\">mkdir</span> -p <span class=\"token environment constant\">$HOME</span>/.kube\n  <span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"token environment constant\">$HOME</span>/.kube/config\n  <span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -u<span class=\"token variable\">)</span></span><span class=\"token builtin class-name\">:</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -g<span class=\"token variable\">)</span></span> <span class=\"token environment constant\">$HOME</span>/.kube/config\n\nAlternatively, <span class=\"token keyword\">if</span> you are the root user, you can run:\n\n  <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">KUBECONFIG</span><span class=\"token operator\">=</span>/etc/kubernetes/admin.conf\n\nYou should now deploy a pod network to the cluster.\nRun <span class=\"token string\">\"kubectl apply -f [podnetwork].yaml\"</span> with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nThen you can <span class=\"token function\">join</span> any number of worker nodes by running the following on each as root:\n\nkubeadm <span class=\"token function\">join</span> <span class=\"token number\">10.0</span>.2.15:6443 --token sddm7y.7eebnrzpl2koekx1 <span class=\"token punctuation\">\\</span>\n        --discovery-token-ca-cert-hash sha256:77ed4804b2c367c1f3eb0b3e7114fdbed2bc94748d26d04d14d22af67fbb7e7e<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果不执行这些步骤，会出现以下报错</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">The connection to the server localhost:8080 was refused - did you specify the right <span class=\"token function\">host</span> or port?<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>还要注意的一点是，kubeadm默认的安装过程不包含网络插件（CNI）的初始化，这些需要另外的步骤了。</p>\n<h3 id=\"加入节点\"><a href=\"#加入节点\" class=\"headerlink\" title=\"加入节点\"></a>加入节点</h3><p>在节点配置好环境后，将上面的<code>kubeadm join</code>输入到另一节点即可。</p>\n","site":{"data":{"friends":[{"avatar":"https://sun482.github.io/images/apple-touch-icon-next.png","name":"柳姐姐的blog","introduction":"来自青柚的前端大佬","url":"https://sun482.github.io/","title":"Visit him"},{"avatar":"https://polo-0831.github.io/images/icons/stun-logo.svg","name":"罗总的blog","introduction":"来自自动化科协的大佬","url":"https://polo-0831.github.io/","title":"Visit Blog"},{"avatar":"https://nymrli.top/img/assets/favicon.ico","name":"阿波罗的前辈","introduction":"来自南邮apollo的大佬","url":"https://nymrli.top","title":"Read More"},{"avatar":"http://apollo2d.shuihua.top/gitbook/images/apple-touch-icon-precomposed-152.png","name":"Apollo2d 的文档","introduction":"记录2d组的重建过程","url":"http://apollo2d.shuihua.top","title":"Read More"},{"avatar":"https://cfy73.github.io/img/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87.jpg","name":"飞洋giegie的blog","introduction":"来自青柚的运营大佬","url":"https://cfy73.github.io/","title":"Read More"}],"recommends":[{"title":"无人机","path":"Project/uav"},{"title":"给apollo的面对对象课","path":"Language/oop-for-apollo"}]}},"excerpt":"","more":"<h1 id=\"k8s安装配置指南\"><a href=\"#k8s安装配置指南\" class=\"headerlink\" title=\"k8s安装配置指南\"></a>k8s安装配置指南</h1><h2 id=\"kubeadm安装\"><a href=\"#kubeadm安装\" class=\"headerlink\" title=\"kubeadm安装\"></a>kubeadm安装</h2><h3 id=\"安装kubeadm\"><a href=\"#安装kubeadm\" class=\"headerlink\" title=\"安装kubeadm\"></a>安装kubeadm</h3><p>kubeadm是为了简化集群安装过程引入的工具</p>\n<p>大致步骤为换源，然后包管理工具安装以下套件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> -y kubelet kubeadm kubectl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"修改kubeadm的默认配置\"><a href=\"#修改kubeadm的默认配置\" class=\"headerlink\" title=\"修改kubeadm的默认配置\"></a>修改kubeadm的默认配置</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm config print init-defaults <span class=\"token comment\"># 输出kubeadm init默认参数</span>\nkubeadm config print join-defaults <span class=\"token comment\"># 输出kubeadm join的默认参数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>使用以下命令将默认配置保存备用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm config print init-defaults <span class=\"token operator\">></span> init.default.yaml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"下载kubenetes相关镜像\"><a href=\"#下载kubenetes相关镜像\" class=\"headerlink\" title=\"下载kubenetes相关镜像\"></a>下载kubenetes相关镜像</h3><p>为了加快k8s创建集群过程，可预先下载images</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm config images list <span class=\"token comment\"># 查看镜像列表</span>\nkubeadm config images pull --config<span class=\"token operator\">=</span>init-config.yaml<span class=\"token comment\"># 预下载镜像</span>\nkubeadm config images pull --image-repository<span class=\"token operator\">=</span>http://registry.cn-hangzhou.aliyuncs.com/google_containers  <span class=\"token comment\"># 或者这样</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注</strong>：如果访问不了<a href=\"k8s.gcr.io\">k8s.gcr.io</a>，则需修改<code>/etc/docker/daemon.json</code>中的<code>registry-mirrors</code>项，改为国内地址。</p>\n<p>换源是个很麻烦的问题，以下是另一种方案</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm config images list <span class=\"token comment\"># 查看所需镜像列表</span>\n<span class=\"token assign-left variable\">images</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>  <span class=\"token comment\"># 下面的镜像应该去除\"k8s.gcr.io/\"的前缀，版本换成上面获取到的版本</span>\n    kube-apiserver:v1.12.1\n    kube-controller-manager:v1.12.1\n    kube-scheduler:v1.12.1\n    kube-proxy:v1.12.1\n    pause:3.1\n    etcd:3.2.24\n    coredns:1.2.2\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">imageName</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">$&#123;images<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">]</span>&#125;</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/<span class=\"token variable\">$imageName</span>\n    docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/<span class=\"token variable\">$imageName</span> k8s.gcr.io/<span class=\"token variable\">$imageName</span>\n    docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n<span class=\"token comment\"># 使用脚本拉取</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>该方案来源：<a href=\"https://zhuanlan.zhihu.com/p/46341911\">https://zhuanlan.zhihu.com/p/46341911</a></p>\n<h3 id=\"使用kube-init-安装master节点\"><a href=\"#使用kube-init-安装master节点\" class=\"headerlink\" title=\"使用kube init 安装master节点\"></a>使用kube init 安装master节点</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubeadm init <span class=\"token comment\"># 初始化</span>\nkubeadm init phase preflight <span class=\"token comment\"># 只做预检查</span>\nkubeadm init --ignore-preflight-errors <span class=\"token comment\"># 跳过预检查进行初始化</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>注意</strong>：如果是在启动了kubelet之后再拉取的镜像，请重启kubelet。不然kubeadm会识别不到刚刚拉取的镜像</p>\n<p><em>ps：最后还是挂梯子init完了，有个镜像的名字和要求的不一样，懒得改tag了</em></p>\n<p>对于root用户，直接键入<code>export KUBECONFIG=/etc/kubernetes/admin.conf</code>后即可使用kubectl查看control plane的信息，对于其他用户，需要使用另外的步骤，这些步骤都会在安装完成后显示出来，我贴在下面</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Your Kubernetes control-plane has initialized successfully<span class=\"token operator\">!</span>\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  <span class=\"token function\">mkdir</span> -p <span class=\"token environment constant\">$HOME</span>/.kube\n  <span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"token environment constant\">$HOME</span>/.kube/config\n  <span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -u<span class=\"token variable\">)</span></span><span class=\"token builtin class-name\">:</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">id</span> -g<span class=\"token variable\">)</span></span> <span class=\"token environment constant\">$HOME</span>/.kube/config\n\nAlternatively, <span class=\"token keyword\">if</span> you are the root user, you can run:\n\n  <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">KUBECONFIG</span><span class=\"token operator\">=</span>/etc/kubernetes/admin.conf\n\nYou should now deploy a pod network to the cluster.\nRun <span class=\"token string\">\"kubectl apply -f [podnetwork].yaml\"</span> with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nThen you can <span class=\"token function\">join</span> any number of worker nodes by running the following on each as root:\n\nkubeadm <span class=\"token function\">join</span> <span class=\"token number\">10.0</span>.2.15:6443 --token sddm7y.7eebnrzpl2koekx1 <span class=\"token punctuation\">\\</span>\n        --discovery-token-ca-cert-hash sha256:77ed4804b2c367c1f3eb0b3e7114fdbed2bc94748d26d04d14d22af67fbb7e7e<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果不执行这些步骤，会出现以下报错</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">The connection to the server localhost:8080 was refused - did you specify the right <span class=\"token function\">host</span> or port?<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>还要注意的一点是，kubeadm默认的安装过程不包含网络插件（CNI）的初始化，这些需要另外的步骤了。</p>\n<h3 id=\"加入节点\"><a href=\"#加入节点\" class=\"headerlink\" title=\"加入节点\"></a>加入节点</h3><p>在节点配置好环境后，将上面的<code>kubeadm join</code>输入到另一节点即可。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckxlot1jn000924ula9b191yc","category_id":"ckxlot1jj000424ul3oao8lo9","_id":"ckxlot1ju000i24ul12l072vd"},{"post_id":"ckxlot1jd000124ulhwof5crj","category_id":"ckxlot1jj000424ul3oao8lo9","_id":"ckxlot1jv000m24uldcrwgodl"},{"post_id":"ckxlot1ji000324ulcsdpbknv","category_id":"ckxlot1jj000424ul3oao8lo9","_id":"ckxlot1jx000p24ul4gaqfezj"},{"post_id":"ckxlot1jl000724ul2p67cvmt","category_id":"ckxlot1ju000j24ul004afxba","_id":"ckxlot1jz000v24ulafqp4m6o"},{"post_id":"ckxlot1jo000b24ul6oj6gzmw","category_id":"ckxlot1jx000q24ulf5nudwjo","_id":"ckxlot1k2001224ulha7u3l4e"},{"post_id":"ckxlot1jr000g24ul50xthmbj","category_id":"ckxlot1jx000q24ulf5nudwjo","_id":"ckxlot1k5001824ula9qyevus"},{"post_id":"ckxlot1jt000h24ulch9w8ksk","category_id":"ckxlot1jx000q24ulf5nudwjo","_id":"ckxlot1k5001b24uleh3y6huf"},{"post_id":"ckxlot1jv000l24ul1lsb1ocd","category_id":"ckxlot1k4001724ulg8al43v1","_id":"ckxlot1k7001g24ulg533032r"},{"post_id":"ckxlot1jw000o24ul6y0m3yg0","category_id":"ckxlot1k4001724ulg8al43v1","_id":"ckxlot1k8001j24uldr85ah8x"},{"post_id":"ckxlot1jx000s24ulfeaedt7g","category_id":"ckxlot1k7001f24ul2cao25to","_id":"ckxlot1k9001n24ulhm74b2ox"},{"post_id":"ckxlot1jy000u24ulg64t6tly","category_id":"ckxlot1k8001k24ule00t2mb3","_id":"ckxlot1ka001s24ul12xd5f5k"},{"post_id":"ckxlot1jz000y24ul3l3q30cz","category_id":"ckxlot1k8001k24ule00t2mb3","_id":"ckxlot1kb001v24ul9fi7hvyw"},{"post_id":"ckxlot1k0001024ulfiezgn2p","category_id":"ckxlot1k8001k24ule00t2mb3","_id":"ckxlot1kb001w24ul1gcv4f1h"},{"post_id":"ckxlot1k3001324ul0oce9tn5","category_id":"ckxlot1kb001u24ulfcz4cosh","_id":"ckxlot1kb001y24ul9qyj73yr"},{"post_id":"ckxlot1k4001624ul01p332po","category_id":"ckxlot1kb001x24ulen65clrj","_id":"ckxlot1kc001z24ul2um6etvu"},{"post_id":"ckxlot1kp002024uldm051i5p","category_id":"ckxlot1jx000q24ulf5nudwjo","_id":"ckxlot1kr002224ul7sxu14ch"},{"post_id":"ckxq2jdvy00006wul63d9h0gm","category_id":"ckxlot1k8001k24ule00t2mb3","_id":"ckxq2jdw800026wul7u4e2egv"},{"post_id":"cky5nbw6v0000t8ula69vbe8k","category_id":"ckxlot1jx000q24ulf5nudwjo","_id":"cky5nbw770002t8ul2rv1a60q"},{"post_id":"ckyb4aenh0000ksulcvt9e9yo","category_id":"ckxlot1k8001k24ule00t2mb3","_id":"ckyb4aenr0002ksul6cjo1myb"},{"post_id":"ckyckm3lg0000l0uldsev34fm","category_id":"ckxlot1k8001k24ule00t2mb3","_id":"ckyckm3lu0002l0ul3edo9thk"},{"post_id":"ckyfmnymg0000wkulan7n0064","category_id":"ckxlot1jj000424ul3oao8lo9","_id":"ckyfmnymu0003wkul1p3zfpm1"},{"post_id":"ckyfmoudn00021sul1qms4gl6","category_id":"ckxlot1jx000q24ulf5nudwjo","_id":"ckyfmoudp00051sul5vdab8ok"},{"post_id":"ckyjq4unj0001esul0hrp3m3c","category_id":"ckxlot1k8001k24ule00t2mb3","_id":"ckyjq4unz0004esul0p18d0ob"},{"post_id":"ckyjq4unn0002esulgx171gvv","category_id":"ckxlot1k8001k24ule00t2mb3","_id":"ckyjq4unz0005esuldtkl4it4"},{"post_id":"ckyk23zlx0000coul2h5vc7te","category_id":"ckxlot1k8001k24ule00t2mb3","_id":"ckyk23zn80003coul6u4vcmms"},{"post_id":"ckyk2484700002kul0esybaug","category_id":"ckyk23zna0005coul0ike96pd","_id":"ckyk2484b00032kul34ii5mpm"}],"PostTag":[{"post_id":"ckxlot1jd000124ulhwof5crj","tag_id":"ckxlot1jk000524ulam6qbs7l","_id":"ckxlot1jr000e24ul5qlk0pg8"},{"post_id":"ckxlot1jl000724ul2p67cvmt","tag_id":"ckxlot1jp000d24ul4plb32qq","_id":"ckxlot1jw000n24ulgoo59p9f"},{"post_id":"ckxlot1jo000b24ul6oj6gzmw","tag_id":"ckxlot1ju000k24ulgyn22zna","_id":"ckxlot1jy000t24ule4x0cte9"},{"post_id":"ckxlot1jr000g24ul50xthmbj","tag_id":"ckxlot1jx000r24ulgtv009ux","_id":"ckxlot1k0000z24ulhefndt48"},{"post_id":"ckxlot1jt000h24ulch9w8ksk","tag_id":"ckxlot1jz000x24ul8ioa0oxb","_id":"ckxlot1k4001524ul3sbafomp"},{"post_id":"ckxlot1jv000l24ul1lsb1ocd","tag_id":"ckxlot1k3001424uld4t178o7","_id":"ckxlot1k5001a24ul43z71yc9"},{"post_id":"ckxlot1jw000o24ul6y0m3yg0","tag_id":"ckxlot1k5001924ulfx9q8pzr","_id":"ckxlot1k7001e24ulacmj2oj5"},{"post_id":"ckxlot1jx000s24ulfeaedt7g","tag_id":"ckxlot1k6001d24ul83bzejte","_id":"ckxlot1k8001i24ul00l4h64v"},{"post_id":"ckxlot1jy000u24ulg64t6tly","tag_id":"ckxlot1k8001h24uldjz2d21i","_id":"ckxlot1k9001m24ulalcpc9ob"},{"post_id":"ckxlot1jz000y24ul3l3q30cz","tag_id":"ckxlot1k9001l24ul7bgy5ecr","_id":"ckxlot1ka001q24ulawcvb07m"},{"post_id":"ckxlot1k0001024ulfiezgn2p","tag_id":"ckxlot1k8001h24uldjz2d21i","_id":"ckxlot1kb001t24ule8ifgwck"},{"post_id":"ckxlot1kp002024uldm051i5p","tag_id":"ckxlot1k5001924ulfx9q8pzr","_id":"ckxlot1kq002124ulesx7bend"},{"post_id":"ckxq2jdvy00006wul63d9h0gm","tag_id":"ckxq2jdw300016wulaxyie1d0","_id":"ckxq2jdw900036wul17jv59xy"},{"post_id":"cky5nbw6v0000t8ula69vbe8k","tag_id":"ckxlot1jz000x24ul8ioa0oxb","_id":"cky5nbw770003t8ul9lgj40dk"},{"post_id":"cky5nbw6v0000t8ula69vbe8k","tag_id":"cky5nbw700001t8ul9w7998rw","_id":"cky5nbw770004t8ule4i9f4hb"},{"post_id":"ckyb4aenh0000ksulcvt9e9yo","tag_id":"ckyb4aenm0001ksul75dzh5kd","_id":"ckyb4aens0004ksul5s896k2w"},{"post_id":"ckyb4aenh0000ksulcvt9e9yo","tag_id":"ckyb4aenr0003ksul1r2g8l40","_id":"ckyb4aens0005ksul5e082ty6"},{"post_id":"ckyckm3lg0000l0uldsev34fm","tag_id":"ckyckm3lo0001l0ulbfojbvqn","_id":"ckyckm3lv0004l0ulbsi5fgzc"},{"post_id":"ckyckm3lg0000l0uldsev34fm","tag_id":"ckyckm3lu0003l0ulffmd7q1n","_id":"ckyckm3lv0005l0ulhuewh9h8"},{"post_id":"ckyfmnymg0000wkulan7n0064","tag_id":"ckyfmnymo0002wkulfydrcw22","_id":"ckyfmnymv0007wkuld6sg88uh"},{"post_id":"ckyfmnymg0000wkulan7n0064","tag_id":"ckyfmnymv0005wkul69me4ok7","_id":"ckyfmnymw0008wkulhz05d2ek"},{"post_id":"ckyfmoudn00021sul1qms4gl6","tag_id":"ckxq2jdw300016wulaxyie1d0","_id":"ckyfmoudp00041sul0hxo2h7w"},{"post_id":"ckyfmoudn00021sul1qms4gl6","tag_id":"ckyfmp7ba00091suld8we9uo9","_id":"ckyfmp7bb000a1sulghoq9rbb"},{"post_id":"ckyjq4unj0001esul0hrp3m3c","tag_id":"ckyjq4unp0003esul3ju40ct1","_id":"ckyjq4uo10007esul7nem0l1j"},{"post_id":"ckyjq4unj0001esul0hrp3m3c","tag_id":"ckxq2jdw300016wulaxyie1d0","_id":"ckyjq4uo10008esul6gng7w9a"},{"post_id":"ckyjq4unn0002esulgx171gvv","tag_id":"ckyjq4unp0003esul3ju40ct1","_id":"ckyjq4uo10009esul6m5ncdd8"},{"post_id":"ckyjq4unn0002esulgx171gvv","tag_id":"ckxq2jdw300016wulaxyie1d0","_id":"ckyjq4uo1000aesul5afsas4g"},{"post_id":"ckyk23zlx0000coul2h5vc7te","tag_id":"ckyk23zmt0001coulg4at289a","_id":"ckyk23znc0007coul19j5ao21"},{"post_id":"ckyk23zlx0000coul2h5vc7te","tag_id":"ckyk23zn90004coul1sm363he","_id":"ckyk23znc0008coul268w437q"},{"post_id":"ckyk2484700002kul0esybaug","tag_id":"ckyk23znb0006coul3vl95mh8","_id":"ckyk2484a00012kul96938uv2"},{"post_id":"ckyk2484700002kul0esybaug","tag_id":"ckyk23zn90004coul1sm363he","_id":"ckyk2484b00022kuldtji5fmo"}],"Tag":[{"name":"Daily","_id":"ckxlot1jk000524ulam6qbs7l"},{"name":"hexo","_id":"ckxlot1jp000d24ul4plb32qq"},{"name":"auto","_id":"ckxlot1ju000k24ulgyn22zna"},{"name":"rss","_id":"ckxlot1jx000r24ulgtv009ux"},{"name":"apollo","_id":"ckxlot1jz000x24ul8ioa0oxb"},{"name":"C","_id":"ckxlot1k3001424uld4t178o7"},{"name":"cpp","_id":"ckxlot1k5001924ulfx9q8pzr"},{"name":"mongodb","_id":"ckxlot1k6001d24ul83bzejte"},{"name":"git","_id":"ckxlot1k8001h24uldjz2d21i"},{"name":"rsync","_id":"ckxlot1k9001l24ul7bgy5ecr"},{"name":"linux","_id":"ckxq2jdw300016wulaxyie1d0"},{"name":"robucup","_id":"cky5nbw700001t8ul9w7998rw"},{"name":"tag1","_id":"ckyb4aenm0001ksul75dzh5kd"},{"name":"tag2","_id":"ckyb4aenr0003ksul1r2g8l40"},{"name":"docker","_id":"ckyckm3lo0001l0ulbfojbvqn"},{"name":"mirror","_id":"ckyckm3lu0003l0ulffmd7q1n"},{"name":"daily","_id":"ckyfmnymo0002wkulfydrcw22"},{"name":"summary","_id":"ckyfmnymv0005wkul69me4ok7"},{"name":"ros","_id":"ckyfmnymv0006wkulcw6qgxe9"},{"name":"专栏：ros","_id":"ckyfmp4kl00071sulbmjw6o74"},{"name":"专栏：ros学习笔记","_id":"ckyfmp7ba00091suld8we9uo9"},{"name":"专栏：重学linux","_id":"ckyjq4unp0003esul3ju40ct1"},{"name":"专栏：k8s权威指南学习笔记","_id":"ckyk23zmt0001coulg4at289a"},{"name":"k8s","_id":"ckyk23zn90004coul1sm363he"},{"name":"k8s权威指南学习笔记","_id":"ckyk23znb0006coul3vl95mh8"}]}}